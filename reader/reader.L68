00000040 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 28/03/2021 09:46:35

00000000                             1  ; constants
00000000  =00E00000                  2  DISPLAY_BASE        EQU $E00000
00000000  =00000000                  3  DISPLAY_            EQU $0
00000000  =00E00000                  4  DISPLAY             EQU DISPLAY_BASE+2*DISPLAY_
00000000                             5  
00000000  =00D00000                  6  DUART_BASE          EQU $D00000
00000000  =00000000                  7  DUART_MRA_          EQU $0
00000000  =00000001                  8  DUART_SRA_          EQU $1
00000000  =00000001                  9  DUART_CSRA_         EQU $1
00000000  =00000002                 10  DUART_CRA_          EQU $2
00000000  =00000003                 11  DUART_TXA_          EQU $3
00000000  =00000003                 12  DUART_RXA_          EQU $3
00000000  =00000004                 13  DUART_ACR_          EQU $4
00000000  =00000005                 14  DUART_IMR_          EQU $5
00000000  =0000000D                 15  DUART_OPCR_         EQU $D
00000000  =0000000E                 16  DUART_SET_OPR_      EQU $E
00000000  =0000000F                 17  DUART_RESET_OPR_    EQU $F
00000000  =00D00000                 18  DUART_MRA           EQU DUART_BASE+2*DUART_MRA_
00000000  =00D00002                 19  DUART_SRA           EQU DUART_BASE+2*DUART_SRA_
00000000  =00D00002                 20  DUART_CSRA          EQU DUART_BASE+2*DUART_CSRA_
00000000  =00D00004                 21  DUART_CRA           EQU DUART_BASE+2*DUART_CRA_
00000000  =00D00006                 22  DUART_TXA           EQU DUART_BASE+2*DUART_TXA_
00000000  =00D00006                 23  DUART_RXA           EQU DUART_BASE+2*DUART_RXA_
00000000  =00D00008                 24  DUART_ACR           EQU DUART_BASE+2*DUART_ACR_
00000000  =00D0000A                 25  DUART_IMR           EQU DUART_BASE+2*DUART_IMR_
00000000  =00D0001A                 26  DUART_OPCR          EQU DUART_BASE+2*DUART_OPCR_
00000000  =00D0001C                 27  DUART_SET_OPR       EQU DUART_BASE+2*DUART_SET_OPR_
00000000  =00D0001E                 28  DUART_RESET_OPR     EQU DUART_BASE+2*DUART_RESET_OPR_
00000000                            29  
00000000                            30  
00000000                            31  ; start vector
00000000                            32      ORG    $0
00000000= 00000000                  33      DC.L $00000000
00000004= 00000000                  34      DC.L $00000000 
00000008                            35  ; first instruction of program  
00000008                            36  INITIALISE:
00000008  13FC 0003 00D00000        37      MOVE.B #$03,DUART_MRA           ; no flow control, no parity, 8 data bits
00000010  13FC 0047 00D00000        38      MOVE.B #$47,DUART_MRA           ; auto echo and 1 stop bit
00000018  13FC 00BB 00D00002        39      MOVE.B #$BB,DUART_CSRA          ; 9600 baud
00000020  13FC 0005 00D00004        40      MOVE.B #$5,DUART_CRA            ; enable rx & tx
00000028  13FC 0000 00D00008        41      MOVE.B #$0,DUART_ACR            
00000030  13FC 0000 00D0000A        42      MOVE.B #$0,DUART_IMR            ; no interrupts, please            
00000038  13FC 0000 00D0001A        43      MOVE.B #$0,DUART_OPCR           ; enable all outputs
00000040                            44  START:
00000040  7207                      45      MOVE.L #7,D1                    ; loop counter
00000042  7400                      46      MOVE.L #$0,D2                   ; output value
00000044                            47  LOOP:
00000044  13FC 00FF 00D0001E        48      MOVE.B #$FF,DUART_RESET_OPR     ; clear UART output register
0000004C  13C2 00D0001C             49      MOVE.B D2,DUART_SET_OPR         ; set UART output register
00000052  5202                      50      ADD.B #1,D2                     ; next number
00000054  70FF                      51      MOVE.L #$FFFFFFFF,D0            ; wait for a bit...
00000056                            52  WAIT:
00000056  4E71                      53      NOP
00000058  4E71                      54      NOP
0000005A  4E71                      55      NOP
0000005C  4E71                      56      NOP
0000005E  4E71                      57      NOP
00000060  4E71                      58      NOP
00000062  4E71                      59      NOP
00000064                            60      ;MOVE.B DUART_SRA,D3
00000064                            61      ;MOVE.B D3,DISPLAY               ; write to the display
00000064                            62      ;BTST #$0,D3
00000064                            63      ;BEQ CONTINUE
00000064                            64      ;MOVE.B DUART_RXA,D3
00000064                            65      ;SUB.B #48,D3                   ; ...back to a number
00000064                            66      ;MOVE.B D3,DISPLAY              ; write to the display
00000064                            67  CONTINUE:
00000064                            68      ;ANDI #$FB,CCR                   ; clear the Z bit if set
00000064  57C8 FFF0                 69      DBEQ D0,WAIT                    ; end of wait loop
00000068  57C9 FFDA                 70      DBEQ D1,LOOP                    ; next number
0000006C  4EF8 0040                 71      JMP START                       ; ...and from the top
00000070                            72      END    START                    ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
CONTINUE            64
DISPLAY             E00000
DISPLAY_            0
DISPLAY_BASE        E00000
DUART_ACR           D00008
DUART_ACR_          4
DUART_BASE          D00000
DUART_CRA           D00004
DUART_CRA_          2
DUART_CSRA          D00002
DUART_CSRA_         1
DUART_IMR           D0000A
DUART_IMR_          5
DUART_MRA           D00000
DUART_MRA_          0
DUART_OPCR          D0001A
DUART_OPCR_         D
DUART_RESET_OPR     D0001E
DUART_RESET_OPR_    F
DUART_RXA           D00006
DUART_RXA_          3
DUART_SET_OPR       D0001C
DUART_SET_OPR_      E
DUART_SRA           D00002
DUART_SRA_          1
DUART_TXA           D00006
DUART_TXA_          3
INITIALISE          8
LOOP                44
START               40
WAIT                56
