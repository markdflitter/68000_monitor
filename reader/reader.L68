00000068 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 28/03/2021 19:45:23

00000000                             1  ; constants
00000000  =00E00000                  2  DISPLAY_BASE        EQU $E00000
00000000  =00000000                  3  DISPLAY_            EQU $0
00000000  =00E00000                  4  DISPLAY             EQU DISPLAY_BASE+2*DISPLAY_
00000000                             5  
00000000  =00D00000                  6  DUART_BASE          EQU $D00000
00000000  =00000000                  7  DUART_MRA_          EQU $0
00000000  =00000001                  8  DUART_CSRA_         EQU $1
00000000  =00000001                  9  DUART_SRA_          EQU $1
00000000  =00000002                 10  DUART_CRA_          EQU $2
00000000  =00000003                 11  DUART_TXA_          EQU $3
00000000  =00000003                 12  DUART_RXA_          EQU $3
00000000  =00000004                 13  DUART_ACR_          EQU $4
00000000  =00000005                 14  DUART_IMR_          EQU $5
00000000  =00000008                 15  DUART_MRB_          EQU $8
00000000  =00000009                 16  DUART_CSRB_         EQU $9
00000000  =00000009                 17  DUART_SRB_          EQU $9
00000000  =0000000A                 18  DUART_CRB_          EQU $A
00000000  =0000000B                 19  DUART_TXB_          EQU $B
00000000  =0000000B                 20  DUART_RXB_          EQU $B
00000000  =0000000C                 21  DUART_IVR_          EQU $C
00000000  =0000000D                 22  DUART_OPCR_         EQU $D
00000000  =0000000E                 23  DUART_SET_OPR_      EQU $E
00000000  =0000000F                 24  DUART_RESET_OPR_    EQU $F
00000000                            25  
00000000  =00D00001                 26  DUART_MRA           EQU DUART_BASE+2*DUART_MRA_+1
00000000  =00D00003                 27  DUART_SRA           EQU DUART_BASE+2*DUART_SRA_+1
00000000  =00D00003                 28  DUART_CSRA          EQU DUART_BASE+2*DUART_CSRA_+1
00000000  =00D00005                 29  DUART_CRA           EQU DUART_BASE+2*DUART_CRA_+1
00000000  =00D00007                 30  DUART_TXA           EQU DUART_BASE+2*DUART_TXA_+1
00000000  =00D00007                 31  DUART_RXA           EQU DUART_BASE+2*DUART_RXA_+1
00000000                            32  
00000000  =00D00011                 33  DUART_MRB           EQU DUART_BASE+2*DUART_MRB_+1
00000000  =00D00013                 34  DUART_SRB           EQU DUART_BASE+2*DUART_SRB_+1
00000000  =00D00013                 35  DUART_CSRB          EQU DUART_BASE+2*DUART_CSRB_+1
00000000  =00D00015                 36  DUART_CRB           EQU DUART_BASE+2*DUART_CRB_+1
00000000  =00D00017                 37  DUART_TXB           EQU DUART_BASE+2*DUART_TXB_+1
00000000  =00D00017                 38  DUART_RXB           EQU DUART_BASE+2*DUART_RXB_+1
00000000                            39  
00000000  =00D00009                 40  DUART_ACR           EQU DUART_BASE+2*DUART_ACR_+1
00000000  =00D0000B                 41  DUART_IMR           EQU DUART_BASE+2*DUART_IMR_+1
00000000  =00D00019                 42  DUART_IVR           EQU DUART_BASE+2*DUART_IVR_+1
00000000  =00D0001B                 43  DUART_OPCR          EQU DUART_BASE+2*DUART_OPCR_+1
00000000  =00D0001D                 44  DUART_SET_OPR       EQU DUART_BASE+2*DUART_SET_OPR_+1
00000000  =00D0001F                 45  DUART_RESET_OPR     EQU DUART_BASE+2*DUART_RESET_OPR_+1
00000000                            46  
00000000                            47  ; start vector
00000000                            48      ORG    $0
00000000= 00000000                  49      DC.L $00000000
00000004= 00000000                  50      DC.L $00000000 
00000008                            51  ; first instruction of program  
00000008                            52  INITIALISE:
00000008  13FC 0003 00D00001        53      MOVE.B #$03,DUART_MRA           ; no flow control, no parity, 8 data bits
00000010  13FC 0007 00D00001        54      MOVE.B #$07,DUART_MRA           ; auto echo and 1 stop bit
00000018  13FC 00BB 00D00003        55      MOVE.B #$BB,DUART_CSRA          ; 9600 baud
00000020  13FC 0005 00D00005        56      MOVE.B #$5,DUART_CRA            ; enable rx & tx
00000028                            57  
00000028  13FC 0003 00D00011        58      MOVE.B #$03,DUART_MRB           ; no flow control, no parity, 8 data bits
00000030  13FC 0047 00D00011        59      MOVE.B #$47,DUART_MRB           ; auto echo and 1 stop bit
00000038  13FC 00BB 00D00013        60      MOVE.B #$BB,DUART_CSRB          ; 9600 baud
00000040  13FC 0005 00D00015        61      MOVE.B #$5,DUART_CRB            ; enable rx & tx
00000048                            62  
00000048  13FC 0000 00D00009        63      MOVE.B #$0,DUART_ACR            
00000050  13FC 0000 00D0000B        64      MOVE.B #$0,DUART_IMR            ; no interrupts, please            
00000058  13FC 0000 00D0001B        65      MOVE.B #$0,DUART_OPCR           ; enable all outputs
00000060                            66  
00000060  13FC 00F6 00D00019        67      MOVE.B #$F6,DUART_IVR           
00000068                            68  START:
00000068  7207                      69      MOVE.L #7,D1                    ; loop counter
0000006A  7400                      70      MOVE.L #$0,D2                   ; output value
0000006C                            71  LOOP:
0000006C  13FC 00FF 00D0001F        72      MOVE.B #$FF,DUART_RESET_OPR     ; clear UART output register
00000074  13C2 00D0001D             73      MOVE.B D2,DUART_SET_OPR         ; set UART output register
0000007A  5202                      74      ADD.B #1,D2                     ; next number
0000007C  70FF                      75      MOVE.L #$FFFFFFFF,D0            ; wait for a bit...
0000007E                            76  WAIT:
0000007E  1639 00D00003             77      MOVE.B DUART_SRA,D3             ; read status register
00000084  0803 0000                 78      BTST #$0,D3                     ; check for character
00000088  6700 0018                 79      BEQ CONTINUE
0000008C  1639 00D00007             80      MOVE.B DUART_RXA,D3             ; read it
00000092  13C3 00D00007             81      MOVE.B D3,DUART_TXA             ; echo it back
00000098  0403 0030                 82      SUB.B #48,D3                    ; ASCII -> binary        
0000009C  13C3 00E00000             83      MOVE.B D3,DISPLAY               ; write to the display
000000A2                            84  CONTINUE:
000000A2  023C 00FB                 85      ANDI #$FB,CCR                   ; clear the Z bit if set (from the BEQ above)
000000A6  57C8 FFD6                 86      DBEQ D0,WAIT                    ; end of wait loop
000000AA  57C9 FFC0                 87      DBEQ D1,LOOP                    ; next number
000000AE  4EF8 0068                 88      JMP START                       ; ...and from the top
000000B2                            89      END    START                    ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
CONTINUE            A2
DISPLAY             E00000
DISPLAY_            0
DISPLAY_BASE        E00000
DUART_ACR           D00009
DUART_ACR_          4
DUART_BASE          D00000
DUART_CRA           D00005
DUART_CRA_          2
DUART_CRB           D00015
DUART_CRB_          A
DUART_CSRA          D00003
DUART_CSRA_         1
DUART_CSRB          D00013
DUART_CSRB_         9
DUART_IMR           D0000B
DUART_IMR_          5
DUART_IVR           D00019
DUART_IVR_          C
DUART_MRA           D00001
DUART_MRA_          0
DUART_MRB           D00011
DUART_MRB_          8
DUART_OPCR          D0001B
DUART_OPCR_         D
DUART_RESET_OPR     D0001F
DUART_RESET_OPR_    F
DUART_RXA           D00007
DUART_RXA_          3
DUART_RXB           D00017
DUART_RXB_          B
DUART_SET_OPR       D0001D
DUART_SET_OPR_      E
DUART_SRA           D00003
DUART_SRA_          1
DUART_SRB           D00013
DUART_SRB_          9
DUART_TXA           D00007
DUART_TXA_          3
DUART_TXB           D00017
DUART_TXB_          B
INITIALISE          8
LOOP                6C
START               68
WAIT                7E
