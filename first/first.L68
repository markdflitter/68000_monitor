00000040 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 27/03/2021 17:40:55

00000000                             1  ; constants
00000000  =00E00000                  2  DISPLAY_BASE        EQU $E00000
00000000  =00000000                  3  DISPLAY_            EQU $0
00000000  =00E00000                  4  DISPLAY             EQU DISPLAY_BASE+2*DISPLAY_
00000000                             5  
00000000  =00D00000                  6  DUART_BASE          EQU $D00000
00000000  =00000000                  7  DUART_MRA_          EQU $0
00000000  =00000001                  8  DUART_CSRA_         EQU $1
00000000  =00000002                  9  DUART_CRA_          EQU $2
00000000  =00000003                 10  DUART_TXA_          EQU $3
00000000  =00000004                 11  DUART_ACR_          EQU $4
00000000  =00000005                 12  DUART_IMR_          EQU $5
00000000  =0000000D                 13  DUART_OPCR_         EQU $D
00000000  =0000000E                 14  DUART_SET_OPR_      EQU $E
00000000  =0000000F                 15  DUART_RESET_OPR_    EQU $F
00000000  =00D00000                 16  DUART_MRA           EQU DUART_BASE+2*DUART_MRA_
00000000  =00D00002                 17  DUART_CSRA          EQU DUART_BASE+2*DUART_CSRA_
00000000  =00D00004                 18  DUART_CRA           EQU DUART_BASE+2*DUART_CRA_
00000000  =00D00006                 19  DUART_TXA           EQU DUART_BASE+2*DUART_TXA_
00000000  =00D00008                 20  DUART_ACR           EQU DUART_BASE+2*DUART_ACR_
00000000  =00D0000A                 21  DUART_IMR           EQU DUART_BASE+2*DUART_IMR_
00000000  =00D0001A                 22  DUART_OPCR          EQU DUART_BASE+2*DUART_OPCR_
00000000  =00D0001C                 23  DUART_SET_OPR       EQU DUART_BASE+2*DUART_SET_OPR_
00000000  =00D0001E                 24  DUART_RESET_OPR     EQU DUART_BASE+2*DUART_RESET_OPR_
00000000                            25  
00000000                            26  ; start vector
00000000                            27      ORG    $0
00000000= 00000000                  28      DC.L $00000000
00000004= 00000000                  29      DC.L $00000000 
00000008                            30  ; first instruction of program  
00000008                            31  INITIALISE:
00000008  13FC 0003 00D00000        32      MOVE.B #$03,DUART_MRA           ; MR1A
00000010  13FC 0007 00D00000        33      MOVE.B #$07,DUART_MRA           ; MR2A
00000018  13FC 00BB 00D00002        34      MOVE.B #$BB,DUART_CSRA          ; 9600 baud
00000020  13FC 0004 00D00004        35      MOVE.B #$4,DUART_CRA            ; enable tx
00000028  13FC 0000 00D00008        36      MOVE.B #$0,DUART_ACR            
00000030  13FC 0000 00D0000A        37      MOVE.B #$0,DUART_IMR            ; no interrupts, please            
00000038  13FC 0000 00D0001A        38      MOVE.B #$0,DUART_OPCR
00000040                            39  START:
00000040  7207                      40      MOVE.L #7,D1                    ; loop counter
00000042  7400                      41      MOVE.L #$0,D2                   ; output value
00000044                            42  LOOP:
00000044  13FC 00FF 00D0001E        43      MOVE.B #$FF,DUART_RESET_OPR     ; clear UART output register
0000004C  13C2 00D0001C             44      MOVE.B D2,DUART_SET_OPR         ; set UART output register
00000052  13C2 00E00000             45      MOVE.B D2,DISPLAY               ; write to the display
00000058  1602                      46      MOVE.B D2,D3                    ; convert to ASCII in D3...
0000005A  0603 0030                 47      ADD.B #48,D3                    ; ... by adding 48
0000005E  13C3 00D00006             48      MOVE.B D3,DUART_TXA             ; to the serial port!!
00000064  5202                      49      ADD.B #1,D2                     ; next number
00000066  70FF                      50      MOVE.L #$FFFFFFFF,D0            ; wait for a bit...
00000068                            51  WAIT:
00000068  4E71                      52      NOP
0000006A  4E71                      53      NOP
0000006C  4E71                      54      NOP
0000006E  4E71                      55      NOP
00000070  4E71                      56      NOP
00000072  4E71                      57      NOP
00000074  4E71                      58      NOP
00000076  57C8 FFF0                 59      DBEQ D0,WAIT                    ; end of wait loop
0000007A  57C9 FFC8                 60      DBEQ D1,LOOP                    ; next number
0000007E  4EF8 0040                 61      JMP START                       ; ...and from the top
00000082                            62      END    START                    ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
DISPLAY             E00000
DISPLAY_            0
DISPLAY_BASE        E00000
DUART_ACR           D00008
DUART_ACR_          4
DUART_BASE          D00000
DUART_CRA           D00004
DUART_CRA_          2
DUART_CSRA          D00002
DUART_CSRA_         1
DUART_IMR           D0000A
DUART_IMR_          5
DUART_MRA           D00000
DUART_MRA_          0
DUART_OPCR          D0001A
DUART_OPCR_         D
DUART_RESET_OPR     D0001E
DUART_RESET_OPR_    F
DUART_SET_OPR       D0001C
DUART_SET_OPR_      E
DUART_TXA           D00006
DUART_TXA_          3
INITIALISE          8
LOOP                44
START               40
WAIT                68
