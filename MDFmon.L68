00000400 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 26/04/2021 07:44:32

00000000                             1  *------------------------------------------------------------
00000000                             2  * Title         MDFmon 
00000000                             3  * Written by    Mark Flitter
00000000                             4  * Date          March 2021
00000000                             5  * Description:  68000 monitor program
00000000                             6  *-----------------------------------------------------------
00000000                             7  ; to do
00000000                             8  
00000000                             9  ; other ideas
00000000                            10  ;------------
00000000                            11  ; use DBLoop?
00000000                            12  ; keep track of highest address hit during srec download
00000000                            13  ; implement backspace
00000000                            14  ; fix being able to enter random chars when W'ing
00000000                            15  ; ram check at startup?  Not sure if this is a good idea!
00000000                            16  ; check for escape during Z and L?  Not sure if W is a good idea either
00000000                            17  
00000000                            18      ORG  $0
00000000                            19  
00000000  =00000000                 20  DEBUG               EQU 0
00000000                            21  
00000000                            22  ; constants
00000000  =00000000                 23  NULL                EQU 0
00000000  =00000009                 24  TAB                 EQU 9
00000000  =0000000D                 25  CR                  EQU 13
00000000  =0000000A                 26  LF                  EQU 10
00000000                            27  
00000000  =00000000                 28  ROM                 EQU $0
00000000  =00200000                 29  RAM                 EQU $200000
00000000  =002E0000                 30  STACK_ADDRESS       EQU $2E0000
00000000                            31  
00000000  =00C00000                 32  DUART_BASE          EQU $C00000
00000000  =00000000                 33  DUART_MRA_          EQU $0
00000000  =00000001                 34  DUART_CSRA_         EQU $1
00000000  =00000001                 35  DUART_SRA_          EQU $1
00000000  =00000002                 36  DUART_CRA_          EQU $2
00000000  =00000003                 37  DUART_TXA_          EQU $3
00000000  =00000003                 38  DUART_RXA_          EQU $3
00000000  =00000004                 39  DUART_ACR_          EQU $4
00000000  =00000005                 40  DUART_IMR_          EQU $5
00000000  =00000006                 41  DUART_CTUR_         EQU $6
00000000  =00000007                 42  DUART_CTLR_         EQU $7
00000000  =00000008                 43  DUART_MRB_          EQU $8
00000000  =00000009                 44  DUART_CSRB_         EQU $9
00000000  =00000009                 45  DUART_SRB_          EQU $9
00000000  =0000000A                 46  DUART_CRB_          EQU $A
00000000  =0000000B                 47  DUART_TXB_          EQU $B
00000000  =0000000B                 48  DUART_RXB_          EQU $B
00000000  =0000000C                 49  DUART_IVR_          EQU $C
00000000  =0000000D                 50  DUART_OPCR_         EQU $D
00000000  =0000000E                 51  DUART_SET_OPR_      EQU $E
00000000  =0000000F                 52  DUART_RESET_OPR_    EQU $F
00000000                            53  
00000000  =00C00001                 54  DUART_MRA           EQU DUART_BASE+2*DUART_MRA_+1
00000000  =00C00003                 55  DUART_SRA           EQU DUART_BASE+2*DUART_SRA_+1
00000000  =00C00003                 56  DUART_CSRA          EQU DUART_BASE+2*DUART_CSRA_+1
00000000  =00C00005                 57  DUART_CRA           EQU DUART_BASE+2*DUART_CRA_+1
00000000  =00C00007                 58  DUART_TXA           EQU DUART_BASE+2*DUART_TXA_+1
00000000  =00C00007                 59  DUART_RXA           EQU DUART_BASE+2*DUART_RXA_+1
00000000                            60  
00000000  =00C00011                 61  DUART_MRB           EQU DUART_BASE+2*DUART_MRB_+1
00000000  =00C00013                 62  DUART_SRB           EQU DUART_BASE+2*DUART_SRB_+1
00000000  =00C00013                 63  DUART_CSRB          EQU DUART_BASE+2*DUART_CSRB_+1
00000000  =00C00015                 64  DUART_CRB           EQU DUART_BASE+2*DUART_CRB_+1
00000000  =00C00017                 65  DUART_TXB           EQU DUART_BASE+2*DUART_TXB_+1
00000000  =00C00017                 66  DUART_RXB           EQU DUART_BASE+2*DUART_RXB_+1
00000000                            67  
00000000  =00C00009                 68  DUART_ACR           EQU DUART_BASE+2*DUART_ACR_+1
00000000  =00C0000B                 69  DUART_IMR           EQU DUART_BASE+2*DUART_IMR_+1
00000000  =00C0000D                 70  DUART_CTUR          EQU DUART_BASE+2*DUART_CTUR_+1
00000000  =00C0000F                 71  DUART_CTLR          EQU DUART_BASE+2*DUART_CTLR_+1
00000000  =00C00019                 72  DUART_IVR           EQU DUART_BASE+2*DUART_IVR_+1
00000000  =00C0001B                 73  DUART_OPCR          EQU DUART_BASE+2*DUART_OPCR_+1
00000000  =00C0001D                 74  DUART_SET_OPR       EQU DUART_BASE+2*DUART_SET_OPR_+1
00000000  =00C0001F                 75  DUART_RESET_OPR     EQU DUART_BASE+2*DUART_RESET_OPR_+1
00000000                            76  
00000000  =00E00000                 77  DISPLAY_BASE        EQU $E00000
00000000  =00000000                 78  DISPLAY_            EQU $0
00000000  =00E00001                 79  DISPLAY             EQU DISPLAY_BASE+2*DISPLAY_+1
00000000                            80  
00000000                            81  ; macros
00000000                            82  ; convert top 4 bits of input register from binary to a single hex digit
00000000                            83  ; the input register is changed during the process
00000000                            84  ; \1 input data register containing binary number, \2 data register for return value, \3 working address register
00000000                            85  BIN2HEX MACRO
00000000                            86      LEA BIN2HEX_LUT(PC),\3                          ; load the lookup table
00000000                            87      ROL.L #4,\1                                     ; shift the top 4 bits down to bottom of the register the and mask off everything else
00000000                            88      MOVE.B \1,\2
00000000                            89      ANDI.L #$F,\2
00000000                            90      MOVE.B 0(\3,\2),\2                              ; use that as an index into the LUT
00000000                            91      ENDM
00000000                            92  
00000000                            93  ; convert single hex digit to 4 bit binary number in LSbits
00000000                            94  ; the input register is changed during the process
00000000                            95  ; \1 data register containing hex character, \2 data register for return value, \3 working address register
00000000                            96  HEX2BIN MACRO
00000000                            97      LEA HEX2BIN_LUT(PC),\3                          ; load the lookup table
00000000                            98      SUB.B #'0',\1                                   ; work out offset and mask off anything rogue
00000000                            99      AND.L #$FF,\1                                   ; ignore the top 3 bytes
00000000                           100      MOVE.B 0(\3,\1),\2                              ; use that as an index into the LUT   
00000000                           101      ENDM
00000000                           102  
00000000                           103  ; send a single char to the serial port
00000000                           104  ; \1 = char to send, \2 = data register to use for status poll
00000000                           105  ; will stamp on D0 and D1 in debug mode
00000000                           106  PRINT_CHAR MACRO
00000000                           107  WAIT_FOR_READY\@                                    ; wait until the there is space to send
00000000                           108      IFEQ DEBUG
00000000                           109          MOVE.B DUART_SRA,\2                         ; read status register
00000000                           110          BTST #2,\2                                  ; check for space to send
00000000                           111          BEQ WAIT_FOR_READY\@                        ; no space, check again
00000000                           112          MOVE.B \1,DUART_TXA                         ; send the next character
00000000                           113      ENDC
00000000                           114  
00000000                           115      IFNE DEBUG
00000000                           116          MOVE.B \1,D1
00000000                           117          MOVE.L #6,D0   
00000000                           118          TRAP #15                                    ; write to terminal in simulator
00000000                           119      ENDC
00000000                           120  
00000000                           121      ENDM
00000000                           122  
00000000                           123  ; send CR,LF to the serial port
00000000                           124  ; \1 = data register to use for status poll, /2 = working address register
00000000                           125  PRINT_CRLF MACRO
00000000                           126      LEA CRLF(PC),\2
00000000                           127      PRINT_STR \2,\1
00000000                           128      ENDM
00000000                           129  
00000000                           130  ; send C-style, zero terminated string to the serial port
00000000                           131  ; \1 = address register containing address of zero terminated string, \2 = data register to use for status poll, 
00000000                           132  PRINT_STR MACRO
00000000                           133  LOOP\@
00000000                           134      CMP.B #NULL,(\1)                                ; 0 -> done
00000000                           135      BEQ EXIT\@
00000000                           136      PRINT_CHAR (\1)+,\2
00000000                           137      BRA LOOP\@
00000000                           138  EXIT\@
00000000                           139      ENDM
00000000                           140    
00000000                           141  ; send the contents of a data register to the serial port as a 8 digit hex number
00000000                           142  ; \1 = data register containing binary number, \2 = data register to use for status poll, \3 working data register, \4 counter register, \5 working address register
00000000                           143  PRINT_REG MACRO
00000000                           144      LEA ox(PC),\5
00000000                           145      PRINT_STR \5,\2
00000000                           146      MOVE.L #7,\4                                    ; loop round all 8 hex characters of 4 bits each
00000000                           147  LOOP\@
00000000                           148      BIN2HEX \1,\3,\5
00000000                           149      PRINT_CHAR \3,\2
00000000                           150      DBEQ \4,LOOP\@
00000000                           151      ENDM
00000000                           152  
00000000                           153  ; wait for a char from the serial port
00000000                           154  ; \ 1= data register for read char, \2 = register to use for status poll
00000000                           155  ; will stamp on D0 and D1 in debug mode
00000000                           156  WAIT_CHAR MACRO
00000000                           157  WAIT_FOR_READY\@                                    ; wait until the there is space to send
00000000                           158      IFEQ DEBUG
00000000                           159          MOVE.B DUART_SRA,\2                         ; read status register
00000000                           160          BTST #0,\2                                  ; check for character
00000000                           161          BEQ WAIT_FOR_READY\@                        ; nothing, check again
00000000                           162      ENDC
00000000                           163  
00000000                           164      READ_CHAR \1
00000000                           165  
00000000                           166      IFEQ DEBUG
00000000                           167          PRINT_CHAR \1,\2                            ; echo it back
00000000                           168      ENDC
00000000                           169      ENDM
00000000                           170  
00000000                           171  ; read a char from the serial port - assumes that there is one!
00000000                           172  ; \ 1= data register for read char
00000000                           173  ; will stamp on D0 and D1 in debug mode
00000000                           174  READ_CHAR MACRO
00000000                           175      IFEQ DEBUG
00000000                           176          MOVE.B DUART_RXA,\1                         ; got a character, read it
00000000                           177      ENDC
00000000                           178      IFNE DEBUG
00000000                           179          MOVE.L #5,D0    
00000000                           180          TRAP #15                                    ; read from keyboard in simulator
00000000                           181          MOVE.L D1,\1
00000000                           182      ENDC
00000000                           183  
00000000                           184      CMP.B #$1B,\1                                   ; check for escape and go to start
00000000                           185      BEQ START
00000000                           186      ENDM
00000000                           187  
00000000                           188  
00000000                           189  ; read data from the download serial port
00000000                           190  ; \ 1= data register for read char
00000000                           191  DOWNLOAD MACRO
00000000                           192  WAIT_FOR_READY\@                                    ; wait until the there is space to send
00000000                           193  
00000000                           194      MOVE.B DUART_SRA,\1                             ; check for command
00000000                           195      BTST #0,\1                                      ; check for character
00000000                           196      BEQ CONTINUE\@                                  ; nothing, continue
00000000                           197  
00000000                           198      READ_CHAR \1                                    ; we're not going to do anything with it, just check for escape
00000000                           199  CONTINUE\@
00000000                           200      MOVE.B DUART_SRB,\1                             ; read download status register
00000000                           201      BTST #0,\1                                      ; check for character
00000000                           202      BEQ WAIT_FOR_READY\@                            ; nothing, check again
00000000                           203      
00000000                           204      MOVE.B DUART_RXB,\1                             ; got a character, read it
00000000                           205      MOVE.B \1,DISPLAY                               ; echo to the display
00000000                           206  
00000000                           207      ENDM
00000000                           208  
00000000                           209  ; unprotect the EEPROM
00000000                           210  UNPROTECT MACRO
00000000                           211      MOVE.W #$AAAA,$2AAA                             ; remove write protect
00000000                           212      NOP
00000000                           213      MOVE.W #$5555,$1554
00000000                           214      NOP
00000000                           215      MOVE.W #$8080,$2AAA
00000000                           216      NOP
00000000                           217      MOVE.W #$AAAA,$2AAA
00000000                           218      NOP
00000000                           219      MOVE.W #$5555,$1554
00000000                           220      NOP
00000000                           221      MOVE.W #$2020,$2AAA
00000000                           222      ENDM
00000000                           223      
00000000                           224  ; protect the EEPROM
00000000                           225  PROTECT MACRO
00000000                           226      MOVE.W #$AAAA,$2AAA                             ; and write protect
00000000                           227      MOVE.W #$5555,$1554
00000000                           228      MOVE.W #$A0A0,$2AAA
00000000                           229      ENDM
00000000                           230  
00000000                           231  
00000000                           232  ; read two hex digits from the download serial port and convert to a byte
00000000                           233  ; \1 result register, \2 = data register for read char, \3 = register to use for status poll, \4 = working data register, \5 = checksum register, \6 = working address register
00000000                           234  DOWNLOAD_BYTE MACRO
00000000                           235      MOVE.B #2,\4
00000000                           236      WHILE.B \4 <GT> 0 DO
00000000                           237          LSL.L #4,\1                                 ; it's OK to do this first, because we are either starting from 0, 
00000000                           238          DOWNLOAD \2                                 ; or we are reading the next byte along, so need to shift up the previous one
00000000                           239          PRINT_CHAR \2,\3
00000000                           240          HEX2BIN \2,\2,\6
00000000                           241          OR.B \2,\1
00000000                           242          SUB.B #1,\4
00000000                           243      ENDW
00000000                           244  
00000000                           245      MOVE.L #0,\2                                    ; rextract latest byte of address and add into checksum
00000000                           246      MOVE.B \1,\2
00000000                           247      ADD.L \1,\5
00000000                           248  
00000000                           249      ENDM
00000000                           250  
00000000                           251  ; write word to EEPROM
00000000                           252  ; \1 word to write, \2 = target address, \3 = working data register
00000000                           253  PROGRAM MACRO
00000000                           254    MOVE.W \1,\2                                      ; write the data
00000000                           255  
00000000                           256  WAIT_FOR_COMPLETE\@
00000000                           257          MOVE.W \2,\3
00000000                           258  
00000000                           259          IF.W \3 <NE> \1 THEN
00000000                           260              BRA WAIT_FOR_COMPLETE\@
00000000                           261          ENDI
00000000                           262          ENDM
00000000                           263          
00000000                           264  ; program vector to EEPROM
00000000                           265  ; \1 handler address, \2 = target address, \3 = working data register
00000000                           266  PROGRAM_VECTOR MACRO
00000000                           267      ADD.L #2,\2
00000000                           268      PROGRAM \1, (\2), \3                                ; write it
00000000                           269      LSR.L #8,\1
00000000                           270      LSR.L #8,\1
00000000                           271      SUB.L #2,\2
00000000                           272      PROGRAM \1, (\2), \3
00000000                           273      ENDM
00000000                           274  
00000000                           275  
00000000                           276  ; register catalogue
00000000                           277  ; D0 - used for simulator I/O
00000000                           278  ; D1 - used for simulator I/O
00000000                           279  ; D2 - read character
00000000                           280  ; D3 - serial port status poll / task for TRAP in simulator
00000000                           281  ; D6 - working register used in R/W
00000000                           282  ; D7 - address accumulator, reset by download
00000000                           283  ; A0 - address of string to print 
00000000                           284  
00000000                           285  ; start vector
00000000= 002E0000                 286  STACK   DC.L STACK_ADDRESS                      ; STACK
00000004= 00000400                 287  RESET   DC.L START                              ; RESET
00000008= 00001894                 288  VECS    DC.L BUS_ERROR_HANDLER                      ; BUS ERROR
0000000C= 00001894                 289          DC.L BUS_ERROR_HANDLER                  ; ADDRESS ERROR
00000010= 000019E8                 290          DC.L ILLEGAL_HANDLER                        ; ILLEGAL INSTRUCTION
00000014= 000019F8                 291          DC.L UNHANDLED_HANDLER
00000018= 000019F8                 292          DC.L UNHANDLED_HANDLER
0000001C= 000019F8                 293          DC.L UNHANDLED_HANDLER
00000020= 000019F8                 294          DC.L UNHANDLED_HANDLER
00000024= 000019F8                 295          DC.L UNHANDLED_HANDLER
00000028= 000019F8                 296          DC.L UNHANDLED_HANDLER
0000002C= 000019F8                 297          DC.L UNHANDLED_HANDLER
00000030= 000019F8                 298          DC.L UNHANDLED_HANDLER
00000034= 000019F8                 299          DC.L UNHANDLED_HANDLER
00000038= 000019F8                 300          DC.L UNHANDLED_HANDLER
0000003C= 000019F8                 301          DC.L UNHANDLED_HANDLER
00000040= 000019F8                 302          DC.L UNHANDLED_HANDLER
00000044= 000019F8                 303          DC.L UNHANDLED_HANDLER
00000048= 000019F8                 304          DC.L UNHANDLED_HANDLER
0000004C= 000019F8                 305          DC.L UNHANDLED_HANDLER
00000050= 000019F8                 306          DC.L UNHANDLED_HANDLER
00000054= 000019F8                 307          DC.L UNHANDLED_HANDLER
00000058= 000019F8                 308          DC.L UNHANDLED_HANDLER
0000005C= 000019F8                 309          DC.L UNHANDLED_HANDLER
00000060= 000019F8                 310          DC.L UNHANDLED_HANDLER
00000064= 000019F8                 311          DC.L UNHANDLED_HANDLER
00000068= 000019F8                 312          DC.L UNHANDLED_HANDLER
0000006C= 000019F8                 313          DC.L UNHANDLED_HANDLER
00000070= 000019F8                 314          DC.L UNHANDLED_HANDLER
00000074= 000019F8                 315          DC.L UNHANDLED_HANDLER
00000078= 000019F8                 316          DC.L UNHANDLED_HANDLER
0000007C= 000019F8                 317          DC.L UNHANDLED_HANDLER
00000080= 000019F8                 318          DC.L UNHANDLED_HANDLER
00000084= 000019F8                 319          DC.L UNHANDLED_HANDLER
00000088= 000019F8                 320          DC.L UNHANDLED_HANDLER
0000008C= 000019F8                 321          DC.L UNHANDLED_HANDLER
00000090= 000019F8                 322          DC.L UNHANDLED_HANDLER
00000094= 000019F8                 323          DC.L UNHANDLED_HANDLER
00000098= 000019F8                 324          DC.L UNHANDLED_HANDLER
0000009C= 000019F8                 325          DC.L UNHANDLED_HANDLER
000000A0= 000019F8                 326          DC.L UNHANDLED_HANDLER
000000A4= 000019F8                 327          DC.L UNHANDLED_HANDLER
000000A8= 000019F8                 328          DC.L UNHANDLED_HANDLER
000000AC= 000019F8                 329          DC.L UNHANDLED_HANDLER
000000B0= 000019F8                 330          DC.L UNHANDLED_HANDLER
000000B4= 000019F8                 331          DC.L UNHANDLED_HANDLER
000000B8= 000019F8                 332          DC.L UNHANDLED_HANDLER
000000BC= 000019F8                 333          DC.L UNHANDLED_HANDLER
000000C0= 000019F8                 334          DC.L UNHANDLED_HANDLER
000000C4= 000019F8                 335          DC.L UNHANDLED_HANDLER
000000C8= 000019F8                 336          DC.L UNHANDLED_HANDLER
000000CC= 000019F8                 337          DC.L UNHANDLED_HANDLER
000000D0= 000019F8                 338          DC.L UNHANDLED_HANDLER
000000D4= 000019F8                 339          DC.L UNHANDLED_HANDLER
000000D8= 000019F8                 340          DC.L UNHANDLED_HANDLER
000000DC= 000019F8                 341          DC.L UNHANDLED_HANDLER
000000E0= 000019F8                 342          DC.L UNHANDLED_HANDLER
000000E4= 000019F8                 343          DC.L UNHANDLED_HANDLER
000000E8= 000019F8                 344          DC.L UNHANDLED_HANDLER
000000EC= 000019F8                 345          DC.L UNHANDLED_HANDLER
000000F0= 000019F8                 346          DC.L UNHANDLED_HANDLER
000000F4= 000019F8                 347          DC.L UNHANDLED_HANDLER
000000F8= 000019F8                 348          DC.L UNHANDLED_HANDLER
000000FC= 000019F8                 349          DC.L UNHANDLED_HANDLER
00000100= 000019F8                 350  USER    DC.L UNHANDLED_HANDLER
00000104= 000019F8                 351          DC.L UNHANDLED_HANDLER
00000108= 000019F8                 352          DC.L UNHANDLED_HANDLER
0000010C= 000019F8                 353          DC.L UNHANDLED_HANDLER
00000110= 000019F8                 354          DC.L UNHANDLED_HANDLER
00000114= 000019F8                 355          DC.L UNHANDLED_HANDLER
00000118= 000019F8                 356          DC.L UNHANDLED_HANDLER
0000011C= 000019F8                 357          DC.L UNHANDLED_HANDLER
00000120= 000019F8                 358          DC.L UNHANDLED_HANDLER
00000124= 000019F8                 359          DC.L UNHANDLED_HANDLER
00000128= 000019F8                 360          DC.L UNHANDLED_HANDLER
0000012C= 000019F8                 361          DC.L UNHANDLED_HANDLER
00000130= 000019F8                 362          DC.L UNHANDLED_HANDLER
00000134= 000019F8                 363          DC.L UNHANDLED_HANDLER
00000138= 000019F8                 364          DC.L UNHANDLED_HANDLER
0000013C= 000019F8                 365          DC.L UNHANDLED_HANDLER
00000140= 000019F8                 366          DC.L UNHANDLED_HANDLER
00000144= 000019F8                 367          DC.L UNHANDLED_HANDLER
00000148= 000019F8                 368          DC.L UNHANDLED_HANDLER
0000014C= 000019F8                 369          DC.L UNHANDLED_HANDLER
00000150= 000019F8                 370          DC.L UNHANDLED_HANDLER
00000154= 000019F8                 371          DC.L UNHANDLED_HANDLER
00000158= 000019F8                 372          DC.L UNHANDLED_HANDLER
0000015C= 000019F8                 373          DC.L UNHANDLED_HANDLER
00000160= 000019F8                 374          DC.L UNHANDLED_HANDLER
00000164= 000019F8                 375          DC.L UNHANDLED_HANDLER
00000168= 000019F8                 376          DC.L UNHANDLED_HANDLER
0000016C= 000019F8                 377          DC.L UNHANDLED_HANDLER
00000170= 000019F8                 378          DC.L UNHANDLED_HANDLER
00000174= 000019F8                 379          DC.L UNHANDLED_HANDLER
00000178= 000019F8                 380          DC.L UNHANDLED_HANDLER
0000017C= 000019F8                 381          DC.L UNHANDLED_HANDLER
00000180= 000019F8                 382          DC.L UNHANDLED_HANDLER
00000184= 000019F8                 383          DC.L UNHANDLED_HANDLER
00000188= 000019F8                 384          DC.L UNHANDLED_HANDLER
0000018C= 000019F8                 385          DC.L UNHANDLED_HANDLER
00000190= 000019F8                 386          DC.L UNHANDLED_HANDLER
00000194= 000019F8                 387          DC.L UNHANDLED_HANDLER
00000198= 000019F8                 388          DC.L UNHANDLED_HANDLER
0000019C= 000019F8                 389          DC.L UNHANDLED_HANDLER
000001A0= 000019F8                 390          DC.L UNHANDLED_HANDLER
000001A4= 000019F8                 391          DC.L UNHANDLED_HANDLER
000001A8= 000019F8                 392          DC.L UNHANDLED_HANDLER
000001AC= 000019F8                 393          DC.L UNHANDLED_HANDLER
000001B0= 000019F8                 394          DC.L UNHANDLED_HANDLER
000001B4= 000019F8                 395          DC.L UNHANDLED_HANDLER
000001B8= 000019F8                 396          DC.L UNHANDLED_HANDLER
000001BC= 000019F8                 397          DC.L UNHANDLED_HANDLER
000001C0= 000019F8                 398          DC.L UNHANDLED_HANDLER
000001C4= 000019F8                 399          DC.L UNHANDLED_HANDLER
000001C8= 000019F8                 400          DC.L UNHANDLED_HANDLER
000001CC= 000019F8                 401          DC.L UNHANDLED_HANDLER
000001D0= 000019F8                 402          DC.L UNHANDLED_HANDLER
000001D4= 000019F8                 403          DC.L UNHANDLED_HANDLER
000001D8= 000019F8                 404          DC.L UNHANDLED_HANDLER
000001DC= 000019F8                 405          DC.L UNHANDLED_HANDLER
000001E0= 000019F8                 406          DC.L UNHANDLED_HANDLER
000001E4= 000019F8                 407          DC.L UNHANDLED_HANDLER
000001E8= 000019F8                 408          DC.L UNHANDLED_HANDLER
000001EC= 000019F8                 409          DC.L UNHANDLED_HANDLER
000001F0= 000019F8                 410          DC.L UNHANDLED_HANDLER
000001F4= 000019F8                 411          DC.L UNHANDLED_HANDLER
000001F8= 000019F8                 412          DC.L UNHANDLED_HANDLER
000001FC= 000019F8                 413          DC.L UNHANDLED_HANDLER
00000200= 000019F8                 414          DC.L UNHANDLED_HANDLER
00000204= 000019F8                 415          DC.L UNHANDLED_HANDLER
00000208= 000019F8                 416          DC.L UNHANDLED_HANDLER
0000020C= 000019F8                 417          DC.L UNHANDLED_HANDLER
00000210= 000019F8                 418          DC.L UNHANDLED_HANDLER
00000214= 000019F8                 419          DC.L UNHANDLED_HANDLER
00000218= 000019F8                 420          DC.L UNHANDLED_HANDLER
0000021C= 000019F8                 421          DC.L UNHANDLED_HANDLER
00000220= 000019F8                 422          DC.L UNHANDLED_HANDLER
00000224= 000019F8                 423          DC.L UNHANDLED_HANDLER
00000228= 000019F8                 424          DC.L UNHANDLED_HANDLER
0000022C= 000019F8                 425          DC.L UNHANDLED_HANDLER
00000230= 000019F8                 426          DC.L UNHANDLED_HANDLER
00000234= 000019F8                 427          DC.L UNHANDLED_HANDLER
00000238= 000019F8                 428          DC.L UNHANDLED_HANDLER
0000023C= 000019F8                 429          DC.L UNHANDLED_HANDLER
00000240= 000019F8                 430          DC.L UNHANDLED_HANDLER
00000244= 000019F8                 431          DC.L UNHANDLED_HANDLER
00000248= 000019F8                 432          DC.L UNHANDLED_HANDLER
0000024C= 000019F8                 433          DC.L UNHANDLED_HANDLER
00000250= 000019F8                 434          DC.L UNHANDLED_HANDLER
00000254= 000019F8                 435          DC.L UNHANDLED_HANDLER
00000258= 000019F8                 436          DC.L UNHANDLED_HANDLER
0000025C= 000019F8                 437          DC.L UNHANDLED_HANDLER
00000260= 000019F8                 438          DC.L UNHANDLED_HANDLER
00000264= 000019F8                 439          DC.L UNHANDLED_HANDLER
00000268= 000019F8                 440          DC.L UNHANDLED_HANDLER
0000026C= 000019F8                 441          DC.L UNHANDLED_HANDLER
00000270= 000019F8                 442          DC.L UNHANDLED_HANDLER
00000274= 000019F8                 443          DC.L UNHANDLED_HANDLER
00000278= 000019F8                 444          DC.L UNHANDLED_HANDLER
0000027C= 000019F8                 445          DC.L UNHANDLED_HANDLER
00000280= 000019F8                 446          DC.L UNHANDLED_HANDLER
00000284= 000019F8                 447          DC.L UNHANDLED_HANDLER
00000288= 000019F8                 448          DC.L UNHANDLED_HANDLER
0000028C= 000019F8                 449          DC.L UNHANDLED_HANDLER
00000290= 000019F8                 450          DC.L UNHANDLED_HANDLER
00000294= 000019F8                 451          DC.L UNHANDLED_HANDLER
00000298= 000019F8                 452          DC.L UNHANDLED_HANDLER
0000029C= 000019F8                 453          DC.L UNHANDLED_HANDLER
000002A0= 000019F8                 454          DC.L UNHANDLED_HANDLER
000002A4= 000019F8                 455          DC.L UNHANDLED_HANDLER
000002A8= 000019F8                 456          DC.L UNHANDLED_HANDLER
000002AC= 000019F8                 457          DC.L UNHANDLED_HANDLER
000002B0= 000019F8                 458          DC.L UNHANDLED_HANDLER
000002B4= 000019F8                 459          DC.L UNHANDLED_HANDLER
000002B8= 000019F8                 460          DC.L UNHANDLED_HANDLER
000002BC= 000019F8                 461          DC.L UNHANDLED_HANDLER
000002C0= 000019F8                 462          DC.L UNHANDLED_HANDLER
000002C4= 000019F8                 463          DC.L UNHANDLED_HANDLER
000002C8= 000019F8                 464          DC.L UNHANDLED_HANDLER
000002CC= 000019F8                 465          DC.L UNHANDLED_HANDLER
000002D0= 000019F8                 466          DC.L UNHANDLED_HANDLER
000002D4= 000019F8                 467          DC.L UNHANDLED_HANDLER
000002D8= 000019F8                 468          DC.L UNHANDLED_HANDLER
000002DC= 000019F8                 469          DC.L UNHANDLED_HANDLER
000002E0= 000019F8                 470          DC.L UNHANDLED_HANDLER
000002E4= 000019F8                 471          DC.L UNHANDLED_HANDLER
000002E8= 000019F8                 472          DC.L UNHANDLED_HANDLER
000002EC= 000019F8                 473          DC.L UNHANDLED_HANDLER
000002F0= 000019F8                 474          DC.L UNHANDLED_HANDLER
000002F4= 000019F8                 475          DC.L UNHANDLED_HANDLER
000002F8= 000019F8                 476          DC.L UNHANDLED_HANDLER
000002FC= 000019F8                 477          DC.L UNHANDLED_HANDLER
00000300= 000019F8                 478          DC.L UNHANDLED_HANDLER
00000304= 000019F8                 479          DC.L UNHANDLED_HANDLER
00000308= 000019F8                 480          DC.L UNHANDLED_HANDLER
0000030C= 000019F8                 481          DC.L UNHANDLED_HANDLER
00000310= 000019F8                 482          DC.L UNHANDLED_HANDLER
00000314= 000019F8                 483          DC.L UNHANDLED_HANDLER
00000318= 000019F8                 484          DC.L UNHANDLED_HANDLER
0000031C= 000019F8                 485          DC.L UNHANDLED_HANDLER
00000320= 000019F8                 486          DC.L UNHANDLED_HANDLER
00000324= 000019F8                 487          DC.L UNHANDLED_HANDLER
00000328= 000019F8                 488          DC.L UNHANDLED_HANDLER
0000032C= 000019F8                 489          DC.L UNHANDLED_HANDLER
00000330= 000019F8                 490          DC.L UNHANDLED_HANDLER
00000334= 000019F8                 491          DC.L UNHANDLED_HANDLER
00000338= 000019F8                 492          DC.L UNHANDLED_HANDLER
0000033C= 000019F8                 493          DC.L UNHANDLED_HANDLER
00000340= 000019F8                 494          DC.L UNHANDLED_HANDLER
00000344= 000019F8                 495          DC.L UNHANDLED_HANDLER
00000348= 000019F8                 496          DC.L UNHANDLED_HANDLER
0000034C= 000019F8                 497          DC.L UNHANDLED_HANDLER
00000350= 000019F8                 498          DC.L UNHANDLED_HANDLER
00000354= 000019F8                 499          DC.L UNHANDLED_HANDLER
00000358= 000019F8                 500          DC.L UNHANDLED_HANDLER
0000035C= 000019F8                 501          DC.L UNHANDLED_HANDLER
00000360= 000019F8                 502          DC.L UNHANDLED_HANDLER
00000364= 000019F8                 503          DC.L UNHANDLED_HANDLER
00000368= 000019F8                 504          DC.L UNHANDLED_HANDLER
0000036C= 000019F8                 505          DC.L UNHANDLED_HANDLER
00000370= 000019F8                 506          DC.L UNHANDLED_HANDLER
00000374= 000019F8                 507          DC.L UNHANDLED_HANDLER
00000378= 000019F8                 508          DC.L UNHANDLED_HANDLER
0000037C= 000019F8                 509          DC.L UNHANDLED_HANDLER
00000380= 000019F8                 510          DC.L UNHANDLED_HANDLER
00000384= 000019F8                 511          DC.L UNHANDLED_HANDLER
00000388= 000019F8                 512          DC.L UNHANDLED_HANDLER
0000038C= 000019F8                 513          DC.L UNHANDLED_HANDLER
00000390= 000019F8                 514          DC.L UNHANDLED_HANDLER
00000394= 000019F8                 515          DC.L UNHANDLED_HANDLER
00000398= 000019F8                 516          DC.L UNHANDLED_HANDLER
0000039C= 000019F8                 517          DC.L UNHANDLED_HANDLER
000003A0= 000019F8                 518          DC.L UNHANDLED_HANDLER
000003A4= 000019F8                 519          DC.L UNHANDLED_HANDLER
000003A8= 000019F8                 520          DC.L UNHANDLED_HANDLER
000003AC= 000019F8                 521          DC.L UNHANDLED_HANDLER
000003B0= 000019F8                 522          DC.L UNHANDLED_HANDLER
000003B4= 000019F8                 523          DC.L UNHANDLED_HANDLER
000003B8= 000019F8                 524          DC.L UNHANDLED_HANDLER
000003BC= 000019F8                 525          DC.L UNHANDLED_HANDLER
000003C0= 000019F8                 526          DC.L UNHANDLED_HANDLER
000003C4= 000019F8                 527          DC.L UNHANDLED_HANDLER
000003C8= 000019F8                 528          DC.L UNHANDLED_HANDLER
000003CC= 000019F8                 529          DC.L UNHANDLED_HANDLER
000003D0= 000019F8                 530          DC.L UNHANDLED_HANDLER
000003D4= 000019F8                 531          DC.L UNHANDLED_HANDLER
000003D8= 000019F8                 532          DC.L UNHANDLED_HANDLER
000003DC= 000019F8                 533          DC.L UNHANDLED_HANDLER
000003E0= 000019F8                 534          DC.L UNHANDLED_HANDLER
000003E4= 000019F8                 535          DC.L UNHANDLED_HANDLER
000003E8= 000019F8                 536          DC.L UNHANDLED_HANDLER
000003EC= 000019F8                 537          DC.L UNHANDLED_HANDLER
000003F0= 000019F8                 538          DC.L UNHANDLED_HANDLER
000003F4= 000019F8                 539          DC.L UNHANDLED_HANDLER
000003F8= 000019F8                 540          DC.L UNHANDLED_HANDLER
000003FC= 000019F8                 541          DC.L UNHANDLED_HANDLER
00000400                           542  ; start of program  
00000400                           543  START
00000400  13FC 0000 00E00001       544      MOVE.B #0,DISPLAY
00000408                           545  
00000408  2E7C 002E0000            546      MOVE.L #STACK_ADDRESS,A7
0000040E                           547  
0000040E                           548  ; reset the UART in case of warm start
0000040E  13FC 000A 00C00005       549      MOVE.B #$A,DUART_CRA                                ; disable rx & tx
00000416  13FC 000A 00C00015       550      MOVE.B #$A,DUART_CRB                                ; disable rx & tx
0000041E                           551      
0000041E                           552      FOR D1 = #$50 DOWNTO #$10 BY #$10 DO
0000041E  323C 0050                553s     MOVE.W  #$50,D1
00000422  6000 000E                554s     BRA _20000001
00000426                           555s _20000000
00000426  13C1 00C00005            556          MOVE.B D1,DUART_CRA                         ; reset everyting
0000042C  4E71                     557          NOP
0000042E                           558      ENDF
0000042E  0441 0010                559s     SUB.W   #$10,D1
00000432                           560s _20000001
00000432  B27C 0010                561s     CMP.W   #$10,D1
00000436  6CEE                     562s     BGE _20000000
00000438                           563  
00000438                           564      FOR D1 = #$50 DOWNTO #$10 BY #$10 DO
00000438  323C 0050                565s     MOVE.W  #$50,D1
0000043C  6000 000E                566s     BRA _20000003
00000440                           567s _20000002
00000440  13C1 00C00015            568          MOVE.B D1,DUART_CRB                         ; reset everyting
00000446  4E71                     569          NOP
00000448                           570      ENDF
00000448  0441 0010                571s     SUB.W   #$10,D1
0000044C                           572s _20000003
0000044C  B27C 0010                573s     CMP.W   #$10,D1
00000450  6CEE                     574s     BGE _20000002
00000452                           575      
00000452                           576  ;initialise UART
00000452  13FC 0000 00C0000B       577      MOVE.B #$0,DUART_IMR                            ; no interrupts, please
0000045A  13FC 00FF 00C0000D       578      MOVE.B #$FF,DUART_CTUR
00000462  13FC 00FF 00C0000F       579      MOVE.B #$FF,DUART_CTLR
0000046A  13FC 0070 00C00009       580      MOVE.B #$70,DUART_ACR
00000472  13FC 0004 00C0001B       581      MOVE.B #$4,DUART_OPCR                           ; enable counter
0000047A                           582  
0000047A                           583  ; channel A
0000047A  13FC 0013 00C00001       584      MOVE.B #$13,DUART_MRA                           ; no flow control, no parity, 8 data bits
00000482  13FC 0007 00C00001       585      MOVE.B #$07,DUART_MRA                           ; 1 stop bit
0000048A  13FC 00CC 00C00003       586      MOVE.B #$CC,DUART_CSRA                          ; 38400 baud
00000492  13FC 0005 00C00005       587      MOVE.B #$5,DUART_CRA                            ; enable rx & tx
0000049A                           588  
0000049A                           589  ; channel B
0000049A  13FC 0013 00C00011       590      MOVE.B #$13,DUART_MRB                           ; no flow control, no parity, 8 data bits
000004A2  13FC 0007 00C00011       591      MOVE.B #$07,DUART_MRB                           ; 1 stop bit
000004AA  13FC 00CC 00C00013       592      MOVE.B #$CC,DUART_CSRB                          ; 38400 baud
000004B2  13FC 0005 00C00015       593      MOVE.B #$5,DUART_CRB                            ; enable rx & tx
000004BA                           594  
000004BA                           595      ;MOVE.B DUART_SET_OPR,D0                            ; start timer
000004BA                           596  
000004BA                           597m     PRINT_CHAR #0,D1                                ; some non-printing char to flush out the serial port
000004BA                           598m WAIT_FOR_READY_1                                    ; WAIT UNTIL THE THERE IS SPACE TO SEND
000004BA                 TRUE      599m     IFEQ DEBUG
000004BA  1239 00C00003            600m         MOVE.B DUART_SRA,D1                         ; READ STATUS REGISTER
000004C0  0801 0002                601m         BTST #2,D1                                  ; CHECK FOR SPACE TO SEND
000004C4  67F4                     602m         BEQ WAIT_FOR_READY_1                        ; NO SPACE, CHECK AGAIN
000004C6  13FC 0000 00C00007       603m         MOVE.B #0,DUART_TXA                         ; SEND THE NEXT CHARACTER
000004CE                           604m     ENDC
000004CE                           605m 
000004CE                 FALSE     606m     IFNE DEBUG
000004CE                           607m     ENDC
000004CE                           608m 
000004CE                           609m     ENDM
000004CE                           610m     PRINT_CHAR #0,D1
000004CE                           611m WAIT_FOR_READY_2                                    ; WAIT UNTIL THE THERE IS SPACE TO SEND
000004CE                 TRUE      612m     IFEQ DEBUG
000004CE  1239 00C00003            613m         MOVE.B DUART_SRA,D1                         ; READ STATUS REGISTER
000004D4  0801 0002                614m         BTST #2,D1                                  ; CHECK FOR SPACE TO SEND
000004D8  67F4                     615m         BEQ WAIT_FOR_READY_2                        ; NO SPACE, CHECK AGAIN
000004DA  13FC 0000 00C00007       616m         MOVE.B #0,DUART_TXA                         ; SEND THE NEXT CHARACTER
000004E2                           617m     ENDC
000004E2                           618m 
000004E2                 FALSE     619m     IFNE DEBUG
000004E2                           620m     ENDC
000004E2                           621m 
000004E2                           622m     ENDM
000004E2                           623m     PRINT_CHAR #0,D1
000004E2                           624m WAIT_FOR_READY_3                                    ; WAIT UNTIL THE THERE IS SPACE TO SEND
000004E2                 TRUE      625m     IFEQ DEBUG
000004E2  1239 00C00003            626m         MOVE.B DUART_SRA,D1                         ; READ STATUS REGISTER
000004E8  0801 0002                627m         BTST #2,D1                                  ; CHECK FOR SPACE TO SEND
000004EC  67F4                     628m         BEQ WAIT_FOR_READY_3                        ; NO SPACE, CHECK AGAIN
000004EE  13FC 0000 00C00007       629m         MOVE.B #0,DUART_TXA                         ; SEND THE NEXT CHARACTER
000004F6                           630m     ENDC
000004F6                           631m 
000004F6                 FALSE     632m     IFNE DEBUG
000004F6                           633m     ENDC
000004F6                           634m 
000004F6                           635m     ENDM
000004F6                           636  
000004F6  13FC 0001 00E00001       637      MOVE.B #1,DISPLAY
000004FE                           638      
000004FE                           639m     PRINT_CRLF D1,A0
000004FE  41FA 170E                640m     LEA CRLF(PC),A0
00000502                           641mm     PRINT_STR A0,D1
00000502                           642mm LOOP_5
00000502  0C10 0000                643mm     CMP.B #NULL,(A0)                                ; 0 -> DONE
00000506  6700 0016                644mm     BEQ EXIT_5
0000050A                           645mmm     PRINT_CHAR (A0)+,D1
0000050A                           646mmm WAIT_FOR_READY_6                                    ; WAIT UNTIL THE THERE IS SPACE TO SEND
0000050A                 TRUE      647mmm     IFEQ DEBUG
0000050A  1239 00C00003            648mmm         MOVE.B DUART_SRA,D1                         ; READ STATUS REGISTER
00000510  0801 0002                649mmm         BTST #2,D1                                  ; CHECK FOR SPACE TO SEND
00000514  67F4                     650mmm         BEQ WAIT_FOR_READY_6                        ; NO SPACE, CHECK AGAIN
00000516  13D8 00C00007            651mmm         MOVE.B (A0)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
0000051C                           652mmm     ENDC
0000051C                           653mmm 
0000051C                 FALSE     654mmm     IFNE DEBUG
0000051C                           655mmm     ENDC
0000051C                           656mmm 
0000051C                           657mmm     ENDM
0000051C  60E4                     658mm     BRA LOOP_5
0000051E                           659mm EXIT_5
0000051E                           660mm     ENDM
0000051E                           661m     ENDM
0000051E  41FA 174E                662      LEA VERSION(PC),A0
00000522                           663m     PRINT_STR A0,D3
00000522                           664m LOOP_7
00000522  0C10 0000                665m     CMP.B #NULL,(A0)                                ; 0 -> DONE
00000526  6700 0016                666m     BEQ EXIT_7
0000052A                           667mm     PRINT_CHAR (A0)+,D3
0000052A                           668mm WAIT_FOR_READY_8                                    ; WAIT UNTIL THE THERE IS SPACE TO SEND
0000052A                 TRUE      669mm     IFEQ DEBUG
0000052A  1639 00C00003            670mm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
00000530  0803 0002                671mm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
00000534  67F4                     672mm         BEQ WAIT_FOR_READY_8                        ; NO SPACE, CHECK AGAIN
00000536  13D8 00C00007            673mm         MOVE.B (A0)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
0000053C                           674mm     ENDC
0000053C                           675mm 
0000053C                 FALSE     676mm     IFNE DEBUG
0000053C                           677mm     ENDC
0000053C                           678mm 
0000053C                           679mm     ENDM
0000053C  60E4                     680m     BRA LOOP_7
0000053E                           681m EXIT_7
0000053E                           682m     ENDM
0000053E                           683  
0000053E  41F9 00001C8C            684      LEA END,A0
00000544  2008                     685      MOVE.L A0,D0
00000546                           686m     PRINT_REG D0,D1,D2,D3,A0
00000546  41FA 16CC                687m     LEA OX(PC),A0
0000054A                           688mm     PRINT_STR A0,D1
0000054A                           689mm LOOP_10
0000054A  0C10 0000                690mm     CMP.B #NULL,(A0)                                ; 0 -> DONE
0000054E  6700 0016                691mm     BEQ EXIT_10
00000552                           692mmm     PRINT_CHAR (A0)+,D1
00000552                           693mmm WAIT_FOR_READY_11                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000552                 TRUE      694mmm     IFEQ DEBUG
00000552  1239 00C00003            695mmm         MOVE.B DUART_SRA,D1                         ; READ STATUS REGISTER
00000558  0801 0002                696mmm         BTST #2,D1                                  ; CHECK FOR SPACE TO SEND
0000055C  67F4                     697mmm         BEQ WAIT_FOR_READY_11                       ; NO SPACE, CHECK AGAIN
0000055E  13D8 00C00007            698mmm         MOVE.B (A0)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00000564                           699mmm     ENDC
00000564                           700mmm 
00000564                 FALSE     701mmm     IFNE DEBUG
00000564                           702mmm     ENDC
00000564                           703mmm 
00000564                           704mmm     ENDM
00000564  60E4                     705mm     BRA LOOP_10
00000566                           706mm EXIT_10
00000566                           707mm     ENDM
00000566  7607                     708m     MOVE.L #7,D3                                    ; LOOP ROUND ALL 8 HEX CHARACTERS OF 4 BITS EACH
00000568                           709m LOOP_9
00000568                           710mm     BIN2HEX D0,D2,A0
00000568  41FA 1626                711mm     LEA BIN2HEX_LUT(PC),A0                          ; LOAD THE LOOKUP TABLE
0000056C  E998                     712mm     ROL.L #4,D0                                     ; SHIFT THE TOP 4 BITS DOWN TO BOTTOM OF THE REGISTER THE AND MASK OFF EVERYTHING ELSE
0000056E  1400                     713mm     MOVE.B D0,D2
00000570  0282 0000000F            714mm     ANDI.L #$F,D2
00000576  1430 2000                715mm     MOVE.B 0(A0,D2),D2                              ; USE THAT AS AN INDEX INTO THE LUT
0000057A                           716mm     ENDM
0000057A                           717mm     PRINT_CHAR D2,D1
0000057A                           718mm WAIT_FOR_READY_13                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
0000057A                 TRUE      719mm     IFEQ DEBUG
0000057A  1239 00C00003            720mm         MOVE.B DUART_SRA,D1                         ; READ STATUS REGISTER
00000580  0801 0002                721mm         BTST #2,D1                                  ; CHECK FOR SPACE TO SEND
00000584  67F4                     722mm         BEQ WAIT_FOR_READY_13                       ; NO SPACE, CHECK AGAIN
00000586  13C2 00C00007            723mm         MOVE.B D2,DUART_TXA                         ; SEND THE NEXT CHARACTER
0000058C                           724mm     ENDC
0000058C                           725mm 
0000058C                 FALSE     726mm     IFNE DEBUG
0000058C                           727mm     ENDC
0000058C                           728mm 
0000058C                           729mm     ENDM
0000058C  57CB FFDA                730m     DBEQ D3,LOOP_9
00000590                           731m     ENDM
00000590                           732m     PRINT_CRLF D1,A0
00000590  41FA 167C                733m     LEA CRLF(PC),A0
00000594                           734mm     PRINT_STR A0,D1
00000594                           735mm LOOP_15
00000594  0C10 0000                736mm     CMP.B #NULL,(A0)                                ; 0 -> DONE
00000598  6700 0016                737mm     BEQ EXIT_15
0000059C                           738mmm     PRINT_CHAR (A0)+,D1
0000059C                           739mmm WAIT_FOR_READY_16                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
0000059C                 TRUE      740mmm     IFEQ DEBUG
0000059C  1239 00C00003            741mmm         MOVE.B DUART_SRA,D1                         ; READ STATUS REGISTER
000005A2  0801 0002                742mmm         BTST #2,D1                                  ; CHECK FOR SPACE TO SEND
000005A6  67F4                     743mmm         BEQ WAIT_FOR_READY_16                       ; NO SPACE, CHECK AGAIN
000005A8  13D8 00C00007            744mmm         MOVE.B (A0)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
000005AE                           745mmm     ENDC
000005AE                           746mmm 
000005AE                 FALSE     747mmm     IFNE DEBUG
000005AE                           748mmm     ENDC
000005AE                           749mmm 
000005AE                           750mmm     ENDM
000005AE  60E4                     751mm     BRA LOOP_15
000005B0                           752mm EXIT_15
000005B0                           753mm     ENDM
000005B0                           754m     ENDM
000005B0                           755  
000005B0  41FA 1456                756      LEA HELPPROMPT(PC),A0
000005B4                           757m     PRINT_STR A0,D3
000005B4                           758m LOOP_17
000005B4  0C10 0000                759m     CMP.B #NULL,(A0)                                ; 0 -> DONE
000005B8  6700 0016                760m     BEQ EXIT_17
000005BC                           761mm     PRINT_CHAR (A0)+,D3
000005BC                           762mm WAIT_FOR_READY_18                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
000005BC                 TRUE      763mm     IFEQ DEBUG
000005BC  1639 00C00003            764mm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
000005C2  0803 0002                765mm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
000005C6  67F4                     766mm         BEQ WAIT_FOR_READY_18                       ; NO SPACE, CHECK AGAIN
000005C8  13D8 00C00007            767mm         MOVE.B (A0)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
000005CE                           768mm     ENDC
000005CE                           769mm 
000005CE                 FALSE     770mm     IFNE DEBUG
000005CE                           771mm     ENDC
000005CE                           772mm 
000005CE                           773mm     ENDM
000005CE  60E4                     774m     BRA LOOP_17
000005D0                           775m EXIT_17
000005D0                           776m     ENDM
000005D0                           777  
000005D0                           778m     PRINT_CRLF D3,A0
000005D0  41FA 163C                779m     LEA CRLF(PC),A0
000005D4                           780mm     PRINT_STR A0,D3
000005D4                           781mm LOOP_20
000005D4  0C10 0000                782mm     CMP.B #NULL,(A0)                                ; 0 -> DONE
000005D8  6700 0016                783mm     BEQ EXIT_20
000005DC                           784mmm     PRINT_CHAR (A0)+,D3
000005DC                           785mmm WAIT_FOR_READY_21                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
000005DC                 TRUE      786mmm     IFEQ DEBUG
000005DC  1639 00C00003            787mmm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
000005E2  0803 0002                788mmm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
000005E6  67F4                     789mmm         BEQ WAIT_FOR_READY_21                       ; NO SPACE, CHECK AGAIN
000005E8  13D8 00C00007            790mmm         MOVE.B (A0)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
000005EE                           791mmm     ENDC
000005EE                           792mmm 
000005EE                 FALSE     793mmm     IFNE DEBUG
000005EE                           794mmm     ENDC
000005EE                           795mmm 
000005EE                           796mmm     ENDM
000005EE  60E4                     797mm     BRA LOOP_20
000005F0                           798mm EXIT_20
000005F0                           799mm     ENDM
000005F0                           800m     ENDM
000005F0                           801  
000005F0  7E00                     802      MOVE.L #0,D7                                        ; address accumulator
000005F2                           803  
000005F2  13FC 0002 00E00001       804      MOVE.B #2,DISPLAY
000005FA                           805  MAIN_LOOP
000005FA  41FA 1615                806      LEA PROMPT(PC),A0
000005FE                           807m     PRINT_STR A0,D3
000005FE                           808m LOOP_22
000005FE  0C10 0000                809m     CMP.B #NULL,(A0)                                ; 0 -> DONE
00000602  6700 0016                810m     BEQ EXIT_22
00000606                           811mm     PRINT_CHAR (A0)+,D3
00000606                           812mm WAIT_FOR_READY_23                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000606                 TRUE      813mm     IFEQ DEBUG
00000606  1639 00C00003            814mm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
0000060C  0803 0002                815mm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
00000610  67F4                     816mm         BEQ WAIT_FOR_READY_23                       ; NO SPACE, CHECK AGAIN
00000612  13D8 00C00007            817mm         MOVE.B (A0)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00000618                           818mm     ENDC
00000618                           819mm 
00000618                 FALSE     820mm     IFNE DEBUG
00000618                           821mm     ENDC
00000618                           822mm 
00000618                           823mm     ENDM
00000618  60E4                     824m     BRA LOOP_22
0000061A                           825m EXIT_22
0000061A                           826m     ENDM
0000061A                           827  
0000061A                           828  GET_INPUT
0000061A                           829m     WAIT_CHAR D2,D3                                 ; fetch character from serial port -> D2
0000061A                           830m WAIT_FOR_READY_24                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
0000061A                 TRUE      831m     IFEQ DEBUG
0000061A  1639 00C00003            832m         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
00000620  0803 0000                833m         BTST #0,D3                                  ; CHECK FOR CHARACTER
00000624  67F4                     834m         BEQ WAIT_FOR_READY_24                       ; NOTHING, CHECK AGAIN
00000626                           835m     ENDC
00000626                           836m 
00000626                           837mm     READ_CHAR D2
00000626                 TRUE      838mm     IFEQ DEBUG
00000626  1439 00C00007            839mm         MOVE.B DUART_RXA,D2                         ; GOT A CHARACTER, READ IT
0000062C                           840mm     ENDC
0000062C                 FALSE     841mm     IFNE DEBUG
0000062C                           842mm     ENDC
0000062C                           843mm 
0000062C  B43C 001B                844mm     CMP.B #$1B,D2                                   ; CHECK FOR ESCAPE AND GO TO START
00000630  6700 FDCE                845mm     BEQ START
00000634                           846mm     ENDM
00000634                           847m 
00000634                 TRUE      848m     IFEQ DEBUG
00000634                           849mm         PRINT_CHAR D2,D3                            ; ECHO IT BACK
00000634                           850mm WAIT_FOR_READY_26                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000634                 TRUE      851mm     IFEQ DEBUG
00000634  1639 00C00003            852mm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
0000063A  0803 0002                853mm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
0000063E  67F4                     854mm         BEQ WAIT_FOR_READY_26                       ; NO SPACE, CHECK AGAIN
00000640  13C2 00C00007            855mm         MOVE.B D2,DUART_TXA                         ; SEND THE NEXT CHARACTER
00000646                           856mm     ENDC
00000646                           857mm 
00000646                 FALSE     858mm     IFNE DEBUG
00000646                           859mm     ENDC
00000646                           860mm 
00000646                           861mm     ENDM
00000646                           862m     ENDC
00000646                           863m     ENDM
00000646                           864  
00000646                           865      IF.B D2 <GE> #'0' AND.B D2 <LE> #'9' THEN
00000646  B43C 0030                866s     CMP.B   #'0',D2
0000064A  6D00 000E                867s     BLT _00000000
0000064E  B43C 0039                868s     CMP.B   #'9',D2
00000652  6E00 0006                869s     BGT _00000000
00000656  6000 121E                870          BRA HEX_DIGIT
0000065A                           871      ENDI
0000065A                           872s _00000000
0000065A                           873      IF.B D2 <GE> #'A' AND.B D2 <LE> #'F' THEN
0000065A  B43C 0041                874s     CMP.B   #'A',D2
0000065E  6D00 000E                875s     BLT _00000001
00000662  B43C 0046                876s     CMP.B   #'F',D2
00000666  6E00 0006                877s     BGT _00000001
0000066A  6000 120A                878          BRA HEX_DIGIT
0000066E                           879      ENDI
0000066E                           880s _00000001
0000066E                           881  
0000066E  B43C 0077                882      CMP.B #'w',D2
00000672  6700 01FA                883      BEQ W
00000676                           884  
00000676  B43C 006C                885      CMP.B #'l',D2
0000067A  6700 0A90                886      BEQ L 
0000067E                           887  
0000067E  B43C 0070                888      CMP.B #'p',D2
00000682  6700 0E80                889      BEQ P
00000686                           890  
00000686  B43C 006D                891      CMP.B #'m',D2
0000068A  6700 1036                892      BEQ M
0000068E                           893  
0000068E                           894m     PRINT_CRLF D3,A0
0000068E  41FA 157E                895m     LEA CRLF(PC),A0
00000692                           896mm     PRINT_STR A0,D3
00000692                           897mm LOOP_28
00000692  0C10 0000                898mm     CMP.B #NULL,(A0)                                ; 0 -> DONE
00000696  6700 0016                899mm     BEQ EXIT_28
0000069A                           900mmm     PRINT_CHAR (A0)+,D3
0000069A                           901mmm WAIT_FOR_READY_29                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
0000069A                 TRUE      902mmm     IFEQ DEBUG
0000069A  1639 00C00003            903mmm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
000006A0  0803 0002                904mmm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
000006A4  67F4                     905mmm         BEQ WAIT_FOR_READY_29                       ; NO SPACE, CHECK AGAIN
000006A6  13D8 00C00007            906mmm         MOVE.B (A0)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
000006AC                           907mmm     ENDC
000006AC                           908mmm 
000006AC                 FALSE     909mmm     IFNE DEBUG
000006AC                           910mmm     ENDC
000006AC                           911mmm 
000006AC                           912mmm     ENDM
000006AC  60E4                     913mm     BRA LOOP_28
000006AE                           914mm EXIT_28
000006AE                           915mm     ENDM
000006AE                           916m     ENDM
000006AE                           917   
000006AE  B43C 003F                918      CMP.B #'?',D2
000006B2  6700 00B6                919      BEQ H
000006B6                           920   
000006B6  B43C 0076                921      CMP.B #'v',D2
000006BA  6700 00B6                922      BEQ V
000006BE                           923      
000006BE  B43C 0072                924      CMP.B #'r',D2
000006C2  6700 00D2                925      BEQ R
000006C6                           926  
000006C6  B43C 0073                927      CMP.B #'s',D2
000006CA  6700 021E                928      BEQ S
000006CE                           929  
000006CE  B43C 0067                930      CMP.B #'g',D2
000006D2  6700 0942                931      BEQ G   
000006D6                           932  
000006D6  B43C 007A                933      CMP.B #'z',D2
000006DA  6700 0940                934      BEQ Z   
000006DE                           935  
000006DE  B43C 002C                936      CMP.B #',',D2
000006E2  6700 002E                937      BEQ ON
000006E6                           938  
000006E6  B43C 002E                939      CMP.B #'.',D2
000006EA  6700 0052                940      BEQ OFF
000006EE                           941  
000006EE                           942  
000006EE  41FA 143E                943      LEA HUH(PC),A0
000006F2                           944m     PRINT_STR A0,D3
000006F2                           945m LOOP_30
000006F2  0C10 0000                946m     CMP.B #NULL,(A0)                                ; 0 -> DONE
000006F6  6700 0016                947m     BEQ EXIT_30
000006FA                           948mm     PRINT_CHAR (A0)+,D3
000006FA                           949mm WAIT_FOR_READY_31                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
000006FA                 TRUE      950mm     IFEQ DEBUG
000006FA  1639 00C00003            951mm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
00000700  0803 0002                952mm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
00000704  67F4                     953mm         BEQ WAIT_FOR_READY_31                       ; NO SPACE, CHECK AGAIN
00000706  13D8 00C00007            954mm         MOVE.B (A0)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
0000070C                           955mm     ENDC
0000070C                           956mm 
0000070C                 FALSE     957mm     IFNE DEBUG
0000070C                           958mm     ENDC
0000070C                           959mm 
0000070C                           960mm     ENDM
0000070C  60E4                     961m     BRA LOOP_30
0000070E                           962m EXIT_30
0000070E                           963m     ENDM
0000070E                           964  
0000070E  6000 FEEA                965      BRA MAIN_LOOP
00000712                           966  
00000712                           967  ; commands
00000712                           968  ON
00000712  41FA 1539                969      LEA FROM(PC),A0
00000716                           970m     PRINT_STR A0,D3
00000716                           971m LOOP_32
00000716  0C10 0000                972m     CMP.B #NULL,(A0)                                ; 0 -> DONE
0000071A  6700 0016                973m     BEQ EXIT_32
0000071E                           974mm     PRINT_CHAR (A0)+,D3
0000071E                           975mm WAIT_FOR_READY_33                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
0000071E                 TRUE      976mm     IFEQ DEBUG
0000071E  1639 00C00003            977mm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
00000724  0803 0002                978mm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
00000728  67F4                     979mm         BEQ WAIT_FOR_READY_33                       ; NO SPACE, CHECK AGAIN
0000072A  13D8 00C00007            980mm         MOVE.B (A0)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00000730                           981mm     ENDC
00000730                           982mm 
00000730                 FALSE     983mm     IFNE DEBUG
00000730                           984mm     ENDC
00000730                           985mm 
00000730                           986mm     ENDM
00000730  60E4                     987m     BRA LOOP_32
00000732                           988m EXIT_32
00000732                           989m     ENDM
00000732                           990  
00000732  13FC 0008 00C0001D       991      MOVE.B #$8,DUART_SET_OPR
0000073A                           992  
0000073A  6000 FEBE                993      BRA MAIN_LOOP
0000073E                           994      
0000073E                           995  
0000073E                           996  OFF
0000073E  41FA 150D                997      LEA FROM(PC),A0
00000742                           998m     PRINT_STR A0,D3
00000742                           999m LOOP_34
00000742  0C10 0000               1000m     CMP.B #NULL,(A0)                                ; 0 -> DONE
00000746  6700 0016               1001m     BEQ EXIT_34
0000074A                          1002mm     PRINT_CHAR (A0)+,D3
0000074A                          1003mm WAIT_FOR_READY_35                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
0000074A                 TRUE     1004mm     IFEQ DEBUG
0000074A  1639 00C00003           1005mm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
00000750  0803 0002               1006mm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
00000754  67F4                    1007mm         BEQ WAIT_FOR_READY_35                       ; NO SPACE, CHECK AGAIN
00000756  13D8 00C00007           1008mm         MOVE.B (A0)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
0000075C                          1009mm     ENDC
0000075C                          1010mm 
0000075C                 FALSE    1011mm     IFNE DEBUG
0000075C                          1012mm     ENDC
0000075C                          1013mm 
0000075C                          1014mm     ENDM
0000075C  60E4                    1015m     BRA LOOP_34
0000075E                          1016m EXIT_34
0000075E                          1017m     ENDM
0000075E                          1018  
0000075E  13FC 0008 00C0001F      1019      MOVE.B #$8,DUART_RESET_OPR
00000766  6000 FE92               1020      BRA MAIN_LOOP
0000076A                          1021  
0000076A                          1022  H
0000076A  41FA 12AF               1023      LEA HELP(PC),A0
0000076E  6000 0006               1024      BRA PRINTSTR
00000772                          1025  
00000772                          1026  V
00000772  41FA 14FA               1027      LEA VERSION(PC),A0
00000776                          1028  PRINTSTR
00000776                          1029m     PRINT_STR A0,D3    
00000776                          1030m LOOP_36
00000776  0C10 0000               1031m     CMP.B #NULL,(A0)                                ; 0 -> DONE
0000077A  6700 0016               1032m     BEQ EXIT_36
0000077E                          1033mm     PRINT_CHAR (A0)+,D3
0000077E                          1034mm WAIT_FOR_READY_37                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
0000077E                 TRUE     1035mm     IFEQ DEBUG
0000077E  1639 00C00003           1036mm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
00000784  0803 0002               1037mm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
00000788  67F4                    1038mm         BEQ WAIT_FOR_READY_37                       ; NO SPACE, CHECK AGAIN
0000078A  13D8 00C00007           1039mm         MOVE.B (A0)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00000790                          1040mm     ENDC
00000790                          1041mm 
00000790                 FALSE    1042mm     IFNE DEBUG
00000790                          1043mm     ENDC
00000790                          1044mm 
00000790                          1045mm     ENDM
00000790  60E4                    1046m     BRA LOOP_36
00000792                          1047m EXIT_36
00000792                          1048m     ENDM
00000792  6000 FE66               1049      BRA MAIN_LOOP
00000796                          1050  
00000796                          1051  R
00000796  2047                    1052      MOVE.L D7,A0                                    ; address accumulator -> address register
00000798  7E00                    1053      MOVE.L #0,D7                                    ;clear the now used address accumulator
0000079A  2410                    1054      MOVE.L (A0),D2                                  ; read the memory and print it
0000079C                          1055m     PRINT_REG D2,D3,D4,D5,A0
0000079C  41FA 1476               1056m     LEA OX(PC),A0
000007A0                          1057mm     PRINT_STR A0,D3
000007A0                          1058mm LOOP_39
000007A0  0C10 0000               1059mm     CMP.B #NULL,(A0)                                ; 0 -> DONE
000007A4  6700 0016               1060mm     BEQ EXIT_39
000007A8                          1061mmm     PRINT_CHAR (A0)+,D3
000007A8                          1062mmm WAIT_FOR_READY_40                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
000007A8                 TRUE     1063mmm     IFEQ DEBUG
000007A8  1639 00C00003           1064mmm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
000007AE  0803 0002               1065mmm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
000007B2  67F4                    1066mmm         BEQ WAIT_FOR_READY_40                       ; NO SPACE, CHECK AGAIN
000007B4  13D8 00C00007           1067mmm         MOVE.B (A0)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
000007BA                          1068mmm     ENDC
000007BA                          1069mmm 
000007BA                 FALSE    1070mmm     IFNE DEBUG
000007BA                          1071mmm     ENDC
000007BA                          1072mmm 
000007BA                          1073mmm     ENDM
000007BA  60E4                    1074mm     BRA LOOP_39
000007BC                          1075mm EXIT_39
000007BC                          1076mm     ENDM
000007BC  7A07                    1077m     MOVE.L #7,D5                                    ; LOOP ROUND ALL 8 HEX CHARACTERS OF 4 BITS EACH
000007BE                          1078m LOOP_38
000007BE                          1079mm     BIN2HEX D2,D4,A0
000007BE  41FA 13D0               1080mm     LEA BIN2HEX_LUT(PC),A0                          ; LOAD THE LOOKUP TABLE
000007C2  E99A                    1081mm     ROL.L #4,D2                                     ; SHIFT THE TOP 4 BITS DOWN TO BOTTOM OF THE REGISTER THE AND MASK OFF EVERYTHING ELSE
000007C4  1802                    1082mm     MOVE.B D2,D4
000007C6  0284 0000000F           1083mm     ANDI.L #$F,D4
000007CC  1830 4000               1084mm     MOVE.B 0(A0,D4),D4                              ; USE THAT AS AN INDEX INTO THE LUT
000007D0                          1085mm     ENDM
000007D0                          1086mm     PRINT_CHAR D4,D3
000007D0                          1087mm WAIT_FOR_READY_42                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
000007D0                 TRUE     1088mm     IFEQ DEBUG
000007D0  1639 00C00003           1089mm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
000007D6  0803 0002               1090mm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
000007DA  67F4                    1091mm         BEQ WAIT_FOR_READY_42                       ; NO SPACE, CHECK AGAIN
000007DC  13C4 00C00007           1092mm         MOVE.B D4,DUART_TXA                         ; SEND THE NEXT CHARACTER
000007E2                          1093mm     ENDC
000007E2                          1094mm 
000007E2                 FALSE    1095mm     IFNE DEBUG
000007E2                          1096mm     ENDC
000007E2                          1097mm 
000007E2                          1098mm     ENDM
000007E2  57CD FFDA               1099m     DBEQ D5,LOOP_38
000007E6                          1100m     ENDM
000007E6                          1101      
000007E6                          1102m     PRINT_CHAR #32,D3
000007E6                          1103m WAIT_FOR_READY_43                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
000007E6                 TRUE     1104m     IFEQ DEBUG
000007E6  1639 00C00003           1105m         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
000007EC  0803 0002               1106m         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
000007F0  67F4                    1107m         BEQ WAIT_FOR_READY_43                       ; NO SPACE, CHECK AGAIN
000007F2  13FC 0020 00C00007      1108m         MOVE.B #32,DUART_TXA                            ; SEND THE NEXT CHARACTER
000007FA                          1109m     ENDC
000007FA                          1110m 
000007FA                 FALSE    1111m     IFNE DEBUG
000007FA                          1112m     ENDC
000007FA                          1113m 
000007FA                          1114m     ENDM
000007FA                          1115  
000007FA  E19A                    1116      ROL.L #8,D2
000007FC                          1117m     PRINT_CHAR D2,D3
000007FC                          1118m WAIT_FOR_READY_44                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
000007FC                 TRUE     1119m     IFEQ DEBUG
000007FC  1639 00C00003           1120m         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
00000802  0803 0002               1121m         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
00000806  67F4                    1122m         BEQ WAIT_FOR_READY_44                       ; NO SPACE, CHECK AGAIN
00000808  13C2 00C00007           1123m         MOVE.B D2,DUART_TXA                         ; SEND THE NEXT CHARACTER
0000080E                          1124m     ENDC
0000080E                          1125m 
0000080E                 FALSE    1126m     IFNE DEBUG
0000080E                          1127m     ENDC
0000080E                          1128m 
0000080E                          1129m     ENDM
0000080E  E19A                    1130      ROL.L #8,D2
00000810                          1131m     PRINT_CHAR D2,D3
00000810                          1132m WAIT_FOR_READY_45                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000810                 TRUE     1133m     IFEQ DEBUG
00000810  1639 00C00003           1134m         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
00000816  0803 0002               1135m         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
0000081A  67F4                    1136m         BEQ WAIT_FOR_READY_45                       ; NO SPACE, CHECK AGAIN
0000081C  13C2 00C00007           1137m         MOVE.B D2,DUART_TXA                         ; SEND THE NEXT CHARACTER
00000822                          1138m     ENDC
00000822                          1139m 
00000822                 FALSE    1140m     IFNE DEBUG
00000822                          1141m     ENDC
00000822                          1142m 
00000822                          1143m     ENDM
00000822  E19A                    1144      ROL.L #8,D2
00000824                          1145m     PRINT_CHAR D2,D3
00000824                          1146m WAIT_FOR_READY_46                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000824                 TRUE     1147m     IFEQ DEBUG
00000824  1639 00C00003           1148m         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
0000082A  0803 0002               1149m         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
0000082E  67F4                    1150m         BEQ WAIT_FOR_READY_46                       ; NO SPACE, CHECK AGAIN
00000830  13C2 00C00007           1151m         MOVE.B D2,DUART_TXA                         ; SEND THE NEXT CHARACTER
00000836                          1152m     ENDC
00000836                          1153m 
00000836                 FALSE    1154m     IFNE DEBUG
00000836                          1155m     ENDC
00000836                          1156m 
00000836                          1157m     ENDM
00000836  E19A                    1158      ROL.L #8,D2
00000838                          1159m     PRINT_CHAR D2,D3
00000838                          1160m WAIT_FOR_READY_47                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000838                 TRUE     1161m     IFEQ DEBUG
00000838  1639 00C00003           1162m         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
0000083E  0803 0002               1163m         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
00000842  67F4                    1164m         BEQ WAIT_FOR_READY_47                       ; NO SPACE, CHECK AGAIN
00000844  13C2 00C00007           1165m         MOVE.B D2,DUART_TXA                         ; SEND THE NEXT CHARACTER
0000084A                          1166m     ENDC
0000084A                          1167m 
0000084A                 FALSE    1168m     IFNE DEBUG
0000084A                          1169m     ENDC
0000084A                          1170m 
0000084A                          1171m     ENDM
0000084A                          1172  
0000084A                          1173m     PRINT_CRLF D3,A0
0000084A  41FA 13C2               1174m     LEA CRLF(PC),A0
0000084E                          1175mm     PRINT_STR A0,D3
0000084E                          1176mm LOOP_49
0000084E  0C10 0000               1177mm     CMP.B #NULL,(A0)                                ; 0 -> DONE
00000852  6700 0016               1178mm     BEQ EXIT_49
00000856                          1179mmm     PRINT_CHAR (A0)+,D3
00000856                          1180mmm WAIT_FOR_READY_50                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000856                 TRUE     1181mmm     IFEQ DEBUG
00000856  1639 00C00003           1182mmm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
0000085C  0803 0002               1183mmm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
00000860  67F4                    1184mmm         BEQ WAIT_FOR_READY_50                       ; NO SPACE, CHECK AGAIN
00000862  13D8 00C00007           1185mmm         MOVE.B (A0)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00000868                          1186mmm     ENDC
00000868                          1187mmm 
00000868                 FALSE    1188mmm     IFNE DEBUG
00000868                          1189mmm     ENDC
00000868                          1190mmm 
00000868                          1191mmm     ENDM
00000868  60E4                    1192mm     BRA LOOP_49
0000086A                          1193mm EXIT_49
0000086A                          1194mm     ENDM
0000086A                          1195m     ENDM
0000086A                          1196      
0000086A  6000 FD8E               1197      BRA MAIN_LOOP
0000086E                          1198  
0000086E                          1199  W
0000086E                          1200      FOR D6 = #0 TO #7 DO                                ; read 4 bytes
0000086E  3C3C 0000               1201s     MOVE.W  #0,D6
00000872  6000 0046               1202s     BRA _20000005
00000876                          1203s _20000004
00000876  E98D                    1204          LSL.L #4,D5                                     ; make what we have so far more significant
00000878                          1205m         WAIT_CHAR D2,D3                                 ; next character -> D2
00000878                          1206m WAIT_FOR_READY_51                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000878                 TRUE     1207m     IFEQ DEBUG
00000878  1639 00C00003           1208m         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
0000087E  0803 0000               1209m         BTST #0,D3                                  ; CHECK FOR CHARACTER
00000882  67F4                    1210m         BEQ WAIT_FOR_READY_51                       ; NOTHING, CHECK AGAIN
00000884                          1211m     ENDC
00000884                          1212m 
00000884                          1213mm     READ_CHAR D2
00000884                 TRUE     1214mm     IFEQ DEBUG
00000884  1439 00C00007           1215mm         MOVE.B DUART_RXA,D2                         ; GOT A CHARACTER, READ IT
0000088A                          1216mm     ENDC
0000088A                 FALSE    1217mm     IFNE DEBUG
0000088A                          1218mm     ENDC
0000088A                          1219mm 
0000088A  B43C 001B               1220mm     CMP.B #$1B,D2                                   ; CHECK FOR ESCAPE AND GO TO START
0000088E  6700 FB70               1221mm     BEQ START
00000892                          1222mm     ENDM
00000892                          1223m 
00000892                 TRUE     1224m     IFEQ DEBUG
00000892                          1225mm         PRINT_CHAR D2,D3                            ; ECHO IT BACK
00000892                          1226mm WAIT_FOR_READY_53                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000892                 TRUE     1227mm     IFEQ DEBUG
00000892  1639 00C00003           1228mm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
00000898  0803 0002               1229mm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
0000089C  67F4                    1230mm         BEQ WAIT_FOR_READY_53                       ; NO SPACE, CHECK AGAIN
0000089E  13C2 00C00007           1231mm         MOVE.B D2,DUART_TXA                         ; SEND THE NEXT CHARACTER
000008A4                          1232mm     ENDC
000008A4                          1233mm 
000008A4                 FALSE    1234mm     IFNE DEBUG
000008A4                          1235mm     ENDC
000008A4                          1236mm 
000008A4                          1237mm     ENDM
000008A4                          1238m     ENDC
000008A4                          1239m     ENDM
000008A4                          1240m         HEX2BIN D2,D2,A0                                ; convert to binary -> D2
000008A4  41FA 12FA               1241m     LEA HEX2BIN_LUT(PC),A0                          ; LOAD THE LOOKUP TABLE
000008A8  0402 0030               1242m     SUB.B #'0',D2                                   ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
000008AC  C4BC 000000FF           1243m     AND.L #$FF,D2                                   ; IGNORE THE TOP 3 BYTES
000008B2  1430 2000               1244m     MOVE.B 0(A0,D2),D2                              ; USE THAT AS AN INDEX INTO THE LUT   
000008B6                          1245m     ENDM
000008B6  8A02                    1246          OR.B D2,D5
000008B8                          1247      ENDF
000008B8  5246                    1248s     ADD.W   #1,D6
000008BA                          1249s _20000005
000008BA  BC7C 0007               1250s     CMP.W   #7,D6
000008BE  6FB6                    1251s     BLE _20000004
000008C0                          1252  
000008C0                          1253m     PRINT_CRLF D3,A0
000008C0  41FA 134C               1254m     LEA CRLF(PC),A0
000008C4                          1255mm     PRINT_STR A0,D3
000008C4                          1256mm LOOP_56
000008C4  0C10 0000               1257mm     CMP.B #NULL,(A0)                                ; 0 -> DONE
000008C8  6700 0016               1258mm     BEQ EXIT_56
000008CC                          1259mmm     PRINT_CHAR (A0)+,D3
000008CC                          1260mmm WAIT_FOR_READY_57                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
000008CC                 TRUE     1261mmm     IFEQ DEBUG
000008CC  1639 00C00003           1262mmm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
000008D2  0803 0002               1263mmm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
000008D6  67F4                    1264mmm         BEQ WAIT_FOR_READY_57                       ; NO SPACE, CHECK AGAIN
000008D8  13D8 00C00007           1265mmm         MOVE.B (A0)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
000008DE                          1266mmm     ENDC
000008DE                          1267mmm 
000008DE                 FALSE    1268mmm     IFNE DEBUG
000008DE                          1269mmm     ENDC
000008DE                          1270mmm 
000008DE                          1271mmm     ENDM
000008DE  60E4                    1272mm     BRA LOOP_56
000008E0                          1273mm EXIT_56
000008E0                          1274mm     ENDM
000008E0                          1275m     ENDM
000008E0                          1276  
000008E0  2047                    1277      MOVE.L D7,A0                                    ; address accumulator -> address register
000008E2  7E00                    1278      MOVE.L #0,D7                                    ; clear the now used address accumulator
000008E4                          1279  
000008E4  2085                    1280      MOVE.L D5,(A0)                                  ; write the data
000008E6                          1281  
000008E6  6000 FD12               1282      BRA MAIN_LOOP
000008EA                          1283  
000008EA                          1284  ; register map for S
000008EA                          1285  ; A0 - start address
000008EA                          1286  ; A1 - offset
000008EA                          1287  ; A2 - next address to write
000008EA                          1288  ; A3 - next location (jmp)
000008EA                          1289  ; A4 - Working Address Register
000008EA                          1290  ; D0 - record count
000008EA                          1291  ; D1 - 'S', record type, data byte, done flag (0x00000000 = continue, 0xFFFFFFFF = done)
000008EA                          1292  ; D2 - checksum
000008EA                          1293  ; D3 - data byte count
000008EA                          1294  ; D4 - read address, moved into A2
000008EA                          1295  ; D5 - temp
000008EA                          1296  ; D6 - temp
000008EA                          1297  ; D7 - temp
000008EA                          1298  S
000008EA  2078 0000               1299      MOVE.L 0,A0                                     ; start address -> A0
000008EE  2247                    1300      MOVE.L D7,A1                                    ; grab the address accumulator (offset) into A1
000008F0                          1301      
000008F0  7000                    1302      MOVE.L #0,D0                                    ; count of records read -> D0
000008F2                          1303          
000008F2                          1304  WAIT_FOR_SRECORD                                    ; wait for the start of a record, indicated by 'S'
000008F2                          1305m     DOWNLOAD D1
000008F2                          1306m WAIT_FOR_READY_58                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
000008F2                          1307m 
000008F2  1239 00C00003           1308m     MOVE.B DUART_SRA,D1                             ; CHECK FOR COMMAND
000008F8  0801 0000               1309m     BTST #0,D1                                      ; CHECK FOR CHARACTER
000008FC  6700 0010               1310m     BEQ CONTINUE_58                                 ; NOTHING, CONTINUE
00000900                          1311m 
00000900                          1312mm     READ_CHAR D1                                    ; WE're not going to do anything with it, just check for escape
00000900                 TRUE     1313mm     IFEQ DEBUG
00000900  1239 00C00007           1314mm         MOVE.B DUART_RXA,D1                         ; GOT A CHARACTER, READ IT
00000906                          1315mm     ENDC
00000906                 FALSE    1316mm     IFNE DEBUG
00000906                          1317mm     ENDC
00000906                          1318mm 
00000906  B23C 001B               1319mm     CMP.B #$1B,D1                                   ; CHECK FOR ESCAPE AND GO TO START
0000090A  6700 FAF4               1320mm     BEQ START
0000090E                          1321mm     ENDM
0000090E                          1322m CONTINUE_58
0000090E  1239 00C00013           1323m     MOVE.B DUART_SRB,D1                             ; READ DOWNLOAD STATUS REGISTER
00000914  0801 0000               1324m     BTST #0,D1                                      ; CHECK FOR CHARACTER
00000918  67D8                    1325m     BEQ WAIT_FOR_READY_58                           ; NOTHING, CHECK AGAIN
0000091A                          1326m     
0000091A  1239 00C00017           1327m     MOVE.B DUART_RXB,D1                             ; GOT A CHARACTER, READ IT
00000920  13C1 00E00001           1328m     MOVE.B D1,DISPLAY                               ; ECHO TO THE DISPLAY
00000926                          1329m 
00000926                          1330m     ENDM
00000926  B23C 0053               1331      CMP.B #'S',D1                                   ; found S?
0000092A  66C6                    1332      BNE WAIT_FOR_SRECORD                            ; nope, keep waiting
0000092C                          1333      
0000092C                          1334m     PRINT_CHAR #'S',D5                              ; print the S
0000092C                          1335m WAIT_FOR_READY_60                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
0000092C                 TRUE     1336m     IFEQ DEBUG
0000092C  1A39 00C00003           1337m         MOVE.B DUART_SRA,D5                         ; READ STATUS REGISTER
00000932  0805 0002               1338m         BTST #2,D5                                  ; CHECK FOR SPACE TO SEND
00000936  67F4                    1339m         BEQ WAIT_FOR_READY_60                       ; NO SPACE, CHECK AGAIN
00000938  13FC 0053 00C00007      1340m         MOVE.B #'S',DUART_TXA                           ; SEND THE NEXT CHARACTER
00000940                          1341m     ENDC
00000940                          1342m 
00000940                 FALSE    1343m     IFNE DEBUG
00000940                          1344m     ENDC
00000940                          1345m 
00000940                          1346m     ENDM
00000940  5280                    1347      ADD.L #1,D0                                     ; read another S record, increment count
00000942                          1348      
00000942                          1349m     DOWNLOAD D1                                     ; read the record identifier and echo it back
00000942                          1350m WAIT_FOR_READY_61                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000942                          1351m 
00000942  1239 00C00003           1352m     MOVE.B DUART_SRA,D1                             ; CHECK FOR COMMAND
00000948  0801 0000               1353m     BTST #0,D1                                      ; CHECK FOR CHARACTER
0000094C  6700 0010               1354m     BEQ CONTINUE_61                                 ; NOTHING, CONTINUE
00000950                          1355m 
00000950                          1356mm     READ_CHAR D1                                    ; WE're not going to do anything with it, just check for escape
00000950                 TRUE     1357mm     IFEQ DEBUG
00000950  1239 00C00007           1358mm         MOVE.B DUART_RXA,D1                         ; GOT A CHARACTER, READ IT
00000956                          1359mm     ENDC
00000956                 FALSE    1360mm     IFNE DEBUG
00000956                          1361mm     ENDC
00000956                          1362mm 
00000956  B23C 001B               1363mm     CMP.B #$1B,D1                                   ; CHECK FOR ESCAPE AND GO TO START
0000095A  6700 FAA4               1364mm     BEQ START
0000095E                          1365mm     ENDM
0000095E                          1366m CONTINUE_61
0000095E  1239 00C00013           1367m     MOVE.B DUART_SRB,D1                             ; READ DOWNLOAD STATUS REGISTER
00000964  0801 0000               1368m     BTST #0,D1                                      ; CHECK FOR CHARACTER
00000968  67D8                    1369m     BEQ WAIT_FOR_READY_61                           ; NOTHING, CHECK AGAIN
0000096A                          1370m     
0000096A  1239 00C00017           1371m     MOVE.B DUART_RXB,D1                             ; GOT A CHARACTER, READ IT
00000970  13C1 00E00001           1372m     MOVE.B D1,DISPLAY                               ; ECHO TO THE DISPLAY
00000976                          1373m 
00000976                          1374m     ENDM
00000976                          1375m     PRINT_CHAR D1,D5
00000976                          1376m WAIT_FOR_READY_63                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000976                 TRUE     1377m     IFEQ DEBUG
00000976  1A39 00C00003           1378m         MOVE.B DUART_SRA,D5                         ; READ STATUS REGISTER
0000097C  0805 0002               1379m         BTST #2,D5                                  ; CHECK FOR SPACE TO SEND
00000980  67F4                    1380m         BEQ WAIT_FOR_READY_63                       ; NO SPACE, CHECK AGAIN
00000982  13C1 00C00007           1381m         MOVE.B D1,DUART_TXA                         ; SEND THE NEXT CHARACTER
00000988                          1382m     ENDC
00000988                          1383m 
00000988                 FALSE    1384m     IFNE DEBUG
00000988                          1385m     ENDC
00000988                          1386m 
00000988                          1387m     ENDM
00000988                          1388  
00000988  7400                    1389      MOVE.L #0,D2                                    ; clear the checksum
0000098A                          1390  
0000098A                          1391m     DOWNLOAD_BYTE D3,D5,D6,D7,D2,A4
0000098A  1E3C 0002               1392m     MOVE.B #2,D7
0000098E                          1393m     WHILE.B D7 <GT> 0 DO
0000098E                          1394ms _10000000
0000098E  BE38 0000               1395ms     CMP.B   0,D7
00000992  6F00 0062               1396ms     BLE _10000001
00000996  E98B                    1397m         LSL.L #4,D3                                 ; IT's OK to do this first, because we are either starting from 0, 
00000998                          1398mm         DOWNLOAD D5                                 ; OR WE ARE READING THE NEXT BYTE ALONG, SO NEED TO SHIFT UP THE PREVIOUS ONE
00000998                          1399mm WAIT_FOR_READY_65                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000998                          1400mm 
00000998  1A39 00C00003           1401mm     MOVE.B DUART_SRA,D5                             ; CHECK FOR COMMAND
0000099E  0805 0000               1402mm     BTST #0,D5                                      ; CHECK FOR CHARACTER
000009A2  6700 0010               1403mm     BEQ CONTINUE_65                                 ; NOTHING, CONTINUE
000009A6                          1404mm 
000009A6                          1405mmm     READ_CHAR D5                                    ; WE're not going to do anything with it, just check for escape
000009A6                 TRUE     1406mmm     IFEQ DEBUG
000009A6  1A39 00C00007           1407mmm         MOVE.B DUART_RXA,D5                         ; GOT A CHARACTER, READ IT
000009AC                          1408mmm     ENDC
000009AC                 FALSE    1409mmm     IFNE DEBUG
000009AC                          1410mmm     ENDC
000009AC                          1411mmm 
000009AC  BA3C 001B               1412mmm     CMP.B #$1B,D5                                   ; CHECK FOR ESCAPE AND GO TO START
000009B0  6700 FA4E               1413mmm     BEQ START
000009B4                          1414mmm     ENDM
000009B4                          1415mm CONTINUE_65
000009B4  1A39 00C00013           1416mm     MOVE.B DUART_SRB,D5                             ; READ DOWNLOAD STATUS REGISTER
000009BA  0805 0000               1417mm     BTST #0,D5                                      ; CHECK FOR CHARACTER
000009BE  67D8                    1418mm     BEQ WAIT_FOR_READY_65                           ; NOTHING, CHECK AGAIN
000009C0                          1419mm     
000009C0  1A39 00C00017           1420mm     MOVE.B DUART_RXB,D5                             ; GOT A CHARACTER, READ IT
000009C6  13C5 00E00001           1421mm     MOVE.B D5,DISPLAY                               ; ECHO TO THE DISPLAY
000009CC                          1422mm 
000009CC                          1423mm     ENDM
000009CC                          1424mm         PRINT_CHAR D5,D6
000009CC                          1425mm WAIT_FOR_READY_67                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
000009CC                 TRUE     1426mm     IFEQ DEBUG
000009CC  1C39 00C00003           1427mm         MOVE.B DUART_SRA,D6                         ; READ STATUS REGISTER
000009D2  0806 0002               1428mm         BTST #2,D6                                  ; CHECK FOR SPACE TO SEND
000009D6  67F4                    1429mm         BEQ WAIT_FOR_READY_67                       ; NO SPACE, CHECK AGAIN
000009D8  13C5 00C00007           1430mm         MOVE.B D5,DUART_TXA                         ; SEND THE NEXT CHARACTER
000009DE                          1431mm     ENDC
000009DE                          1432mm 
000009DE                 FALSE    1433mm     IFNE DEBUG
000009DE                          1434mm     ENDC
000009DE                          1435mm 
000009DE                          1436mm     ENDM
000009DE                          1437mm         HEX2BIN D5,D5,A4
000009DE  49FA 11C0               1438mm     LEA HEX2BIN_LUT(PC),A4                          ; LOAD THE LOOKUP TABLE
000009E2  0405 0030               1439mm     SUB.B #'0',D5                                   ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
000009E6  CABC 000000FF           1440mm     AND.L #$FF,D5                                   ; IGNORE THE TOP 3 BYTES
000009EC  1A34 5000               1441mm     MOVE.B 0(A4,D5),D5                              ; USE THAT AS AN INDEX INTO THE LUT   
000009F0                          1442mm     ENDM
000009F0  8605                    1443m         OR.B D5,D3
000009F2  5307                    1444m         SUB.B #1,D7
000009F4                          1445m     ENDW
000009F4  6098                    1446ms     BRA _10000000
000009F6                          1447ms _10000001
000009F6                          1448m 
000009F6  7A00                    1449m     MOVE.L #0,D5                                    ; REXTRACT LATEST BYTE OF ADDRESS AND ADD INTO CHECKSUM
000009F8  1A03                    1450m     MOVE.B D3,D5
000009FA  D483                    1451m     ADD.L D3,D2
000009FC                          1452m 
000009FC                          1453m     ENDM
000009FC                          1454  
000009FC                          1455      IF.B D1 <EQ> #'0' THEN.L                        ; header, just ignore it
000009FC  B23C 0030               1456s     CMP.B   #'0',D1
00000A00  6600 002A               1457s     BNE.L   _00000002
00000A04                          1458m         PRINT_CRLF D5,A4
00000A04  49FA 1208               1459m     LEA CRLF(PC),A4
00000A08                          1460mm     PRINT_STR A4,D5
00000A08                          1461mm LOOP_70
00000A08  0C14 0000               1462mm     CMP.B #NULL,(A4)                                ; 0 -> DONE
00000A0C  6700 0016               1463mm     BEQ EXIT_70
00000A10                          1464mmm     PRINT_CHAR (A4)+,D5
00000A10                          1465mmm WAIT_FOR_READY_71                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000A10                 TRUE     1466mmm     IFEQ DEBUG
00000A10  1A39 00C00003           1467mmm         MOVE.B DUART_SRA,D5                         ; READ STATUS REGISTER
00000A16  0805 0002               1468mmm         BTST #2,D5                                  ; CHECK FOR SPACE TO SEND
00000A1A  67F4                    1469mmm         BEQ WAIT_FOR_READY_71                       ; NO SPACE, CHECK AGAIN
00000A1C  13DC 00C00007           1470mmm         MOVE.B (A4)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00000A22                          1471mmm     ENDC
00000A22                          1472mmm 
00000A22                 FALSE    1473mmm     IFNE DEBUG
00000A22                          1474mmm     ENDC
00000A22                          1475mmm 
00000A22                          1476mmm     ENDM
00000A22  60E4                    1477mm     BRA LOOP_70
00000A24                          1478mm EXIT_70
00000A24                          1479mm     ENDM
00000A24                          1480m     ENDM
00000A24  6000 FECC               1481          BRA WAIT_FOR_SRECORD
00000A28                          1482      ELSE
00000A28  6000 03DE               1483s     BRA _00000003
00000A2C                          1484s _00000002
00000A2C                          1485          IF.B D1 <EQ> #'1' OR.B D1 <EQ> #'2' THEN.L  ; 16 or 24 bit address data record
00000A2C  B23C 0031               1486s     CMP.B   #'1',D1
00000A30  6708                    1487s     BEQ.S   _00000004
00000A32  B23C 0032               1488s     CMP.B   #'2',D1
00000A36  6600 01F0               1489s     BNE.L   _00000005
00000A3A                          1490s _00000004
00000A3A  5783                    1491              SUB.L #3,D3                             ; subtract three bytes for 16 bit address and 1 byte checksum
00000A3C                          1492  
00000A3C  7800                    1493              MOVE.L #0,D4                            ; read two bytes of address
00000A3E                          1494m             DOWNLOAD_BYTE D4,D5,D6,D7,D2,A4         ; first byte                                    
00000A3E  1E3C 0002               1495m     MOVE.B #2,D7
00000A42                          1496m     WHILE.B D7 <GT> 0 DO
00000A42                          1497ms _10000002
00000A42  BE38 0000               1498ms     CMP.B   0,D7
00000A46  6F00 0062               1499ms     BLE _10000003
00000A4A  E98C                    1500m         LSL.L #4,D4                                 ; IT's OK to do this first, because we are either starting from 0, 
00000A4C                          1501mm         DOWNLOAD D5                                 ; OR WE ARE READING THE NEXT BYTE ALONG, SO NEED TO SHIFT UP THE PREVIOUS ONE
00000A4C                          1502mm WAIT_FOR_READY_73                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000A4C                          1503mm 
00000A4C  1A39 00C00003           1504mm     MOVE.B DUART_SRA,D5                             ; CHECK FOR COMMAND
00000A52  0805 0000               1505mm     BTST #0,D5                                      ; CHECK FOR CHARACTER
00000A56  6700 0010               1506mm     BEQ CONTINUE_73                                 ; NOTHING, CONTINUE
00000A5A                          1507mm 
00000A5A                          1508mmm     READ_CHAR D5                                    ; WE're not going to do anything with it, just check for escape
00000A5A                 TRUE     1509mmm     IFEQ DEBUG
00000A5A  1A39 00C00007           1510mmm         MOVE.B DUART_RXA,D5                         ; GOT A CHARACTER, READ IT
00000A60                          1511mmm     ENDC
00000A60                 FALSE    1512mmm     IFNE DEBUG
00000A60                          1513mmm     ENDC
00000A60                          1514mmm 
00000A60  BA3C 001B               1515mmm     CMP.B #$1B,D5                                   ; CHECK FOR ESCAPE AND GO TO START
00000A64  6700 F99A               1516mmm     BEQ START
00000A68                          1517mmm     ENDM
00000A68                          1518mm CONTINUE_73
00000A68  1A39 00C00013           1519mm     MOVE.B DUART_SRB,D5                             ; READ DOWNLOAD STATUS REGISTER
00000A6E  0805 0000               1520mm     BTST #0,D5                                      ; CHECK FOR CHARACTER
00000A72  67D8                    1521mm     BEQ WAIT_FOR_READY_73                           ; NOTHING, CHECK AGAIN
00000A74                          1522mm     
00000A74  1A39 00C00017           1523mm     MOVE.B DUART_RXB,D5                             ; GOT A CHARACTER, READ IT
00000A7A  13C5 00E00001           1524mm     MOVE.B D5,DISPLAY                               ; ECHO TO THE DISPLAY
00000A80                          1525mm 
00000A80                          1526mm     ENDM
00000A80                          1527mm         PRINT_CHAR D5,D6
00000A80                          1528mm WAIT_FOR_READY_75                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000A80                 TRUE     1529mm     IFEQ DEBUG
00000A80  1C39 00C00003           1530mm         MOVE.B DUART_SRA,D6                         ; READ STATUS REGISTER
00000A86  0806 0002               1531mm         BTST #2,D6                                  ; CHECK FOR SPACE TO SEND
00000A8A  67F4                    1532mm         BEQ WAIT_FOR_READY_75                       ; NO SPACE, CHECK AGAIN
00000A8C  13C5 00C00007           1533mm         MOVE.B D5,DUART_TXA                         ; SEND THE NEXT CHARACTER
00000A92                          1534mm     ENDC
00000A92                          1535mm 
00000A92                 FALSE    1536mm     IFNE DEBUG
00000A92                          1537mm     ENDC
00000A92                          1538mm 
00000A92                          1539mm     ENDM
00000A92                          1540mm         HEX2BIN D5,D5,A4
00000A92  49FA 110C               1541mm     LEA HEX2BIN_LUT(PC),A4                          ; LOAD THE LOOKUP TABLE
00000A96  0405 0030               1542mm     SUB.B #'0',D5                                   ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
00000A9A  CABC 000000FF           1543mm     AND.L #$FF,D5                                   ; IGNORE THE TOP 3 BYTES
00000AA0  1A34 5000               1544mm     MOVE.B 0(A4,D5),D5                              ; USE THAT AS AN INDEX INTO THE LUT   
00000AA4                          1545mm     ENDM
00000AA4  8805                    1546m         OR.B D5,D4
00000AA6  5307                    1547m         SUB.B #1,D7
00000AA8                          1548m     ENDW
00000AA8  6098                    1549ms     BRA _10000002
00000AAA                          1550ms _10000003
00000AAA                          1551m 
00000AAA  7A00                    1552m     MOVE.L #0,D5                                    ; REXTRACT LATEST BYTE OF ADDRESS AND ADD INTO CHECKSUM
00000AAC  1A04                    1553m     MOVE.B D4,D5
00000AAE  D484                    1554m     ADD.L D4,D2
00000AB0                          1555m 
00000AB0                          1556m     ENDM
00000AB0                          1557m             DOWNLOAD_BYTE D4,D5,D6,D7,D2,A4         ; second one
00000AB0  1E3C 0002               1558m     MOVE.B #2,D7
00000AB4                          1559m     WHILE.B D7 <GT> 0 DO
00000AB4                          1560ms _10000004
00000AB4  BE38 0000               1561ms     CMP.B   0,D7
00000AB8  6F00 0062               1562ms     BLE _10000005
00000ABC  E98C                    1563m         LSL.L #4,D4                                 ; IT's OK to do this first, because we are either starting from 0, 
00000ABE                          1564mm         DOWNLOAD D5                                 ; OR WE ARE READING THE NEXT BYTE ALONG, SO NEED TO SHIFT UP THE PREVIOUS ONE
00000ABE                          1565mm WAIT_FOR_READY_78                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000ABE                          1566mm 
00000ABE  1A39 00C00003           1567mm     MOVE.B DUART_SRA,D5                             ; CHECK FOR COMMAND
00000AC4  0805 0000               1568mm     BTST #0,D5                                      ; CHECK FOR CHARACTER
00000AC8  6700 0010               1569mm     BEQ CONTINUE_78                                 ; NOTHING, CONTINUE
00000ACC                          1570mm 
00000ACC                          1571mmm     READ_CHAR D5                                    ; WE're not going to do anything with it, just check for escape
00000ACC                 TRUE     1572mmm     IFEQ DEBUG
00000ACC  1A39 00C00007           1573mmm         MOVE.B DUART_RXA,D5                         ; GOT A CHARACTER, READ IT
00000AD2                          1574mmm     ENDC
00000AD2                 FALSE    1575mmm     IFNE DEBUG
00000AD2                          1576mmm     ENDC
00000AD2                          1577mmm 
00000AD2  BA3C 001B               1578mmm     CMP.B #$1B,D5                                   ; CHECK FOR ESCAPE AND GO TO START
00000AD6  6700 F928               1579mmm     BEQ START
00000ADA                          1580mmm     ENDM
00000ADA                          1581mm CONTINUE_78
00000ADA  1A39 00C00013           1582mm     MOVE.B DUART_SRB,D5                             ; READ DOWNLOAD STATUS REGISTER
00000AE0  0805 0000               1583mm     BTST #0,D5                                      ; CHECK FOR CHARACTER
00000AE4  67D8                    1584mm     BEQ WAIT_FOR_READY_78                           ; NOTHING, CHECK AGAIN
00000AE6                          1585mm     
00000AE6  1A39 00C00017           1586mm     MOVE.B DUART_RXB,D5                             ; GOT A CHARACTER, READ IT
00000AEC  13C5 00E00001           1587mm     MOVE.B D5,DISPLAY                               ; ECHO TO THE DISPLAY
00000AF2                          1588mm 
00000AF2                          1589mm     ENDM
00000AF2                          1590mm         PRINT_CHAR D5,D6
00000AF2                          1591mm WAIT_FOR_READY_80                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000AF2                 TRUE     1592mm     IFEQ DEBUG
00000AF2  1C39 00C00003           1593mm         MOVE.B DUART_SRA,D6                         ; READ STATUS REGISTER
00000AF8  0806 0002               1594mm         BTST #2,D6                                  ; CHECK FOR SPACE TO SEND
00000AFC  67F4                    1595mm         BEQ WAIT_FOR_READY_80                       ; NO SPACE, CHECK AGAIN
00000AFE  13C5 00C00007           1596mm         MOVE.B D5,DUART_TXA                         ; SEND THE NEXT CHARACTER
00000B04                          1597mm     ENDC
00000B04                          1598mm 
00000B04                 FALSE    1599mm     IFNE DEBUG
00000B04                          1600mm     ENDC
00000B04                          1601mm 
00000B04                          1602mm     ENDM
00000B04                          1603mm         HEX2BIN D5,D5,A4
00000B04  49FA 109A               1604mm     LEA HEX2BIN_LUT(PC),A4                          ; LOAD THE LOOKUP TABLE
00000B08  0405 0030               1605mm     SUB.B #'0',D5                                   ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
00000B0C  CABC 000000FF           1606mm     AND.L #$FF,D5                                   ; IGNORE THE TOP 3 BYTES
00000B12  1A34 5000               1607mm     MOVE.B 0(A4,D5),D5                              ; USE THAT AS AN INDEX INTO THE LUT   
00000B16                          1608mm     ENDM
00000B16  8805                    1609m         OR.B D5,D4
00000B18  5307                    1610m         SUB.B #1,D7
00000B1A                          1611m     ENDW
00000B1A  6098                    1612ms     BRA _10000004
00000B1C                          1613ms _10000005
00000B1C                          1614m 
00000B1C  7A00                    1615m     MOVE.L #0,D5                                    ; REXTRACT LATEST BYTE OF ADDRESS AND ADD INTO CHECKSUM
00000B1E  1A04                    1616m     MOVE.B D4,D5
00000B20  D484                    1617m     ADD.L D4,D2
00000B22                          1618m 
00000B22                          1619m     ENDM
00000B22                          1620  
00000B22                          1621              IF.B D1 <EQ> #'2'  THEN.L               ; 24 bit address data record, read another byte
00000B22  B23C 0032               1622s     CMP.B   #'2',D1
00000B26  6600 0076               1623s     BNE.L   _00000006
00000B2A  5383                    1624                  SUB.L #1,D3                         ; subtract an extra bytes for 24 bit address    
00000B2C                          1625m                 DOWNLOAD_BYTE D4,D5,D6,D7,D2,A4     ; 3rd byte
00000B2C  1E3C 0002               1626m     MOVE.B #2,D7
00000B30                          1627m     WHILE.B D7 <GT> 0 DO
00000B30                          1628ms _10000006
00000B30  BE38 0000               1629ms     CMP.B   0,D7
00000B34  6F00 0062               1630ms     BLE _10000007
00000B38  E98C                    1631m         LSL.L #4,D4                                 ; IT's OK to do this first, because we are either starting from 0, 
00000B3A                          1632mm         DOWNLOAD D5                                 ; OR WE ARE READING THE NEXT BYTE ALONG, SO NEED TO SHIFT UP THE PREVIOUS ONE
00000B3A                          1633mm WAIT_FOR_READY_83                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000B3A                          1634mm 
00000B3A  1A39 00C00003           1635mm     MOVE.B DUART_SRA,D5                             ; CHECK FOR COMMAND
00000B40  0805 0000               1636mm     BTST #0,D5                                      ; CHECK FOR CHARACTER
00000B44  6700 0010               1637mm     BEQ CONTINUE_83                                 ; NOTHING, CONTINUE
00000B48                          1638mm 
00000B48                          1639mmm     READ_CHAR D5                                    ; WE're not going to do anything with it, just check for escape
00000B48                 TRUE     1640mmm     IFEQ DEBUG
00000B48  1A39 00C00007           1641mmm         MOVE.B DUART_RXA,D5                         ; GOT A CHARACTER, READ IT
00000B4E                          1642mmm     ENDC
00000B4E                 FALSE    1643mmm     IFNE DEBUG
00000B4E                          1644mmm     ENDC
00000B4E                          1645mmm 
00000B4E  BA3C 001B               1646mmm     CMP.B #$1B,D5                                   ; CHECK FOR ESCAPE AND GO TO START
00000B52  6700 F8AC               1647mmm     BEQ START
00000B56                          1648mmm     ENDM
00000B56                          1649mm CONTINUE_83
00000B56  1A39 00C00013           1650mm     MOVE.B DUART_SRB,D5                             ; READ DOWNLOAD STATUS REGISTER
00000B5C  0805 0000               1651mm     BTST #0,D5                                      ; CHECK FOR CHARACTER
00000B60  67D8                    1652mm     BEQ WAIT_FOR_READY_83                           ; NOTHING, CHECK AGAIN
00000B62                          1653mm     
00000B62  1A39 00C00017           1654mm     MOVE.B DUART_RXB,D5                             ; GOT A CHARACTER, READ IT
00000B68  13C5 00E00001           1655mm     MOVE.B D5,DISPLAY                               ; ECHO TO THE DISPLAY
00000B6E                          1656mm 
00000B6E                          1657mm     ENDM
00000B6E                          1658mm         PRINT_CHAR D5,D6
00000B6E                          1659mm WAIT_FOR_READY_85                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000B6E                 TRUE     1660mm     IFEQ DEBUG
00000B6E  1C39 00C00003           1661mm         MOVE.B DUART_SRA,D6                         ; READ STATUS REGISTER
00000B74  0806 0002               1662mm         BTST #2,D6                                  ; CHECK FOR SPACE TO SEND
00000B78  67F4                    1663mm         BEQ WAIT_FOR_READY_85                       ; NO SPACE, CHECK AGAIN
00000B7A  13C5 00C00007           1664mm         MOVE.B D5,DUART_TXA                         ; SEND THE NEXT CHARACTER
00000B80                          1665mm     ENDC
00000B80                          1666mm 
00000B80                 FALSE    1667mm     IFNE DEBUG
00000B80                          1668mm     ENDC
00000B80                          1669mm 
00000B80                          1670mm     ENDM
00000B80                          1671mm         HEX2BIN D5,D5,A4
00000B80  49FA 101E               1672mm     LEA HEX2BIN_LUT(PC),A4                          ; LOAD THE LOOKUP TABLE
00000B84  0405 0030               1673mm     SUB.B #'0',D5                                   ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
00000B88  CABC 000000FF           1674mm     AND.L #$FF,D5                                   ; IGNORE THE TOP 3 BYTES
00000B8E  1A34 5000               1675mm     MOVE.B 0(A4,D5),D5                              ; USE THAT AS AN INDEX INTO THE LUT   
00000B92                          1676mm     ENDM
00000B92  8805                    1677m         OR.B D5,D4
00000B94  5307                    1678m         SUB.B #1,D7
00000B96                          1679m     ENDW
00000B96  6098                    1680ms     BRA _10000006
00000B98                          1681ms _10000007
00000B98                          1682m 
00000B98  7A00                    1683m     MOVE.L #0,D5                                    ; REXTRACT LATEST BYTE OF ADDRESS AND ADD INTO CHECKSUM
00000B9A  1A04                    1684m     MOVE.B D4,D5
00000B9C  D484                    1685m     ADD.L D4,D2
00000B9E                          1686m 
00000B9E                          1687m     ENDM
00000B9E                          1688              ENDI
00000B9E                          1689s _00000006
00000B9E                          1690  
00000B9E  2444                    1691              MOVE.L D4,A2                            ; put the address in an address register
00000BA0  D5C9                    1692              ADD.L A1,A2                             ; add in the offset
00000BA2                          1693  
00000BA2                          1694              WHILE.B D3 <GT> #0 DO                   ; read the data bytes
00000BA2                          1695s _10000008
00000BA2  B63C 0000               1696s     CMP.B   #0,D3
00000BA6  6F00 007A               1697s     BLE _10000009
00000BAA                          1698m                 DOWNLOAD_BYTE D1,D5,D6,D7,D2,A4     ; read it
00000BAA  1E3C 0002               1699m     MOVE.B #2,D7
00000BAE                          1700m     WHILE.B D7 <GT> 0 DO
00000BAE                          1701ms _1000000A
00000BAE  BE38 0000               1702ms     CMP.B   0,D7
00000BB2  6F00 0062               1703ms     BLE _1000000B
00000BB6  E989                    1704m         LSL.L #4,D1                                 ; IT's OK to do this first, because we are either starting from 0, 
00000BB8                          1705mm         DOWNLOAD D5                                 ; OR WE ARE READING THE NEXT BYTE ALONG, SO NEED TO SHIFT UP THE PREVIOUS ONE
00000BB8                          1706mm WAIT_FOR_READY_88                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000BB8                          1707mm 
00000BB8  1A39 00C00003           1708mm     MOVE.B DUART_SRA,D5                             ; CHECK FOR COMMAND
00000BBE  0805 0000               1709mm     BTST #0,D5                                      ; CHECK FOR CHARACTER
00000BC2  6700 0010               1710mm     BEQ CONTINUE_88                                 ; NOTHING, CONTINUE
00000BC6                          1711mm 
00000BC6                          1712mmm     READ_CHAR D5                                    ; WE're not going to do anything with it, just check for escape
00000BC6                 TRUE     1713mmm     IFEQ DEBUG
00000BC6  1A39 00C00007           1714mmm         MOVE.B DUART_RXA,D5                         ; GOT A CHARACTER, READ IT
00000BCC                          1715mmm     ENDC
00000BCC                 FALSE    1716mmm     IFNE DEBUG
00000BCC                          1717mmm     ENDC
00000BCC                          1718mmm 
00000BCC  BA3C 001B               1719mmm     CMP.B #$1B,D5                                   ; CHECK FOR ESCAPE AND GO TO START
00000BD0  6700 F82E               1720mmm     BEQ START
00000BD4                          1721mmm     ENDM
00000BD4                          1722mm CONTINUE_88
00000BD4  1A39 00C00013           1723mm     MOVE.B DUART_SRB,D5                             ; READ DOWNLOAD STATUS REGISTER
00000BDA  0805 0000               1724mm     BTST #0,D5                                      ; CHECK FOR CHARACTER
00000BDE  67D8                    1725mm     BEQ WAIT_FOR_READY_88                           ; NOTHING, CHECK AGAIN
00000BE0                          1726mm     
00000BE0  1A39 00C00017           1727mm     MOVE.B DUART_RXB,D5                             ; GOT A CHARACTER, READ IT
00000BE6  13C5 00E00001           1728mm     MOVE.B D5,DISPLAY                               ; ECHO TO THE DISPLAY
00000BEC                          1729mm 
00000BEC                          1730mm     ENDM
00000BEC                          1731mm         PRINT_CHAR D5,D6
00000BEC                          1732mm WAIT_FOR_READY_90                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000BEC                 TRUE     1733mm     IFEQ DEBUG
00000BEC  1C39 00C00003           1734mm         MOVE.B DUART_SRA,D6                         ; READ STATUS REGISTER
00000BF2  0806 0002               1735mm         BTST #2,D6                                  ; CHECK FOR SPACE TO SEND
00000BF6  67F4                    1736mm         BEQ WAIT_FOR_READY_90                       ; NO SPACE, CHECK AGAIN
00000BF8  13C5 00C00007           1737mm         MOVE.B D5,DUART_TXA                         ; SEND THE NEXT CHARACTER
00000BFE                          1738mm     ENDC
00000BFE                          1739mm 
00000BFE                 FALSE    1740mm     IFNE DEBUG
00000BFE                          1741mm     ENDC
00000BFE                          1742mm 
00000BFE                          1743mm     ENDM
00000BFE                          1744mm         HEX2BIN D5,D5,A4
00000BFE  49FA 0FA0               1745mm     LEA HEX2BIN_LUT(PC),A4                          ; LOAD THE LOOKUP TABLE
00000C02  0405 0030               1746mm     SUB.B #'0',D5                                   ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
00000C06  CABC 000000FF           1747mm     AND.L #$FF,D5                                   ; IGNORE THE TOP 3 BYTES
00000C0C  1A34 5000               1748mm     MOVE.B 0(A4,D5),D5                              ; USE THAT AS AN INDEX INTO THE LUT   
00000C10                          1749mm     ENDM
00000C10  8205                    1750m         OR.B D5,D1
00000C12  5307                    1751m         SUB.B #1,D7
00000C14                          1752m     ENDW
00000C14  6098                    1753ms     BRA _1000000A
00000C16                          1754ms _1000000B
00000C16                          1755m 
00000C16  7A00                    1756m     MOVE.L #0,D5                                    ; REXTRACT LATEST BYTE OF ADDRESS AND ADD INTO CHECKSUM
00000C18  1A01                    1757m     MOVE.B D1,D5
00000C1A  D481                    1758m     ADD.L D1,D2
00000C1C                          1759m 
00000C1C                          1760m     ENDM
00000C1C                          1761   
00000C1C  14C1                    1762                  MOVE.B D1,(A2)+                     ; store it!
00000C1E                          1763  
00000C1E  5303                    1764                  SUB.B #1,D3                         ; 1 less byte to go
00000C20                          1765              ENDW
00000C20  6080                    1766s     BRA _10000008
00000C22                          1767s _10000009
00000C22                          1768  
00000C22  7200                    1769              MOVE.L #0,D1                            ; not done yet
00000C24                          1770          ELSE
00000C24  6000 01E2               1771s     BRA _00000007
00000C28                          1772s _00000005
00000C28                          1773              IF.B D1 <EQ> #'8' THEN.L                ; termination record, exit
00000C28  B23C 0038               1774s     CMP.B   #'8',D1
00000C2C  6600 0164               1775s     BNE.L   _00000008
00000C30  7800                    1776                  MOVE.L #0,D4                        ; read the 24 bit start address
00000C32                          1777m                 DOWNLOAD_BYTE D4,D5,D6,D7,D2,A4     ; top byte
00000C32  1E3C 0002               1778m     MOVE.B #2,D7
00000C36                          1779m     WHILE.B D7 <GT> 0 DO
00000C36                          1780ms _1000000C
00000C36  BE38 0000               1781ms     CMP.B   0,D7
00000C3A  6F00 0062               1782ms     BLE _1000000D
00000C3E  E98C                    1783m         LSL.L #4,D4                                 ; IT's OK to do this first, because we are either starting from 0, 
00000C40                          1784mm         DOWNLOAD D5                                 ; OR WE ARE READING THE NEXT BYTE ALONG, SO NEED TO SHIFT UP THE PREVIOUS ONE
00000C40                          1785mm WAIT_FOR_READY_93                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000C40                          1786mm 
00000C40  1A39 00C00003           1787mm     MOVE.B DUART_SRA,D5                             ; CHECK FOR COMMAND
00000C46  0805 0000               1788mm     BTST #0,D5                                      ; CHECK FOR CHARACTER
00000C4A  6700 0010               1789mm     BEQ CONTINUE_93                                 ; NOTHING, CONTINUE
00000C4E                          1790mm 
00000C4E                          1791mmm     READ_CHAR D5                                    ; WE're not going to do anything with it, just check for escape
00000C4E                 TRUE     1792mmm     IFEQ DEBUG
00000C4E  1A39 00C00007           1793mmm         MOVE.B DUART_RXA,D5                         ; GOT A CHARACTER, READ IT
00000C54                          1794mmm     ENDC
00000C54                 FALSE    1795mmm     IFNE DEBUG
00000C54                          1796mmm     ENDC
00000C54                          1797mmm 
00000C54  BA3C 001B               1798mmm     CMP.B #$1B,D5                                   ; CHECK FOR ESCAPE AND GO TO START
00000C58  6700 F7A6               1799mmm     BEQ START
00000C5C                          1800mmm     ENDM
00000C5C                          1801mm CONTINUE_93
00000C5C  1A39 00C00013           1802mm     MOVE.B DUART_SRB,D5                             ; READ DOWNLOAD STATUS REGISTER
00000C62  0805 0000               1803mm     BTST #0,D5                                      ; CHECK FOR CHARACTER
00000C66  67D8                    1804mm     BEQ WAIT_FOR_READY_93                           ; NOTHING, CHECK AGAIN
00000C68                          1805mm     
00000C68  1A39 00C00017           1806mm     MOVE.B DUART_RXB,D5                             ; GOT A CHARACTER, READ IT
00000C6E  13C5 00E00001           1807mm     MOVE.B D5,DISPLAY                               ; ECHO TO THE DISPLAY
00000C74                          1808mm 
00000C74                          1809mm     ENDM
00000C74                          1810mm         PRINT_CHAR D5,D6
00000C74                          1811mm WAIT_FOR_READY_95                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000C74                 TRUE     1812mm     IFEQ DEBUG
00000C74  1C39 00C00003           1813mm         MOVE.B DUART_SRA,D6                         ; READ STATUS REGISTER
00000C7A  0806 0002               1814mm         BTST #2,D6                                  ; CHECK FOR SPACE TO SEND
00000C7E  67F4                    1815mm         BEQ WAIT_FOR_READY_95                       ; NO SPACE, CHECK AGAIN
00000C80  13C5 00C00007           1816mm         MOVE.B D5,DUART_TXA                         ; SEND THE NEXT CHARACTER
00000C86                          1817mm     ENDC
00000C86                          1818mm 
00000C86                 FALSE    1819mm     IFNE DEBUG
00000C86                          1820mm     ENDC
00000C86                          1821mm 
00000C86                          1822mm     ENDM
00000C86                          1823mm         HEX2BIN D5,D5,A4
00000C86  49FA 0F18               1824mm     LEA HEX2BIN_LUT(PC),A4                          ; LOAD THE LOOKUP TABLE
00000C8A  0405 0030               1825mm     SUB.B #'0',D5                                   ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
00000C8E  CABC 000000FF           1826mm     AND.L #$FF,D5                                   ; IGNORE THE TOP 3 BYTES
00000C94  1A34 5000               1827mm     MOVE.B 0(A4,D5),D5                              ; USE THAT AS AN INDEX INTO THE LUT   
00000C98                          1828mm     ENDM
00000C98  8805                    1829m         OR.B D5,D4
00000C9A  5307                    1830m         SUB.B #1,D7
00000C9C                          1831m     ENDW
00000C9C  6098                    1832ms     BRA _1000000C
00000C9E                          1833ms _1000000D
00000C9E                          1834m 
00000C9E  7A00                    1835m     MOVE.L #0,D5                                    ; REXTRACT LATEST BYTE OF ADDRESS AND ADD INTO CHECKSUM
00000CA0  1A04                    1836m     MOVE.B D4,D5
00000CA2  D484                    1837m     ADD.L D4,D2
00000CA4                          1838m 
00000CA4                          1839m     ENDM
00000CA4                          1840m                 DOWNLOAD_BYTE D4,D5,D6,D7,D2,A4     ; middle byte
00000CA4  1E3C 0002               1841m     MOVE.B #2,D7
00000CA8                          1842m     WHILE.B D7 <GT> 0 DO
00000CA8                          1843ms _1000000E
00000CA8  BE38 0000               1844ms     CMP.B   0,D7
00000CAC  6F00 0062               1845ms     BLE _1000000F
00000CB0  E98C                    1846m         LSL.L #4,D4                                 ; IT's OK to do this first, because we are either starting from 0, 
00000CB2                          1847mm         DOWNLOAD D5                                 ; OR WE ARE READING THE NEXT BYTE ALONG, SO NEED TO SHIFT UP THE PREVIOUS ONE
00000CB2                          1848mm WAIT_FOR_READY_98                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000CB2                          1849mm 
00000CB2  1A39 00C00003           1850mm     MOVE.B DUART_SRA,D5                             ; CHECK FOR COMMAND
00000CB8  0805 0000               1851mm     BTST #0,D5                                      ; CHECK FOR CHARACTER
00000CBC  6700 0010               1852mm     BEQ CONTINUE_98                                 ; NOTHING, CONTINUE
00000CC0                          1853mm 
00000CC0                          1854mmm     READ_CHAR D5                                    ; WE're not going to do anything with it, just check for escape
00000CC0                 TRUE     1855mmm     IFEQ DEBUG
00000CC0  1A39 00C00007           1856mmm         MOVE.B DUART_RXA,D5                         ; GOT A CHARACTER, READ IT
00000CC6                          1857mmm     ENDC
00000CC6                 FALSE    1858mmm     IFNE DEBUG
00000CC6                          1859mmm     ENDC
00000CC6                          1860mmm 
00000CC6  BA3C 001B               1861mmm     CMP.B #$1B,D5                                   ; CHECK FOR ESCAPE AND GO TO START
00000CCA  6700 F734               1862mmm     BEQ START
00000CCE                          1863mmm     ENDM
00000CCE                          1864mm CONTINUE_98
00000CCE  1A39 00C00013           1865mm     MOVE.B DUART_SRB,D5                             ; READ DOWNLOAD STATUS REGISTER
00000CD4  0805 0000               1866mm     BTST #0,D5                                      ; CHECK FOR CHARACTER
00000CD8  67D8                    1867mm     BEQ WAIT_FOR_READY_98                           ; NOTHING, CHECK AGAIN
00000CDA                          1868mm     
00000CDA  1A39 00C00017           1869mm     MOVE.B DUART_RXB,D5                             ; GOT A CHARACTER, READ IT
00000CE0  13C5 00E00001           1870mm     MOVE.B D5,DISPLAY                               ; ECHO TO THE DISPLAY
00000CE6                          1871mm 
00000CE6                          1872mm     ENDM
00000CE6                          1873mm         PRINT_CHAR D5,D6
00000CE6                          1874mm WAIT_FOR_READY_100                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000CE6                 TRUE     1875mm     IFEQ DEBUG
00000CE6  1C39 00C00003           1876mm         MOVE.B DUART_SRA,D6                         ; READ STATUS REGISTER
00000CEC  0806 0002               1877mm         BTST #2,D6                                  ; CHECK FOR SPACE TO SEND
00000CF0  67F4                    1878mm         BEQ WAIT_FOR_READY_100                      ; NO SPACE, CHECK AGAIN
00000CF2  13C5 00C00007           1879mm         MOVE.B D5,DUART_TXA                         ; SEND THE NEXT CHARACTER
00000CF8                          1880mm     ENDC
00000CF8                          1881mm 
00000CF8                 FALSE    1882mm     IFNE DEBUG
00000CF8                          1883mm     ENDC
00000CF8                          1884mm 
00000CF8                          1885mm     ENDM
00000CF8                          1886mm         HEX2BIN D5,D5,A4
00000CF8  49FA 0EA6               1887mm     LEA HEX2BIN_LUT(PC),A4                          ; LOAD THE LOOKUP TABLE
00000CFC  0405 0030               1888mm     SUB.B #'0',D5                                   ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
00000D00  CABC 000000FF           1889mm     AND.L #$FF,D5                                   ; IGNORE THE TOP 3 BYTES
00000D06  1A34 5000               1890mm     MOVE.B 0(A4,D5),D5                              ; USE THAT AS AN INDEX INTO THE LUT   
00000D0A                          1891mm     ENDM
00000D0A  8805                    1892m         OR.B D5,D4
00000D0C  5307                    1893m         SUB.B #1,D7
00000D0E                          1894m     ENDW
00000D0E  6098                    1895ms     BRA _1000000E
00000D10                          1896ms _1000000F
00000D10                          1897m 
00000D10  7A00                    1898m     MOVE.L #0,D5                                    ; REXTRACT LATEST BYTE OF ADDRESS AND ADD INTO CHECKSUM
00000D12  1A04                    1899m     MOVE.B D4,D5
00000D14  D484                    1900m     ADD.L D4,D2
00000D16                          1901m 
00000D16                          1902m     ENDM
00000D16                          1903m                 DOWNLOAD_BYTE D4,D5,D6,D7,D2,A4     ; bottom byte
00000D16  1E3C 0002               1904m     MOVE.B #2,D7
00000D1A                          1905m     WHILE.B D7 <GT> 0 DO
00000D1A                          1906ms _10000010
00000D1A  BE38 0000               1907ms     CMP.B   0,D7
00000D1E  6F00 0062               1908ms     BLE _10000011
00000D22  E98C                    1909m         LSL.L #4,D4                                 ; IT's OK to do this first, because we are either starting from 0, 
00000D24                          1910mm         DOWNLOAD D5                                 ; OR WE ARE READING THE NEXT BYTE ALONG, SO NEED TO SHIFT UP THE PREVIOUS ONE
00000D24                          1911mm WAIT_FOR_READY_103                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000D24                          1912mm 
00000D24  1A39 00C00003           1913mm     MOVE.B DUART_SRA,D5                             ; CHECK FOR COMMAND
00000D2A  0805 0000               1914mm     BTST #0,D5                                      ; CHECK FOR CHARACTER
00000D2E  6700 0010               1915mm     BEQ CONTINUE_103                                    ; NOTHING, CONTINUE
00000D32                          1916mm 
00000D32                          1917mmm     READ_CHAR D5                                    ; WE're not going to do anything with it, just check for escape
00000D32                 TRUE     1918mmm     IFEQ DEBUG
00000D32  1A39 00C00007           1919mmm         MOVE.B DUART_RXA,D5                         ; GOT A CHARACTER, READ IT
00000D38                          1920mmm     ENDC
00000D38                 FALSE    1921mmm     IFNE DEBUG
00000D38                          1922mmm     ENDC
00000D38                          1923mmm 
00000D38  BA3C 001B               1924mmm     CMP.B #$1B,D5                                   ; CHECK FOR ESCAPE AND GO TO START
00000D3C  6700 F6C2               1925mmm     BEQ START
00000D40                          1926mmm     ENDM
00000D40                          1927mm CONTINUE_103
00000D40  1A39 00C00013           1928mm     MOVE.B DUART_SRB,D5                             ; READ DOWNLOAD STATUS REGISTER
00000D46  0805 0000               1929mm     BTST #0,D5                                      ; CHECK FOR CHARACTER
00000D4A  67D8                    1930mm     BEQ WAIT_FOR_READY_103                          ; NOTHING, CHECK AGAIN
00000D4C                          1931mm     
00000D4C  1A39 00C00017           1932mm     MOVE.B DUART_RXB,D5                             ; GOT A CHARACTER, READ IT
00000D52  13C5 00E00001           1933mm     MOVE.B D5,DISPLAY                               ; ECHO TO THE DISPLAY
00000D58                          1934mm 
00000D58                          1935mm     ENDM
00000D58                          1936mm         PRINT_CHAR D5,D6
00000D58                          1937mm WAIT_FOR_READY_105                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000D58                 TRUE     1938mm     IFEQ DEBUG
00000D58  1C39 00C00003           1939mm         MOVE.B DUART_SRA,D6                         ; READ STATUS REGISTER
00000D5E  0806 0002               1940mm         BTST #2,D6                                  ; CHECK FOR SPACE TO SEND
00000D62  67F4                    1941mm         BEQ WAIT_FOR_READY_105                      ; NO SPACE, CHECK AGAIN
00000D64  13C5 00C00007           1942mm         MOVE.B D5,DUART_TXA                         ; SEND THE NEXT CHARACTER
00000D6A                          1943mm     ENDC
00000D6A                          1944mm 
00000D6A                 FALSE    1945mm     IFNE DEBUG
00000D6A                          1946mm     ENDC
00000D6A                          1947mm 
00000D6A                          1948mm     ENDM
00000D6A                          1949mm         HEX2BIN D5,D5,A4
00000D6A  49FA 0E34               1950mm     LEA HEX2BIN_LUT(PC),A4                          ; LOAD THE LOOKUP TABLE
00000D6E  0405 0030               1951mm     SUB.B #'0',D5                                   ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
00000D72  CABC 000000FF           1952mm     AND.L #$FF,D5                                   ; IGNORE THE TOP 3 BYTES
00000D78  1A34 5000               1953mm     MOVE.B 0(A4,D5),D5                              ; USE THAT AS AN INDEX INTO THE LUT   
00000D7C                          1954mm     ENDM
00000D7C  8805                    1955m         OR.B D5,D4
00000D7E  5307                    1956m         SUB.B #1,D7
00000D80                          1957m     ENDW
00000D80  6098                    1958ms     BRA _10000010
00000D82                          1959ms _10000011
00000D82                          1960m 
00000D82  7A00                    1961m     MOVE.L #0,D5                                    ; REXTRACT LATEST BYTE OF ADDRESS AND ADD INTO CHECKSUM
00000D84  1A04                    1962m     MOVE.B D4,D5
00000D86  D484                    1963m     ADD.L D4,D2
00000D88                          1964m 
00000D88                          1965m     ENDM
00000D88                          1966  
00000D88  2044                    1967                  MOVE.L D4,A0                        ; start address -> A0
00000D8A  D1C9                    1968                  ADD.L A1,A0                         ; add in the offset
00000D8C                          1969  
00000D8C  72FF                    1970                  MOVE.L #$FFFFFFFF,D1                ; done
00000D8E                          1971              ELSE
00000D8E  6000 0078               1972s     BRA _00000009
00000D92                          1973s _00000008
00000D92                          1974m                 PRINT_CRLF D5,A4
00000D92  49FA 0E7A               1975m     LEA CRLF(PC),A4
00000D96                          1976mm     PRINT_STR A4,D5
00000D96                          1977mm LOOP_108
00000D96  0C14 0000               1978mm     CMP.B #NULL,(A4)                                ; 0 -> DONE
00000D9A  6700 0016               1979mm     BEQ EXIT_108
00000D9E                          1980mmm     PRINT_CHAR (A4)+,D5
00000D9E                          1981mmm WAIT_FOR_READY_109                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000D9E                 TRUE     1982mmm     IFEQ DEBUG
00000D9E  1A39 00C00003           1983mmm         MOVE.B DUART_SRA,D5                         ; READ STATUS REGISTER
00000DA4  0805 0002               1984mmm         BTST #2,D5                                  ; CHECK FOR SPACE TO SEND
00000DA8  67F4                    1985mmm         BEQ WAIT_FOR_READY_109                      ; NO SPACE, CHECK AGAIN
00000DAA  13DC 00C00007           1986mmm         MOVE.B (A4)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00000DB0                          1987mmm     ENDC
00000DB0                          1988mmm 
00000DB0                 FALSE    1989mmm     IFNE DEBUG
00000DB0                          1990mmm     ENDC
00000DB0                          1991mmm 
00000DB0                          1992mmm     ENDM
00000DB0  60E4                    1993mm     BRA LOOP_108
00000DB2                          1994mm EXIT_108
00000DB2                          1995mm     ENDM
00000DB2                          1996m     ENDM
00000DB2                          1997  
00000DB2  49FA 0DA3               1998                  LEA UNREC(PC),A4                    ; warn for unrecognised type
00000DB6                          1999m                 PRINT_STR A4,D5
00000DB6                          2000m LOOP_110
00000DB6  0C14 0000               2001m     CMP.B #NULL,(A4)                                ; 0 -> DONE
00000DBA  6700 0016               2002m     BEQ EXIT_110
00000DBE                          2003mm     PRINT_CHAR (A4)+,D5
00000DBE                          2004mm WAIT_FOR_READY_111                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000DBE                 TRUE     2005mm     IFEQ DEBUG
00000DBE  1A39 00C00003           2006mm         MOVE.B DUART_SRA,D5                         ; READ STATUS REGISTER
00000DC4  0805 0002               2007mm         BTST #2,D5                                  ; CHECK FOR SPACE TO SEND
00000DC8  67F4                    2008mm         BEQ WAIT_FOR_READY_111                      ; NO SPACE, CHECK AGAIN
00000DCA  13DC 00C00007           2009mm         MOVE.B (A4)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00000DD0                          2010mm     ENDC
00000DD0                          2011mm 
00000DD0                 FALSE    2012mm     IFNE DEBUG
00000DD0                          2013mm     ENDC
00000DD0                          2014mm 
00000DD0                          2015mm     ENDM
00000DD0  60E4                    2016m     BRA LOOP_110
00000DD2                          2017m EXIT_110
00000DD2                          2018m     ENDM
00000DD2                          2019m                 PRINT_CHAR D1,D5
00000DD2                          2020m WAIT_FOR_READY_112                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000DD2                 TRUE     2021m     IFEQ DEBUG
00000DD2  1A39 00C00003           2022m         MOVE.B DUART_SRA,D5                         ; READ STATUS REGISTER
00000DD8  0805 0002               2023m         BTST #2,D5                                  ; CHECK FOR SPACE TO SEND
00000DDC  67F4                    2024m         BEQ WAIT_FOR_READY_112                      ; NO SPACE, CHECK AGAIN
00000DDE  13C1 00C00007           2025m         MOVE.B D1,DUART_TXA                         ; SEND THE NEXT CHARACTER
00000DE4                          2026m     ENDC
00000DE4                          2027m 
00000DE4                 FALSE    2028m     IFNE DEBUG
00000DE4                          2029m     ENDC
00000DE4                          2030m 
00000DE4                          2031m     ENDM
00000DE4                          2032m                 PRINT_CRLF D5,A4
00000DE4  49FA 0E28               2033m     LEA CRLF(PC),A4
00000DE8                          2034mm     PRINT_STR A4,D5
00000DE8                          2035mm LOOP_114
00000DE8  0C14 0000               2036mm     CMP.B #NULL,(A4)                                ; 0 -> DONE
00000DEC  6700 0016               2037mm     BEQ EXIT_114
00000DF0                          2038mmm     PRINT_CHAR (A4)+,D5
00000DF0                          2039mmm WAIT_FOR_READY_115                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000DF0                 TRUE     2040mmm     IFEQ DEBUG
00000DF0  1A39 00C00003           2041mmm         MOVE.B DUART_SRA,D5                         ; READ STATUS REGISTER
00000DF6  0805 0002               2042mmm         BTST #2,D5                                  ; CHECK FOR SPACE TO SEND
00000DFA  67F4                    2043mmm         BEQ WAIT_FOR_READY_115                      ; NO SPACE, CHECK AGAIN
00000DFC  13DC 00C00007           2044mmm         MOVE.B (A4)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00000E02                          2045mmm     ENDC
00000E02                          2046mmm 
00000E02                 FALSE    2047mmm     IFNE DEBUG
00000E02                          2048mmm     ENDC
00000E02                          2049mmm 
00000E02                          2050mmm     ENDM
00000E02  60E4                    2051mm     BRA LOOP_114
00000E04                          2052mm EXIT_114
00000E04                          2053mm     ENDM
00000E04                          2054m     ENDM
00000E04                          2055  
00000E04  6000 FAEC               2056                  BRA WAIT_FOR_SRECORD                ; ignore any other type 
00000E08                          2057              ENDI
00000E08                          2058s _00000009
00000E08                          2059          ENDI
00000E08                          2060s _00000007
00000E08                          2061      ENDI
00000E08                          2062s _00000003
00000E08                          2063  
00000E08                          2064m     DOWNLOAD_BYTE D4,D5,D6,D7,D2,A4
00000E08  1E3C 0002               2065m     MOVE.B #2,D7
00000E0C                          2066m     WHILE.B D7 <GT> 0 DO
00000E0C                          2067ms _10000012
00000E0C  BE38 0000               2068ms     CMP.B   0,D7
00000E10  6F00 0062               2069ms     BLE _10000013
00000E14  E98C                    2070m         LSL.L #4,D4                                 ; IT's OK to do this first, because we are either starting from 0, 
00000E16                          2071mm         DOWNLOAD D5                                 ; OR WE ARE READING THE NEXT BYTE ALONG, SO NEED TO SHIFT UP THE PREVIOUS ONE
00000E16                          2072mm WAIT_FOR_READY_117                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000E16                          2073mm 
00000E16  1A39 00C00003           2074mm     MOVE.B DUART_SRA,D5                             ; CHECK FOR COMMAND
00000E1C  0805 0000               2075mm     BTST #0,D5                                      ; CHECK FOR CHARACTER
00000E20  6700 0010               2076mm     BEQ CONTINUE_117                                    ; NOTHING, CONTINUE
00000E24                          2077mm 
00000E24                          2078mmm     READ_CHAR D5                                    ; WE're not going to do anything with it, just check for escape
00000E24                 TRUE     2079mmm     IFEQ DEBUG
00000E24  1A39 00C00007           2080mmm         MOVE.B DUART_RXA,D5                         ; GOT A CHARACTER, READ IT
00000E2A                          2081mmm     ENDC
00000E2A                 FALSE    2082mmm     IFNE DEBUG
00000E2A                          2083mmm     ENDC
00000E2A                          2084mmm 
00000E2A  BA3C 001B               2085mmm     CMP.B #$1B,D5                                   ; CHECK FOR ESCAPE AND GO TO START
00000E2E  6700 F5D0               2086mmm     BEQ START
00000E32                          2087mmm     ENDM
00000E32                          2088mm CONTINUE_117
00000E32  1A39 00C00013           2089mm     MOVE.B DUART_SRB,D5                             ; READ DOWNLOAD STATUS REGISTER
00000E38  0805 0000               2090mm     BTST #0,D5                                      ; CHECK FOR CHARACTER
00000E3C  67D8                    2091mm     BEQ WAIT_FOR_READY_117                          ; NOTHING, CHECK AGAIN
00000E3E                          2092mm     
00000E3E  1A39 00C00017           2093mm     MOVE.B DUART_RXB,D5                             ; GOT A CHARACTER, READ IT
00000E44  13C5 00E00001           2094mm     MOVE.B D5,DISPLAY                               ; ECHO TO THE DISPLAY
00000E4A                          2095mm 
00000E4A                          2096mm     ENDM
00000E4A                          2097mm         PRINT_CHAR D5,D6
00000E4A                          2098mm WAIT_FOR_READY_119                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000E4A                 TRUE     2099mm     IFEQ DEBUG
00000E4A  1C39 00C00003           2100mm         MOVE.B DUART_SRA,D6                         ; READ STATUS REGISTER
00000E50  0806 0002               2101mm         BTST #2,D6                                  ; CHECK FOR SPACE TO SEND
00000E54  67F4                    2102mm         BEQ WAIT_FOR_READY_119                      ; NO SPACE, CHECK AGAIN
00000E56  13C5 00C00007           2103mm         MOVE.B D5,DUART_TXA                         ; SEND THE NEXT CHARACTER
00000E5C                          2104mm     ENDC
00000E5C                          2105mm 
00000E5C                 FALSE    2106mm     IFNE DEBUG
00000E5C                          2107mm     ENDC
00000E5C                          2108mm 
00000E5C                          2109mm     ENDM
00000E5C                          2110mm         HEX2BIN D5,D5,A4
00000E5C  49FA 0D42               2111mm     LEA HEX2BIN_LUT(PC),A4                          ; LOAD THE LOOKUP TABLE
00000E60  0405 0030               2112mm     SUB.B #'0',D5                                   ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
00000E64  CABC 000000FF           2113mm     AND.L #$FF,D5                                   ; IGNORE THE TOP 3 BYTES
00000E6A  1A34 5000               2114mm     MOVE.B 0(A4,D5),D5                              ; USE THAT AS AN INDEX INTO THE LUT   
00000E6E                          2115mm     ENDM
00000E6E  8805                    2116m         OR.B D5,D4
00000E70  5307                    2117m         SUB.B #1,D7
00000E72                          2118m     ENDW
00000E72  6098                    2119ms     BRA _10000012
00000E74                          2120ms _10000013
00000E74                          2121m 
00000E74  7A00                    2122m     MOVE.L #0,D5                                    ; REXTRACT LATEST BYTE OF ADDRESS AND ADD INTO CHECKSUM
00000E76  1A04                    2123m     MOVE.B D4,D5
00000E78  D484                    2124m     ADD.L D4,D2
00000E7A                          2125m 
00000E7A                          2126m     ENDM
00000E7A                          2127m     PRINT_CRLF D5,A4
00000E7A  49FA 0D92               2128m     LEA CRLF(PC),A4
00000E7E                          2129mm     PRINT_STR A4,D5
00000E7E                          2130mm LOOP_122
00000E7E  0C14 0000               2131mm     CMP.B #NULL,(A4)                                ; 0 -> DONE
00000E82  6700 0016               2132mm     BEQ EXIT_122
00000E86                          2133mmm     PRINT_CHAR (A4)+,D5
00000E86                          2134mmm WAIT_FOR_READY_123                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000E86                 TRUE     2135mmm     IFEQ DEBUG
00000E86  1A39 00C00003           2136mmm         MOVE.B DUART_SRA,D5                         ; READ STATUS REGISTER
00000E8C  0805 0002               2137mmm         BTST #2,D5                                  ; CHECK FOR SPACE TO SEND
00000E90  67F4                    2138mmm         BEQ WAIT_FOR_READY_123                      ; NO SPACE, CHECK AGAIN
00000E92  13DC 00C00007           2139mmm         MOVE.B (A4)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00000E98                          2140mmm     ENDC
00000E98                          2141mmm 
00000E98                 FALSE    2142mmm     IFNE DEBUG
00000E98                          2143mmm     ENDC
00000E98                          2144mmm 
00000E98                          2145mmm     ENDM
00000E98  60E4                    2146mm     BRA LOOP_122
00000E9A                          2147mm EXIT_122
00000E9A                          2148mm     ENDM
00000E9A                          2149m     ENDM
00000E9A                          2150  
00000E9A                          2151      IF.B D2 <NE> #$FF THEN.L
00000E9A  B43C 00FF               2152s     CMP.B   #$FF,D2
00000E9E  6700 0090               2153s     BEQ.L   _0000000A
00000EA2  49FA 0CCA               2154          LEA CS_FAILURE(PC),A4                       ; warn for mismatched checksum
00000EA6                          2155m         PRINT_STR A4,D5
00000EA6                          2156m LOOP_124
00000EA6  0C14 0000               2157m     CMP.B #NULL,(A4)                                ; 0 -> DONE
00000EAA  6700 0016               2158m     BEQ EXIT_124
00000EAE                          2159mm     PRINT_CHAR (A4)+,D5
00000EAE                          2160mm WAIT_FOR_READY_125                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000EAE                 TRUE     2161mm     IFEQ DEBUG
00000EAE  1A39 00C00003           2162mm         MOVE.B DUART_SRA,D5                         ; READ STATUS REGISTER
00000EB4  0805 0002               2163mm         BTST #2,D5                                  ; CHECK FOR SPACE TO SEND
00000EB8  67F4                    2164mm         BEQ WAIT_FOR_READY_125                      ; NO SPACE, CHECK AGAIN
00000EBA  13DC 00C00007           2165mm         MOVE.B (A4)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00000EC0                          2166mm     ENDC
00000EC0                          2167mm 
00000EC0                 FALSE    2168mm     IFNE DEBUG
00000EC0                          2169mm     ENDC
00000EC0                          2170mm 
00000EC0                          2171mm     ENDM
00000EC0  60E4                    2172m     BRA LOOP_124
00000EC2                          2173m EXIT_124
00000EC2                          2174m     ENDM
00000EC2                          2175m         PRINT_REG D0,D5,D3,D6,A4
00000EC2  49FA 0D50               2176m     LEA OX(PC),A4
00000EC6                          2177mm     PRINT_STR A4,D5
00000EC6                          2178mm LOOP_127
00000EC6  0C14 0000               2179mm     CMP.B #NULL,(A4)                                ; 0 -> DONE
00000ECA  6700 0016               2180mm     BEQ EXIT_127
00000ECE                          2181mmm     PRINT_CHAR (A4)+,D5
00000ECE                          2182mmm WAIT_FOR_READY_128                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000ECE                 TRUE     2183mmm     IFEQ DEBUG
00000ECE  1A39 00C00003           2184mmm         MOVE.B DUART_SRA,D5                         ; READ STATUS REGISTER
00000ED4  0805 0002               2185mmm         BTST #2,D5                                  ; CHECK FOR SPACE TO SEND
00000ED8  67F4                    2186mmm         BEQ WAIT_FOR_READY_128                      ; NO SPACE, CHECK AGAIN
00000EDA  13DC 00C00007           2187mmm         MOVE.B (A4)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00000EE0                          2188mmm     ENDC
00000EE0                          2189mmm 
00000EE0                 FALSE    2190mmm     IFNE DEBUG
00000EE0                          2191mmm     ENDC
00000EE0                          2192mmm 
00000EE0                          2193mmm     ENDM
00000EE0  60E4                    2194mm     BRA LOOP_127
00000EE2                          2195mm EXIT_127
00000EE2                          2196mm     ENDM
00000EE2  7C07                    2197m     MOVE.L #7,D6                                    ; LOOP ROUND ALL 8 HEX CHARACTERS OF 4 BITS EACH
00000EE4                          2198m LOOP_126
00000EE4                          2199mm     BIN2HEX D0,D3,A4
00000EE4  49FA 0CAA               2200mm     LEA BIN2HEX_LUT(PC),A4                          ; LOAD THE LOOKUP TABLE
00000EE8  E998                    2201mm     ROL.L #4,D0                                     ; SHIFT THE TOP 4 BITS DOWN TO BOTTOM OF THE REGISTER THE AND MASK OFF EVERYTHING ELSE
00000EEA  1600                    2202mm     MOVE.B D0,D3
00000EEC  0283 0000000F           2203mm     ANDI.L #$F,D3
00000EF2  1634 3000               2204mm     MOVE.B 0(A4,D3),D3                              ; USE THAT AS AN INDEX INTO THE LUT
00000EF6                          2205mm     ENDM
00000EF6                          2206mm     PRINT_CHAR D3,D5
00000EF6                          2207mm WAIT_FOR_READY_130                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000EF6                 TRUE     2208mm     IFEQ DEBUG
00000EF6  1A39 00C00003           2209mm         MOVE.B DUART_SRA,D5                         ; READ STATUS REGISTER
00000EFC  0805 0002               2210mm         BTST #2,D5                                  ; CHECK FOR SPACE TO SEND
00000F00  67F4                    2211mm         BEQ WAIT_FOR_READY_130                      ; NO SPACE, CHECK AGAIN
00000F02  13C3 00C00007           2212mm         MOVE.B D3,DUART_TXA                         ; SEND THE NEXT CHARACTER
00000F08                          2213mm     ENDC
00000F08                          2214mm 
00000F08                 FALSE    2215mm     IFNE DEBUG
00000F08                          2216mm     ENDC
00000F08                          2217mm 
00000F08                          2218mm     ENDM
00000F08  57CE FFDA               2219m     DBEQ D6,LOOP_126
00000F0C                          2220m     ENDM
00000F0C                          2221m         PRINT_CRLF D5,A4
00000F0C  49FA 0D00               2222m     LEA CRLF(PC),A4
00000F10                          2223mm     PRINT_STR A4,D5
00000F10                          2224mm LOOP_132
00000F10  0C14 0000               2225mm     CMP.B #NULL,(A4)                                ; 0 -> DONE
00000F14  6700 0016               2226mm     BEQ EXIT_132
00000F18                          2227mmm     PRINT_CHAR (A4)+,D5
00000F18                          2228mmm WAIT_FOR_READY_133                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000F18                 TRUE     2229mmm     IFEQ DEBUG
00000F18  1A39 00C00003           2230mmm         MOVE.B DUART_SRA,D5                         ; READ STATUS REGISTER
00000F1E  0805 0002               2231mmm         BTST #2,D5                                  ; CHECK FOR SPACE TO SEND
00000F22  67F4                    2232mmm         BEQ WAIT_FOR_READY_133                      ; NO SPACE, CHECK AGAIN
00000F24  13DC 00C00007           2233mmm         MOVE.B (A4)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00000F2A                          2234mmm     ENDC
00000F2A                          2235mmm 
00000F2A                 FALSE    2236mmm     IFNE DEBUG
00000F2A                          2237mmm     ENDC
00000F2A                          2238mmm 
00000F2A                          2239mmm     ENDM
00000F2A  60E4                    2240mm     BRA LOOP_132
00000F2C                          2241mm EXIT_132
00000F2C                          2242mm     ENDM
00000F2C                          2243m     ENDM
00000F2C                          2244          
00000F2C  6000 F6CC               2245          BRA MAIN_LOOP
00000F30                          2246      ENDI
00000F30                          2247s _0000000A
00000F30                          2248  
00000F30                          2249      IF D1 <EQ> #0 THEN
00000F30  B27C 0000               2250s     CMP.W   #0,D1
00000F34  6600 0006               2251s     BNE _0000000B
00000F38  6000 F9B8               2252        BRA WAIT_FOR_SRECORD
00000F3C                          2253      ENDI
00000F3C                          2254s _0000000B
00000F3C                          2255  DOWNLOAD_DONE
00000F3C                          2256m     PRINT_REG D0,D5,D6,D2,A1                        ; print out number of Srecords read
00000F3C  43FA 0CD6               2257m     LEA OX(PC),A1
00000F40                          2258mm     PRINT_STR A1,D5
00000F40                          2259mm LOOP_135
00000F40  0C11 0000               2260mm     CMP.B #NULL,(A1)                                ; 0 -> DONE
00000F44  6700 0016               2261mm     BEQ EXIT_135
00000F48                          2262mmm     PRINT_CHAR (A1)+,D5
00000F48                          2263mmm WAIT_FOR_READY_136                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000F48                 TRUE     2264mmm     IFEQ DEBUG
00000F48  1A39 00C00003           2265mmm         MOVE.B DUART_SRA,D5                         ; READ STATUS REGISTER
00000F4E  0805 0002               2266mmm         BTST #2,D5                                  ; CHECK FOR SPACE TO SEND
00000F52  67F4                    2267mmm         BEQ WAIT_FOR_READY_136                      ; NO SPACE, CHECK AGAIN
00000F54  13D9 00C00007           2268mmm         MOVE.B (A1)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00000F5A                          2269mmm     ENDC
00000F5A                          2270mmm 
00000F5A                 FALSE    2271mmm     IFNE DEBUG
00000F5A                          2272mmm     ENDC
00000F5A                          2273mmm 
00000F5A                          2274mmm     ENDM
00000F5A  60E4                    2275mm     BRA LOOP_135
00000F5C                          2276mm EXIT_135
00000F5C                          2277mm     ENDM
00000F5C  7407                    2278m     MOVE.L #7,D2                                    ; LOOP ROUND ALL 8 HEX CHARACTERS OF 4 BITS EACH
00000F5E                          2279m LOOP_134
00000F5E                          2280mm     BIN2HEX D0,D6,A1
00000F5E  43FA 0C30               2281mm     LEA BIN2HEX_LUT(PC),A1                          ; LOAD THE LOOKUP TABLE
00000F62  E998                    2282mm     ROL.L #4,D0                                     ; SHIFT THE TOP 4 BITS DOWN TO BOTTOM OF THE REGISTER THE AND MASK OFF EVERYTHING ELSE
00000F64  1C00                    2283mm     MOVE.B D0,D6
00000F66  0286 0000000F           2284mm     ANDI.L #$F,D6
00000F6C  1C31 6000               2285mm     MOVE.B 0(A1,D6),D6                              ; USE THAT AS AN INDEX INTO THE LUT
00000F70                          2286mm     ENDM
00000F70                          2287mm     PRINT_CHAR D6,D5
00000F70                          2288mm WAIT_FOR_READY_138                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000F70                 TRUE     2289mm     IFEQ DEBUG
00000F70  1A39 00C00003           2290mm         MOVE.B DUART_SRA,D5                         ; READ STATUS REGISTER
00000F76  0805 0002               2291mm         BTST #2,D5                                  ; CHECK FOR SPACE TO SEND
00000F7A  67F4                    2292mm         BEQ WAIT_FOR_READY_138                      ; NO SPACE, CHECK AGAIN
00000F7C  13C6 00C00007           2293mm         MOVE.B D6,DUART_TXA                         ; SEND THE NEXT CHARACTER
00000F82                          2294mm     ENDC
00000F82                          2295mm 
00000F82                 FALSE    2296mm     IFNE DEBUG
00000F82                          2297mm     ENDC
00000F82                          2298mm 
00000F82                          2299mm     ENDM
00000F82  57CA FFDA               2300m     DBEQ D2,LOOP_134
00000F86                          2301m     ENDM
00000F86  43FA 0BAD               2302      LEA READ(PC),A1
00000F8A                          2303m     PRINT_STR A1,D5
00000F8A                          2304m LOOP_139
00000F8A  0C11 0000               2305m     CMP.B #NULL,(A1)                                ; 0 -> DONE
00000F8E  6700 0016               2306m     BEQ EXIT_139
00000F92                          2307mm     PRINT_CHAR (A1)+,D5
00000F92                          2308mm WAIT_FOR_READY_140                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000F92                 TRUE     2309mm     IFEQ DEBUG
00000F92  1A39 00C00003           2310mm         MOVE.B DUART_SRA,D5                         ; READ STATUS REGISTER
00000F98  0805 0002               2311mm         BTST #2,D5                                  ; CHECK FOR SPACE TO SEND
00000F9C  67F4                    2312mm         BEQ WAIT_FOR_READY_140                      ; NO SPACE, CHECK AGAIN
00000F9E  13D9 00C00007           2313mm         MOVE.B (A1)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00000FA4                          2314mm     ENDC
00000FA4                          2315mm 
00000FA4                 FALSE    2316mm     IFNE DEBUG
00000FA4                          2317mm     ENDC
00000FA4                          2318mm 
00000FA4                          2319mm     ENDM
00000FA4  60E4                    2320m     BRA LOOP_139
00000FA6                          2321m EXIT_139
00000FA6                          2322m     ENDM
00000FA6  2E08                    2323      MOVE.L A0,D7                                    ; set address accumulator to start address
00000FA8                          2324m     PRINT_REG D7,D5,D6,D2,A1                        ; print out start address
00000FA8  43FA 0C6A               2325m     LEA OX(PC),A1
00000FAC                          2326mm     PRINT_STR A1,D5
00000FAC                          2327mm LOOP_142
00000FAC  0C11 0000               2328mm     CMP.B #NULL,(A1)                                ; 0 -> DONE
00000FB0  6700 0016               2329mm     BEQ EXIT_142
00000FB4                          2330mmm     PRINT_CHAR (A1)+,D5
00000FB4                          2331mmm WAIT_FOR_READY_143                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000FB4                 TRUE     2332mmm     IFEQ DEBUG
00000FB4  1A39 00C00003           2333mmm         MOVE.B DUART_SRA,D5                         ; READ STATUS REGISTER
00000FBA  0805 0002               2334mmm         BTST #2,D5                                  ; CHECK FOR SPACE TO SEND
00000FBE  67F4                    2335mmm         BEQ WAIT_FOR_READY_143                      ; NO SPACE, CHECK AGAIN
00000FC0  13D9 00C00007           2336mmm         MOVE.B (A1)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00000FC6                          2337mmm     ENDC
00000FC6                          2338mmm 
00000FC6                 FALSE    2339mmm     IFNE DEBUG
00000FC6                          2340mmm     ENDC
00000FC6                          2341mmm 
00000FC6                          2342mmm     ENDM
00000FC6  60E4                    2343mm     BRA LOOP_142
00000FC8                          2344mm EXIT_142
00000FC8                          2345mm     ENDM
00000FC8  7407                    2346m     MOVE.L #7,D2                                    ; LOOP ROUND ALL 8 HEX CHARACTERS OF 4 BITS EACH
00000FCA                          2347m LOOP_141
00000FCA                          2348mm     BIN2HEX D7,D6,A1
00000FCA  43FA 0BC4               2349mm     LEA BIN2HEX_LUT(PC),A1                          ; LOAD THE LOOKUP TABLE
00000FCE  E99F                    2350mm     ROL.L #4,D7                                     ; SHIFT THE TOP 4 BITS DOWN TO BOTTOM OF THE REGISTER THE AND MASK OFF EVERYTHING ELSE
00000FD0  1C07                    2351mm     MOVE.B D7,D6
00000FD2  0286 0000000F           2352mm     ANDI.L #$F,D6
00000FD8  1C31 6000               2353mm     MOVE.B 0(A1,D6),D6                              ; USE THAT AS AN INDEX INTO THE LUT
00000FDC                          2354mm     ENDM
00000FDC                          2355mm     PRINT_CHAR D6,D5
00000FDC                          2356mm WAIT_FOR_READY_145                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000FDC                 TRUE     2357mm     IFEQ DEBUG
00000FDC  1A39 00C00003           2358mm         MOVE.B DUART_SRA,D5                         ; READ STATUS REGISTER
00000FE2  0805 0002               2359mm         BTST #2,D5                                  ; CHECK FOR SPACE TO SEND
00000FE6  67F4                    2360mm         BEQ WAIT_FOR_READY_145                      ; NO SPACE, CHECK AGAIN
00000FE8  13C6 00C00007           2361mm         MOVE.B D6,DUART_TXA                         ; SEND THE NEXT CHARACTER
00000FEE                          2362mm     ENDC
00000FEE                          2363mm 
00000FEE                 FALSE    2364mm     IFNE DEBUG
00000FEE                          2365mm     ENDC
00000FEE                          2366mm 
00000FEE                          2367mm     ENDM
00000FEE  57CA FFDA               2368m     DBEQ D2,LOOP_141
00000FF2                          2369m     ENDM
00000FF2                          2370m     PRINT_CRLF D5,A4
00000FF2  49FA 0C1A               2371m     LEA CRLF(PC),A4
00000FF6                          2372mm     PRINT_STR A4,D5
00000FF6                          2373mm LOOP_147
00000FF6  0C14 0000               2374mm     CMP.B #NULL,(A4)                                ; 0 -> DONE
00000FFA  6700 0016               2375mm     BEQ EXIT_147
00000FFE                          2376mmm     PRINT_CHAR (A4)+,D5
00000FFE                          2377mmm WAIT_FOR_READY_148                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000FFE                 TRUE     2378mmm     IFEQ DEBUG
00000FFE  1A39 00C00003           2379mmm         MOVE.B DUART_SRA,D5                         ; READ STATUS REGISTER
00001004  0805 0002               2380mmm         BTST #2,D5                                  ; CHECK FOR SPACE TO SEND
00001008  67F4                    2381mmm         BEQ WAIT_FOR_READY_148                      ; NO SPACE, CHECK AGAIN
0000100A  13DC 00C00007           2382mmm         MOVE.B (A4)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00001010                          2383mmm     ENDC
00001010                          2384mmm 
00001010                 FALSE    2385mmm     IFNE DEBUG
00001010                          2386mmm     ENDC
00001010                          2387mmm 
00001010                          2388mmm     ENDM
00001010  60E4                    2389mm     BRA LOOP_147
00001012                          2390mm EXIT_147
00001012                          2391mm     ENDM
00001012                          2392m     ENDM
00001012                          2393  
00001012  6000 F5E6               2394      BRA MAIN_LOOP
00001016                          2395  
00001016                          2396  G
00001016  2047                    2397      MOVE.L D7,A0                                        ; grab the address accumulator and then clear it
00001018  7E00                    2398      MOVE.L #0,D7
0000101A                          2399  
0000101A  4ED0                    2400      JMP (A0)
0000101C                          2401          
0000101C                          2402  Z
0000101C  207C 00200000           2403      MOVE.L #RAM,A0                                  ; address of RAM
00001022  D1FC 00100000           2404      ADD.L #$100000,A0
00001028                          2405  
00001028                          2406      FOR.L D0 = #0 TO #$FFFFC BY #4 DO               ; write
00001028  7000                    2407s     MOVE.L  #0,D0
0000102A  6000 0012               2408s     BRA _20000007
0000102E                          2409s _20000006
0000102E  2200                    2410          MOVE.L D0,D1                                ; progress update
00001030  E089                    2411          LSR.L #8,D1 
00001032  E089                    2412          LSR.L #8,D1
00001034  13C1 00E00001           2413          MOVE.B D1,DISPLAY
0000103A                          2414          
0000103A  2108                    2415          MOVE.L A0,-(A0)
0000103C                          2416      ENDF
0000103C  5880                    2417s     ADD.L   #4,D0
0000103E                          2418s _20000007
0000103E  B0BC 000FFFFC           2419s     CMP.L   #$FFFFC,D0
00001044  6FE8                    2420s     BLE _20000006
00001046                          2421  
00001046  207C 00200000           2422      MOVE.L #RAM,A0                                  ; address of RAM
0000104C  D1FC 00100000           2423      ADD.L #$100000,A0
00001052                          2424  
00001052                          2425      FOR.L D0 = #0 TO #$FFFFC BY #4 DO               ; read back and check 
00001052  7000                    2426s     MOVE.L  #0,D0
00001054  6000 00A8               2427s     BRA _20000009
00001058                          2428s _20000008
00001058  2200                    2429          MOVE.L D0,D1                                ; progress update
0000105A  E089                    2430          LSR.L #8,D1
0000105C  E089                    2431          LSR.L #8,D1
0000105E  13C1 00E00001           2432          MOVE.B D1,DISPLAY
00001064                          2433  
00001064  2408                    2434          MOVE.L A0,D2
00001066  2220                    2435          MOVE.L -(A0),D1
00001068                          2436  
00001068                          2437          IF.L D2 <NE> D1 THEN
00001068  B481                    2438s     CMP.L   D1,D2
0000106A  6700 0090               2439s     BEQ _0000000C
0000106E  43FA 0B0F               2440              LEA RAM_ERROR(PC),A1
00001072                          2441m             PRINT_STR A1,D1
00001072                          2442m LOOP_149
00001072  0C11 0000               2443m     CMP.B #NULL,(A1)                                ; 0 -> DONE
00001076  6700 0016               2444m     BEQ EXIT_149
0000107A                          2445mm     PRINT_CHAR (A1)+,D1
0000107A                          2446mm WAIT_FOR_READY_150                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
0000107A                 TRUE     2447mm     IFEQ DEBUG
0000107A  1239 00C00003           2448mm         MOVE.B DUART_SRA,D1                         ; READ STATUS REGISTER
00001080  0801 0002               2449mm         BTST #2,D1                                  ; CHECK FOR SPACE TO SEND
00001084  67F4                    2450mm         BEQ WAIT_FOR_READY_150                      ; NO SPACE, CHECK AGAIN
00001086  13D9 00C00007           2451mm         MOVE.B (A1)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
0000108C                          2452mm     ENDC
0000108C                          2453mm 
0000108C                 FALSE    2454mm     IFNE DEBUG
0000108C                          2455mm     ENDC
0000108C                          2456mm 
0000108C                          2457mm     ENDM
0000108C  60E4                    2458m     BRA LOOP_149
0000108E                          2459m EXIT_149
0000108E                          2460m     ENDM
0000108E  2208                    2461              MOVE.L A0,D1
00001090  5981                    2462              SUB.L #4,D1
00001092                          2463m             PRINT_REG D1,D3,D2,D6,A1                ; print out failure address
00001092  43FA 0B80               2464m     LEA OX(PC),A1
00001096                          2465mm     PRINT_STR A1,D3
00001096                          2466mm LOOP_152
00001096  0C11 0000               2467mm     CMP.B #NULL,(A1)                                ; 0 -> DONE
0000109A  6700 0016               2468mm     BEQ EXIT_152
0000109E                          2469mmm     PRINT_CHAR (A1)+,D3
0000109E                          2470mmm WAIT_FOR_READY_153                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
0000109E                 TRUE     2471mmm     IFEQ DEBUG
0000109E  1639 00C00003           2472mmm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
000010A4  0803 0002               2473mmm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
000010A8  67F4                    2474mmm         BEQ WAIT_FOR_READY_153                      ; NO SPACE, CHECK AGAIN
000010AA  13D9 00C00007           2475mmm         MOVE.B (A1)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
000010B0                          2476mmm     ENDC
000010B0                          2477mmm 
000010B0                 FALSE    2478mmm     IFNE DEBUG
000010B0                          2479mmm     ENDC
000010B0                          2480mmm 
000010B0                          2481mmm     ENDM
000010B0  60E4                    2482mm     BRA LOOP_152
000010B2                          2483mm EXIT_152
000010B2                          2484mm     ENDM
000010B2  7C07                    2485m     MOVE.L #7,D6                                    ; LOOP ROUND ALL 8 HEX CHARACTERS OF 4 BITS EACH
000010B4                          2486m LOOP_151
000010B4                          2487mm     BIN2HEX D1,D2,A1
000010B4  43FA 0ADA               2488mm     LEA BIN2HEX_LUT(PC),A1                          ; LOAD THE LOOKUP TABLE
000010B8  E999                    2489mm     ROL.L #4,D1                                     ; SHIFT THE TOP 4 BITS DOWN TO BOTTOM OF THE REGISTER THE AND MASK OFF EVERYTHING ELSE
000010BA  1401                    2490mm     MOVE.B D1,D2
000010BC  0282 0000000F           2491mm     ANDI.L #$F,D2
000010C2  1431 2000               2492mm     MOVE.B 0(A1,D2),D2                              ; USE THAT AS AN INDEX INTO THE LUT
000010C6                          2493mm     ENDM
000010C6                          2494mm     PRINT_CHAR D2,D3
000010C6                          2495mm WAIT_FOR_READY_155                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
000010C6                 TRUE     2496mm     IFEQ DEBUG
000010C6  1639 00C00003           2497mm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
000010CC  0803 0002               2498mm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
000010D0  67F4                    2499mm         BEQ WAIT_FOR_READY_155                      ; NO SPACE, CHECK AGAIN
000010D2  13C2 00C00007           2500mm         MOVE.B D2,DUART_TXA                         ; SEND THE NEXT CHARACTER
000010D8                          2501mm     ENDC
000010D8                          2502mm 
000010D8                 FALSE    2503mm     IFNE DEBUG
000010D8                          2504mm     ENDC
000010D8                          2505mm 
000010D8                          2506mm     ENDM
000010D8  57CE FFDA               2507m     DBEQ D6,LOOP_151
000010DC                          2508m     ENDM
000010DC                          2509m             PRINT_CRLF D3,A1
000010DC  43FA 0B30               2510m     LEA CRLF(PC),A1
000010E0                          2511mm     PRINT_STR A1,D3
000010E0                          2512mm LOOP_157
000010E0  0C11 0000               2513mm     CMP.B #NULL,(A1)                                ; 0 -> DONE
000010E4  6700 0016               2514mm     BEQ EXIT_157
000010E8                          2515mmm     PRINT_CHAR (A1)+,D3
000010E8                          2516mmm WAIT_FOR_READY_158                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
000010E8                 TRUE     2517mmm     IFEQ DEBUG
000010E8  1639 00C00003           2518mmm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
000010EE  0803 0002               2519mmm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
000010F2  67F4                    2520mmm         BEQ WAIT_FOR_READY_158                      ; NO SPACE, CHECK AGAIN
000010F4  13D9 00C00007           2521mmm         MOVE.B (A1)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
000010FA                          2522mmm     ENDC
000010FA                          2523mmm 
000010FA                 FALSE    2524mmm     IFNE DEBUG
000010FA                          2525mmm     ENDC
000010FA                          2526mmm 
000010FA                          2527mmm     ENDM
000010FA  60E4                    2528mm     BRA LOOP_157
000010FC                          2529mm EXIT_157
000010FC                          2530mm     ENDM
000010FC                          2531m     ENDM
000010FC                          2532          ENDI 
000010FC                          2533s _0000000C
000010FC                          2534      ENDF
000010FC  5880                    2535s     ADD.L   #4,D0
000010FE                          2536s _20000009
000010FE  B0BC 000FFFFC           2537s     CMP.L   #$FFFFC,D0
00001104  6F00 FF52               2538s     BLE _20000008
00001108                          2539  
00001108  6000 F4F0               2540      BRA MAIN_LOOP
0000110C                          2541  
0000110C                          2542  L
0000110C  7000                    2543      MOVE.L #0,D0                                    ; D0 will be the length to write               
0000110E  7200                    2544      MOVE.L #0,D1                                    ; D1 will be the address to write 
00001110                          2545  
00001110                          2546      FOR D2 = #0 TO #7 DO                            ; read 4 bytes, we'll split into 2 byte address (MS) and 2 byte length (LS)
00001110  343C 0000               2547s     MOVE.W  #0,D2
00001114  6000 0046               2548s     BRA _2000000B
00001118                          2549s _2000000A
00001118  E989                    2550          LSL.L #4,D1                                 ; make what we have so far more significant
0000111A                          2551m         WAIT_CHAR D3,D4                             ; next character -> D2
0000111A                          2552m WAIT_FOR_READY_159                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
0000111A                 TRUE     2553m     IFEQ DEBUG
0000111A  1839 00C00003           2554m         MOVE.B DUART_SRA,D4                         ; READ STATUS REGISTER
00001120  0804 0000               2555m         BTST #0,D4                                  ; CHECK FOR CHARACTER
00001124  67F4                    2556m         BEQ WAIT_FOR_READY_159                      ; NOTHING, CHECK AGAIN
00001126                          2557m     ENDC
00001126                          2558m 
00001126                          2559mm     READ_CHAR D3
00001126                 TRUE     2560mm     IFEQ DEBUG
00001126  1639 00C00007           2561mm         MOVE.B DUART_RXA,D3                         ; GOT A CHARACTER, READ IT
0000112C                          2562mm     ENDC
0000112C                 FALSE    2563mm     IFNE DEBUG
0000112C                          2564mm     ENDC
0000112C                          2565mm 
0000112C  B63C 001B               2566mm     CMP.B #$1B,D3                                   ; CHECK FOR ESCAPE AND GO TO START
00001130  6700 F2CE               2567mm     BEQ START
00001134                          2568mm     ENDM
00001134                          2569m 
00001134                 TRUE     2570m     IFEQ DEBUG
00001134                          2571mm         PRINT_CHAR D3,D4                            ; ECHO IT BACK
00001134                          2572mm WAIT_FOR_READY_161                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00001134                 TRUE     2573mm     IFEQ DEBUG
00001134  1839 00C00003           2574mm         MOVE.B DUART_SRA,D4                         ; READ STATUS REGISTER
0000113A  0804 0002               2575mm         BTST #2,D4                                  ; CHECK FOR SPACE TO SEND
0000113E  67F4                    2576mm         BEQ WAIT_FOR_READY_161                      ; NO SPACE, CHECK AGAIN
00001140  13C3 00C00007           2577mm         MOVE.B D3,DUART_TXA                         ; SEND THE NEXT CHARACTER
00001146                          2578mm     ENDC
00001146                          2579mm 
00001146                 FALSE    2580mm     IFNE DEBUG
00001146                          2581mm     ENDC
00001146                          2582mm 
00001146                          2583mm     ENDM
00001146                          2584m     ENDC
00001146                          2585m     ENDM
00001146                          2586m         HEX2BIN D3,D3,A0                            ; convert to binary -> D2
00001146  41FA 0A58               2587m     LEA HEX2BIN_LUT(PC),A0                          ; LOAD THE LOOKUP TABLE
0000114A  0403 0030               2588m     SUB.B #'0',D3                                   ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
0000114E  C6BC 000000FF           2589m     AND.L #$FF,D3                                   ; IGNORE THE TOP 3 BYTES
00001154  1630 3000               2590m     MOVE.B 0(A0,D3),D3                              ; USE THAT AS AN INDEX INTO THE LUT   
00001158                          2591m     ENDM
00001158  8203                    2592          OR.B D3,D1
0000115A                          2593      ENDF
0000115A  5242                    2594s     ADD.W   #1,D2
0000115C                          2595s _2000000B
0000115C  B47C 0007               2596s     CMP.W   #7,D2
00001160  6FB6                    2597s     BLE _2000000A
00001162                          2598  
00001162  3001                    2599      MOVE.W D1,D0                                    ; extract the LSword for the length
00001164  E089                    2600      LSR.L #8,D1                                     ; extract the MSword for the address
00001166  E089                    2601      LSR.L #8,D1
00001168                          2602  
00001168                          2603m     PRINT_CRLF D2,A1
00001168  43FA 0AA4               2604m     LEA CRLF(PC),A1
0000116C                          2605mm     PRINT_STR A1,D2
0000116C                          2606mm LOOP_164
0000116C  0C11 0000               2607mm     CMP.B #NULL,(A1)                                ; 0 -> DONE
00001170  6700 0016               2608mm     BEQ EXIT_164
00001174                          2609mmm     PRINT_CHAR (A1)+,D2
00001174                          2610mmm WAIT_FOR_READY_165                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00001174                 TRUE     2611mmm     IFEQ DEBUG
00001174  1439 00C00003           2612mmm         MOVE.B DUART_SRA,D2                         ; READ STATUS REGISTER
0000117A  0802 0002               2613mmm         BTST #2,D2                                  ; CHECK FOR SPACE TO SEND
0000117E  67F4                    2614mmm         BEQ WAIT_FOR_READY_165                      ; NO SPACE, CHECK AGAIN
00001180  13D9 00C00007           2615mmm         MOVE.B (A1)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00001186                          2616mmm     ENDC
00001186                          2617mmm 
00001186                 FALSE    2618mmm     IFNE DEBUG
00001186                          2619mmm     ENDC
00001186                          2620mmm 
00001186                          2621mmm     ENDM
00001186  60E4                    2622mm     BRA LOOP_164
00001188                          2623mm EXIT_164
00001188                          2624mm     ENDM
00001188                          2625m     ENDM
00001188                          2626  
00001188  2041                    2627      MOVE.L D1,A0                                    ; target address
0000118A  2641                    2628      MOVE.L D1,A3                                    ; keep a copy for later
0000118C                          2629  
0000118C  2247                    2630      MOVE.L D7,A1                                    ; address accumulator -> address register
0000118E  D3FC 00000400           2631      ADD.L #START,A1                             ; skip the vectors
00001194  2847                    2632      MOVE.L D7,A4                                    ; keep a clean copy for later
00001196  7E00                    2633      MOVE.L #0,D7                                    ; clear the now used address accumulator
00001198                          2634  
00001198                          2635m     UNPROTECT
00001198  31FC AAAA 2AAA          2636m     MOVE.W #$AAAA,$2AAA                             ; REMOVE WRITE PROTECT
0000119E  4E71                    2637m     NOP
000011A0  31FC 5555 1554          2638m     MOVE.W #$5555,$1554
000011A6  4E71                    2639m     NOP
000011A8  31FC 8080 2AAA          2640m     MOVE.W #$8080,$2AAA
000011AE  4E71                    2641m     NOP
000011B0  31FC AAAA 2AAA          2642m     MOVE.W #$AAAA,$2AAA
000011B6  4E71                    2643m     NOP
000011B8  31FC 5555 1554          2644m     MOVE.W #$5555,$1554
000011BE  4E71                    2645m     NOP
000011C0  31FC 2020 2AAA          2646m     MOVE.W #$2020,$2AAA
000011C6                          2647m     ENDM
000011C6                          2648  
000011C6  45FA 09EF               2649      LEA LOADING(PC),A2                              ; the prints seem to be important for timing to unprotect the EEPROM
000011CA                          2650m     PRINT_STR A2,D2
000011CA                          2651m LOOP_167
000011CA  0C12 0000               2652m     CMP.B #NULL,(A2)                                ; 0 -> DONE
000011CE  6700 0016               2653m     BEQ EXIT_167
000011D2                          2654mm     PRINT_CHAR (A2)+,D2
000011D2                          2655mm WAIT_FOR_READY_168                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
000011D2                 TRUE     2656mm     IFEQ DEBUG
000011D2  1439 00C00003           2657mm         MOVE.B DUART_SRA,D2                         ; READ STATUS REGISTER
000011D8  0802 0002               2658mm         BTST #2,D2                                  ; CHECK FOR SPACE TO SEND
000011DC  67F4                    2659mm         BEQ WAIT_FOR_READY_168                      ; NO SPACE, CHECK AGAIN
000011DE  13DA 00C00007           2660mm         MOVE.B (A2)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
000011E4                          2661mm     ENDC
000011E4                          2662mm 
000011E4                 FALSE    2663mm     IFNE DEBUG
000011E4                          2664mm     ENDC
000011E4                          2665mm 
000011E4                          2666mm     ENDM
000011E4  60E4                    2667m     BRA LOOP_167
000011E6                          2668m EXIT_167
000011E6                          2669m     ENDM
000011E6                          2670  
000011E6  45FA 09E3               2671      LEA CODE(PC),A2
000011EA                          2672m     PRINT_STR A2,D2
000011EA                          2673m LOOP_169
000011EA  0C12 0000               2674m     CMP.B #NULL,(A2)                                ; 0 -> DONE
000011EE  6700 0016               2675m     BEQ EXIT_169
000011F2                          2676mm     PRINT_CHAR (A2)+,D2
000011F2                          2677mm WAIT_FOR_READY_170                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
000011F2                 TRUE     2678mm     IFEQ DEBUG
000011F2  1439 00C00003           2679mm         MOVE.B DUART_SRA,D2                         ; READ STATUS REGISTER
000011F8  0802 0002               2680mm         BTST #2,D2                                  ; CHECK FOR SPACE TO SEND
000011FC  67F4                    2681mm         BEQ WAIT_FOR_READY_170                      ; NO SPACE, CHECK AGAIN
000011FE  13DA 00C00007           2682mm         MOVE.B (A2)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00001204                          2683mm     ENDC
00001204                          2684mm 
00001204                 FALSE    2685mm     IFNE DEBUG
00001204                          2686mm     ENDC
00001204                          2687mm 
00001204                          2688mm     ENDM
00001204  60E4                    2689m     BRA LOOP_169
00001206                          2690m EXIT_169
00001206                          2691m     ENDM
00001206                          2692      
00001206  2409                    2693      MOVE.L A1,D2
00001208                          2694m     PRINT_REG D2,D3,D4,D5,A2
00001208  45FA 0A0A               2695m     LEA OX(PC),A2
0000120C                          2696mm     PRINT_STR A2,D3
0000120C                          2697mm LOOP_172
0000120C  0C12 0000               2698mm     CMP.B #NULL,(A2)                                ; 0 -> DONE
00001210  6700 0016               2699mm     BEQ EXIT_172
00001214                          2700mmm     PRINT_CHAR (A2)+,D3
00001214                          2701mmm WAIT_FOR_READY_173                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00001214                 TRUE     2702mmm     IFEQ DEBUG
00001214  1639 00C00003           2703mmm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
0000121A  0803 0002               2704mmm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
0000121E  67F4                    2705mmm         BEQ WAIT_FOR_READY_173                      ; NO SPACE, CHECK AGAIN
00001220  13DA 00C00007           2706mmm         MOVE.B (A2)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00001226                          2707mmm     ENDC
00001226                          2708mmm 
00001226                 FALSE    2709mmm     IFNE DEBUG
00001226                          2710mmm     ENDC
00001226                          2711mmm 
00001226                          2712mmm     ENDM
00001226  60E4                    2713mm     BRA LOOP_172
00001228                          2714mm EXIT_172
00001228                          2715mm     ENDM
00001228  7A07                    2716m     MOVE.L #7,D5                                    ; LOOP ROUND ALL 8 HEX CHARACTERS OF 4 BITS EACH
0000122A                          2717m LOOP_171
0000122A                          2718mm     BIN2HEX D2,D4,A2
0000122A  45FA 0964               2719mm     LEA BIN2HEX_LUT(PC),A2                          ; LOAD THE LOOKUP TABLE
0000122E  E99A                    2720mm     ROL.L #4,D2                                     ; SHIFT THE TOP 4 BITS DOWN TO BOTTOM OF THE REGISTER THE AND MASK OFF EVERYTHING ELSE
00001230  1802                    2721mm     MOVE.B D2,D4
00001232  0284 0000000F           2722mm     ANDI.L #$F,D4
00001238  1832 4000               2723mm     MOVE.B 0(A2,D4),D4                              ; USE THAT AS AN INDEX INTO THE LUT
0000123C                          2724mm     ENDM
0000123C                          2725mm     PRINT_CHAR D4,D3
0000123C                          2726mm WAIT_FOR_READY_175                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
0000123C                 TRUE     2727mm     IFEQ DEBUG
0000123C  1639 00C00003           2728mm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
00001242  0803 0002               2729mm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
00001246  67F4                    2730mm         BEQ WAIT_FOR_READY_175                      ; NO SPACE, CHECK AGAIN
00001248  13C4 00C00007           2731mm         MOVE.B D4,DUART_TXA                         ; SEND THE NEXT CHARACTER
0000124E                          2732mm     ENDC
0000124E                          2733mm 
0000124E                 FALSE    2734mm     IFNE DEBUG
0000124E                          2735mm     ENDC
0000124E                          2736mm 
0000124E                          2737mm     ENDM
0000124E  57CD FFDA               2738m     DBEQ D5,LOOP_171
00001252                          2739m     ENDM
00001252                          2740  
00001252  45FA 09C3               2741      LEA TO(PC),A2
00001256                          2742m     PRINT_STR A2,D3
00001256                          2743m LOOP_176
00001256  0C12 0000               2744m     CMP.B #NULL,(A2)                                ; 0 -> DONE
0000125A  6700 0016               2745m     BEQ EXIT_176
0000125E                          2746mm     PRINT_CHAR (A2)+,D3
0000125E                          2747mm WAIT_FOR_READY_177                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
0000125E                 TRUE     2748mm     IFEQ DEBUG
0000125E  1639 00C00003           2749mm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
00001264  0803 0002               2750mm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
00001268  67F4                    2751mm         BEQ WAIT_FOR_READY_177                      ; NO SPACE, CHECK AGAIN
0000126A  13DA 00C00007           2752mm         MOVE.B (A2)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00001270                          2753mm     ENDC
00001270                          2754mm 
00001270                 FALSE    2755mm     IFNE DEBUG
00001270                          2756mm     ENDC
00001270                          2757mm 
00001270                          2758mm     ENDM
00001270  60E4                    2759m     BRA LOOP_176
00001272                          2760m EXIT_176
00001272                          2761m     ENDM
00001272                          2762  
00001272  2408                    2763      MOVE.L A0,D2
00001274                          2764m     PRINT_REG D2,D3,D4,D5,A2
00001274  45FA 099E               2765m     LEA OX(PC),A2
00001278                          2766mm     PRINT_STR A2,D3
00001278                          2767mm LOOP_179
00001278  0C12 0000               2768mm     CMP.B #NULL,(A2)                                ; 0 -> DONE
0000127C  6700 0016               2769mm     BEQ EXIT_179
00001280                          2770mmm     PRINT_CHAR (A2)+,D3
00001280                          2771mmm WAIT_FOR_READY_180                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00001280                 TRUE     2772mmm     IFEQ DEBUG
00001280  1639 00C00003           2773mmm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
00001286  0803 0002               2774mmm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
0000128A  67F4                    2775mmm         BEQ WAIT_FOR_READY_180                      ; NO SPACE, CHECK AGAIN
0000128C  13DA 00C00007           2776mmm         MOVE.B (A2)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00001292                          2777mmm     ENDC
00001292                          2778mmm 
00001292                 FALSE    2779mmm     IFNE DEBUG
00001292                          2780mmm     ENDC
00001292                          2781mmm 
00001292                          2782mmm     ENDM
00001292  60E4                    2783mm     BRA LOOP_179
00001294                          2784mm EXIT_179
00001294                          2785mm     ENDM
00001294  7A07                    2786m     MOVE.L #7,D5                                    ; LOOP ROUND ALL 8 HEX CHARACTERS OF 4 BITS EACH
00001296                          2787m LOOP_178
00001296                          2788mm     BIN2HEX D2,D4,A2
00001296  45FA 08F8               2789mm     LEA BIN2HEX_LUT(PC),A2                          ; LOAD THE LOOKUP TABLE
0000129A  E99A                    2790mm     ROL.L #4,D2                                     ; SHIFT THE TOP 4 BITS DOWN TO BOTTOM OF THE REGISTER THE AND MASK OFF EVERYTHING ELSE
0000129C  1802                    2791mm     MOVE.B D2,D4
0000129E  0284 0000000F           2792mm     ANDI.L #$F,D4
000012A4  1832 4000               2793mm     MOVE.B 0(A2,D4),D4                              ; USE THAT AS AN INDEX INTO THE LUT
000012A8                          2794mm     ENDM
000012A8                          2795mm     PRINT_CHAR D4,D3
000012A8                          2796mm WAIT_FOR_READY_182                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
000012A8                 TRUE     2797mm     IFEQ DEBUG
000012A8  1639 00C00003           2798mm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
000012AE  0803 0002               2799mm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
000012B2  67F4                    2800mm         BEQ WAIT_FOR_READY_182                      ; NO SPACE, CHECK AGAIN
000012B4  13C4 00C00007           2801mm         MOVE.B D4,DUART_TXA                         ; SEND THE NEXT CHARACTER
000012BA                          2802mm     ENDC
000012BA                          2803mm 
000012BA                 FALSE    2804mm     IFNE DEBUG
000012BA                          2805mm     ENDC
000012BA                          2806mm 
000012BA                          2807mm     ENDM
000012BA  57CD FFDA               2808m     DBEQ D5,LOOP_178
000012BE                          2809m     ENDM
000012BE                          2810  
000012BE                          2811m     PRINT_CRLF D3,A2
000012BE  45FA 094E               2812m     LEA CRLF(PC),A2
000012C2                          2813mm     PRINT_STR A2,D3
000012C2                          2814mm LOOP_184
000012C2  0C12 0000               2815mm     CMP.B #NULL,(A2)                                ; 0 -> DONE
000012C6  6700 0016               2816mm     BEQ EXIT_184
000012CA                          2817mmm     PRINT_CHAR (A2)+,D3
000012CA                          2818mmm WAIT_FOR_READY_185                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
000012CA                 TRUE     2819mmm     IFEQ DEBUG
000012CA  1639 00C00003           2820mmm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
000012D0  0803 0002               2821mmm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
000012D4  67F4                    2822mmm         BEQ WAIT_FOR_READY_185                      ; NO SPACE, CHECK AGAIN
000012D6  13DA 00C00007           2823mmm         MOVE.B (A2)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
000012DC                          2824mmm     ENDC
000012DC                          2825mmm 
000012DC                 FALSE    2826mmm     IFNE DEBUG
000012DC                          2827mmm     ENDC
000012DC                          2828mmm 
000012DC                          2829mmm     ENDM
000012DC  60E4                    2830mm     BRA LOOP_184
000012DE                          2831mm EXIT_184
000012DE                          2832mm     ENDM
000012DE                          2833m     ENDM
000012DE                          2834  
000012DE                          2835      WHILE D0 <GT> #0 DO
000012DE                          2836s _10000014
000012DE  B07C 0000               2837s     CMP.W   #0,D0
000012E2  6F00 001C               2838s     BLE _10000015
000012E6  5580                    2839          SUB.L #2,D0
000012E8                          2840  
000012E8  13D1 00E00001           2841          MOVE.B (A1),DISPLAY
000012EE                          2842m         PROGRAM (A1),(A0),D2
000012EE  3091                    2843m   MOVE.W (A1),(A0)                                      ; WRITE THE DATA
000012F0                          2844m 
000012F0                          2845m WAIT_FOR_COMPLETE_186
000012F0  3410                    2846m         MOVE.W (A0),D2
000012F2                          2847m 
000012F2                          2848m         IF.W D2 <NE> (A1) THEN
000012F2  B451                    2849ms     CMP.W   (A1),D2
000012F4  6700 0004               2850ms     BEQ _0000000D
000012F8  60F6                    2851m             BRA WAIT_FOR_COMPLETE_186
000012FA                          2852m         ENDI
000012FA                          2853ms _0000000D
000012FA                          2854m         ENDM
000012FA                          2855  
000012FA  5488                    2856          ADD.L #2,A0
000012FC  5489                    2857          ADD.L #2,A1
000012FE                          2858      ENDW
000012FE  60DE                    2859s     BRA _10000014
00001300                          2860s _10000015
00001300                          2861  
00001300  45FA 08D8               2862      LEA SP(PC),A2
00001304                          2863m     PRINT_STR A2,D2
00001304                          2864m LOOP_187
00001304  0C12 0000               2865m     CMP.B #NULL,(A2)                                ; 0 -> DONE
00001308  6700 0016               2866m     BEQ EXIT_187
0000130C                          2867mm     PRINT_CHAR (A2)+,D2
0000130C                          2868mm WAIT_FOR_READY_188                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
0000130C                 TRUE     2869mm     IFEQ DEBUG
0000130C  1439 00C00003           2870mm         MOVE.B DUART_SRA,D2                         ; READ STATUS REGISTER
00001312  0802 0002               2871mm         BTST #2,D2                                  ; CHECK FOR SPACE TO SEND
00001316  67F4                    2872mm         BEQ WAIT_FOR_READY_188                      ; NO SPACE, CHECK AGAIN
00001318  13DA 00C00007           2873mm         MOVE.B (A2)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
0000131E                          2874mm     ENDC
0000131E                          2875mm 
0000131E                 FALSE    2876mm     IFNE DEBUG
0000131E                          2877mm     ENDC
0000131E                          2878mm 
0000131E                          2879mm     ENDM
0000131E  60E4                    2880m     BRA LOOP_187
00001320                          2881m EXIT_187
00001320                          2882m     ENDM
00001320                          2883      
00001320  41F8 0000               2884      LEA STACK,A0
00001324  D1CC                    2885      ADD.L A4,A0
00001326  2010                    2886      MOVE.L (A0),D0
00001328                          2887m     PRINT_REG D0,D2,D3,D4,A3
00001328  47FA 08EA               2888m     LEA OX(PC),A3
0000132C                          2889mm     PRINT_STR A3,D2
0000132C                          2890mm LOOP_190
0000132C  0C13 0000               2891mm     CMP.B #NULL,(A3)                                ; 0 -> DONE
00001330  6700 0016               2892mm     BEQ EXIT_190
00001334                          2893mmm     PRINT_CHAR (A3)+,D2
00001334                          2894mmm WAIT_FOR_READY_191                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00001334                 TRUE     2895mmm     IFEQ DEBUG
00001334  1439 00C00003           2896mmm         MOVE.B DUART_SRA,D2                         ; READ STATUS REGISTER
0000133A  0802 0002               2897mmm         BTST #2,D2                                  ; CHECK FOR SPACE TO SEND
0000133E  67F4                    2898mmm         BEQ WAIT_FOR_READY_191                      ; NO SPACE, CHECK AGAIN
00001340  13DB 00C00007           2899mmm         MOVE.B (A3)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00001346                          2900mmm     ENDC
00001346                          2901mmm 
00001346                 FALSE    2902mmm     IFNE DEBUG
00001346                          2903mmm     ENDC
00001346                          2904mmm 
00001346                          2905mmm     ENDM
00001346  60E4                    2906mm     BRA LOOP_190
00001348                          2907mm EXIT_190
00001348                          2908mm     ENDM
00001348  7807                    2909m     MOVE.L #7,D4                                    ; LOOP ROUND ALL 8 HEX CHARACTERS OF 4 BITS EACH
0000134A                          2910m LOOP_189
0000134A                          2911mm     BIN2HEX D0,D3,A3
0000134A  47FA 0844               2912mm     LEA BIN2HEX_LUT(PC),A3                          ; LOAD THE LOOKUP TABLE
0000134E  E998                    2913mm     ROL.L #4,D0                                     ; SHIFT THE TOP 4 BITS DOWN TO BOTTOM OF THE REGISTER THE AND MASK OFF EVERYTHING ELSE
00001350  1600                    2914mm     MOVE.B D0,D3
00001352  0283 0000000F           2915mm     ANDI.L #$F,D3
00001358  1633 3000               2916mm     MOVE.B 0(A3,D3),D3                              ; USE THAT AS AN INDEX INTO THE LUT
0000135C                          2917mm     ENDM
0000135C                          2918mm     PRINT_CHAR D3,D2
0000135C                          2919mm WAIT_FOR_READY_193                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
0000135C                 TRUE     2920mm     IFEQ DEBUG
0000135C  1439 00C00003           2921mm         MOVE.B DUART_SRA,D2                         ; READ STATUS REGISTER
00001362  0802 0002               2922mm         BTST #2,D2                                  ; CHECK FOR SPACE TO SEND
00001366  67F4                    2923mm         BEQ WAIT_FOR_READY_193                      ; NO SPACE, CHECK AGAIN
00001368  13C3 00C00007           2924mm         MOVE.B D3,DUART_TXA                         ; SEND THE NEXT CHARACTER
0000136E                          2925mm     ENDC
0000136E                          2926mm 
0000136E                 FALSE    2927mm     IFNE DEBUG
0000136E                          2928mm     ENDC
0000136E                          2929mm 
0000136E                          2930mm     ENDM
0000136E  57CC FFDA               2931m     DBEQ D4,LOOP_189
00001372                          2932m     ENDM
00001372                          2933m     PRINT_CRLF D2,A2
00001372  45FA 089A               2934m     LEA CRLF(PC),A2
00001376                          2935mm     PRINT_STR A2,D2
00001376                          2936mm LOOP_195
00001376  0C12 0000               2937mm     CMP.B #NULL,(A2)                                ; 0 -> DONE
0000137A  6700 0016               2938mm     BEQ EXIT_195
0000137E                          2939mmm     PRINT_CHAR (A2)+,D2
0000137E                          2940mmm WAIT_FOR_READY_196                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
0000137E                 TRUE     2941mmm     IFEQ DEBUG
0000137E  1439 00C00003           2942mmm         MOVE.B DUART_SRA,D2                         ; READ STATUS REGISTER
00001384  0802 0002               2943mmm         BTST #2,D2                                  ; CHECK FOR SPACE TO SEND
00001388  67F4                    2944mmm         BEQ WAIT_FOR_READY_196                      ; NO SPACE, CHECK AGAIN
0000138A  13DA 00C00007           2945mmm         MOVE.B (A2)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00001390                          2946mmm     ENDC
00001390                          2947mmm 
00001390                 FALSE    2948mmm     IFNE DEBUG
00001390                          2949mmm     ENDC
00001390                          2950mmm 
00001390                          2951mmm     ENDM
00001390  60E4                    2952mm     BRA LOOP_195
00001392                          2953mm EXIT_195
00001392                          2954mm     ENDM
00001392                          2955m     ENDM
00001392                          2956      
00001392  207C 00000000           2957      MOVE.L #0,A0
00001398                          2958m     PROGRAM_VECTOR D0,A0,D2
00001398  5488                    2959m     ADD.L #2,A0
0000139A                          2960mm     PROGRAM D0, (A0), D2                                ; WRITE IT
0000139A  3080                    2961mm   MOVE.W D0,(A0)                                        ; WRITE THE DATA
0000139C                          2962mm 
0000139C                          2963mm WAIT_FOR_COMPLETE_198
0000139C  3410                    2964mm         MOVE.W (A0),D2
0000139E                          2965mm 
0000139E                          2966mm         IF.W D2 <NE> D0 THEN
0000139E  B440                    2967mms     CMP.W   D0,D2
000013A0  6700 0004               2968mms     BEQ _0000000E
000013A4  60F6                    2969mm             BRA WAIT_FOR_COMPLETE_198
000013A6                          2970mm         ENDI
000013A6                          2971mms _0000000E
000013A6                          2972mm         ENDM
000013A6  E088                    2973m     LSR.L #8,D0
000013A8  E088                    2974m     LSR.L #8,D0
000013AA  5588                    2975m     SUB.L #2,A0
000013AC                          2976mm     PROGRAM D0, (A0), D2
000013AC  3080                    2977mm   MOVE.W D0,(A0)                                        ; WRITE THE DATA
000013AE                          2978mm 
000013AE                          2979mm WAIT_FOR_COMPLETE_199
000013AE  3410                    2980mm         MOVE.W (A0),D2
000013B0                          2981mm 
000013B0                          2982mm         IF.W D2 <NE> D0 THEN
000013B0  B440                    2983mms     CMP.W   D0,D2
000013B2  6700 0004               2984mms     BEQ _0000000F
000013B6  60F6                    2985mm             BRA WAIT_FOR_COMPLETE_199
000013B8                          2986mm         ENDI
000013B8                          2987mms _0000000F
000013B8                          2988mm         ENDM
000013B8                          2989m     ENDM
000013B8                          2990      
000013B8  45FA 0842               2991      LEA VECTORS(PC),A2
000013BC                          2992m     PRINT_STR A2,D2
000013BC                          2993m LOOP_200
000013BC  0C12 0000               2994m     CMP.B #NULL,(A2)                                ; 0 -> DONE
000013C0  6700 0016               2995m     BEQ EXIT_200
000013C4                          2996mm     PRINT_CHAR (A2)+,D2
000013C4                          2997mm WAIT_FOR_READY_201                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
000013C4                 TRUE     2998mm     IFEQ DEBUG
000013C4  1439 00C00003           2999mm         MOVE.B DUART_SRA,D2                         ; READ STATUS REGISTER
000013CA  0802 0002               3000mm         BTST #2,D2                                  ; CHECK FOR SPACE TO SEND
000013CE  67F4                    3001mm         BEQ WAIT_FOR_READY_201                      ; NO SPACE, CHECK AGAIN
000013D0  13DA 00C00007           3002mm         MOVE.B (A2)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
000013D6                          3003mm     ENDC
000013D6                          3004mm 
000013D6                 FALSE    3005mm     IFNE DEBUG
000013D6                          3006mm     ENDC
000013D6                          3007mm 
000013D6                          3008mm     ENDM
000013D6  60E4                    3009m     BRA LOOP_200
000013D8                          3010m EXIT_200
000013D8                          3011m     ENDM
000013D8                          3012  
000013D8                          3013      FOR A0 = #RESET TO #START-4 BY #4 DO
000013D8  307C 0004               3014s     MOVE.W  #RESET,A0
000013DC  6000 0108               3015s     BRA _2000000D
000013E0                          3016s _2000000C
000013E0                          3017  
000013E0  2248                    3018          MOVE.L A0,A1
000013E2  D3CC                    3019          ADD.L A4,A1
000013E4                          3020              
000013E4  2011                    3021          MOVE.L (A1),D0  
000013E6  D081                    3022          ADD.L D1,D0
000013E8  0480 00000400           3023          SUB.L #START,D0
000013EE                          3024m         PRINT_REG D0,D2,D3,D4,A3
000013EE  47FA 0824               3025m     LEA OX(PC),A3
000013F2                          3026mm     PRINT_STR A3,D2
000013F2                          3027mm LOOP_203
000013F2  0C13 0000               3028mm     CMP.B #NULL,(A3)                                ; 0 -> DONE
000013F6  6700 0016               3029mm     BEQ EXIT_203
000013FA                          3030mmm     PRINT_CHAR (A3)+,D2
000013FA                          3031mmm WAIT_FOR_READY_204                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
000013FA                 TRUE     3032mmm     IFEQ DEBUG
000013FA  1439 00C00003           3033mmm         MOVE.B DUART_SRA,D2                         ; READ STATUS REGISTER
00001400  0802 0002               3034mmm         BTST #2,D2                                  ; CHECK FOR SPACE TO SEND
00001404  67F4                    3035mmm         BEQ WAIT_FOR_READY_204                      ; NO SPACE, CHECK AGAIN
00001406  13DB 00C00007           3036mmm         MOVE.B (A3)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
0000140C                          3037mmm     ENDC
0000140C                          3038mmm 
0000140C                 FALSE    3039mmm     IFNE DEBUG
0000140C                          3040mmm     ENDC
0000140C                          3041mmm 
0000140C                          3042mmm     ENDM
0000140C  60E4                    3043mm     BRA LOOP_203
0000140E                          3044mm EXIT_203
0000140E                          3045mm     ENDM
0000140E  7807                    3046m     MOVE.L #7,D4                                    ; LOOP ROUND ALL 8 HEX CHARACTERS OF 4 BITS EACH
00001410                          3047m LOOP_202
00001410                          3048mm     BIN2HEX D0,D3,A3
00001410  47FA 077E               3049mm     LEA BIN2HEX_LUT(PC),A3                          ; LOAD THE LOOKUP TABLE
00001414  E998                    3050mm     ROL.L #4,D0                                     ; SHIFT THE TOP 4 BITS DOWN TO BOTTOM OF THE REGISTER THE AND MASK OFF EVERYTHING ELSE
00001416  1600                    3051mm     MOVE.B D0,D3
00001418  0283 0000000F           3052mm     ANDI.L #$F,D3
0000141E  1633 3000               3053mm     MOVE.B 0(A3,D3),D3                              ; USE THAT AS AN INDEX INTO THE LUT
00001422                          3054mm     ENDM
00001422                          3055mm     PRINT_CHAR D3,D2
00001422                          3056mm WAIT_FOR_READY_206                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00001422                 TRUE     3057mm     IFEQ DEBUG
00001422  1439 00C00003           3058mm         MOVE.B DUART_SRA,D2                         ; READ STATUS REGISTER
00001428  0802 0002               3059mm         BTST #2,D2                                  ; CHECK FOR SPACE TO SEND
0000142C  67F4                    3060mm         BEQ WAIT_FOR_READY_206                      ; NO SPACE, CHECK AGAIN
0000142E  13C3 00C00007           3061mm         MOVE.B D3,DUART_TXA                         ; SEND THE NEXT CHARACTER
00001434                          3062mm     ENDC
00001434                          3063mm 
00001434                 FALSE    3064mm     IFNE DEBUG
00001434                          3065mm     ENDC
00001434                          3066mm 
00001434                          3067mm     ENDM
00001434  57CC FFDA               3068m     DBEQ D4,LOOP_202
00001438                          3069m     ENDM
00001438                          3070  
00001438  47FA 07DD               3071          LEA TO(PC),A3
0000143C                          3072m         PRINT_STR A3,D3
0000143C                          3073m LOOP_207
0000143C  0C13 0000               3074m     CMP.B #NULL,(A3)                                ; 0 -> DONE
00001440  6700 0016               3075m     BEQ EXIT_207
00001444                          3076mm     PRINT_CHAR (A3)+,D3
00001444                          3077mm WAIT_FOR_READY_208                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00001444                 TRUE     3078mm     IFEQ DEBUG
00001444  1639 00C00003           3079mm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
0000144A  0803 0002               3080mm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
0000144E  67F4                    3081mm         BEQ WAIT_FOR_READY_208                      ; NO SPACE, CHECK AGAIN
00001450  13DB 00C00007           3082mm         MOVE.B (A3)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00001456                          3083mm     ENDC
00001456                          3084mm 
00001456                 FALSE    3085mm     IFNE DEBUG
00001456                          3086mm     ENDC
00001456                          3087mm 
00001456                          3088mm     ENDM
00001456  60E4                    3089m     BRA LOOP_207
00001458                          3090m EXIT_207
00001458                          3091m     ENDM
00001458                          3092  
00001458  2408                    3093          MOVE.L A0,D2
0000145A                          3094m         PRINT_REG D2,D3,D4,D5,A3
0000145A  47FA 07B8               3095m     LEA OX(PC),A3
0000145E                          3096mm     PRINT_STR A3,D3
0000145E                          3097mm LOOP_210
0000145E  0C13 0000               3098mm     CMP.B #NULL,(A3)                                ; 0 -> DONE
00001462  6700 0016               3099mm     BEQ EXIT_210
00001466                          3100mmm     PRINT_CHAR (A3)+,D3
00001466                          3101mmm WAIT_FOR_READY_211                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00001466                 TRUE     3102mmm     IFEQ DEBUG
00001466  1639 00C00003           3103mmm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
0000146C  0803 0002               3104mmm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
00001470  67F4                    3105mmm         BEQ WAIT_FOR_READY_211                      ; NO SPACE, CHECK AGAIN
00001472  13DB 00C00007           3106mmm         MOVE.B (A3)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00001478                          3107mmm     ENDC
00001478                          3108mmm 
00001478                 FALSE    3109mmm     IFNE DEBUG
00001478                          3110mmm     ENDC
00001478                          3111mmm 
00001478                          3112mmm     ENDM
00001478  60E4                    3113mm     BRA LOOP_210
0000147A                          3114mm EXIT_210
0000147A                          3115mm     ENDM
0000147A  7A07                    3116m     MOVE.L #7,D5                                    ; LOOP ROUND ALL 8 HEX CHARACTERS OF 4 BITS EACH
0000147C                          3117m LOOP_209
0000147C                          3118mm     BIN2HEX D2,D4,A3
0000147C  47FA 0712               3119mm     LEA BIN2HEX_LUT(PC),A3                          ; LOAD THE LOOKUP TABLE
00001480  E99A                    3120mm     ROL.L #4,D2                                     ; SHIFT THE TOP 4 BITS DOWN TO BOTTOM OF THE REGISTER THE AND MASK OFF EVERYTHING ELSE
00001482  1802                    3121mm     MOVE.B D2,D4
00001484  0284 0000000F           3122mm     ANDI.L #$F,D4
0000148A  1833 4000               3123mm     MOVE.B 0(A3,D4),D4                              ; USE THAT AS AN INDEX INTO THE LUT
0000148E                          3124mm     ENDM
0000148E                          3125mm     PRINT_CHAR D4,D3
0000148E                          3126mm WAIT_FOR_READY_213                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
0000148E                 TRUE     3127mm     IFEQ DEBUG
0000148E  1639 00C00003           3128mm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
00001494  0803 0002               3129mm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
00001498  67F4                    3130mm         BEQ WAIT_FOR_READY_213                      ; NO SPACE, CHECK AGAIN
0000149A  13C4 00C00007           3131mm         MOVE.B D4,DUART_TXA                         ; SEND THE NEXT CHARACTER
000014A0                          3132mm     ENDC
000014A0                          3133mm 
000014A0                 FALSE    3134mm     IFNE DEBUG
000014A0                          3135mm     ENDC
000014A0                          3136mm 
000014A0                          3137mm     ENDM
000014A0  57CD FFDA               3138m     DBEQ D5,LOOP_209
000014A4                          3139m     ENDM
000014A4                          3140          
000014A4                          3141m         PRINT_CRLF D2,A3
000014A4  47FA 0768               3142m     LEA CRLF(PC),A3
000014A8                          3143mm     PRINT_STR A3,D2
000014A8                          3144mm LOOP_215
000014A8  0C13 0000               3145mm     CMP.B #NULL,(A3)                                ; 0 -> DONE
000014AC  6700 0016               3146mm     BEQ EXIT_215
000014B0                          3147mmm     PRINT_CHAR (A3)+,D2
000014B0                          3148mmm WAIT_FOR_READY_216                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
000014B0                 TRUE     3149mmm     IFEQ DEBUG
000014B0  1439 00C00003           3150mmm         MOVE.B DUART_SRA,D2                         ; READ STATUS REGISTER
000014B6  0802 0002               3151mmm         BTST #2,D2                                  ; CHECK FOR SPACE TO SEND
000014BA  67F4                    3152mmm         BEQ WAIT_FOR_READY_216                      ; NO SPACE, CHECK AGAIN
000014BC  13DB 00C00007           3153mmm         MOVE.B (A3)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
000014C2                          3154mmm     ENDC
000014C2                          3155mmm 
000014C2                 FALSE    3156mmm     IFNE DEBUG
000014C2                          3157mmm     ENDC
000014C2                          3158mmm 
000014C2                          3159mmm     ENDM
000014C2  60E4                    3160mm     BRA LOOP_215
000014C4                          3161mm EXIT_215
000014C4                          3162mm     ENDM
000014C4                          3163m     ENDM
000014C4                          3164          
000014C4                          3165m         PROGRAM_VECTOR D0,A0,D2
000014C4  5488                    3166m     ADD.L #2,A0
000014C6                          3167mm     PROGRAM D0, (A0), D2                                ; WRITE IT
000014C6  3080                    3168mm   MOVE.W D0,(A0)                                        ; WRITE THE DATA
000014C8                          3169mm 
000014C8                          3170mm WAIT_FOR_COMPLETE_218
000014C8  3410                    3171mm         MOVE.W (A0),D2
000014CA                          3172mm 
000014CA                          3173mm         IF.W D2 <NE> D0 THEN
000014CA  B440                    3174mms     CMP.W   D0,D2
000014CC  6700 0004               3175mms     BEQ _00000010
000014D0  60F6                    3176mm             BRA WAIT_FOR_COMPLETE_218
000014D2                          3177mm         ENDI
000014D2                          3178mms _00000010
000014D2                          3179mm         ENDM
000014D2  E088                    3180m     LSR.L #8,D0
000014D4  E088                    3181m     LSR.L #8,D0
000014D6  5588                    3182m     SUB.L #2,A0
000014D8                          3183mm     PROGRAM D0, (A0), D2
000014D8  3080                    3184mm   MOVE.W D0,(A0)                                        ; WRITE THE DATA
000014DA                          3185mm 
000014DA                          3186mm WAIT_FOR_COMPLETE_219
000014DA  3410                    3187mm         MOVE.W (A0),D2
000014DC                          3188mm 
000014DC                          3189mm         IF.W D2 <NE> D0 THEN
000014DC  B440                    3190mms     CMP.W   D0,D2
000014DE  6700 0004               3191mms     BEQ _00000011
000014E2  60F6                    3192mm             BRA WAIT_FOR_COMPLETE_219
000014E4                          3193mm         ENDI
000014E4                          3194mms _00000011
000014E4                          3195mm         ENDM
000014E4                          3196m     ENDM
000014E4                          3197      ENDF
000014E4  5848                    3198s     ADD.W   #4,A0
000014E6                          3199s _2000000D
000014E6  B0FC 03FC               3200s     CMP.W   #START-4,A0
000014EA  6F00 FEF4               3201s     BLE _2000000C
000014EE                          3202                                          
000014EE                          3203m     PROTECT
000014EE  31FC AAAA 2AAA          3204m     MOVE.W #$AAAA,$2AAA                             ; AND WRITE PROTECT
000014F4  31FC 5555 1554          3205m     MOVE.W #$5555,$1554
000014FA  31FC A0A0 2AAA          3206m     MOVE.W #$A0A0,$2AAA
00001500                          3207m     ENDM
00001500                          3208  
00001500  6000 F0F8               3209      BRA MAIN_LOOP
00001504                          3210      
00001504                          3211  P
00001504  7000                    3212      MOVE.L #0,D0                                    ; D0 will be the data to write
00001506                          3213  
00001506                          3214      FOR D1 = #0 TO #3 DO                            ; read 2 bytes
00001506  323C 0000               3215s     MOVE.W  #0,D1
0000150A  6000 0046               3216s     BRA _2000000F
0000150E                          3217s _2000000E
0000150E  E988                    3218          LSL.L #4,D0                                 ; make what we have so far more significant
00001510                          3219m         WAIT_CHAR D2,D3                             ; next character -> D2
00001510                          3220m WAIT_FOR_READY_221                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00001510                 TRUE     3221m     IFEQ DEBUG
00001510  1639 00C00003           3222m         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
00001516  0803 0000               3223m         BTST #0,D3                                  ; CHECK FOR CHARACTER
0000151A  67F4                    3224m         BEQ WAIT_FOR_READY_221                      ; NOTHING, CHECK AGAIN
0000151C                          3225m     ENDC
0000151C                          3226m 
0000151C                          3227mm     READ_CHAR D2
0000151C                 TRUE     3228mm     IFEQ DEBUG
0000151C  1439 00C00007           3229mm         MOVE.B DUART_RXA,D2                         ; GOT A CHARACTER, READ IT
00001522                          3230mm     ENDC
00001522                 FALSE    3231mm     IFNE DEBUG
00001522                          3232mm     ENDC
00001522                          3233mm 
00001522  B43C 001B               3234mm     CMP.B #$1B,D2                                   ; CHECK FOR ESCAPE AND GO TO START
00001526  6700 EED8               3235mm     BEQ START
0000152A                          3236mm     ENDM
0000152A                          3237m 
0000152A                 TRUE     3238m     IFEQ DEBUG
0000152A                          3239mm         PRINT_CHAR D2,D3                            ; ECHO IT BACK
0000152A                          3240mm WAIT_FOR_READY_223                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
0000152A                 TRUE     3241mm     IFEQ DEBUG
0000152A  1639 00C00003           3242mm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
00001530  0803 0002               3243mm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
00001534  67F4                    3244mm         BEQ WAIT_FOR_READY_223                      ; NO SPACE, CHECK AGAIN
00001536  13C2 00C00007           3245mm         MOVE.B D2,DUART_TXA                         ; SEND THE NEXT CHARACTER
0000153C                          3246mm     ENDC
0000153C                          3247mm 
0000153C                 FALSE    3248mm     IFNE DEBUG
0000153C                          3249mm     ENDC
0000153C                          3250mm 
0000153C                          3251mm     ENDM
0000153C                          3252m     ENDC
0000153C                          3253m     ENDM
0000153C                          3254m         HEX2BIN D2,D2,A0                            ; convert to binary -> D2
0000153C  41FA 0662               3255m     LEA HEX2BIN_LUT(PC),A0                          ; LOAD THE LOOKUP TABLE
00001540  0402 0030               3256m     SUB.B #'0',D2                                   ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
00001544  C4BC 000000FF           3257m     AND.L #$FF,D2                                   ; IGNORE THE TOP 3 BYTES
0000154A  1430 2000               3258m     MOVE.B 0(A0,D2),D2                              ; USE THAT AS AN INDEX INTO THE LUT   
0000154E                          3259m     ENDM
0000154E  8002                    3260          OR.B D2,D0
00001550                          3261      ENDF
00001550  5241                    3262s     ADD.W   #1,D1
00001552                          3263s _2000000F
00001552  B27C 0003               3264s     CMP.W   #3,D1
00001556  6FB6                    3265s     BLE _2000000E
00001558                          3266  
00001558                          3267m     PRINT_CRLF D2,A1
00001558  43FA 06B4               3268m     LEA CRLF(PC),A1
0000155C                          3269mm     PRINT_STR A1,D2
0000155C                          3270mm LOOP_226
0000155C  0C11 0000               3271mm     CMP.B #NULL,(A1)                                ; 0 -> DONE
00001560  6700 0016               3272mm     BEQ EXIT_226
00001564                          3273mmm     PRINT_CHAR (A1)+,D2
00001564                          3274mmm WAIT_FOR_READY_227                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00001564                 TRUE     3275mmm     IFEQ DEBUG
00001564  1439 00C00003           3276mmm         MOVE.B DUART_SRA,D2                         ; READ STATUS REGISTER
0000156A  0802 0002               3277mmm         BTST #2,D2                                  ; CHECK FOR SPACE TO SEND
0000156E  67F4                    3278mmm         BEQ WAIT_FOR_READY_227                      ; NO SPACE, CHECK AGAIN
00001570  13D9 00C00007           3279mmm         MOVE.B (A1)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00001576                          3280mmm     ENDC
00001576                          3281mmm 
00001576                 FALSE    3282mmm     IFNE DEBUG
00001576                          3283mmm     ENDC
00001576                          3284mmm 
00001576                          3285mmm     ENDM
00001576  60E4                    3286mm     BRA LOOP_226
00001578                          3287mm EXIT_226
00001578                          3288mm     ENDM
00001578                          3289m     ENDM
00001578                          3290  
00001578  2047                    3291      MOVE.L D7,A0                                    ; address accumulator -> target address register
0000157A  7E00                    3292      MOVE.L #0,D7                                    ; clear the now used address accumulator
0000157C                          3293  
0000157C                          3294m     UNPROTECT
0000157C  31FC AAAA 2AAA          3295m     MOVE.W #$AAAA,$2AAA                             ; REMOVE WRITE PROTECT
00001582  4E71                    3296m     NOP
00001584  31FC 5555 1554          3297m     MOVE.W #$5555,$1554
0000158A  4E71                    3298m     NOP
0000158C  31FC 8080 2AAA          3299m     MOVE.W #$8080,$2AAA
00001592  4E71                    3300m     NOP
00001594  31FC AAAA 2AAA          3301m     MOVE.W #$AAAA,$2AAA
0000159A  4E71                    3302m     NOP
0000159C  31FC 5555 1554          3303m     MOVE.W #$5555,$1554
000015A2  4E71                    3304m     NOP
000015A4  31FC 2020 2AAA          3305m     MOVE.W #$2020,$2AAA
000015AA                          3306m     ENDM
000015AA                          3307               
000015AA  45FA 060B               3308      LEA LOADING(PC),A2                              ; the prints seem to be important for timing to unprotect the EEPROM
000015AE                          3309m     PRINT_STR A2,D2
000015AE                          3310m LOOP_229
000015AE  0C12 0000               3311m     CMP.B #NULL,(A2)                                ; 0 -> DONE
000015B2  6700 0016               3312m     BEQ EXIT_229
000015B6                          3313mm     PRINT_CHAR (A2)+,D2
000015B6                          3314mm WAIT_FOR_READY_230                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
000015B6                 TRUE     3315mm     IFEQ DEBUG
000015B6  1439 00C00003           3316mm         MOVE.B DUART_SRA,D2                         ; READ STATUS REGISTER
000015BC  0802 0002               3317mm         BTST #2,D2                                  ; CHECK FOR SPACE TO SEND
000015C0  67F4                    3318mm         BEQ WAIT_FOR_READY_230                      ; NO SPACE, CHECK AGAIN
000015C2  13DA 00C00007           3319mm         MOVE.B (A2)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
000015C8                          3320mm     ENDC
000015C8                          3321mm 
000015C8                 FALSE    3322mm     IFNE DEBUG
000015C8                          3323mm     ENDC
000015C8                          3324mm 
000015C8                          3325mm     ENDM
000015C8  60E4                    3326m     BRA LOOP_229
000015CA                          3327m EXIT_229
000015CA                          3328m     ENDM
000015CA                          3329  
000015CA                          3330m     PRINT_REG D0,D3,D4,D5,A2
000015CA  45FA 0648               3331m     LEA OX(PC),A2
000015CE                          3332mm     PRINT_STR A2,D3
000015CE                          3333mm LOOP_232
000015CE  0C12 0000               3334mm     CMP.B #NULL,(A2)                                ; 0 -> DONE
000015D2  6700 0016               3335mm     BEQ EXIT_232
000015D6                          3336mmm     PRINT_CHAR (A2)+,D3
000015D6                          3337mmm WAIT_FOR_READY_233                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
000015D6                 TRUE     3338mmm     IFEQ DEBUG
000015D6  1639 00C00003           3339mmm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
000015DC  0803 0002               3340mmm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
000015E0  67F4                    3341mmm         BEQ WAIT_FOR_READY_233                      ; NO SPACE, CHECK AGAIN
000015E2  13DA 00C00007           3342mmm         MOVE.B (A2)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
000015E8                          3343mmm     ENDC
000015E8                          3344mmm 
000015E8                 FALSE    3345mmm     IFNE DEBUG
000015E8                          3346mmm     ENDC
000015E8                          3347mmm 
000015E8                          3348mmm     ENDM
000015E8  60E4                    3349mm     BRA LOOP_232
000015EA                          3350mm EXIT_232
000015EA                          3351mm     ENDM
000015EA  7A07                    3352m     MOVE.L #7,D5                                    ; LOOP ROUND ALL 8 HEX CHARACTERS OF 4 BITS EACH
000015EC                          3353m LOOP_231
000015EC                          3354mm     BIN2HEX D0,D4,A2
000015EC  45FA 05A2               3355mm     LEA BIN2HEX_LUT(PC),A2                          ; LOAD THE LOOKUP TABLE
000015F0  E998                    3356mm     ROL.L #4,D0                                     ; SHIFT THE TOP 4 BITS DOWN TO BOTTOM OF THE REGISTER THE AND MASK OFF EVERYTHING ELSE
000015F2  1800                    3357mm     MOVE.B D0,D4
000015F4  0284 0000000F           3358mm     ANDI.L #$F,D4
000015FA  1832 4000               3359mm     MOVE.B 0(A2,D4),D4                              ; USE THAT AS AN INDEX INTO THE LUT
000015FE                          3360mm     ENDM
000015FE                          3361mm     PRINT_CHAR D4,D3
000015FE                          3362mm WAIT_FOR_READY_235                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
000015FE                 TRUE     3363mm     IFEQ DEBUG
000015FE  1639 00C00003           3364mm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
00001604  0803 0002               3365mm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
00001608  67F4                    3366mm         BEQ WAIT_FOR_READY_235                      ; NO SPACE, CHECK AGAIN
0000160A  13C4 00C00007           3367mm         MOVE.B D4,DUART_TXA                         ; SEND THE NEXT CHARACTER
00001610                          3368mm     ENDC
00001610                          3369mm 
00001610                 FALSE    3370mm     IFNE DEBUG
00001610                          3371mm     ENDC
00001610                          3372mm 
00001610                          3373mm     ENDM
00001610  57CD FFDA               3374m     DBEQ D5,LOOP_231
00001614                          3375m     ENDM
00001614                          3376  
00001614  45FA 0601               3377      LEA TO(PC),A2
00001618                          3378m     PRINT_STR A2,D3
00001618                          3379m LOOP_236
00001618  0C12 0000               3380m     CMP.B #NULL,(A2)                                ; 0 -> DONE
0000161C  6700 0016               3381m     BEQ EXIT_236
00001620                          3382mm     PRINT_CHAR (A2)+,D3
00001620                          3383mm WAIT_FOR_READY_237                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00001620                 TRUE     3384mm     IFEQ DEBUG
00001620  1639 00C00003           3385mm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
00001626  0803 0002               3386mm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
0000162A  67F4                    3387mm         BEQ WAIT_FOR_READY_237                      ; NO SPACE, CHECK AGAIN
0000162C  13DA 00C00007           3388mm         MOVE.B (A2)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00001632                          3389mm     ENDC
00001632                          3390mm 
00001632                 FALSE    3391mm     IFNE DEBUG
00001632                          3392mm     ENDC
00001632                          3393mm 
00001632                          3394mm     ENDM
00001632  60E4                    3395m     BRA LOOP_236
00001634                          3396m EXIT_236
00001634                          3397m     ENDM
00001634                          3398  
00001634  2408                    3399      MOVE.L A0,D2
00001636                          3400m     PRINT_REG D2,D3,D4,D5,A2
00001636  45FA 05DC               3401m     LEA OX(PC),A2
0000163A                          3402mm     PRINT_STR A2,D3
0000163A                          3403mm LOOP_239
0000163A  0C12 0000               3404mm     CMP.B #NULL,(A2)                                ; 0 -> DONE
0000163E  6700 0016               3405mm     BEQ EXIT_239
00001642                          3406mmm     PRINT_CHAR (A2)+,D3
00001642                          3407mmm WAIT_FOR_READY_240                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00001642                 TRUE     3408mmm     IFEQ DEBUG
00001642  1639 00C00003           3409mmm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
00001648  0803 0002               3410mmm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
0000164C  67F4                    3411mmm         BEQ WAIT_FOR_READY_240                      ; NO SPACE, CHECK AGAIN
0000164E  13DA 00C00007           3412mmm         MOVE.B (A2)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00001654                          3413mmm     ENDC
00001654                          3414mmm 
00001654                 FALSE    3415mmm     IFNE DEBUG
00001654                          3416mmm     ENDC
00001654                          3417mmm 
00001654                          3418mmm     ENDM
00001654  60E4                    3419mm     BRA LOOP_239
00001656                          3420mm EXIT_239
00001656                          3421mm     ENDM
00001656  7A07                    3422m     MOVE.L #7,D5                                    ; LOOP ROUND ALL 8 HEX CHARACTERS OF 4 BITS EACH
00001658                          3423m LOOP_238
00001658                          3424mm     BIN2HEX D2,D4,A2
00001658  45FA 0536               3425mm     LEA BIN2HEX_LUT(PC),A2                          ; LOAD THE LOOKUP TABLE
0000165C  E99A                    3426mm     ROL.L #4,D2                                     ; SHIFT THE TOP 4 BITS DOWN TO BOTTOM OF THE REGISTER THE AND MASK OFF EVERYTHING ELSE
0000165E  1802                    3427mm     MOVE.B D2,D4
00001660  0284 0000000F           3428mm     ANDI.L #$F,D4
00001666  1832 4000               3429mm     MOVE.B 0(A2,D4),D4                              ; USE THAT AS AN INDEX INTO THE LUT
0000166A                          3430mm     ENDM
0000166A                          3431mm     PRINT_CHAR D4,D3
0000166A                          3432mm WAIT_FOR_READY_242                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
0000166A                 TRUE     3433mm     IFEQ DEBUG
0000166A  1639 00C00003           3434mm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
00001670  0803 0002               3435mm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
00001674  67F4                    3436mm         BEQ WAIT_FOR_READY_242                      ; NO SPACE, CHECK AGAIN
00001676  13C4 00C00007           3437mm         MOVE.B D4,DUART_TXA                         ; SEND THE NEXT CHARACTER
0000167C                          3438mm     ENDC
0000167C                          3439mm 
0000167C                 FALSE    3440mm     IFNE DEBUG
0000167C                          3441mm     ENDC
0000167C                          3442mm 
0000167C                          3443mm     ENDM
0000167C  57CD FFDA               3444m     DBEQ D5,LOOP_238
00001680                          3445m     ENDM
00001680                          3446  
00001680                          3447m     PRINT_CRLF D3,A2
00001680  45FA 058C               3448m     LEA CRLF(PC),A2
00001684                          3449mm     PRINT_STR A2,D3
00001684                          3450mm LOOP_244
00001684  0C12 0000               3451mm     CMP.B #NULL,(A2)                                ; 0 -> DONE
00001688  6700 0016               3452mm     BEQ EXIT_244
0000168C                          3453mmm     PRINT_CHAR (A2)+,D3
0000168C                          3454mmm WAIT_FOR_READY_245                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
0000168C                 TRUE     3455mmm     IFEQ DEBUG
0000168C  1639 00C00003           3456mmm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
00001692  0803 0002               3457mmm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
00001696  67F4                    3458mmm         BEQ WAIT_FOR_READY_245                      ; NO SPACE, CHECK AGAIN
00001698  13DA 00C00007           3459mmm         MOVE.B (A2)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
0000169E                          3460mmm     ENDC
0000169E                          3461mmm 
0000169E                 FALSE    3462mmm     IFNE DEBUG
0000169E                          3463mmm     ENDC
0000169E                          3464mmm 
0000169E                          3465mmm     ENDM
0000169E  60E4                    3466mm     BRA LOOP_244
000016A0                          3467mm EXIT_244
000016A0                          3468mm     ENDM
000016A0                          3469m     ENDM
000016A0                          3470  
000016A0                          3471m     PROGRAM D0,(A0),D2
000016A0  3080                    3472m   MOVE.W D0,(A0)                                        ; WRITE THE DATA
000016A2                          3473m 
000016A2                          3474m WAIT_FOR_COMPLETE_246
000016A2  3410                    3475m         MOVE.W (A0),D2
000016A4                          3476m 
000016A4                          3477m         IF.W D2 <NE> D0 THEN
000016A4  B440                    3478ms     CMP.W   D0,D2
000016A6  6700 0004               3479ms     BEQ _00000012
000016AA  60F6                    3480m             BRA WAIT_FOR_COMPLETE_246
000016AC                          3481m         ENDI
000016AC                          3482ms _00000012
000016AC                          3483m         ENDM
000016AC                          3484  
000016AC                          3485m     PROTECT
000016AC  31FC AAAA 2AAA          3486m     MOVE.W #$AAAA,$2AAA                             ; AND WRITE PROTECT
000016B2  31FC 5555 1554          3487m     MOVE.W #$5555,$1554
000016B8  31FC A0A0 2AAA          3488m     MOVE.W #$A0A0,$2AAA
000016BE                          3489m     ENDM
000016BE                          3490  
000016BE  6000 EF3A               3491      BRA MAIN_LOOP
000016C2                          3492      
000016C2                          3493  M
000016C2  7000                    3494      MOVE.L #0,D0                                        ; D0 will be the length to read            
000016C4  7200                    3495      MOVE.L #0,D1                                        ; D1 will be the address to read 
000016C6                          3496  
000016C6                          3497      FOR D2 = #0 TO #7 DO                                ; read 4 bytes, we'll split into 2 byte address (MS) and 2 byte length (LS)
000016C6  343C 0000               3498s     MOVE.W  #0,D2
000016CA  6000 0046               3499s     BRA _20000011
000016CE                          3500s _20000010
000016CE  E989                    3501          LSL.L #4,D1                                     ; make what we have so far more significant
000016D0                          3502m         WAIT_CHAR D3,D4                                 ; next character -> D2
000016D0                          3503m WAIT_FOR_READY_248                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
000016D0                 TRUE     3504m     IFEQ DEBUG
000016D0  1839 00C00003           3505m         MOVE.B DUART_SRA,D4                         ; READ STATUS REGISTER
000016D6  0804 0000               3506m         BTST #0,D4                                  ; CHECK FOR CHARACTER
000016DA  67F4                    3507m         BEQ WAIT_FOR_READY_248                      ; NOTHING, CHECK AGAIN
000016DC                          3508m     ENDC
000016DC                          3509m 
000016DC                          3510mm     READ_CHAR D3
000016DC                 TRUE     3511mm     IFEQ DEBUG
000016DC  1639 00C00007           3512mm         MOVE.B DUART_RXA,D3                         ; GOT A CHARACTER, READ IT
000016E2                          3513mm     ENDC
000016E2                 FALSE    3514mm     IFNE DEBUG
000016E2                          3515mm     ENDC
000016E2                          3516mm 
000016E2  B63C 001B               3517mm     CMP.B #$1B,D3                                   ; CHECK FOR ESCAPE AND GO TO START
000016E6  6700 ED18               3518mm     BEQ START
000016EA                          3519mm     ENDM
000016EA                          3520m 
000016EA                 TRUE     3521m     IFEQ DEBUG
000016EA                          3522mm         PRINT_CHAR D3,D4                            ; ECHO IT BACK
000016EA                          3523mm WAIT_FOR_READY_250                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
000016EA                 TRUE     3524mm     IFEQ DEBUG
000016EA  1839 00C00003           3525mm         MOVE.B DUART_SRA,D4                         ; READ STATUS REGISTER
000016F0  0804 0002               3526mm         BTST #2,D4                                  ; CHECK FOR SPACE TO SEND
000016F4  67F4                    3527mm         BEQ WAIT_FOR_READY_250                      ; NO SPACE, CHECK AGAIN
000016F6  13C3 00C00007           3528mm         MOVE.B D3,DUART_TXA                         ; SEND THE NEXT CHARACTER
000016FC                          3529mm     ENDC
000016FC                          3530mm 
000016FC                 FALSE    3531mm     IFNE DEBUG
000016FC                          3532mm     ENDC
000016FC                          3533mm 
000016FC                          3534mm     ENDM
000016FC                          3535m     ENDC
000016FC                          3536m     ENDM
000016FC                          3537m         HEX2BIN D3,D3,A0                                ; convert to binary -> D2
000016FC  41FA 04A2               3538m     LEA HEX2BIN_LUT(PC),A0                          ; LOAD THE LOOKUP TABLE
00001700  0403 0030               3539m     SUB.B #'0',D3                                   ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
00001704  C6BC 000000FF           3540m     AND.L #$FF,D3                                   ; IGNORE THE TOP 3 BYTES
0000170A  1630 3000               3541m     MOVE.B 0(A0,D3),D3                              ; USE THAT AS AN INDEX INTO THE LUT   
0000170E                          3542m     ENDM
0000170E  8203                    3543          OR.B D3,D1
00001710                          3544      ENDF
00001710  5242                    3545s     ADD.W   #1,D2
00001712                          3546s _20000011
00001712  B47C 0007               3547s     CMP.W   #7,D2
00001716  6FB6                    3548s     BLE _20000010
00001718                          3549m     PRINT_CRLF D2,A1
00001718  43FA 04F4               3550m     LEA CRLF(PC),A1
0000171C                          3551mm     PRINT_STR A1,D2
0000171C                          3552mm LOOP_253
0000171C  0C11 0000               3553mm     CMP.B #NULL,(A1)                                ; 0 -> DONE
00001720  6700 0016               3554mm     BEQ EXIT_253
00001724                          3555mmm     PRINT_CHAR (A1)+,D2
00001724                          3556mmm WAIT_FOR_READY_254                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00001724                 TRUE     3557mmm     IFEQ DEBUG
00001724  1439 00C00003           3558mmm         MOVE.B DUART_SRA,D2                         ; READ STATUS REGISTER
0000172A  0802 0002               3559mmm         BTST #2,D2                                  ; CHECK FOR SPACE TO SEND
0000172E  67F4                    3560mmm         BEQ WAIT_FOR_READY_254                      ; NO SPACE, CHECK AGAIN
00001730  13D9 00C00007           3561mmm         MOVE.B (A1)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00001736                          3562mmm     ENDC
00001736                          3563mmm 
00001736                 FALSE    3564mmm     IFNE DEBUG
00001736                          3565mmm     ENDC
00001736                          3566mmm 
00001736                          3567mmm     ENDM
00001736  60E4                    3568mm     BRA LOOP_253
00001738                          3569mm EXIT_253
00001738                          3570mm     ENDM
00001738                          3571m     ENDM
00001738                          3572  
00001738  3001                    3573      MOVE.W D1,D0                                        ; extract the LSword for the length
0000173A  E089                    3574      LSR.L #8,D1                                         ; extract the MSword for the address
0000173C  E089                    3575      LSR.L #8,D1
0000173E                          3576  
0000173E  2241                    3577      MOVE.L D1,A1
00001740                          3578      
00001740  2047                    3579      MOVE.L D7,A0                                        ; address accumulator -> target address register
00001742                          3580      ;MOVE.L #0,D7                                       ; we're not going to clear it, so we can do go
00001742                          3581  
00001742                          3582      WHILE D0 <GT> #0 DO
00001742                          3583s _10000016
00001742  B07C 0000               3584s     CMP.W   #0,D0
00001746  6F00 000E               3585s     BLE _10000017
0000174A  5580                    3586          SUB.L #2,D0
0000174C                          3587  
0000174C  13D1 00E00001           3588          MOVE.B (A1),DISPLAY
00001752  30D9                    3589          MOVE.W (A1)+,(A0)+
00001754                          3590      ENDW
00001754  60EC                    3591s     BRA _10000016
00001756                          3592s _10000017
00001756                          3593      
00001756  6000 EEA2               3594      BRA MAIN_LOOP
0000175A                          3595  
0000175A                          3596  X
0000175A  45FA 04C5               3597      LEA STATUS_REGISTER(PC),A2
0000175E                          3598m     PRINT_STR A2,D3
0000175E                          3599m LOOP_255
0000175E  0C12 0000               3600m     CMP.B #NULL,(A2)                                ; 0 -> DONE
00001762  6700 0016               3601m     BEQ EXIT_255
00001766                          3602mm     PRINT_CHAR (A2)+,D3
00001766                          3603mm WAIT_FOR_READY_256                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00001766                 TRUE     3604mm     IFEQ DEBUG
00001766  1639 00C00003           3605mm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
0000176C  0803 0002               3606mm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
00001770  67F4                    3607mm         BEQ WAIT_FOR_READY_256                      ; NO SPACE, CHECK AGAIN
00001772  13DA 00C00007           3608mm         MOVE.B (A2)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00001778                          3609mm     ENDC
00001778                          3610mm 
00001778                 FALSE    3611mm     IFNE DEBUG
00001778                          3612mm     ENDC
00001778                          3613mm 
00001778                          3614mm     ENDM
00001778  60E4                    3615m     BRA LOOP_255
0000177A                          3616m EXIT_255
0000177A                          3617m     ENDM
0000177A                          3618  
0000177A  40C0                    3619      MOVE SR,D0
0000177C                          3620m     PRINT_REG D0,D3,D4,D5,A2
0000177C  45FA 0496               3621m     LEA OX(PC),A2
00001780                          3622mm     PRINT_STR A2,D3
00001780                          3623mm LOOP_258
00001780  0C12 0000               3624mm     CMP.B #NULL,(A2)                                ; 0 -> DONE
00001784  6700 0016               3625mm     BEQ EXIT_258
00001788                          3626mmm     PRINT_CHAR (A2)+,D3
00001788                          3627mmm WAIT_FOR_READY_259                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00001788                 TRUE     3628mmm     IFEQ DEBUG
00001788  1639 00C00003           3629mmm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
0000178E  0803 0002               3630mmm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
00001792  67F4                    3631mmm         BEQ WAIT_FOR_READY_259                      ; NO SPACE, CHECK AGAIN
00001794  13DA 00C00007           3632mmm         MOVE.B (A2)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
0000179A                          3633mmm     ENDC
0000179A                          3634mmm 
0000179A                 FALSE    3635mmm     IFNE DEBUG
0000179A                          3636mmm     ENDC
0000179A                          3637mmm 
0000179A                          3638mmm     ENDM
0000179A  60E4                    3639mm     BRA LOOP_258
0000179C                          3640mm EXIT_258
0000179C                          3641mm     ENDM
0000179C  7A07                    3642m     MOVE.L #7,D5                                    ; LOOP ROUND ALL 8 HEX CHARACTERS OF 4 BITS EACH
0000179E                          3643m LOOP_257
0000179E                          3644mm     BIN2HEX D0,D4,A2
0000179E  45FA 03F0               3645mm     LEA BIN2HEX_LUT(PC),A2                          ; LOAD THE LOOKUP TABLE
000017A2  E998                    3646mm     ROL.L #4,D0                                     ; SHIFT THE TOP 4 BITS DOWN TO BOTTOM OF THE REGISTER THE AND MASK OFF EVERYTHING ELSE
000017A4  1800                    3647mm     MOVE.B D0,D4
000017A6  0284 0000000F           3648mm     ANDI.L #$F,D4
000017AC  1832 4000               3649mm     MOVE.B 0(A2,D4),D4                              ; USE THAT AS AN INDEX INTO THE LUT
000017B0                          3650mm     ENDM
000017B0                          3651mm     PRINT_CHAR D4,D3
000017B0                          3652mm WAIT_FOR_READY_261                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
000017B0                 TRUE     3653mm     IFEQ DEBUG
000017B0  1639 00C00003           3654mm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
000017B6  0803 0002               3655mm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
000017BA  67F4                    3656mm         BEQ WAIT_FOR_READY_261                      ; NO SPACE, CHECK AGAIN
000017BC  13C4 00C00007           3657mm         MOVE.B D4,DUART_TXA                         ; SEND THE NEXT CHARACTER
000017C2                          3658mm     ENDC
000017C2                          3659mm 
000017C2                 FALSE    3660mm     IFNE DEBUG
000017C2                          3661mm     ENDC
000017C2                          3662mm 
000017C2                          3663mm     ENDM
000017C2  57CD FFDA               3664m     DBEQ D5,LOOP_257
000017C6                          3665m     ENDM
000017C6                          3666m     PRINT_CRLF D3,A2
000017C6  45FA 0446               3667m     LEA CRLF(PC),A2
000017CA                          3668mm     PRINT_STR A2,D3
000017CA                          3669mm LOOP_263
000017CA  0C12 0000               3670mm     CMP.B #NULL,(A2)                                ; 0 -> DONE
000017CE  6700 0016               3671mm     BEQ EXIT_263
000017D2                          3672mmm     PRINT_CHAR (A2)+,D3
000017D2                          3673mmm WAIT_FOR_READY_264                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
000017D2                 TRUE     3674mmm     IFEQ DEBUG
000017D2  1639 00C00003           3675mmm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
000017D8  0803 0002               3676mmm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
000017DC  67F4                    3677mmm         BEQ WAIT_FOR_READY_264                      ; NO SPACE, CHECK AGAIN
000017DE  13DA 00C00007           3678mmm         MOVE.B (A2)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
000017E4                          3679mmm     ENDC
000017E4                          3680mmm 
000017E4                 FALSE    3681mmm     IFNE DEBUG
000017E4                          3682mmm     ENDC
000017E4                          3683mmm 
000017E4                          3684mmm     ENDM
000017E4  60E4                    3685mm     BRA LOOP_263
000017E6                          3686mm EXIT_263
000017E6                          3687mm     ENDM
000017E6                          3688m     ENDM
000017E6                          3689  
000017E6  45FA 0434               3690      LEA STACK_POINTER(PC),A2
000017EA                          3691m     PRINT_STR A2,D3
000017EA                          3692m LOOP_265
000017EA  0C12 0000               3693m     CMP.B #NULL,(A2)                                ; 0 -> DONE
000017EE  6700 0016               3694m     BEQ EXIT_265
000017F2                          3695mm     PRINT_CHAR (A2)+,D3
000017F2                          3696mm WAIT_FOR_READY_266                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
000017F2                 TRUE     3697mm     IFEQ DEBUG
000017F2  1639 00C00003           3698mm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
000017F8  0803 0002               3699mm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
000017FC  67F4                    3700mm         BEQ WAIT_FOR_READY_266                      ; NO SPACE, CHECK AGAIN
000017FE  13DA 00C00007           3701mm         MOVE.B (A2)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00001804                          3702mm     ENDC
00001804                          3703mm 
00001804                 FALSE    3704mm     IFNE DEBUG
00001804                          3705mm     ENDC
00001804                          3706mm 
00001804                          3707mm     ENDM
00001804  60E4                    3708m     BRA LOOP_265
00001806                          3709m EXIT_265
00001806                          3710m     ENDM
00001806                          3711  
00001806  200F                    3712      MOVE.L SP,D0
00001808                          3713m     PRINT_REG D0,D3,D4,D5,A2
00001808  45FA 040A               3714m     LEA OX(PC),A2
0000180C                          3715mm     PRINT_STR A2,D3
0000180C                          3716mm LOOP_268
0000180C  0C12 0000               3717mm     CMP.B #NULL,(A2)                                ; 0 -> DONE
00001810  6700 0016               3718mm     BEQ EXIT_268
00001814                          3719mmm     PRINT_CHAR (A2)+,D3
00001814                          3720mmm WAIT_FOR_READY_269                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00001814                 TRUE     3721mmm     IFEQ DEBUG
00001814  1639 00C00003           3722mmm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
0000181A  0803 0002               3723mmm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
0000181E  67F4                    3724mmm         BEQ WAIT_FOR_READY_269                      ; NO SPACE, CHECK AGAIN
00001820  13DA 00C00007           3725mmm         MOVE.B (A2)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00001826                          3726mmm     ENDC
00001826                          3727mmm 
00001826                 FALSE    3728mmm     IFNE DEBUG
00001826                          3729mmm     ENDC
00001826                          3730mmm 
00001826                          3731mmm     ENDM
00001826  60E4                    3732mm     BRA LOOP_268
00001828                          3733mm EXIT_268
00001828                          3734mm     ENDM
00001828  7A07                    3735m     MOVE.L #7,D5                                    ; LOOP ROUND ALL 8 HEX CHARACTERS OF 4 BITS EACH
0000182A                          3736m LOOP_267
0000182A                          3737mm     BIN2HEX D0,D4,A2
0000182A  45FA 0364               3738mm     LEA BIN2HEX_LUT(PC),A2                          ; LOAD THE LOOKUP TABLE
0000182E  E998                    3739mm     ROL.L #4,D0                                     ; SHIFT THE TOP 4 BITS DOWN TO BOTTOM OF THE REGISTER THE AND MASK OFF EVERYTHING ELSE
00001830  1800                    3740mm     MOVE.B D0,D4
00001832  0284 0000000F           3741mm     ANDI.L #$F,D4
00001838  1832 4000               3742mm     MOVE.B 0(A2,D4),D4                              ; USE THAT AS AN INDEX INTO THE LUT
0000183C                          3743mm     ENDM
0000183C                          3744mm     PRINT_CHAR D4,D3
0000183C                          3745mm WAIT_FOR_READY_271                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
0000183C                 TRUE     3746mm     IFEQ DEBUG
0000183C  1639 00C00003           3747mm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
00001842  0803 0002               3748mm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
00001846  67F4                    3749mm         BEQ WAIT_FOR_READY_271                      ; NO SPACE, CHECK AGAIN
00001848  13C4 00C00007           3750mm         MOVE.B D4,DUART_TXA                         ; SEND THE NEXT CHARACTER
0000184E                          3751mm     ENDC
0000184E                          3752mm 
0000184E                 FALSE    3753mm     IFNE DEBUG
0000184E                          3754mm     ENDC
0000184E                          3755mm 
0000184E                          3756mm     ENDM
0000184E  57CD FFDA               3757m     DBEQ D5,LOOP_267
00001852                          3758m     ENDM
00001852                          3759m     PRINT_CRLF D3,A2
00001852  45FA 03BA               3760m     LEA CRLF(PC),A2
00001856                          3761mm     PRINT_STR A2,D3
00001856                          3762mm LOOP_273
00001856  0C12 0000               3763mm     CMP.B #NULL,(A2)                                ; 0 -> DONE
0000185A  6700 0016               3764mm     BEQ EXIT_273
0000185E                          3765mmm     PRINT_CHAR (A2)+,D3
0000185E                          3766mmm WAIT_FOR_READY_274                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
0000185E                 TRUE     3767mmm     IFEQ DEBUG
0000185E  1639 00C00003           3768mmm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
00001864  0803 0002               3769mmm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
00001868  67F4                    3770mmm         BEQ WAIT_FOR_READY_274                      ; NO SPACE, CHECK AGAIN
0000186A  13DA 00C00007           3771mmm         MOVE.B (A2)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00001870                          3772mmm     ENDC
00001870                          3773mmm 
00001870                 FALSE    3774mmm     IFNE DEBUG
00001870                          3775mmm     ENDC
00001870                          3776mmm 
00001870                          3777mmm     ENDM
00001870  60E4                    3778mm     BRA LOOP_273
00001872                          3779mm EXIT_273
00001872                          3780mm     ENDM
00001872                          3781m     ENDM
00001872                          3782  
00001872  6000 ED86               3783      BRA MAIN_LOOP
00001876                          3784  
00001876                          3785          
00001876                          3786  HEX_DIGIT
00001876  E98F                    3787      LSL.L #4,D7                                         ; add the next digit in the next 4 bits
00001878                          3788m     HEX2BIN D2,D2,A0
00001878  41FA 0326               3789m     LEA HEX2BIN_LUT(PC),A0                          ; LOAD THE LOOKUP TABLE
0000187C  0402 0030               3790m     SUB.B #'0',D2                                   ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
00001880  C4BC 000000FF           3791m     AND.L #$FF,D2                                   ; IGNORE THE TOP 3 BYTES
00001886  1430 2000               3792m     MOVE.B 0(A0,D2),D2                              ; USE THAT AS AN INDEX INTO THE LUT   
0000188A                          3793m     ENDM
0000188A  8E02                    3794      OR.B D2,D7  
0000188C  6000 ED8C               3795      BRA GET_INPUT
00001890                          3796  
00001890  FFFF FFFF               3797      SIMHALT                                             ; halt simulator
00001894                          3798  
00001894                          3799  ; exceptions
00001894                          3800  BUS_ERROR_HANDLER
00001894                          3801  
00001894  41FA 0390               3802      LEA BUS_ERROR(PC),A0
00001898                          3803m     PRINT_STR A0,D1
00001898                          3804m LOOP_276
00001898  0C10 0000               3805m     CMP.B #NULL,(A0)                                ; 0 -> DONE
0000189C  6700 0016               3806m     BEQ EXIT_276
000018A0                          3807mm     PRINT_CHAR (A0)+,D1
000018A0                          3808mm WAIT_FOR_READY_277                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
000018A0                 TRUE     3809mm     IFEQ DEBUG
000018A0  1239 00C00003           3810mm         MOVE.B DUART_SRA,D1                         ; READ STATUS REGISTER
000018A6  0801 0002               3811mm         BTST #2,D1                                  ; CHECK FOR SPACE TO SEND
000018AA  67F4                    3812mm         BEQ WAIT_FOR_READY_277                      ; NO SPACE, CHECK AGAIN
000018AC  13D8 00C00007           3813mm         MOVE.B (A0)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
000018B2                          3814mm     ENDC
000018B2                          3815mm 
000018B2                 FALSE    3816mm     IFNE DEBUG
000018B2                          3817mm     ENDC
000018B2                          3818mm 
000018B2                          3819mm     ENDM
000018B2  60E4                    3820m     BRA LOOP_276
000018B4                          3821m EXIT_276
000018B4                          3822m     ENDM
000018B4                          3823  
000018B4  7000                    3824      MOVE.L #0,D0
000018B6  3017                    3825      MOVE.W (SP),D0
000018B8                          3826  
000018B8  0800 0004               3827      BTST #4,D0
000018BC  6700 0026               3828      BEQ WRITE
000018C0                          3829      
000018C0  41FA 0379               3830      LEA READING(PC),A0
000018C4                          3831m     PRINT_STR A0,D1
000018C4                          3832m LOOP_278
000018C4  0C10 0000               3833m     CMP.B #NULL,(A0)                                ; 0 -> DONE
000018C8  6700 0016               3834m     BEQ EXIT_278
000018CC                          3835mm     PRINT_CHAR (A0)+,D1
000018CC                          3836mm WAIT_FOR_READY_279                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
000018CC                 TRUE     3837mm     IFEQ DEBUG
000018CC  1239 00C00003           3838mm         MOVE.B DUART_SRA,D1                         ; READ STATUS REGISTER
000018D2  0801 0002               3839mm         BTST #2,D1                                  ; CHECK FOR SPACE TO SEND
000018D6  67F4                    3840mm         BEQ WAIT_FOR_READY_279                      ; NO SPACE, CHECK AGAIN
000018D8  13D8 00C00007           3841mm         MOVE.B (A0)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
000018DE                          3842mm     ENDC
000018DE                          3843mm 
000018DE                 FALSE    3844mm     IFNE DEBUG
000018DE                          3845mm     ENDC
000018DE                          3846mm 
000018DE                          3847mm     ENDM
000018DE  60E4                    3848m     BRA LOOP_278
000018E0                          3849m EXIT_278
000018E0                          3850m     ENDM
000018E0                          3851  
000018E0  6000 0022               3852      BRA CONTINUE    
000018E4                          3853  WRITE
000018E4  41FA 035E               3854      LEA WRITING(PC),A0
000018E8                          3855m     PRINT_STR A0,D1
000018E8                          3856m LOOP_280
000018E8  0C10 0000               3857m     CMP.B #NULL,(A0)                                ; 0 -> DONE
000018EC  6700 0016               3858m     BEQ EXIT_280
000018F0                          3859mm     PRINT_CHAR (A0)+,D1
000018F0                          3860mm WAIT_FOR_READY_281                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
000018F0                 TRUE     3861mm     IFEQ DEBUG
000018F0  1239 00C00003           3862mm         MOVE.B DUART_SRA,D1                         ; READ STATUS REGISTER
000018F6  0801 0002               3863mm         BTST #2,D1                                  ; CHECK FOR SPACE TO SEND
000018FA  67F4                    3864mm         BEQ WAIT_FOR_READY_281                      ; NO SPACE, CHECK AGAIN
000018FC  13D8 00C00007           3865mm         MOVE.B (A0)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00001902                          3866mm     ENDC
00001902                          3867mm 
00001902                 FALSE    3868mm     IFNE DEBUG
00001902                          3869mm     ENDC
00001902                          3870mm 
00001902                          3871mm     ENDM
00001902  60E4                    3872m     BRA LOOP_280
00001904                          3873m EXIT_280
00001904                          3874m     ENDM
00001904                          3875  
00001904                          3876  CONTINUE
00001904  222F 0002               3877      MOVE.L 2(SP),D1
00001908                          3878m     PRINT_REG D1,D2,D3,D4,A0
00001908  41FA 030A               3879m     LEA OX(PC),A0
0000190C                          3880mm     PRINT_STR A0,D2
0000190C                          3881mm LOOP_283
0000190C  0C10 0000               3882mm     CMP.B #NULL,(A0)                                ; 0 -> DONE
00001910  6700 0016               3883mm     BEQ EXIT_283
00001914                          3884mmm     PRINT_CHAR (A0)+,D2
00001914                          3885mmm WAIT_FOR_READY_284                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00001914                 TRUE     3886mmm     IFEQ DEBUG
00001914  1439 00C00003           3887mmm         MOVE.B DUART_SRA,D2                         ; READ STATUS REGISTER
0000191A  0802 0002               3888mmm         BTST #2,D2                                  ; CHECK FOR SPACE TO SEND
0000191E  67F4                    3889mmm         BEQ WAIT_FOR_READY_284                      ; NO SPACE, CHECK AGAIN
00001920  13D8 00C00007           3890mmm         MOVE.B (A0)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00001926                          3891mmm     ENDC
00001926                          3892mmm 
00001926                 FALSE    3893mmm     IFNE DEBUG
00001926                          3894mmm     ENDC
00001926                          3895mmm 
00001926                          3896mmm     ENDM
00001926  60E4                    3897mm     BRA LOOP_283
00001928                          3898mm EXIT_283
00001928                          3899mm     ENDM
00001928  7807                    3900m     MOVE.L #7,D4                                    ; LOOP ROUND ALL 8 HEX CHARACTERS OF 4 BITS EACH
0000192A                          3901m LOOP_282
0000192A                          3902mm     BIN2HEX D1,D3,A0
0000192A  41FA 0264               3903mm     LEA BIN2HEX_LUT(PC),A0                          ; LOAD THE LOOKUP TABLE
0000192E  E999                    3904mm     ROL.L #4,D1                                     ; SHIFT THE TOP 4 BITS DOWN TO BOTTOM OF THE REGISTER THE AND MASK OFF EVERYTHING ELSE
00001930  1601                    3905mm     MOVE.B D1,D3
00001932  0283 0000000F           3906mm     ANDI.L #$F,D3
00001938  1630 3000               3907mm     MOVE.B 0(A0,D3),D3                              ; USE THAT AS AN INDEX INTO THE LUT
0000193C                          3908mm     ENDM
0000193C                          3909mm     PRINT_CHAR D3,D2
0000193C                          3910mm WAIT_FOR_READY_286                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
0000193C                 TRUE     3911mm     IFEQ DEBUG
0000193C  1439 00C00003           3912mm         MOVE.B DUART_SRA,D2                         ; READ STATUS REGISTER
00001942  0802 0002               3913mm         BTST #2,D2                                  ; CHECK FOR SPACE TO SEND
00001946  67F4                    3914mm         BEQ WAIT_FOR_READY_286                      ; NO SPACE, CHECK AGAIN
00001948  13C3 00C00007           3915mm         MOVE.B D3,DUART_TXA                         ; SEND THE NEXT CHARACTER
0000194E                          3916mm     ENDC
0000194E                          3917mm 
0000194E                 FALSE    3918mm     IFNE DEBUG
0000194E                          3919mm     ENDC
0000194E                          3920mm 
0000194E                          3921mm     ENDM
0000194E  57CC FFDA               3922m     DBEQ D4,LOOP_282
00001952                          3923m     ENDM
00001952                          3924  
00001952  41FA 02F9               3925      LEA FROM(PC),A0
00001956                          3926m     PRINT_STR A0,D0
00001956                          3927m LOOP_287
00001956  0C10 0000               3928m     CMP.B #NULL,(A0)                                ; 0 -> DONE
0000195A  6700 0016               3929m     BEQ EXIT_287
0000195E                          3930mm     PRINT_CHAR (A0)+,D0
0000195E                          3931mm WAIT_FOR_READY_288                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
0000195E                 TRUE     3932mm     IFEQ DEBUG
0000195E  1039 00C00003           3933mm         MOVE.B DUART_SRA,D0                         ; READ STATUS REGISTER
00001964  0800 0002               3934mm         BTST #2,D0                                  ; CHECK FOR SPACE TO SEND
00001968  67F4                    3935mm         BEQ WAIT_FOR_READY_288                      ; NO SPACE, CHECK AGAIN
0000196A  13D8 00C00007           3936mm         MOVE.B (A0)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00001970                          3937mm     ENDC
00001970                          3938mm 
00001970                 FALSE    3939mm     IFNE DEBUG
00001970                          3940mm     ENDC
00001970                          3941mm 
00001970                          3942mm     ENDM
00001970  60E4                    3943m     BRA LOOP_287
00001972                          3944m EXIT_287
00001972                          3945m     ENDM
00001972                          3946  
00001972  222F 000A               3947      MOVE.L 10(SP),D1
00001976                          3948m     PRINT_REG D1,D2,D3,D4,A0
00001976  41FA 029C               3949m     LEA OX(PC),A0
0000197A                          3950mm     PRINT_STR A0,D2
0000197A                          3951mm LOOP_290
0000197A  0C10 0000               3952mm     CMP.B #NULL,(A0)                                ; 0 -> DONE
0000197E  6700 0016               3953mm     BEQ EXIT_290
00001982                          3954mmm     PRINT_CHAR (A0)+,D2
00001982                          3955mmm WAIT_FOR_READY_291                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00001982                 TRUE     3956mmm     IFEQ DEBUG
00001982  1439 00C00003           3957mmm         MOVE.B DUART_SRA,D2                         ; READ STATUS REGISTER
00001988  0802 0002               3958mmm         BTST #2,D2                                  ; CHECK FOR SPACE TO SEND
0000198C  67F4                    3959mmm         BEQ WAIT_FOR_READY_291                      ; NO SPACE, CHECK AGAIN
0000198E  13D8 00C00007           3960mmm         MOVE.B (A0)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00001994                          3961mmm     ENDC
00001994                          3962mmm 
00001994                 FALSE    3963mmm     IFNE DEBUG
00001994                          3964mmm     ENDC
00001994                          3965mmm 
00001994                          3966mmm     ENDM
00001994  60E4                    3967mm     BRA LOOP_290
00001996                          3968mm EXIT_290
00001996                          3969mm     ENDM
00001996  7807                    3970m     MOVE.L #7,D4                                    ; LOOP ROUND ALL 8 HEX CHARACTERS OF 4 BITS EACH
00001998                          3971m LOOP_289
00001998                          3972mm     BIN2HEX D1,D3,A0
00001998  41FA 01F6               3973mm     LEA BIN2HEX_LUT(PC),A0                          ; LOAD THE LOOKUP TABLE
0000199C  E999                    3974mm     ROL.L #4,D1                                     ; SHIFT THE TOP 4 BITS DOWN TO BOTTOM OF THE REGISTER THE AND MASK OFF EVERYTHING ELSE
0000199E  1601                    3975mm     MOVE.B D1,D3
000019A0  0283 0000000F           3976mm     ANDI.L #$F,D3
000019A6  1630 3000               3977mm     MOVE.B 0(A0,D3),D3                              ; USE THAT AS AN INDEX INTO THE LUT
000019AA                          3978mm     ENDM
000019AA                          3979mm     PRINT_CHAR D3,D2
000019AA                          3980mm WAIT_FOR_READY_293                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
000019AA                 TRUE     3981mm     IFEQ DEBUG
000019AA  1439 00C00003           3982mm         MOVE.B DUART_SRA,D2                         ; READ STATUS REGISTER
000019B0  0802 0002               3983mm         BTST #2,D2                                  ; CHECK FOR SPACE TO SEND
000019B4  67F4                    3984mm         BEQ WAIT_FOR_READY_293                      ; NO SPACE, CHECK AGAIN
000019B6  13C3 00C00007           3985mm         MOVE.B D3,DUART_TXA                         ; SEND THE NEXT CHARACTER
000019BC                          3986mm     ENDC
000019BC                          3987mm 
000019BC                 FALSE    3988mm     IFNE DEBUG
000019BC                          3989mm     ENDC
000019BC                          3990mm 
000019BC                          3991mm     ENDM
000019BC  57CC FFDA               3992m     DBEQ D4,LOOP_289
000019C0                          3993m     ENDM
000019C0                          3994m     PRINT_CRLF D0,A0
000019C0  41FA 024C               3995m     LEA CRLF(PC),A0
000019C4                          3996mm     PRINT_STR A0,D0
000019C4                          3997mm LOOP_295
000019C4  0C10 0000               3998mm     CMP.B #NULL,(A0)                                ; 0 -> DONE
000019C8  6700 0016               3999mm     BEQ EXIT_295
000019CC                          4000mmm     PRINT_CHAR (A0)+,D0
000019CC                          4001mmm WAIT_FOR_READY_296                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
000019CC                 TRUE     4002mmm     IFEQ DEBUG
000019CC  1039 00C00003           4003mmm         MOVE.B DUART_SRA,D0                         ; READ STATUS REGISTER
000019D2  0800 0002               4004mmm         BTST #2,D0                                  ; CHECK FOR SPACE TO SEND
000019D6  67F4                    4005mmm         BEQ WAIT_FOR_READY_296                      ; NO SPACE, CHECK AGAIN
000019D8  13D8 00C00007           4006mmm         MOVE.B (A0)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
000019DE                          4007mmm     ENDC
000019DE                          4008mmm 
000019DE                 FALSE    4009mmm     IFNE DEBUG
000019DE                          4010mmm     ENDC
000019DE                          4011mmm 
000019DE                          4012mmm     ENDM
000019DE  60E4                    4013mm     BRA LOOP_295
000019E0                          4014mm EXIT_295
000019E0                          4015mm     ENDM
000019E0                          4016m     ENDM
000019E0                          4017      
000019E0  207C 00000004           4018      MOVE.L #4,A0
000019E6  4ED0                    4019      JMP (A0)
000019E8                          4020          
000019E8                          4021  ILLEGAL_HANDLER
000019E8  13FC 0007 00E00001      4022      MOVE.B #7,DISPLAY   
000019F0  207C 00000004           4023      MOVE.L #4,A0
000019F6  4ED0                    4024      JMP (A0)
000019F8                          4025          
000019F8                          4026  UNHANDLED_HANDLER
000019F8  13FC 0008 00E00001      4027      MOVE.B #8,DISPLAY   
00001A00  207C 00000004           4028      MOVE.L #4,A0
00001A06  4ED0                    4029      JMP (A0)
00001A08                          4030  
00001A08                          4031  ; strings
00001A08= 50 72 65 73 73 20 ...   4032  HELPPROMPT DC.B 'Press ? for help',CR,LF,NULL
00001A1B= 5B 3F 5D 09 09 09 ...   4033  HELP    DC.B '[?]',TAB,TAB,TAB,'help',CR,LF
00001A27= 5B 76 5D 09 09 09 ...   4034          DC.B '[v]',TAB,TAB,TAB,'version',CR,LF
00001A36= 78 78 78 78 78 78 ...   4035          DC.B 'xxxxxxxx[r]',TAB,TAB,'read long',CR,LF
00001A4E= 78 78 78 78 78 78 ...   4036          DC.B 'xxxxxxxx[w]xxxxxxxx',TAB,'write long',CR,LF
00001A6E= 78 78 78 78 78 78 ...   4037          DC.B 'xxxxxxxx[s]',TAB,TAB,'download S records',CR,LF
00001A8F= 78 78 78 78 78 78 ...   4038          DC.B 'xxxxxxxx[g]',TAB,TAB,'go',CR,LF
00001AA0= 5B 7A 5D 09 09 09 ...   4039          DC.B '[z]',TAB,TAB,TAB,'zap memory',CR,LF
00001AB2= 78 78 78 78 78 78 ...   4040          DC.B 'xxxxxxxx[l]xxxx',TAB,TAB,'load to EEPROM',CR,LF
00001AD3= 78 78 78 78 78 78 ...   4041          DC.B 'xxxxxxxx[p]xxxx',TAB,TAB,'patch EEPROM',CR,LF
00001AF2= 78 78 78 78 78 78 ...   4042          DC.B 'xxxxxxxx[m]xxxxxxxx',TAB,'monitor to RAM',CR,LF
00001B16= 5B 78 5D 09 09 09 ...   4043          DC.B '[x]',TAB,TAB,TAB,'print registers',CR,LF,NULL
00001B2E= 48 75 68 3F 0D 0A 00    4044  HUH  DC.B 'Huh?',CR,LF,NULL
00001B35= 20 53 20 72 65 63 ...   4045  READ    DC.B ' S records read, start address = ',NULL
00001B57= 57 3A 20 55 6E 6B ...   4046  UNREC   DC.B 'W: Unknown Srec type: ',NULL
00001B6E= 21 20 43 53 20 66 ...   4047  CS_FAILURE  DC.B '! CS failure at ',NULL
00001B7F= 21 20 52 41 4D 20 ...   4048  RAM_ERROR   DC.B '! RAM error at: ',NULL
00001B90= 30 31 32 33 34 35 ...   4049  BIN2HEX_LUT DC.B '0123456789ABCDEF'
00001BA0= 00 01 02 03 04 05 ...   4050  HEX2BIN_LUT DC.B 0,1,2,3,4,5,6,7,8,9,0,0,0,0,0,0,0,$A,$B,$C,$D,$E,$F
00001BB7= 4C 6F 61 64 69 6E ...   4051  LOADING DC.B 'Loading EEPROM...',CR,LF,NULL
00001BCB= 57 72 69 74 69 6E ...   4052  CODE        DC.B 'Writing code: ',NULL
00001BDA= 53 65 74 74 69 6E ...   4053  SP      DC.B 'Setting initial stack pointer to ',NULL
00001BFC= 57 72 69 74 69 6E ...   4054  VECTORS DC.B 'Writing vectors',CR,LF,NULL
00001C0E= 0D 0A 00                4055  CRLF    DC.B CR,LF,NULL
00001C11= 3E 20 00                4056  PROMPT  DC.B '> ',NULL
00001C14= 30 78 00                4057  ox      DC.B '0x',NULL
00001C17= 20 2D 3E 20 00          4058  to      DC.B ' -> ',NULL
00001C1C= 53 50 3A 20 00          4059  STACK_POINTER DC.B 'SP: ',NULL
00001C21= 53 52 3A 20 00          4060  STATUS_REGISTER DC.B 'SR: ',NULL
00001C26= 2A 20 42 75 73 2F ...   4061  BUS_ERROR DC.B '* Bus/address error ',NULL
00001C3B= 72 65 61 64 69 6E ...   4062  READING DC.B 'reading ',NULL
00001C44= 77 72 69 74 69 6E ...   4063  WRITING DC.B 'writing ',NULL
00001C4D= 20 66 72 6F 6D 20 00    4064  FROM DC.B ' from ',NULL
00001C54= 2A 20 55 6E 68 61 ...   4065  UNHANDLED DC.B '* Unhandled exception at ',NULL
00001C6E= 4D 44 46 2D 6D 6F ...   4066  VERSION DC.B 'MDF-mon V1.112 (25/04/2021)',CR,LF,NULL       ; this is the last line on purpose, so if it prints, we can be sure we got it all
00001C8C= 00                      4067  END     DC.B 0
00001C8D                          4068      END START                                           ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
BIN2HEX             0
BIN2HEX_LUT         1B90
BUS_ERROR           1C26
BUS_ERROR_HANDLER   1894
CODE                1BCB
CONTINUE            1904
CONTINUE_103        D40
CONTINUE_117        E32
CONTINUE_58         90E
CONTINUE_61         95E
CONTINUE_65         9B4
CONTINUE_73         A68
CONTINUE_78         ADA
CONTINUE_83         B56
CONTINUE_88         BD4
CONTINUE_93         C5C
CONTINUE_98         CCE
CR                  D
CRLF                1C0E
CS_FAILURE          1B6E
DEBUG               0
DISPLAY             E00001
DISPLAY_            0
DISPLAY_BASE        E00000
DOWNLOAD            734
DOWNLOAD_BYTE       AA4
DOWNLOAD_DONE       F3C
DUART_ACR           C00009
DUART_ACR_          4
DUART_BASE          C00000
DUART_CRA           C00005
DUART_CRA_          2
DUART_CRB           C00015
DUART_CRB_          A
DUART_CSRA          C00003
DUART_CSRA_         1
DUART_CSRB          C00013
DUART_CSRB_         9
DUART_CTLR          C0000F
DUART_CTLR_         7
DUART_CTUR          C0000D
DUART_CTUR_         6
DUART_IMR           C0000B
DUART_IMR_          5
DUART_IVR           C00019
DUART_IVR_          C
DUART_MRA           C00001
DUART_MRA_          0
DUART_MRB           C00011
DUART_MRB_          8
DUART_OPCR          C0001B
DUART_OPCR_         D
DUART_RESET_OPR     C0001F
DUART_RESET_OPR_    F
DUART_RXA           C00007
DUART_RXA_          3
DUART_RXB           C00017
DUART_RXB_          B
DUART_SET_OPR       C0001D
DUART_SET_OPR_      E
DUART_SRA           C00003
DUART_SRA_          1
DUART_SRB           C00013
DUART_SRB_          9
DUART_TXA           C00007
DUART_TXA_          3
DUART_TXB           C00017
DUART_TXB_          B
END                 1C8C
EXIT_10             566
EXIT_108            DB2
EXIT_110            DD2
EXIT_114            E04
EXIT_122            E9A
EXIT_124            EC2
EXIT_127            EE2
EXIT_132            F2C
EXIT_135            F5C
EXIT_139            FA6
EXIT_142            FC8
EXIT_147            1012
EXIT_149            108E
EXIT_15             5B0
EXIT_152            10B2
EXIT_157            10FC
EXIT_164            1188
EXIT_167            11E6
EXIT_169            1206
EXIT_17             5D0
EXIT_172            1228
EXIT_176            1272
EXIT_179            1294
EXIT_184            12DE
EXIT_187            1320
EXIT_190            1348
EXIT_195            1392
EXIT_20             5F0
EXIT_200            13D8
EXIT_203            140E
EXIT_207            1458
EXIT_210            147A
EXIT_215            14C4
EXIT_22             61A
EXIT_226            1578
EXIT_229            15CA
EXIT_232            15EA
EXIT_236            1634
EXIT_239            1656
EXIT_244            16A0
EXIT_253            1738
EXIT_255            177A
EXIT_258            179C
EXIT_263            17E6
EXIT_265            1806
EXIT_268            1828
EXIT_273            1872
EXIT_276            18B4
EXIT_278            18E0
EXIT_28             6AE
EXIT_280            1904
EXIT_283            1928
EXIT_287            1972
EXIT_290            1996
EXIT_295            19E0
EXIT_30             70E
EXIT_32             732
EXIT_34             75E
EXIT_36             792
EXIT_39             7BC
EXIT_49             86A
EXIT_5              51E
EXIT_56             8E0
EXIT_7              53E
EXIT_70             A24
FROM                1C4D
G                   1016
GET_INPUT           61A
H                   76A
HELP                1A1B
HELPPROMPT          1A08
HEX2BIN             10B
HEX2BIN_LUT         1BA0
HEX_DIGIT           1876
HUH                 1B2E
ILLEGAL_HANDLER     19E8
L                   110C
LF                  A
LOADING             1BB7
LOOP_10             54A
LOOP_108            D96
LOOP_110            DB6
LOOP_114            DE8
LOOP_122            E7E
LOOP_124            EA6
LOOP_126            EE4
LOOP_127            EC6
LOOP_132            F10
LOOP_134            F5E
LOOP_135            F40
LOOP_139            F8A
LOOP_141            FCA
LOOP_142            FAC
LOOP_147            FF6
LOOP_149            1072
LOOP_15             594
LOOP_151            10B4
LOOP_152            1096
LOOP_157            10E0
LOOP_164            116C
LOOP_167            11CA
LOOP_169            11EA
LOOP_17             5B4
LOOP_171            122A
LOOP_172            120C
LOOP_176            1256
LOOP_178            1296
LOOP_179            1278
LOOP_184            12C2
LOOP_187            1304
LOOP_189            134A
LOOP_190            132C
LOOP_195            1376
LOOP_20             5D4
LOOP_200            13BC
LOOP_202            1410
LOOP_203            13F2
LOOP_207            143C
LOOP_209            147C
LOOP_210            145E
LOOP_215            14A8
LOOP_22             5FE
LOOP_226            155C
LOOP_229            15AE
LOOP_231            15EC
LOOP_232            15CE
LOOP_236            1618
LOOP_238            1658
LOOP_239            163A
LOOP_244            1684
LOOP_253            171C
LOOP_255            175E
LOOP_257            179E
LOOP_258            1780
LOOP_263            17CA
LOOP_265            17EA
LOOP_267            182A
LOOP_268            180C
LOOP_273            1856
LOOP_276            1898
LOOP_278            18C4
LOOP_28             692
LOOP_280            18E8
LOOP_282            192A
LOOP_283            190C
LOOP_287            1956
LOOP_289            1998
LOOP_290            197A
LOOP_295            19C4
LOOP_30             6F2
LOOP_32             716
LOOP_34             742
LOOP_36             776
LOOP_38             7BE
LOOP_39             7A0
LOOP_49             84E
LOOP_5              502
LOOP_56             8C4
LOOP_7              522
LOOP_70             A08
LOOP_9              568
M                   16C2
MAIN_LOOP           5FA
NULL                0
OFF                 73E
ON                  712
OX                  1C14
P                   1504
PRINTSTR            776
PRINT_CHAR          203
PRINT_CRLF          3A0
PRINT_REG           438
PRINT_STR           3CB
PROGRAM             C4D
PROGRAM_VECTOR      CE4
PROMPT              1C11
PROTECT             A40
R                   796
RAM                 200000
RAM_ERROR           1B7F
READ                1B35
READING             1C3B
READ_CHAR           62D
RESET               4
ROM                 0
S                   8EA
SP                  1BDA
STACK               0
STACK_ADDRESS       2E0000
STACK_POINTER       1C1C
START               400
STATUS_REGISTER     1C21
TAB                 9
TO                  1C17
UNHANDLED           1C54
UNHANDLED_HANDLER   19F8
UNPROTECT           979
UNREC               1B57
USER                100
V                   772
VECS                8
VECTORS             1BFC
VERSION             1C6E
W                   86E
WAIT_CHAR           4E9
WAIT_FOR_COMPLETE_186  12F0
WAIT_FOR_COMPLETE_198  139C
WAIT_FOR_COMPLETE_199  13AE
WAIT_FOR_COMPLETE_218  14C8
WAIT_FOR_COMPLETE_219  14DA
WAIT_FOR_COMPLETE_246  16A2
WAIT_FOR_READY_1    4BA
WAIT_FOR_READY_100  CE6
WAIT_FOR_READY_103  D24
WAIT_FOR_READY_105  D58
WAIT_FOR_READY_109  D9E
WAIT_FOR_READY_11   552
WAIT_FOR_READY_111  DBE
WAIT_FOR_READY_112  DD2
WAIT_FOR_READY_115  DF0
WAIT_FOR_READY_117  E16
WAIT_FOR_READY_119  E4A
WAIT_FOR_READY_123  E86
WAIT_FOR_READY_125  EAE
WAIT_FOR_READY_128  ECE
WAIT_FOR_READY_13   57A
WAIT_FOR_READY_130  EF6
WAIT_FOR_READY_133  F18
WAIT_FOR_READY_136  F48
WAIT_FOR_READY_138  F70
WAIT_FOR_READY_140  F92
WAIT_FOR_READY_143  FB4
WAIT_FOR_READY_145  FDC
WAIT_FOR_READY_148  FFE
WAIT_FOR_READY_150  107A
WAIT_FOR_READY_153  109E
WAIT_FOR_READY_155  10C6
WAIT_FOR_READY_158  10E8
WAIT_FOR_READY_159  111A
WAIT_FOR_READY_16   59C
WAIT_FOR_READY_161  1134
WAIT_FOR_READY_165  1174
WAIT_FOR_READY_168  11D2
WAIT_FOR_READY_170  11F2
WAIT_FOR_READY_173  1214
WAIT_FOR_READY_175  123C
WAIT_FOR_READY_177  125E
WAIT_FOR_READY_18   5BC
WAIT_FOR_READY_180  1280
WAIT_FOR_READY_182  12A8
WAIT_FOR_READY_185  12CA
WAIT_FOR_READY_188  130C
WAIT_FOR_READY_191  1334
WAIT_FOR_READY_193  135C
WAIT_FOR_READY_196  137E
WAIT_FOR_READY_2    4CE
WAIT_FOR_READY_201  13C4
WAIT_FOR_READY_204  13FA
WAIT_FOR_READY_206  1422
WAIT_FOR_READY_208  1444
WAIT_FOR_READY_21   5DC
WAIT_FOR_READY_211  1466
WAIT_FOR_READY_213  148E
WAIT_FOR_READY_216  14B0
WAIT_FOR_READY_221  1510
WAIT_FOR_READY_223  152A
WAIT_FOR_READY_227  1564
WAIT_FOR_READY_23   606
WAIT_FOR_READY_230  15B6
WAIT_FOR_READY_233  15D6
WAIT_FOR_READY_235  15FE
WAIT_FOR_READY_237  1620
WAIT_FOR_READY_24   61A
WAIT_FOR_READY_240  1642
WAIT_FOR_READY_242  166A
WAIT_FOR_READY_245  168C
WAIT_FOR_READY_248  16D0
WAIT_FOR_READY_250  16EA
WAIT_FOR_READY_254  1724
WAIT_FOR_READY_256  1766
WAIT_FOR_READY_259  1788
WAIT_FOR_READY_26   634
WAIT_FOR_READY_261  17B0
WAIT_FOR_READY_264  17D2
WAIT_FOR_READY_266  17F2
WAIT_FOR_READY_269  1814
WAIT_FOR_READY_271  183C
WAIT_FOR_READY_274  185E
WAIT_FOR_READY_277  18A0
WAIT_FOR_READY_279  18CC
WAIT_FOR_READY_281  18F0
WAIT_FOR_READY_284  1914
WAIT_FOR_READY_286  193C
WAIT_FOR_READY_288  195E
WAIT_FOR_READY_29   69A
WAIT_FOR_READY_291  1982
WAIT_FOR_READY_293  19AA
WAIT_FOR_READY_296  19CC
WAIT_FOR_READY_3    4E2
WAIT_FOR_READY_31   6FA
WAIT_FOR_READY_33   71E
WAIT_FOR_READY_35   74A
WAIT_FOR_READY_37   77E
WAIT_FOR_READY_40   7A8
WAIT_FOR_READY_42   7D0
WAIT_FOR_READY_43   7E6
WAIT_FOR_READY_44   7FC
WAIT_FOR_READY_45   810
WAIT_FOR_READY_46   824
WAIT_FOR_READY_47   838
WAIT_FOR_READY_50   856
WAIT_FOR_READY_51   878
WAIT_FOR_READY_53   892
WAIT_FOR_READY_57   8CC
WAIT_FOR_READY_58   8F2
WAIT_FOR_READY_6    50A
WAIT_FOR_READY_60   92C
WAIT_FOR_READY_61   942
WAIT_FOR_READY_63   976
WAIT_FOR_READY_65   998
WAIT_FOR_READY_67   9CC
WAIT_FOR_READY_71   A10
WAIT_FOR_READY_73   A4C
WAIT_FOR_READY_75   A80
WAIT_FOR_READY_78   ABE
WAIT_FOR_READY_8    52A
WAIT_FOR_READY_80   AF2
WAIT_FOR_READY_83   B3A
WAIT_FOR_READY_85   B6E
WAIT_FOR_READY_88   BB8
WAIT_FOR_READY_90   BEC
WAIT_FOR_READY_93   C40
WAIT_FOR_READY_95   C74
WAIT_FOR_READY_98   CB2
WAIT_FOR_SRECORD    8F2
WRITE               18E4
WRITING             1C44
X                   175A
Z                   101C
_00000000           65A
_00000001           66E
_00000002           A2C
_00000003           E08
_00000004           A3A
_00000005           C28
_00000006           B9E
_00000007           E08
_00000008           D92
_00000009           E08
_0000000A           F30
_0000000B           F3C
_0000000C           10FC
_0000000D           12FA
_0000000E           13A6
_0000000F           13B8
_00000010           14D2
_00000011           14E4
_00000012           16AC
_10000000           98E
_10000001           9F6
_10000002           A42
_10000003           AAA
_10000004           AB4
_10000005           B1C
_10000006           B30
_10000007           B98
_10000008           BA2
_10000009           C22
_1000000A           BAE
_1000000B           C16
_1000000C           C36
_1000000D           C9E
_1000000E           CA8
_1000000F           D10
_10000010           D1A
_10000011           D82
_10000012           E0C
_10000013           E74
_10000014           12DE
_10000015           1300
_10000016           1742
_10000017           1756
_20000000           426
_20000001           432
_20000002           440
_20000003           44C
_20000004           876
_20000005           8BA
_20000006           102E
_20000007           103E
_20000008           1058
_20000009           10FE
_2000000A           1118
_2000000B           115C
_2000000C           13E0
_2000000D           14E6
_2000000E           150E
_2000000F           1552
_20000010           16CE
_20000011           1712
