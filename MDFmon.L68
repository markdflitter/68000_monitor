00000400 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 25/04/2021 15:13:24

00000000                             1  *------------------------------------------------------------
00000000                             2  * Title         MDFmon 
00000000                             3  * Written by    Mark Flitter
00000000                             4  * Date          March 2021
00000000                             5  * Description:  68000 monitor program
00000000                             6  *-----------------------------------------------------------
00000000                             7  ; to do
00000000                             8  
00000000                             9  ; other ideas
00000000                            10  ;------------
00000000                            11  ; use DBLoop?
00000000                            12  ; keep track of highest address hit during srec download
00000000                            13  ; implement backspace
00000000                            14  ; fix being able to enter random chars when W'ing
00000000                            15  ; ram check at startup?  Not sure if this is a good idea!
00000000                            16  ; check for escape during Z and L?  Not sure if W is a good idea either
00000000                            17  
00000000                            18      ORG  $0
00000000                            19  
00000000  =00000000                 20  DEBUG               EQU 0
00000000                            21  
00000000                            22  ; constants
00000000  =00000000                 23  NULL                EQU 0
00000000  =00000009                 24  TAB                 EQU 9
00000000  =0000000D                 25  CR                  EQU 13
00000000  =0000000A                 26  LF                  EQU 10
00000000                            27  
00000000  =00000000                 28  ROM                 EQU $0
00000000  =00200000                 29  RAM                 EQU $200000
00000000                            30  
00000000  =00C00000                 31  DUART_BASE          EQU $C00000
00000000  =00000000                 32  DUART_MRA_          EQU $0
00000000  =00000001                 33  DUART_CSRA_         EQU $1
00000000  =00000001                 34  DUART_SRA_          EQU $1
00000000  =00000002                 35  DUART_CRA_          EQU $2
00000000  =00000003                 36  DUART_TXA_          EQU $3
00000000  =00000003                 37  DUART_RXA_          EQU $3
00000000  =00000004                 38  DUART_ACR_          EQU $4
00000000  =00000005                 39  DUART_IMR_          EQU $5
00000000  =00000008                 40  DUART_MRB_          EQU $8
00000000  =00000009                 41  DUART_CSRB_         EQU $9
00000000  =00000009                 42  DUART_SRB_          EQU $9
00000000  =0000000A                 43  DUART_CRB_          EQU $A
00000000  =0000000B                 44  DUART_TXB_          EQU $B
00000000  =0000000B                 45  DUART_RXB_          EQU $B
00000000  =0000000C                 46  DUART_IVR_          EQU $C
00000000  =0000000D                 47  DUART_OPCR_         EQU $D
00000000  =0000000E                 48  DUART_SET_OPR_      EQU $E
00000000  =0000000F                 49  DUART_RESET_OPR_    EQU $F
00000000                            50  
00000000  =00C00001                 51  DUART_MRA           EQU DUART_BASE+2*DUART_MRA_+1
00000000  =00C00003                 52  DUART_SRA           EQU DUART_BASE+2*DUART_SRA_+1
00000000  =00C00003                 53  DUART_CSRA          EQU DUART_BASE+2*DUART_CSRA_+1
00000000  =00C00005                 54  DUART_CRA           EQU DUART_BASE+2*DUART_CRA_+1
00000000  =00C00007                 55  DUART_TXA           EQU DUART_BASE+2*DUART_TXA_+1
00000000  =00C00007                 56  DUART_RXA           EQU DUART_BASE+2*DUART_RXA_+1
00000000                            57  
00000000  =00C00011                 58  DUART_MRB           EQU DUART_BASE+2*DUART_MRB_+1
00000000  =00C00013                 59  DUART_SRB           EQU DUART_BASE+2*DUART_SRB_+1
00000000  =00C00013                 60  DUART_CSRB          EQU DUART_BASE+2*DUART_CSRB_+1
00000000  =00C00015                 61  DUART_CRB           EQU DUART_BASE+2*DUART_CRB_+1
00000000  =00C00017                 62  DUART_TXB           EQU DUART_BASE+2*DUART_TXB_+1
00000000  =00C00017                 63  DUART_RXB           EQU DUART_BASE+2*DUART_RXB_+1
00000000                            64  
00000000  =00C00009                 65  DUART_ACR           EQU DUART_BASE+2*DUART_ACR_+1
00000000  =00C0000B                 66  DUART_IMR           EQU DUART_BASE+2*DUART_IMR_+1
00000000  =00C00019                 67  DUART_IVR           EQU DUART_BASE+2*DUART_IVR_+1
00000000  =00C0001B                 68  DUART_OPCR          EQU DUART_BASE+2*DUART_OPCR_+1
00000000  =00C0001D                 69  DUART_SET_OPR       EQU DUART_BASE+2*DUART_SET_OPR_+1
00000000  =00C0001F                 70  DUART_RESET_OPR     EQU DUART_BASE+2*DUART_RESET_OPR_+1
00000000                            71  
00000000  =00E00000                 72  DISPLAY_BASE        EQU $E00000
00000000  =00000000                 73  DISPLAY_            EQU $0
00000000  =00E00001                 74  DISPLAY             EQU DISPLAY_BASE+2*DISPLAY_+1
00000000                            75  
00000000                            76  ; macros
00000000                            77  ; convert top 4 bits of input register from binary to a single hex digit
00000000                            78  ; the input register is changed during the process
00000000                            79  ; \1 input data register containing binary number, \2 data register for return value, \3 working address register
00000000                            80  BIN2HEX MACRO
00000000                            81      LEA BIN2HEX_LUT(PC),\3                          ; load the lookup table
00000000                            82      ROL.L #4,\1                                     ; shift the top 4 bits down to bottom of the register the and mask off everything else
00000000                            83      MOVE.B \1,\2
00000000                            84      ANDI.L #$F,\2
00000000                            85      MOVE.B 0(\3,\2),\2                              ; use that as an index into the LUT
00000000                            86      ENDM
00000000                            87  
00000000                            88  ; convert single hex digit to 4 bit binary number in LSbits
00000000                            89  ; the input register is changed during the process
00000000                            90  ; \1 data register containing hex character, \2 data register for return value, \3 working address register
00000000                            91  HEX2BIN MACRO
00000000                            92      LEA HEX2BIN_LUT(PC),\3                          ; load the lookup table
00000000                            93      SUB.B #'0',\1                                   ; work out offset and mask off anything rogue
00000000                            94      AND.L #$FF,\1                                   ; ignore the top 3 bytes
00000000                            95      MOVE.B 0(\3,\1),\2                              ; use that as an index into the LUT   
00000000                            96      ENDM
00000000                            97  
00000000                            98  ; send a single char to the serial port
00000000                            99  ; \1 = char to send, \2 = data register to use for status poll
00000000                           100  ; will stamp on D0 and D1 in debug mode
00000000                           101  PRINT_CHAR MACRO
00000000                           102  WAIT_FOR_READY\@                                    ; wait until the there is space to send
00000000                           103      IFEQ DEBUG
00000000                           104          MOVE.B DUART_SRA,\2                         ; read status register
00000000                           105          BTST #2,\2                                  ; check for space to send
00000000                           106          BEQ WAIT_FOR_READY\@                        ; no space, check again
00000000                           107          MOVE.B \1,DUART_TXA                         ; send the next character
00000000                           108      ENDC
00000000                           109  
00000000                           110      IFNE DEBUG
00000000                           111          MOVE.B \1,D1
00000000                           112          MOVE.L #6,D0   
00000000                           113          TRAP #15                                    ; write to terminal in simulator
00000000                           114      ENDC
00000000                           115  
00000000                           116      ENDM
00000000                           117  
00000000                           118  ; send CR,LF to the serial port
00000000                           119  ; \1 = data register to use for status poll, /2 = working address register
00000000                           120  PRINT_CRLF MACRO
00000000                           121      LEA CRLF(PC),\2
00000000                           122      PRINT_STR \2,\1
00000000                           123      ENDM
00000000                           124  
00000000                           125  ; send C-style, zero terminated string to the serial port
00000000                           126  ; \1 = address register containing address of zero terminated string, \2 = data register to use for status poll, 
00000000                           127  PRINT_STR MACRO
00000000                           128  LOOP\@
00000000                           129      CMP.B #NULL,(\1)                                ; 0 -> done
00000000                           130      BEQ EXIT\@
00000000                           131      PRINT_CHAR (\1)+,\2
00000000                           132      BRA LOOP\@
00000000                           133  EXIT\@
00000000                           134      ENDM
00000000                           135    
00000000                           136  ; send the contents of a data register to the serial port as a 8 digit hex number
00000000                           137  ; \1 = data register containing binary number, \2 = data register to use for status poll, \3 working data register, \4 counter register, \5 working address register
00000000                           138  PRINT_REG MACRO
00000000                           139      LEA ox(PC),\5
00000000                           140      PRINT_STR \5,\2
00000000                           141      MOVE.L #7,\4                                    ; loop round all 8 hex characters of 4 bits each
00000000                           142  LOOP\@
00000000                           143      BIN2HEX \1,\3,\5
00000000                           144      PRINT_CHAR \3,\2
00000000                           145      DBEQ \4,LOOP\@
00000000                           146      ENDM
00000000                           147  
00000000                           148  ; wait for a char from the serial port
00000000                           149  ; \ 1= data register for read char, \2 = register to use for status poll
00000000                           150  ; will stamp on D0 and D1 in debug mode
00000000                           151  WAIT_CHAR MACRO
00000000                           152  WAIT_FOR_READY\@                                    ; wait until the there is space to send
00000000                           153      IFEQ DEBUG
00000000                           154          MOVE.B DUART_SRA,\2                         ; read status register
00000000                           155          BTST #0,\2                                  ; check for character
00000000                           156          BEQ WAIT_FOR_READY\@                        ; nothing, check again
00000000                           157      ENDC
00000000                           158  
00000000                           159      READ_CHAR \1
00000000                           160  
00000000                           161      IFEQ DEBUG
00000000                           162          PRINT_CHAR \1,\2                            ; echo it back
00000000                           163      ENDC
00000000                           164      ENDM
00000000                           165  
00000000                           166  ; read a char from the serial port - assumes that there is one!
00000000                           167  ; \ 1= data register for read char
00000000                           168  ; will stamp on D0 and D1 in debug mode
00000000                           169  READ_CHAR MACRO
00000000                           170      IFEQ DEBUG
00000000                           171          MOVE.B DUART_RXA,\1                         ; got a character, read it
00000000                           172      ENDC
00000000                           173      IFNE DEBUG
00000000                           174          MOVE.L #5,D0    
00000000                           175          TRAP #15                                    ; read from keyboard in simulator
00000000                           176          MOVE.L D1,\1
00000000                           177      ENDC
00000000                           178  
00000000                           179      CMP.B #$1B,\1                                   ; check for escape and go to start
00000000                           180      BEQ START
00000000                           181      ENDM
00000000                           182  
00000000                           183  
00000000                           184  ; read data from the download serial port
00000000                           185  ; \ 1= data register for read char
00000000                           186  DOWNLOAD MACRO
00000000                           187  WAIT_FOR_READY\@                                    ; wait until the there is space to send
00000000                           188  
00000000                           189      MOVE.B DUART_SRA,\1                             ; check for command
00000000                           190      BTST #0,\1                                      ; check for character
00000000                           191      BEQ CONTINUE\@                                  ; nothing, continue
00000000                           192  
00000000                           193      READ_CHAR \1                                    ; we're not going to do anything with it, just check for escape
00000000                           194  CONTINUE\@
00000000                           195      MOVE.B DUART_SRB,\1                             ; read download status register
00000000                           196      BTST #0,\1                                      ; check for character
00000000                           197      BEQ WAIT_FOR_READY\@                            ; nothing, check again
00000000                           198      
00000000                           199      MOVE.B DUART_RXB,\1                             ; got a character, read it
00000000                           200      MOVE.B \1,DISPLAY                               ; echo to the display
00000000                           201  
00000000                           202      ENDM
00000000                           203  
00000000                           204  ; unprotect the EEPROM
00000000                           205  UNPROTECT MACRO
00000000                           206      MOVE.W #$AAAA,$2AAA                             ; remove write protect
00000000                           207      NOP
00000000                           208      MOVE.W #$5555,$1554
00000000                           209      NOP
00000000                           210      MOVE.W #$8080,$2AAA
00000000                           211      NOP
00000000                           212      MOVE.W #$AAAA,$2AAA
00000000                           213      NOP
00000000                           214      MOVE.W #$5555,$1554
00000000                           215      NOP
00000000                           216      MOVE.W #$2020,$2AAA
00000000                           217      ENDM
00000000                           218      
00000000                           219  ; protect the EEPROM
00000000                           220  PROTECT MACRO
00000000                           221      MOVE.W #$AAAA,$2AAA                             ; and write protect
00000000                           222      MOVE.W #$5555,$1554
00000000                           223      MOVE.W #$A0A0,$2AAA
00000000                           224      ENDM
00000000                           225  
00000000                           226  
00000000                           227  ; read two hex digits from the download serial port and convert to a byte
00000000                           228  ; \1 result register, \2 = data register for read char, \3 = register to use for status poll, \4 = working data register, \5 = checksum register, \6 = working address register
00000000                           229  DOWNLOAD_BYTE MACRO
00000000                           230      MOVE.B #2,\4
00000000                           231      WHILE.B \4 <GT> 0 DO
00000000                           232          LSL.L #4,\1                                 ; it's OK to do this first, because we are either starting from 0, 
00000000                           233          DOWNLOAD \2                                 ; or we are reading the next byte along, so need to shift up the previous one
00000000                           234          PRINT_CHAR \2,\3
00000000                           235          HEX2BIN \2,\2,\6
00000000                           236          OR.B \2,\1
00000000                           237          SUB.B #1,\4
00000000                           238      ENDW
00000000                           239  
00000000                           240      MOVE.L #0,\2                                    ; rextract latest byte of address and add into checksum
00000000                           241      MOVE.B \1,\2
00000000                           242      ADD.L \1,\5
00000000                           243  
00000000                           244      ENDM
00000000                           245  
00000000                           246  ; write word to EEPROM
00000000                           247  ; \1 word to write, \2 = target address, \3 = working data register
00000000                           248  PROGRAM MACRO
00000000                           249    MOVE.W \1,\2                                      ; write the data
00000000                           250  
00000000                           251  WAIT_FOR_COMPLETE\@
00000000                           252          MOVE.W \2,\3
00000000                           253  
00000000                           254          IF.W \3 <NE> \1 THEN
00000000                           255              BRA WAIT_FOR_COMPLETE\@
00000000                           256          ENDI
00000000                           257          ENDM
00000000                           258          
00000000                           259  ; program vector to EEPROM
00000000                           260  ; \1 handler address, \2 = target address, \3 = working data register
00000000                           261  PROGRAM_VECTOR MACRO
00000000                           262      ADD.L #2,\2
00000000                           263      PROGRAM \1, (\2), \3                                ; write it
00000000                           264      LSR.L #8,\1
00000000                           265      LSR.L #8,\1
00000000                           266      SUB.L #2,\2
00000000                           267      PROGRAM \1, (\2), \3
00000000                           268      ENDM
00000000                           269  
00000000                           270  
00000000                           271  ; register catalogue
00000000                           272  ; D0 - used for simulator I/O
00000000                           273  ; D1 - used for simulator I/O
00000000                           274  ; D2 - read character
00000000                           275  ; D3 - serial port status poll / task for TRAP in simulator
00000000                           276  ; D6 - working register used in R/W
00000000                           277  ; D7 - address accumulator, reset by download
00000000                           278  ; A0 - address of string to print 
00000000                           279  
00000000                           280  ; start vector
00000000= 002FFFFC                 281  STACK   DC.L $2FFFFC                                ; STACK
00000004= 00000400                 282  RESET   DC.L START                                  ; RESET
00000008= 000017B4                 283  VECS    DC.L BUS_ERROR_HANDLER                      ; BUS ERROR
0000000C= 000017B4                 284          DC.L BUS_ERROR_HANDLER                      ; ADDRESS ERROR
00000010= 00001908                 285          DC.L ILLEGAL_HANDLER                        ; ILLEGAL INSTRUCTION
00000014= 00001918                 286          DC.L UNHANDLED_HANDLER
00000018= 00001918                 287          DC.L UNHANDLED_HANDLER
0000001C= 00001918                 288          DC.L UNHANDLED_HANDLER
00000020= 00001918                 289          DC.L UNHANDLED_HANDLER
00000024= 00001918                 290          DC.L UNHANDLED_HANDLER
00000028= 00001918                 291          DC.L UNHANDLED_HANDLER
0000002C= 00001918                 292          DC.L UNHANDLED_HANDLER
00000030= 00001918                 293          DC.L UNHANDLED_HANDLER
00000034= 00001918                 294          DC.L UNHANDLED_HANDLER
00000038= 00001918                 295          DC.L UNHANDLED_HANDLER
0000003C= 00001918                 296          DC.L UNHANDLED_HANDLER
00000040= 00001918                 297          DC.L UNHANDLED_HANDLER
00000044= 00001918                 298          DC.L UNHANDLED_HANDLER
00000048= 00001918                 299          DC.L UNHANDLED_HANDLER
0000004C= 00001918                 300          DC.L UNHANDLED_HANDLER
00000050= 00001918                 301          DC.L UNHANDLED_HANDLER
00000054= 00001918                 302          DC.L UNHANDLED_HANDLER
00000058= 00001918                 303          DC.L UNHANDLED_HANDLER
0000005C= 00001918                 304          DC.L UNHANDLED_HANDLER
00000060= 00001918                 305          DC.L UNHANDLED_HANDLER
00000064= 00001918                 306          DC.L UNHANDLED_HANDLER
00000068= 00001918                 307          DC.L UNHANDLED_HANDLER
0000006C= 00001918                 308          DC.L UNHANDLED_HANDLER
00000070= 00001918                 309          DC.L UNHANDLED_HANDLER
00000074= 00001918                 310          DC.L UNHANDLED_HANDLER
00000078= 00001918                 311          DC.L UNHANDLED_HANDLER
0000007C= 00001918                 312          DC.L UNHANDLED_HANDLER
00000080= 00001918                 313          DC.L UNHANDLED_HANDLER
00000084= 00001918                 314          DC.L UNHANDLED_HANDLER
00000088= 00001918                 315          DC.L UNHANDLED_HANDLER
0000008C= 00001918                 316          DC.L UNHANDLED_HANDLER
00000090= 00001918                 317          DC.L UNHANDLED_HANDLER
00000094= 00001918                 318          DC.L UNHANDLED_HANDLER
00000098= 00001918                 319          DC.L UNHANDLED_HANDLER
0000009C= 00001918                 320          DC.L UNHANDLED_HANDLER
000000A0= 00001918                 321          DC.L UNHANDLED_HANDLER
000000A4= 00001918                 322          DC.L UNHANDLED_HANDLER
000000A8= 00001918                 323          DC.L UNHANDLED_HANDLER
000000AC= 00001918                 324          DC.L UNHANDLED_HANDLER
000000B0= 00001918                 325          DC.L UNHANDLED_HANDLER
000000B4= 00001918                 326          DC.L UNHANDLED_HANDLER
000000B8= 00001918                 327          DC.L UNHANDLED_HANDLER
000000BC= 00001918                 328          DC.L UNHANDLED_HANDLER
000000C0= 00001918                 329          DC.L UNHANDLED_HANDLER
000000C4= 00001918                 330          DC.L UNHANDLED_HANDLER
000000C8= 00001918                 331          DC.L UNHANDLED_HANDLER
000000CC= 00001918                 332          DC.L UNHANDLED_HANDLER
000000D0= 00001918                 333          DC.L UNHANDLED_HANDLER
000000D4= 00001918                 334          DC.L UNHANDLED_HANDLER
000000D8= 00001918                 335          DC.L UNHANDLED_HANDLER
000000DC= 00001918                 336          DC.L UNHANDLED_HANDLER
000000E0= 00001918                 337          DC.L UNHANDLED_HANDLER
000000E4= 00001918                 338          DC.L UNHANDLED_HANDLER
000000E8= 00001918                 339          DC.L UNHANDLED_HANDLER
000000EC= 00001918                 340          DC.L UNHANDLED_HANDLER
000000F0= 00001918                 341          DC.L UNHANDLED_HANDLER
000000F4= 00001918                 342          DC.L UNHANDLED_HANDLER
000000F8= 00001918                 343          DC.L UNHANDLED_HANDLER
000000FC= 00001918                 344          DC.L UNHANDLED_HANDLER
00000100= 00001918                 345  USER        DC.L UNHANDLED_HANDLER
00000104= 00001918                 346          DC.L UNHANDLED_HANDLER
00000108= 00001918                 347          DC.L UNHANDLED_HANDLER
0000010C= 00001918                 348          DC.L UNHANDLED_HANDLER
00000110= 00001918                 349          DC.L UNHANDLED_HANDLER
00000114= 00001918                 350          DC.L UNHANDLED_HANDLER
00000118= 00001918                 351          DC.L UNHANDLED_HANDLER
0000011C= 00001918                 352          DC.L UNHANDLED_HANDLER
00000120= 00001918                 353          DC.L UNHANDLED_HANDLER
00000124= 00001918                 354          DC.L UNHANDLED_HANDLER
00000128= 00001918                 355          DC.L UNHANDLED_HANDLER
0000012C= 00001918                 356          DC.L UNHANDLED_HANDLER
00000130= 00001918                 357          DC.L UNHANDLED_HANDLER
00000134= 00001918                 358          DC.L UNHANDLED_HANDLER
00000138= 00001918                 359          DC.L UNHANDLED_HANDLER
0000013C= 00001918                 360          DC.L UNHANDLED_HANDLER
00000140= 00001918                 361          DC.L UNHANDLED_HANDLER
00000144= 00001918                 362          DC.L UNHANDLED_HANDLER
00000148= 00001918                 363          DC.L UNHANDLED_HANDLER
0000014C= 00001918                 364          DC.L UNHANDLED_HANDLER
00000150= 00001918                 365          DC.L UNHANDLED_HANDLER
00000154= 00001918                 366          DC.L UNHANDLED_HANDLER
00000158= 00001918                 367          DC.L UNHANDLED_HANDLER
0000015C= 00001918                 368          DC.L UNHANDLED_HANDLER
00000160= 00001918                 369          DC.L UNHANDLED_HANDLER
00000164= 00001918                 370          DC.L UNHANDLED_HANDLER
00000168= 00001918                 371          DC.L UNHANDLED_HANDLER
0000016C= 00001918                 372          DC.L UNHANDLED_HANDLER
00000170= 00001918                 373          DC.L UNHANDLED_HANDLER
00000174= 00001918                 374          DC.L UNHANDLED_HANDLER
00000178= 00001918                 375          DC.L UNHANDLED_HANDLER
0000017C= 00001918                 376          DC.L UNHANDLED_HANDLER
00000180= 00001918                 377          DC.L UNHANDLED_HANDLER
00000184= 00001918                 378          DC.L UNHANDLED_HANDLER
00000188= 00001918                 379          DC.L UNHANDLED_HANDLER
0000018C= 00001918                 380          DC.L UNHANDLED_HANDLER
00000190= 00001918                 381          DC.L UNHANDLED_HANDLER
00000194= 00001918                 382          DC.L UNHANDLED_HANDLER
00000198= 00001918                 383          DC.L UNHANDLED_HANDLER
0000019C= 00001918                 384          DC.L UNHANDLED_HANDLER
000001A0= 00001918                 385          DC.L UNHANDLED_HANDLER
000001A4= 00001918                 386          DC.L UNHANDLED_HANDLER
000001A8= 00001918                 387          DC.L UNHANDLED_HANDLER
000001AC= 00001918                 388          DC.L UNHANDLED_HANDLER
000001B0= 00001918                 389          DC.L UNHANDLED_HANDLER
000001B4= 00001918                 390          DC.L UNHANDLED_HANDLER
000001B8= 00001918                 391          DC.L UNHANDLED_HANDLER
000001BC= 00001918                 392          DC.L UNHANDLED_HANDLER
000001C0= 00001918                 393          DC.L UNHANDLED_HANDLER
000001C4= 00001918                 394          DC.L UNHANDLED_HANDLER
000001C8= 00001918                 395          DC.L UNHANDLED_HANDLER
000001CC= 00001918                 396          DC.L UNHANDLED_HANDLER
000001D0= 00001918                 397          DC.L UNHANDLED_HANDLER
000001D4= 00001918                 398          DC.L UNHANDLED_HANDLER
000001D8= 00001918                 399          DC.L UNHANDLED_HANDLER
000001DC= 00001918                 400          DC.L UNHANDLED_HANDLER
000001E0= 00001918                 401          DC.L UNHANDLED_HANDLER
000001E4= 00001918                 402          DC.L UNHANDLED_HANDLER
000001E8= 00001918                 403          DC.L UNHANDLED_HANDLER
000001EC= 00001918                 404          DC.L UNHANDLED_HANDLER
000001F0= 00001918                 405          DC.L UNHANDLED_HANDLER
000001F4= 00001918                 406          DC.L UNHANDLED_HANDLER
000001F8= 00001918                 407          DC.L UNHANDLED_HANDLER
000001FC= 00001918                 408          DC.L UNHANDLED_HANDLER
00000200= 00001918                 409          DC.L UNHANDLED_HANDLER
00000204= 00001918                 410          DC.L UNHANDLED_HANDLER
00000208= 00001918                 411          DC.L UNHANDLED_HANDLER
0000020C= 00001918                 412          DC.L UNHANDLED_HANDLER
00000210= 00001918                 413          DC.L UNHANDLED_HANDLER
00000214= 00001918                 414          DC.L UNHANDLED_HANDLER
00000218= 00001918                 415          DC.L UNHANDLED_HANDLER
0000021C= 00001918                 416          DC.L UNHANDLED_HANDLER
00000220= 00001918                 417          DC.L UNHANDLED_HANDLER
00000224= 00001918                 418          DC.L UNHANDLED_HANDLER
00000228= 00001918                 419          DC.L UNHANDLED_HANDLER
0000022C= 00001918                 420          DC.L UNHANDLED_HANDLER
00000230= 00001918                 421          DC.L UNHANDLED_HANDLER
00000234= 00001918                 422          DC.L UNHANDLED_HANDLER
00000238= 00001918                 423          DC.L UNHANDLED_HANDLER
0000023C= 00001918                 424          DC.L UNHANDLED_HANDLER
00000240= 00001918                 425          DC.L UNHANDLED_HANDLER
00000244= 00001918                 426          DC.L UNHANDLED_HANDLER
00000248= 00001918                 427          DC.L UNHANDLED_HANDLER
0000024C= 00001918                 428          DC.L UNHANDLED_HANDLER
00000250= 00001918                 429          DC.L UNHANDLED_HANDLER
00000254= 00001918                 430          DC.L UNHANDLED_HANDLER
00000258= 00001918                 431          DC.L UNHANDLED_HANDLER
0000025C= 00001918                 432          DC.L UNHANDLED_HANDLER
00000260= 00001918                 433          DC.L UNHANDLED_HANDLER
00000264= 00001918                 434          DC.L UNHANDLED_HANDLER
00000268= 00001918                 435          DC.L UNHANDLED_HANDLER
0000026C= 00001918                 436          DC.L UNHANDLED_HANDLER
00000270= 00001918                 437          DC.L UNHANDLED_HANDLER
00000274= 00001918                 438          DC.L UNHANDLED_HANDLER
00000278= 00001918                 439          DC.L UNHANDLED_HANDLER
0000027C= 00001918                 440          DC.L UNHANDLED_HANDLER
00000280= 00001918                 441          DC.L UNHANDLED_HANDLER
00000284= 00001918                 442          DC.L UNHANDLED_HANDLER
00000288= 00001918                 443          DC.L UNHANDLED_HANDLER
0000028C= 00001918                 444          DC.L UNHANDLED_HANDLER
00000290= 00001918                 445          DC.L UNHANDLED_HANDLER
00000294= 00001918                 446          DC.L UNHANDLED_HANDLER
00000298= 00001918                 447          DC.L UNHANDLED_HANDLER
0000029C= 00001918                 448          DC.L UNHANDLED_HANDLER
000002A0= 00001918                 449          DC.L UNHANDLED_HANDLER
000002A4= 00001918                 450          DC.L UNHANDLED_HANDLER
000002A8= 00001918                 451          DC.L UNHANDLED_HANDLER
000002AC= 00001918                 452          DC.L UNHANDLED_HANDLER
000002B0= 00001918                 453          DC.L UNHANDLED_HANDLER
000002B4= 00001918                 454          DC.L UNHANDLED_HANDLER
000002B8= 00001918                 455          DC.L UNHANDLED_HANDLER
000002BC= 00001918                 456          DC.L UNHANDLED_HANDLER
000002C0= 00001918                 457          DC.L UNHANDLED_HANDLER
000002C4= 00001918                 458          DC.L UNHANDLED_HANDLER
000002C8= 00001918                 459          DC.L UNHANDLED_HANDLER
000002CC= 00001918                 460          DC.L UNHANDLED_HANDLER
000002D0= 00001918                 461          DC.L UNHANDLED_HANDLER
000002D4= 00001918                 462          DC.L UNHANDLED_HANDLER
000002D8= 00001918                 463          DC.L UNHANDLED_HANDLER
000002DC= 00001918                 464          DC.L UNHANDLED_HANDLER
000002E0= 00001918                 465          DC.L UNHANDLED_HANDLER
000002E4= 00001918                 466          DC.L UNHANDLED_HANDLER
000002E8= 00001918                 467          DC.L UNHANDLED_HANDLER
000002EC= 00001918                 468          DC.L UNHANDLED_HANDLER
000002F0= 00001918                 469          DC.L UNHANDLED_HANDLER
000002F4= 00001918                 470          DC.L UNHANDLED_HANDLER
000002F8= 00001918                 471          DC.L UNHANDLED_HANDLER
000002FC= 00001918                 472          DC.L UNHANDLED_HANDLER
00000300= 00001918                 473          DC.L UNHANDLED_HANDLER
00000304= 00001918                 474          DC.L UNHANDLED_HANDLER
00000308= 00001918                 475          DC.L UNHANDLED_HANDLER
0000030C= 00001918                 476          DC.L UNHANDLED_HANDLER
00000310= 00001918                 477          DC.L UNHANDLED_HANDLER
00000314= 00001918                 478          DC.L UNHANDLED_HANDLER
00000318= 00001918                 479          DC.L UNHANDLED_HANDLER
0000031C= 00001918                 480          DC.L UNHANDLED_HANDLER
00000320= 00001918                 481          DC.L UNHANDLED_HANDLER
00000324= 00001918                 482          DC.L UNHANDLED_HANDLER
00000328= 00001918                 483          DC.L UNHANDLED_HANDLER
0000032C= 00001918                 484          DC.L UNHANDLED_HANDLER
00000330= 00001918                 485          DC.L UNHANDLED_HANDLER
00000334= 00001918                 486          DC.L UNHANDLED_HANDLER
00000338= 00001918                 487          DC.L UNHANDLED_HANDLER
0000033C= 00001918                 488          DC.L UNHANDLED_HANDLER
00000340= 00001918                 489          DC.L UNHANDLED_HANDLER
00000344= 00001918                 490          DC.L UNHANDLED_HANDLER
00000348= 00001918                 491          DC.L UNHANDLED_HANDLER
0000034C= 00001918                 492          DC.L UNHANDLED_HANDLER
00000350= 00001918                 493          DC.L UNHANDLED_HANDLER
00000354= 00001918                 494          DC.L UNHANDLED_HANDLER
00000358= 00001918                 495          DC.L UNHANDLED_HANDLER
0000035C= 00001918                 496          DC.L UNHANDLED_HANDLER
00000360= 00001918                 497          DC.L UNHANDLED_HANDLER
00000364= 00001918                 498          DC.L UNHANDLED_HANDLER
00000368= 00001918                 499          DC.L UNHANDLED_HANDLER
0000036C= 00001918                 500          DC.L UNHANDLED_HANDLER
00000370= 00001918                 501          DC.L UNHANDLED_HANDLER
00000374= 00001918                 502          DC.L UNHANDLED_HANDLER
00000378= 00001918                 503          DC.L UNHANDLED_HANDLER
0000037C= 00001918                 504          DC.L UNHANDLED_HANDLER
00000380= 00001918                 505          DC.L UNHANDLED_HANDLER
00000384= 00001918                 506          DC.L UNHANDLED_HANDLER
00000388= 00001918                 507          DC.L UNHANDLED_HANDLER
0000038C= 00001918                 508          DC.L UNHANDLED_HANDLER
00000390= 00001918                 509          DC.L UNHANDLED_HANDLER
00000394= 00001918                 510          DC.L UNHANDLED_HANDLER
00000398= 00001918                 511          DC.L UNHANDLED_HANDLER
0000039C= 00001918                 512          DC.L UNHANDLED_HANDLER
000003A0= 00001918                 513          DC.L UNHANDLED_HANDLER
000003A4= 00001918                 514          DC.L UNHANDLED_HANDLER
000003A8= 00001918                 515          DC.L UNHANDLED_HANDLER
000003AC= 00001918                 516          DC.L UNHANDLED_HANDLER
000003B0= 00001918                 517          DC.L UNHANDLED_HANDLER
000003B4= 00001918                 518          DC.L UNHANDLED_HANDLER
000003B8= 00001918                 519          DC.L UNHANDLED_HANDLER
000003BC= 00001918                 520          DC.L UNHANDLED_HANDLER
000003C0= 00001918                 521          DC.L UNHANDLED_HANDLER
000003C4= 00001918                 522          DC.L UNHANDLED_HANDLER
000003C8= 00001918                 523          DC.L UNHANDLED_HANDLER
000003CC= 00001918                 524          DC.L UNHANDLED_HANDLER
000003D0= 00001918                 525          DC.L UNHANDLED_HANDLER
000003D4= 00001918                 526          DC.L UNHANDLED_HANDLER
000003D8= 00001918                 527          DC.L UNHANDLED_HANDLER
000003DC= 00001918                 528          DC.L UNHANDLED_HANDLER
000003E0= 00001918                 529          DC.L UNHANDLED_HANDLER
000003E4= 00001918                 530          DC.L UNHANDLED_HANDLER
000003E8= 00001918                 531          DC.L UNHANDLED_HANDLER
000003EC= 00001918                 532          DC.L UNHANDLED_HANDLER
000003F0= 00001918                 533          DC.L UNHANDLED_HANDLER
000003F4= 00001918                 534          DC.L UNHANDLED_HANDLER
000003F8= 00001918                 535          DC.L UNHANDLED_HANDLER
000003FC= 00001918                 536          DC.L UNHANDLED_HANDLER
00000400                           537  ; start of program  
00000400                           538  START
00000400  13FC 0000 00E00001       539      MOVE.B #0,DISPLAY
00000408                           540  
00000408  2E7C 002FFFFC            541      MOVE.L #$2FFFFC,A7                              ; reset the stack pointer, in case we got here through an exception
0000040E                           542  
0000040E                           543  ; reset the UART in case of warm start
0000040E  13FC 000A 00C00005       544      MOVE.B #$A,DUART_CRA                            ; disable rx & tx
00000416  13FC 000A 00C00015       545      MOVE.B #$A,DUART_CRB                            ; disable rx & tx
0000041E                           546      
0000041E                           547      FOR D1 = #$50 DOWNTO #$10 BY #$10 DO
0000041E  323C 0050                548s     MOVE.W  #$50,D1
00000422  6000 000E                549s     BRA _20000001
00000426                           550s _20000000
00000426  13C1 00C00005            551          MOVE.B D1,DUART_CRA                         ; reset everyting
0000042C  4E71                     552          NOP
0000042E                           553      ENDF
0000042E  0441 0010                554s     SUB.W   #$10,D1
00000432                           555s _20000001
00000432  B27C 0010                556s     CMP.W   #$10,D1
00000436  6CEE                     557s     BGE _20000000
00000438                           558  
00000438                           559      FOR D1 = #$50 DOWNTO #$10 BY #$10 DO
00000438  323C 0050                560s     MOVE.W  #$50,D1
0000043C  6000 000E                561s     BRA _20000003
00000440                           562s _20000002
00000440  13C1 00C00015            563          MOVE.B D1,DUART_CRB                         ; reset everyting
00000446  4E71                     564          NOP
00000448                           565      ENDF
00000448  0441 0010                566s     SUB.W   #$10,D1
0000044C                           567s _20000003
0000044C  B27C 0010                568s     CMP.W   #$10,D1
00000450  6CEE                     569s     BGE _20000002
00000452                           570      
00000452                           571  ;initialise UART
00000452  13FC 0000 00C00009       572      MOVE.B #$0,DUART_ACR
0000045A  13FC 0000 00C0000B       573      MOVE.B #$0,DUART_IMR                            ; no interrupts, please
00000462  13FC 0000 00C0001B       574      MOVE.B #$0,DUART_OPCR                           ; enable all outputs
0000046A                           575  
0000046A                           576  ; channel A
0000046A  13FC 0013 00C00001       577      MOVE.B #$13,DUART_MRA                           ; no flow control, no parity, 8 data bits
00000472  13FC 0007 00C00001       578      MOVE.B #$07,DUART_MRA                           ; 1 stop bit
0000047A  13FC 00CC 00C00003       579      MOVE.B #$CC,DUART_CSRA                          ; 38400 baud
00000482  13FC 0005 00C00005       580      MOVE.B #$5,DUART_CRA                            ; enable rx & tx
0000048A                           581  
0000048A                           582  ; channel B
0000048A  13FC 0013 00C00011       583      MOVE.B #$13,DUART_MRB                           ; no flow control, no parity, 8 data bits
00000492  13FC 0007 00C00011       584      MOVE.B #$07,DUART_MRB                           ; 1 stop bit
0000049A  13FC 00CC 00C00013       585      MOVE.B #$CC,DUART_CSRB                          ; 38400 baud
000004A2  13FC 0005 00C00015       586      MOVE.B #$5,DUART_CRB                            ; enable rx & tx
000004AA                           587  
000004AA                           588m     PRINT_CHAR #0,D1                                ; some non-printing char to flush out the serial port
000004AA                           589m WAIT_FOR_READY_1                                    ; WAIT UNTIL THE THERE IS SPACE TO SEND
000004AA                 TRUE      590m     IFEQ DEBUG
000004AA  1239 00C00003            591m         MOVE.B DUART_SRA,D1                         ; READ STATUS REGISTER
000004B0  0801 0002                592m         BTST #2,D1                                  ; CHECK FOR SPACE TO SEND
000004B4  67F4                     593m         BEQ WAIT_FOR_READY_1                        ; NO SPACE, CHECK AGAIN
000004B6  13FC 0000 00C00007       594m         MOVE.B #0,DUART_TXA                         ; SEND THE NEXT CHARACTER
000004BE                           595m     ENDC
000004BE                           596m 
000004BE                 FALSE     597m     IFNE DEBUG
000004BE                           598m     ENDC
000004BE                           599m 
000004BE                           600m     ENDM
000004BE                           601m     PRINT_CHAR #0,D1
000004BE                           602m WAIT_FOR_READY_2                                    ; WAIT UNTIL THE THERE IS SPACE TO SEND
000004BE                 TRUE      603m     IFEQ DEBUG
000004BE  1239 00C00003            604m         MOVE.B DUART_SRA,D1                         ; READ STATUS REGISTER
000004C4  0801 0002                605m         BTST #2,D1                                  ; CHECK FOR SPACE TO SEND
000004C8  67F4                     606m         BEQ WAIT_FOR_READY_2                        ; NO SPACE, CHECK AGAIN
000004CA  13FC 0000 00C00007       607m         MOVE.B #0,DUART_TXA                         ; SEND THE NEXT CHARACTER
000004D2                           608m     ENDC
000004D2                           609m 
000004D2                 FALSE     610m     IFNE DEBUG
000004D2                           611m     ENDC
000004D2                           612m 
000004D2                           613m     ENDM
000004D2                           614m     PRINT_CHAR #0,D1
000004D2                           615m WAIT_FOR_READY_3                                    ; WAIT UNTIL THE THERE IS SPACE TO SEND
000004D2                 TRUE      616m     IFEQ DEBUG
000004D2  1239 00C00003            617m         MOVE.B DUART_SRA,D1                         ; READ STATUS REGISTER
000004D8  0801 0002                618m         BTST #2,D1                                  ; CHECK FOR SPACE TO SEND
000004DC  67F4                     619m         BEQ WAIT_FOR_READY_3                        ; NO SPACE, CHECK AGAIN
000004DE  13FC 0000 00C00007       620m         MOVE.B #0,DUART_TXA                         ; SEND THE NEXT CHARACTER
000004E6                           621m     ENDC
000004E6                           622m 
000004E6                 FALSE     623m     IFNE DEBUG
000004E6                           624m     ENDC
000004E6                           625m 
000004E6                           626m     ENDM
000004E6                           627  
000004E6  13FC 0001 00E00001       628      MOVE.B #1,DISPLAY
000004EE                           629      
000004EE                           630m     PRINT_CRLF D1,A0
000004EE  41FA 163E                631m     LEA CRLF(PC),A0
000004F2                           632mm     PRINT_STR A0,D1
000004F2                           633mm LOOP_5
000004F2  0C10 0000                634mm     CMP.B #NULL,(A0)                                ; 0 -> DONE
000004F6  6700 0016                635mm     BEQ EXIT_5
000004FA                           636mmm     PRINT_CHAR (A0)+,D1
000004FA                           637mmm WAIT_FOR_READY_6                                    ; WAIT UNTIL THE THERE IS SPACE TO SEND
000004FA                 TRUE      638mmm     IFEQ DEBUG
000004FA  1239 00C00003            639mmm         MOVE.B DUART_SRA,D1                         ; READ STATUS REGISTER
00000500  0801 0002                640mmm         BTST #2,D1                                  ; CHECK FOR SPACE TO SEND
00000504  67F4                     641mmm         BEQ WAIT_FOR_READY_6                        ; NO SPACE, CHECK AGAIN
00000506  13D8 00C00007            642mmm         MOVE.B (A0)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
0000050C                           643mmm     ENDC
0000050C                           644mmm 
0000050C                 FALSE     645mmm     IFNE DEBUG
0000050C                           646mmm     ENDC
0000050C                           647mmm 
0000050C                           648mmm     ENDM
0000050C  60E4                     649mm     BRA LOOP_5
0000050E                           650mm EXIT_5
0000050E                           651mm     ENDM
0000050E                           652m     ENDM
0000050E  41FA 167E                653      LEA VERSION(PC),A0
00000512                           654m     PRINT_STR A0,D3
00000512                           655m LOOP_7
00000512  0C10 0000                656m     CMP.B #NULL,(A0)                                ; 0 -> DONE
00000516  6700 0016                657m     BEQ EXIT_7
0000051A                           658mm     PRINT_CHAR (A0)+,D3
0000051A                           659mm WAIT_FOR_READY_8                                    ; WAIT UNTIL THE THERE IS SPACE TO SEND
0000051A                 TRUE      660mm     IFEQ DEBUG
0000051A  1639 00C00003            661mm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
00000520  0803 0002                662mm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
00000524  67F4                     663mm         BEQ WAIT_FOR_READY_8                        ; NO SPACE, CHECK AGAIN
00000526  13D8 00C00007            664mm         MOVE.B (A0)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
0000052C                           665mm     ENDC
0000052C                           666mm 
0000052C                 FALSE     667mm     IFNE DEBUG
0000052C                           668mm     ENDC
0000052C                           669mm 
0000052C                           670mm     ENDM
0000052C  60E4                     671m     BRA LOOP_7
0000052E                           672m EXIT_7
0000052E                           673m     ENDM
0000052E                           674  
0000052E  41F9 00001BAC            675      LEA END,A0
00000534  2008                     676      MOVE.L A0,D0
00000536                           677m     PRINT_REG D0,D1,D2,D3,A0
00000536  41FA 15FC                678m     LEA OX(PC),A0
0000053A                           679mm     PRINT_STR A0,D1
0000053A                           680mm LOOP_10
0000053A  0C10 0000                681mm     CMP.B #NULL,(A0)                                ; 0 -> DONE
0000053E  6700 0016                682mm     BEQ EXIT_10
00000542                           683mmm     PRINT_CHAR (A0)+,D1
00000542                           684mmm WAIT_FOR_READY_11                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000542                 TRUE      685mmm     IFEQ DEBUG
00000542  1239 00C00003            686mmm         MOVE.B DUART_SRA,D1                         ; READ STATUS REGISTER
00000548  0801 0002                687mmm         BTST #2,D1                                  ; CHECK FOR SPACE TO SEND
0000054C  67F4                     688mmm         BEQ WAIT_FOR_READY_11                       ; NO SPACE, CHECK AGAIN
0000054E  13D8 00C00007            689mmm         MOVE.B (A0)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00000554                           690mmm     ENDC
00000554                           691mmm 
00000554                 FALSE     692mmm     IFNE DEBUG
00000554                           693mmm     ENDC
00000554                           694mmm 
00000554                           695mmm     ENDM
00000554  60E4                     696mm     BRA LOOP_10
00000556                           697mm EXIT_10
00000556                           698mm     ENDM
00000556  7607                     699m     MOVE.L #7,D3                                    ; LOOP ROUND ALL 8 HEX CHARACTERS OF 4 BITS EACH
00000558                           700m LOOP_9
00000558                           701mm     BIN2HEX D0,D2,A0
00000558  41FA 1556                702mm     LEA BIN2HEX_LUT(PC),A0                          ; LOAD THE LOOKUP TABLE
0000055C  E998                     703mm     ROL.L #4,D0                                     ; SHIFT THE TOP 4 BITS DOWN TO BOTTOM OF THE REGISTER THE AND MASK OFF EVERYTHING ELSE
0000055E  1400                     704mm     MOVE.B D0,D2
00000560  0282 0000000F            705mm     ANDI.L #$F,D2
00000566  1430 2000                706mm     MOVE.B 0(A0,D2),D2                              ; USE THAT AS AN INDEX INTO THE LUT
0000056A                           707mm     ENDM
0000056A                           708mm     PRINT_CHAR D2,D1
0000056A                           709mm WAIT_FOR_READY_13                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
0000056A                 TRUE      710mm     IFEQ DEBUG
0000056A  1239 00C00003            711mm         MOVE.B DUART_SRA,D1                         ; READ STATUS REGISTER
00000570  0801 0002                712mm         BTST #2,D1                                  ; CHECK FOR SPACE TO SEND
00000574  67F4                     713mm         BEQ WAIT_FOR_READY_13                       ; NO SPACE, CHECK AGAIN
00000576  13C2 00C00007            714mm         MOVE.B D2,DUART_TXA                         ; SEND THE NEXT CHARACTER
0000057C                           715mm     ENDC
0000057C                           716mm 
0000057C                 FALSE     717mm     IFNE DEBUG
0000057C                           718mm     ENDC
0000057C                           719mm 
0000057C                           720mm     ENDM
0000057C  57CB FFDA                721m     DBEQ D3,LOOP_9
00000580                           722m     ENDM
00000580                           723m     PRINT_CRLF D1,A0
00000580  41FA 15AC                724m     LEA CRLF(PC),A0
00000584                           725mm     PRINT_STR A0,D1
00000584                           726mm LOOP_15
00000584  0C10 0000                727mm     CMP.B #NULL,(A0)                                ; 0 -> DONE
00000588  6700 0016                728mm     BEQ EXIT_15
0000058C                           729mmm     PRINT_CHAR (A0)+,D1
0000058C                           730mmm WAIT_FOR_READY_16                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
0000058C                 TRUE      731mmm     IFEQ DEBUG
0000058C  1239 00C00003            732mmm         MOVE.B DUART_SRA,D1                         ; READ STATUS REGISTER
00000592  0801 0002                733mmm         BTST #2,D1                                  ; CHECK FOR SPACE TO SEND
00000596  67F4                     734mmm         BEQ WAIT_FOR_READY_16                       ; NO SPACE, CHECK AGAIN
00000598  13D8 00C00007            735mmm         MOVE.B (A0)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
0000059E                           736mmm     ENDC
0000059E                           737mmm 
0000059E                 FALSE     738mmm     IFNE DEBUG
0000059E                           739mmm     ENDC
0000059E                           740mmm 
0000059E                           741mmm     ENDM
0000059E  60E4                     742mm     BRA LOOP_15
000005A0                           743mm EXIT_15
000005A0                           744mm     ENDM
000005A0                           745m     ENDM
000005A0                           746  
000005A0  41FA 1386                747      LEA HELPPROMPT(PC),A0
000005A4                           748m     PRINT_STR A0,D3
000005A4                           749m LOOP_17
000005A4  0C10 0000                750m     CMP.B #NULL,(A0)                                ; 0 -> DONE
000005A8  6700 0016                751m     BEQ EXIT_17
000005AC                           752mm     PRINT_CHAR (A0)+,D3
000005AC                           753mm WAIT_FOR_READY_18                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
000005AC                 TRUE      754mm     IFEQ DEBUG
000005AC  1639 00C00003            755mm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
000005B2  0803 0002                756mm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
000005B6  67F4                     757mm         BEQ WAIT_FOR_READY_18                       ; NO SPACE, CHECK AGAIN
000005B8  13D8 00C00007            758mm         MOVE.B (A0)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
000005BE                           759mm     ENDC
000005BE                           760mm 
000005BE                 FALSE     761mm     IFNE DEBUG
000005BE                           762mm     ENDC
000005BE                           763mm 
000005BE                           764mm     ENDM
000005BE  60E4                     765m     BRA LOOP_17
000005C0                           766m EXIT_17
000005C0                           767m     ENDM
000005C0                           768  
000005C0                           769m     PRINT_CRLF D3,A0
000005C0  41FA 156C                770m     LEA CRLF(PC),A0
000005C4                           771mm     PRINT_STR A0,D3
000005C4                           772mm LOOP_20
000005C4  0C10 0000                773mm     CMP.B #NULL,(A0)                                ; 0 -> DONE
000005C8  6700 0016                774mm     BEQ EXIT_20
000005CC                           775mmm     PRINT_CHAR (A0)+,D3
000005CC                           776mmm WAIT_FOR_READY_21                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
000005CC                 TRUE      777mmm     IFEQ DEBUG
000005CC  1639 00C00003            778mmm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
000005D2  0803 0002                779mmm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
000005D6  67F4                     780mmm         BEQ WAIT_FOR_READY_21                       ; NO SPACE, CHECK AGAIN
000005D8  13D8 00C00007            781mmm         MOVE.B (A0)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
000005DE                           782mmm     ENDC
000005DE                           783mmm 
000005DE                 FALSE     784mmm     IFNE DEBUG
000005DE                           785mmm     ENDC
000005DE                           786mmm 
000005DE                           787mmm     ENDM
000005DE  60E4                     788mm     BRA LOOP_20
000005E0                           789mm EXIT_20
000005E0                           790mm     ENDM
000005E0                           791m     ENDM
000005E0                           792  
000005E0  7E00                     793      MOVE.L #0,D7                                    ; address accumulator
000005E2                           794  
000005E2  13FC 0002 00E00001       795      MOVE.B #2,DISPLAY
000005EA                           796  MAIN_LOOP
000005EA  41FA 1545                797      LEA PROMPT(PC),A0
000005EE                           798m     PRINT_STR A0,D3
000005EE                           799m LOOP_22
000005EE  0C10 0000                800m     CMP.B #NULL,(A0)                                ; 0 -> DONE
000005F2  6700 0016                801m     BEQ EXIT_22
000005F6                           802mm     PRINT_CHAR (A0)+,D3
000005F6                           803mm WAIT_FOR_READY_23                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
000005F6                 TRUE      804mm     IFEQ DEBUG
000005F6  1639 00C00003            805mm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
000005FC  0803 0002                806mm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
00000600  67F4                     807mm         BEQ WAIT_FOR_READY_23                       ; NO SPACE, CHECK AGAIN
00000602  13D8 00C00007            808mm         MOVE.B (A0)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00000608                           809mm     ENDC
00000608                           810mm 
00000608                 FALSE     811mm     IFNE DEBUG
00000608                           812mm     ENDC
00000608                           813mm 
00000608                           814mm     ENDM
00000608  60E4                     815m     BRA LOOP_22
0000060A                           816m EXIT_22
0000060A                           817m     ENDM
0000060A                           818  
0000060A                           819  GET_INPUT
0000060A                           820m     WAIT_CHAR D2,D3                                 ; fetch character from serial port -> D2
0000060A                           821m WAIT_FOR_READY_24                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
0000060A                 TRUE      822m     IFEQ DEBUG
0000060A  1639 00C00003            823m         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
00000610  0803 0000                824m         BTST #0,D3                                  ; CHECK FOR CHARACTER
00000614  67F4                     825m         BEQ WAIT_FOR_READY_24                       ; NOTHING, CHECK AGAIN
00000616                           826m     ENDC
00000616                           827m 
00000616                           828mm     READ_CHAR D2
00000616                 TRUE      829mm     IFEQ DEBUG
00000616  1439 00C00007            830mm         MOVE.B DUART_RXA,D2                         ; GOT A CHARACTER, READ IT
0000061C                           831mm     ENDC
0000061C                 FALSE     832mm     IFNE DEBUG
0000061C                           833mm     ENDC
0000061C                           834mm 
0000061C  B43C 001B                835mm     CMP.B #$1B,D2                                   ; CHECK FOR ESCAPE AND GO TO START
00000620  6700 FDDE                836mm     BEQ START
00000624                           837mm     ENDM
00000624                           838m 
00000624                 TRUE      839m     IFEQ DEBUG
00000624                           840mm         PRINT_CHAR D2,D3                            ; ECHO IT BACK
00000624                           841mm WAIT_FOR_READY_26                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000624                 TRUE      842mm     IFEQ DEBUG
00000624  1639 00C00003            843mm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
0000062A  0803 0002                844mm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
0000062E  67F4                     845mm         BEQ WAIT_FOR_READY_26                       ; NO SPACE, CHECK AGAIN
00000630  13C2 00C00007            846mm         MOVE.B D2,DUART_TXA                         ; SEND THE NEXT CHARACTER
00000636                           847mm     ENDC
00000636                           848mm 
00000636                 FALSE     849mm     IFNE DEBUG
00000636                           850mm     ENDC
00000636                           851mm 
00000636                           852mm     ENDM
00000636                           853m     ENDC
00000636                           854m     ENDM
00000636                           855  
00000636                           856      IF.B D2 <GE> #'0' AND.B D2 <LE> #'9' THEN
00000636  B43C 0030                857s     CMP.B   #'0',D2
0000063A  6D00 000E                858s     BLT _00000000
0000063E  B43C 0039                859s     CMP.B   #'9',D2
00000642  6E00 0006                860s     BGT _00000000
00000646  6000 114E                861          BRA HEX_DIGIT
0000064A                           862      ENDI
0000064A                           863s _00000000
0000064A                           864      IF.B D2 <GE> #'A' AND.B D2 <LE> #'F' THEN
0000064A  B43C 0041                865s     CMP.B   #'A',D2
0000064E  6D00 000E                866s     BLT _00000001
00000652  B43C 0046                867s     CMP.B   #'F',D2
00000656  6E00 0006                868s     BGT _00000001
0000065A  6000 113A                869          BRA HEX_DIGIT
0000065E                           870      ENDI
0000065E                           871s _00000001
0000065E                           872  
0000065E  B43C 0077                873      CMP.B #'w',D2
00000662  6700 019A                874      BEQ W
00000666                           875  
00000666  B43C 006C                876      CMP.B #'l',D2
0000066A  6700 0A30                877      BEQ L 
0000066E                           878  
0000066E  B43C 0070                879      CMP.B #'p',D2
00000672  6700 0DB0                880      BEQ P
00000676                           881  
00000676  B43C 006D                882      CMP.B #'m',D2
0000067A  6700 0F66                883      BEQ M
0000067E                           884  
0000067E                           885m     PRINT_CRLF D3,A0
0000067E  41FA 14AE                886m     LEA CRLF(PC),A0
00000682                           887mm     PRINT_STR A0,D3
00000682                           888mm LOOP_28
00000682  0C10 0000                889mm     CMP.B #NULL,(A0)                                ; 0 -> DONE
00000686  6700 0016                890mm     BEQ EXIT_28
0000068A                           891mmm     PRINT_CHAR (A0)+,D3
0000068A                           892mmm WAIT_FOR_READY_29                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
0000068A                 TRUE      893mmm     IFEQ DEBUG
0000068A  1639 00C00003            894mmm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
00000690  0803 0002                895mmm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
00000694  67F4                     896mmm         BEQ WAIT_FOR_READY_29                       ; NO SPACE, CHECK AGAIN
00000696  13D8 00C00007            897mmm         MOVE.B (A0)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
0000069C                           898mmm     ENDC
0000069C                           899mmm 
0000069C                 FALSE     900mmm     IFNE DEBUG
0000069C                           901mmm     ENDC
0000069C                           902mmm 
0000069C                           903mmm     ENDM
0000069C  60E4                     904mm     BRA LOOP_28
0000069E                           905mm EXIT_28
0000069E                           906mm     ENDM
0000069E                           907m     ENDM
0000069E                           908   
0000069E  B43C 003F                909      CMP.B #'?',D2
000006A2  6700 0056                910      BEQ H
000006A6                           911   
000006A6  B43C 0076                912      CMP.B #'v',D2
000006AA  6700 0056                913      BEQ V
000006AE                           914      
000006AE  B43C 0072                915      CMP.B #'r',D2
000006B2  6700 0072                916      BEQ R
000006B6                           917  
000006B6  B43C 0073                918      CMP.B #'s',D2
000006BA  6700 01BE                919      BEQ S
000006BE                           920  
000006BE  B43C 0067                921      CMP.B #'g',D2
000006C2  6700 08E2                922      BEQ G   
000006C6                           923  
000006C6  B43C 007A                924      CMP.B #'z',D2
000006CA  6700 08E0                925      BEQ Z   
000006CE                           926  
000006CE  B43C 0078                927      CMP.B #'x',D2
000006D2  6700 0FA6                928      BEQ X
000006D6                           929  
000006D6  41FA 1376                930      LEA HUH(PC),A0
000006DA                           931m     PRINT_STR A0,D3
000006DA                           932m LOOP_30
000006DA  0C10 0000                933m     CMP.B #NULL,(A0)                                ; 0 -> DONE
000006DE  6700 0016                934m     BEQ EXIT_30
000006E2                           935mm     PRINT_CHAR (A0)+,D3
000006E2                           936mm WAIT_FOR_READY_31                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
000006E2                 TRUE      937mm     IFEQ DEBUG
000006E2  1639 00C00003            938mm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
000006E8  0803 0002                939mm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
000006EC  67F4                     940mm         BEQ WAIT_FOR_READY_31                       ; NO SPACE, CHECK AGAIN
000006EE  13D8 00C00007            941mm         MOVE.B (A0)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
000006F4                           942mm     ENDC
000006F4                           943mm 
000006F4                 FALSE     944mm     IFNE DEBUG
000006F4                           945mm     ENDC
000006F4                           946mm 
000006F4                           947mm     ENDM
000006F4  60E4                     948m     BRA LOOP_30
000006F6                           949m EXIT_30
000006F6                           950m     ENDM
000006F6                           951  
000006F6  6000 FEF2                952      BRA MAIN_LOOP
000006FA                           953  
000006FA                           954  ; commands
000006FA                           955  H
000006FA  41FA 123F                956      LEA HELP(PC),A0
000006FE  6000 0006                957      BRA PRINTSTR
00000702                           958  
00000702                           959  V
00000702  41FA 148A                960      LEA VERSION(PC),A0
00000706                           961  PRINTSTR
00000706                           962m     PRINT_STR A0,D3    
00000706                           963m LOOP_32
00000706  0C10 0000                964m     CMP.B #NULL,(A0)                                ; 0 -> DONE
0000070A  6700 0016                965m     BEQ EXIT_32
0000070E                           966mm     PRINT_CHAR (A0)+,D3
0000070E                           967mm WAIT_FOR_READY_33                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
0000070E                 TRUE      968mm     IFEQ DEBUG
0000070E  1639 00C00003            969mm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
00000714  0803 0002                970mm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
00000718  67F4                     971mm         BEQ WAIT_FOR_READY_33                       ; NO SPACE, CHECK AGAIN
0000071A  13D8 00C00007            972mm         MOVE.B (A0)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00000720                           973mm     ENDC
00000720                           974mm 
00000720                 FALSE     975mm     IFNE DEBUG
00000720                           976mm     ENDC
00000720                           977mm 
00000720                           978mm     ENDM
00000720  60E4                     979m     BRA LOOP_32
00000722                           980m EXIT_32
00000722                           981m     ENDM
00000722  6000 FEC6                982      BRA MAIN_LOOP
00000726                           983  
00000726                           984  R
00000726  2047                     985      MOVE.L D7,A0                                    ; address accumulator -> address register
00000728  7E00                     986      MOVE.L #0,D7                                    ;clear the now used address accumulator
0000072A  2410                     987      MOVE.L (A0),D2                                  ; read the memory and print it
0000072C                           988m     PRINT_REG D2,D3,D4,D5,A0
0000072C  41FA 1406                989m     LEA OX(PC),A0
00000730                           990mm     PRINT_STR A0,D3
00000730                           991mm LOOP_35
00000730  0C10 0000                992mm     CMP.B #NULL,(A0)                                ; 0 -> DONE
00000734  6700 0016                993mm     BEQ EXIT_35
00000738                           994mmm     PRINT_CHAR (A0)+,D3
00000738                           995mmm WAIT_FOR_READY_36                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000738                 TRUE      996mmm     IFEQ DEBUG
00000738  1639 00C00003            997mmm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
0000073E  0803 0002                998mmm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
00000742  67F4                     999mmm         BEQ WAIT_FOR_READY_36                       ; NO SPACE, CHECK AGAIN
00000744  13D8 00C00007           1000mmm         MOVE.B (A0)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
0000074A                          1001mmm     ENDC
0000074A                          1002mmm 
0000074A                 FALSE    1003mmm     IFNE DEBUG
0000074A                          1004mmm     ENDC
0000074A                          1005mmm 
0000074A                          1006mmm     ENDM
0000074A  60E4                    1007mm     BRA LOOP_35
0000074C                          1008mm EXIT_35
0000074C                          1009mm     ENDM
0000074C  7A07                    1010m     MOVE.L #7,D5                                    ; LOOP ROUND ALL 8 HEX CHARACTERS OF 4 BITS EACH
0000074E                          1011m LOOP_34
0000074E                          1012mm     BIN2HEX D2,D4,A0
0000074E  41FA 1360               1013mm     LEA BIN2HEX_LUT(PC),A0                          ; LOAD THE LOOKUP TABLE
00000752  E99A                    1014mm     ROL.L #4,D2                                     ; SHIFT THE TOP 4 BITS DOWN TO BOTTOM OF THE REGISTER THE AND MASK OFF EVERYTHING ELSE
00000754  1802                    1015mm     MOVE.B D2,D4
00000756  0284 0000000F           1016mm     ANDI.L #$F,D4
0000075C  1830 4000               1017mm     MOVE.B 0(A0,D4),D4                              ; USE THAT AS AN INDEX INTO THE LUT
00000760                          1018mm     ENDM
00000760                          1019mm     PRINT_CHAR D4,D3
00000760                          1020mm WAIT_FOR_READY_38                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000760                 TRUE     1021mm     IFEQ DEBUG
00000760  1639 00C00003           1022mm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
00000766  0803 0002               1023mm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
0000076A  67F4                    1024mm         BEQ WAIT_FOR_READY_38                       ; NO SPACE, CHECK AGAIN
0000076C  13C4 00C00007           1025mm         MOVE.B D4,DUART_TXA                         ; SEND THE NEXT CHARACTER
00000772                          1026mm     ENDC
00000772                          1027mm 
00000772                 FALSE    1028mm     IFNE DEBUG
00000772                          1029mm     ENDC
00000772                          1030mm 
00000772                          1031mm     ENDM
00000772  57CD FFDA               1032m     DBEQ D5,LOOP_34
00000776                          1033m     ENDM
00000776                          1034      
00000776                          1035m     PRINT_CHAR #32,D3
00000776                          1036m WAIT_FOR_READY_39                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000776                 TRUE     1037m     IFEQ DEBUG
00000776  1639 00C00003           1038m         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
0000077C  0803 0002               1039m         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
00000780  67F4                    1040m         BEQ WAIT_FOR_READY_39                       ; NO SPACE, CHECK AGAIN
00000782  13FC 0020 00C00007      1041m         MOVE.B #32,DUART_TXA                            ; SEND THE NEXT CHARACTER
0000078A                          1042m     ENDC
0000078A                          1043m 
0000078A                 FALSE    1044m     IFNE DEBUG
0000078A                          1045m     ENDC
0000078A                          1046m 
0000078A                          1047m     ENDM
0000078A                          1048  
0000078A  E19A                    1049      ROL.L #8,D2
0000078C                          1050m     PRINT_CHAR D2,D3
0000078C                          1051m WAIT_FOR_READY_40                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
0000078C                 TRUE     1052m     IFEQ DEBUG
0000078C  1639 00C00003           1053m         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
00000792  0803 0002               1054m         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
00000796  67F4                    1055m         BEQ WAIT_FOR_READY_40                       ; NO SPACE, CHECK AGAIN
00000798  13C2 00C00007           1056m         MOVE.B D2,DUART_TXA                         ; SEND THE NEXT CHARACTER
0000079E                          1057m     ENDC
0000079E                          1058m 
0000079E                 FALSE    1059m     IFNE DEBUG
0000079E                          1060m     ENDC
0000079E                          1061m 
0000079E                          1062m     ENDM
0000079E  E19A                    1063      ROL.L #8,D2
000007A0                          1064m     PRINT_CHAR D2,D3
000007A0                          1065m WAIT_FOR_READY_41                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
000007A0                 TRUE     1066m     IFEQ DEBUG
000007A0  1639 00C00003           1067m         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
000007A6  0803 0002               1068m         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
000007AA  67F4                    1069m         BEQ WAIT_FOR_READY_41                       ; NO SPACE, CHECK AGAIN
000007AC  13C2 00C00007           1070m         MOVE.B D2,DUART_TXA                         ; SEND THE NEXT CHARACTER
000007B2                          1071m     ENDC
000007B2                          1072m 
000007B2                 FALSE    1073m     IFNE DEBUG
000007B2                          1074m     ENDC
000007B2                          1075m 
000007B2                          1076m     ENDM
000007B2  E19A                    1077      ROL.L #8,D2
000007B4                          1078m     PRINT_CHAR D2,D3
000007B4                          1079m WAIT_FOR_READY_42                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
000007B4                 TRUE     1080m     IFEQ DEBUG
000007B4  1639 00C00003           1081m         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
000007BA  0803 0002               1082m         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
000007BE  67F4                    1083m         BEQ WAIT_FOR_READY_42                       ; NO SPACE, CHECK AGAIN
000007C0  13C2 00C00007           1084m         MOVE.B D2,DUART_TXA                         ; SEND THE NEXT CHARACTER
000007C6                          1085m     ENDC
000007C6                          1086m 
000007C6                 FALSE    1087m     IFNE DEBUG
000007C6                          1088m     ENDC
000007C6                          1089m 
000007C6                          1090m     ENDM
000007C6  E19A                    1091      ROL.L #8,D2
000007C8                          1092m     PRINT_CHAR D2,D3
000007C8                          1093m WAIT_FOR_READY_43                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
000007C8                 TRUE     1094m     IFEQ DEBUG
000007C8  1639 00C00003           1095m         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
000007CE  0803 0002               1096m         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
000007D2  67F4                    1097m         BEQ WAIT_FOR_READY_43                       ; NO SPACE, CHECK AGAIN
000007D4  13C2 00C00007           1098m         MOVE.B D2,DUART_TXA                         ; SEND THE NEXT CHARACTER
000007DA                          1099m     ENDC
000007DA                          1100m 
000007DA                 FALSE    1101m     IFNE DEBUG
000007DA                          1102m     ENDC
000007DA                          1103m 
000007DA                          1104m     ENDM
000007DA                          1105  
000007DA                          1106m     PRINT_CRLF D3,A0
000007DA  41FA 1352               1107m     LEA CRLF(PC),A0
000007DE                          1108mm     PRINT_STR A0,D3
000007DE                          1109mm LOOP_45
000007DE  0C10 0000               1110mm     CMP.B #NULL,(A0)                                ; 0 -> DONE
000007E2  6700 0016               1111mm     BEQ EXIT_45
000007E6                          1112mmm     PRINT_CHAR (A0)+,D3
000007E6                          1113mmm WAIT_FOR_READY_46                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
000007E6                 TRUE     1114mmm     IFEQ DEBUG
000007E6  1639 00C00003           1115mmm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
000007EC  0803 0002               1116mmm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
000007F0  67F4                    1117mmm         BEQ WAIT_FOR_READY_46                       ; NO SPACE, CHECK AGAIN
000007F2  13D8 00C00007           1118mmm         MOVE.B (A0)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
000007F8                          1119mmm     ENDC
000007F8                          1120mmm 
000007F8                 FALSE    1121mmm     IFNE DEBUG
000007F8                          1122mmm     ENDC
000007F8                          1123mmm 
000007F8                          1124mmm     ENDM
000007F8  60E4                    1125mm     BRA LOOP_45
000007FA                          1126mm EXIT_45
000007FA                          1127mm     ENDM
000007FA                          1128m     ENDM
000007FA                          1129      
000007FA  6000 FDEE               1130      BRA MAIN_LOOP
000007FE                          1131  
000007FE                          1132  W
000007FE                          1133      FOR D6 = #0 TO #7 DO                                ; read 4 bytes
000007FE  3C3C 0000               1134s     MOVE.W  #0,D6
00000802  6000 0046               1135s     BRA _20000005
00000806                          1136s _20000004
00000806  E98D                    1137          LSL.L #4,D5                                     ; make what we have so far more significant
00000808                          1138m         WAIT_CHAR D2,D3                                 ; next character -> D2
00000808                          1139m WAIT_FOR_READY_47                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000808                 TRUE     1140m     IFEQ DEBUG
00000808  1639 00C00003           1141m         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
0000080E  0803 0000               1142m         BTST #0,D3                                  ; CHECK FOR CHARACTER
00000812  67F4                    1143m         BEQ WAIT_FOR_READY_47                       ; NOTHING, CHECK AGAIN
00000814                          1144m     ENDC
00000814                          1145m 
00000814                          1146mm     READ_CHAR D2
00000814                 TRUE     1147mm     IFEQ DEBUG
00000814  1439 00C00007           1148mm         MOVE.B DUART_RXA,D2                         ; GOT A CHARACTER, READ IT
0000081A                          1149mm     ENDC
0000081A                 FALSE    1150mm     IFNE DEBUG
0000081A                          1151mm     ENDC
0000081A                          1152mm 
0000081A  B43C 001B               1153mm     CMP.B #$1B,D2                                   ; CHECK FOR ESCAPE AND GO TO START
0000081E  6700 FBE0               1154mm     BEQ START
00000822                          1155mm     ENDM
00000822                          1156m 
00000822                 TRUE     1157m     IFEQ DEBUG
00000822                          1158mm         PRINT_CHAR D2,D3                            ; ECHO IT BACK
00000822                          1159mm WAIT_FOR_READY_49                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000822                 TRUE     1160mm     IFEQ DEBUG
00000822  1639 00C00003           1161mm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
00000828  0803 0002               1162mm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
0000082C  67F4                    1163mm         BEQ WAIT_FOR_READY_49                       ; NO SPACE, CHECK AGAIN
0000082E  13C2 00C00007           1164mm         MOVE.B D2,DUART_TXA                         ; SEND THE NEXT CHARACTER
00000834                          1165mm     ENDC
00000834                          1166mm 
00000834                 FALSE    1167mm     IFNE DEBUG
00000834                          1168mm     ENDC
00000834                          1169mm 
00000834                          1170mm     ENDM
00000834                          1171m     ENDC
00000834                          1172m     ENDM
00000834                          1173m         HEX2BIN D2,D2,A0                                ; convert to binary -> D2
00000834  41FA 128A               1174m     LEA HEX2BIN_LUT(PC),A0                          ; LOAD THE LOOKUP TABLE
00000838  0402 0030               1175m     SUB.B #'0',D2                                   ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
0000083C  C4BC 000000FF           1176m     AND.L #$FF,D2                                   ; IGNORE THE TOP 3 BYTES
00000842  1430 2000               1177m     MOVE.B 0(A0,D2),D2                              ; USE THAT AS AN INDEX INTO THE LUT   
00000846                          1178m     ENDM
00000846  8A02                    1179          OR.B D2,D5
00000848                          1180      ENDF
00000848  5246                    1181s     ADD.W   #1,D6
0000084A                          1182s _20000005
0000084A  BC7C 0007               1183s     CMP.W   #7,D6
0000084E  6FB6                    1184s     BLE _20000004
00000850                          1185  
00000850                          1186m     PRINT_CRLF D3,A0
00000850  41FA 12DC               1187m     LEA CRLF(PC),A0
00000854                          1188mm     PRINT_STR A0,D3
00000854                          1189mm LOOP_52
00000854  0C10 0000               1190mm     CMP.B #NULL,(A0)                                ; 0 -> DONE
00000858  6700 0016               1191mm     BEQ EXIT_52
0000085C                          1192mmm     PRINT_CHAR (A0)+,D3
0000085C                          1193mmm WAIT_FOR_READY_53                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
0000085C                 TRUE     1194mmm     IFEQ DEBUG
0000085C  1639 00C00003           1195mmm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
00000862  0803 0002               1196mmm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
00000866  67F4                    1197mmm         BEQ WAIT_FOR_READY_53                       ; NO SPACE, CHECK AGAIN
00000868  13D8 00C00007           1198mmm         MOVE.B (A0)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
0000086E                          1199mmm     ENDC
0000086E                          1200mmm 
0000086E                 FALSE    1201mmm     IFNE DEBUG
0000086E                          1202mmm     ENDC
0000086E                          1203mmm 
0000086E                          1204mmm     ENDM
0000086E  60E4                    1205mm     BRA LOOP_52
00000870                          1206mm EXIT_52
00000870                          1207mm     ENDM
00000870                          1208m     ENDM
00000870                          1209  
00000870  2047                    1210      MOVE.L D7,A0                                    ; address accumulator -> address register
00000872  7E00                    1211      MOVE.L #0,D7                                    ; clear the now used address accumulator
00000874                          1212  
00000874  2085                    1213      MOVE.L D5,(A0)                                  ; write the data
00000876                          1214  
00000876  6000 FD72               1215      BRA MAIN_LOOP
0000087A                          1216  
0000087A                          1217  ; register map for S
0000087A                          1218  ; A0 - start address
0000087A                          1219  ; A1 - offset
0000087A                          1220  ; A2 - next address to write
0000087A                          1221  ; A3 - next location (jmp)
0000087A                          1222  ; A4 - Working Address Register
0000087A                          1223  ; D0 - record count
0000087A                          1224  ; D1 - 'S', record type, data byte, done flag (0x00000000 = continue, 0xFFFFFFFF = done)
0000087A                          1225  ; D2 - checksum
0000087A                          1226  ; D3 - data byte count
0000087A                          1227  ; D4 - read address, moved into A2
0000087A                          1228  ; D5 - temp
0000087A                          1229  ; D6 - temp
0000087A                          1230  ; D7 - temp
0000087A                          1231  S
0000087A  2078 0000               1232      MOVE.L 0,A0                                     ; start address -> A0
0000087E  2247                    1233      MOVE.L D7,A1                                    ; grab the address accumulator (offset) into A1
00000880                          1234      
00000880  7000                    1235      MOVE.L #0,D0                                    ; count of records read -> D0
00000882                          1236          
00000882                          1237  WAIT_FOR_SRECORD                                    ; wait for the start of a record, indicated by 'S'
00000882                          1238m     DOWNLOAD D1
00000882                          1239m WAIT_FOR_READY_54                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000882                          1240m 
00000882  1239 00C00003           1241m     MOVE.B DUART_SRA,D1                             ; CHECK FOR COMMAND
00000888  0801 0000               1242m     BTST #0,D1                                      ; CHECK FOR CHARACTER
0000088C  6700 0010               1243m     BEQ CONTINUE_54                                 ; NOTHING, CONTINUE
00000890                          1244m 
00000890                          1245mm     READ_CHAR D1                                    ; WE're not going to do anything with it, just check for escape
00000890                 TRUE     1246mm     IFEQ DEBUG
00000890  1239 00C00007           1247mm         MOVE.B DUART_RXA,D1                         ; GOT A CHARACTER, READ IT
00000896                          1248mm     ENDC
00000896                 FALSE    1249mm     IFNE DEBUG
00000896                          1250mm     ENDC
00000896                          1251mm 
00000896  B23C 001B               1252mm     CMP.B #$1B,D1                                   ; CHECK FOR ESCAPE AND GO TO START
0000089A  6700 FB64               1253mm     BEQ START
0000089E                          1254mm     ENDM
0000089E                          1255m CONTINUE_54
0000089E  1239 00C00013           1256m     MOVE.B DUART_SRB,D1                             ; READ DOWNLOAD STATUS REGISTER
000008A4  0801 0000               1257m     BTST #0,D1                                      ; CHECK FOR CHARACTER
000008A8  67D8                    1258m     BEQ WAIT_FOR_READY_54                           ; NOTHING, CHECK AGAIN
000008AA                          1259m     
000008AA  1239 00C00017           1260m     MOVE.B DUART_RXB,D1                             ; GOT A CHARACTER, READ IT
000008B0  13C1 00E00001           1261m     MOVE.B D1,DISPLAY                               ; ECHO TO THE DISPLAY
000008B6                          1262m 
000008B6                          1263m     ENDM
000008B6  B23C 0053               1264      CMP.B #'S',D1                                   ; found S?
000008BA  66C6                    1265      BNE WAIT_FOR_SRECORD                            ; nope, keep waiting
000008BC                          1266      
000008BC                          1267m     PRINT_CHAR #'S',D5                              ; print the S
000008BC                          1268m WAIT_FOR_READY_56                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
000008BC                 TRUE     1269m     IFEQ DEBUG
000008BC  1A39 00C00003           1270m         MOVE.B DUART_SRA,D5                         ; READ STATUS REGISTER
000008C2  0805 0002               1271m         BTST #2,D5                                  ; CHECK FOR SPACE TO SEND
000008C6  67F4                    1272m         BEQ WAIT_FOR_READY_56                       ; NO SPACE, CHECK AGAIN
000008C8  13FC 0053 00C00007      1273m         MOVE.B #'S',DUART_TXA                           ; SEND THE NEXT CHARACTER
000008D0                          1274m     ENDC
000008D0                          1275m 
000008D0                 FALSE    1276m     IFNE DEBUG
000008D0                          1277m     ENDC
000008D0                          1278m 
000008D0                          1279m     ENDM
000008D0  5280                    1280      ADD.L #1,D0                                     ; read another S record, increment count
000008D2                          1281      
000008D2                          1282m     DOWNLOAD D1                                     ; read the record identifier and echo it back
000008D2                          1283m WAIT_FOR_READY_57                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
000008D2                          1284m 
000008D2  1239 00C00003           1285m     MOVE.B DUART_SRA,D1                             ; CHECK FOR COMMAND
000008D8  0801 0000               1286m     BTST #0,D1                                      ; CHECK FOR CHARACTER
000008DC  6700 0010               1287m     BEQ CONTINUE_57                                 ; NOTHING, CONTINUE
000008E0                          1288m 
000008E0                          1289mm     READ_CHAR D1                                    ; WE're not going to do anything with it, just check for escape
000008E0                 TRUE     1290mm     IFEQ DEBUG
000008E0  1239 00C00007           1291mm         MOVE.B DUART_RXA,D1                         ; GOT A CHARACTER, READ IT
000008E6                          1292mm     ENDC
000008E6                 FALSE    1293mm     IFNE DEBUG
000008E6                          1294mm     ENDC
000008E6                          1295mm 
000008E6  B23C 001B               1296mm     CMP.B #$1B,D1                                   ; CHECK FOR ESCAPE AND GO TO START
000008EA  6700 FB14               1297mm     BEQ START
000008EE                          1298mm     ENDM
000008EE                          1299m CONTINUE_57
000008EE  1239 00C00013           1300m     MOVE.B DUART_SRB,D1                             ; READ DOWNLOAD STATUS REGISTER
000008F4  0801 0000               1301m     BTST #0,D1                                      ; CHECK FOR CHARACTER
000008F8  67D8                    1302m     BEQ WAIT_FOR_READY_57                           ; NOTHING, CHECK AGAIN
000008FA                          1303m     
000008FA  1239 00C00017           1304m     MOVE.B DUART_RXB,D1                             ; GOT A CHARACTER, READ IT
00000900  13C1 00E00001           1305m     MOVE.B D1,DISPLAY                               ; ECHO TO THE DISPLAY
00000906                          1306m 
00000906                          1307m     ENDM
00000906                          1308m     PRINT_CHAR D1,D5
00000906                          1309m WAIT_FOR_READY_59                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000906                 TRUE     1310m     IFEQ DEBUG
00000906  1A39 00C00003           1311m         MOVE.B DUART_SRA,D5                         ; READ STATUS REGISTER
0000090C  0805 0002               1312m         BTST #2,D5                                  ; CHECK FOR SPACE TO SEND
00000910  67F4                    1313m         BEQ WAIT_FOR_READY_59                       ; NO SPACE, CHECK AGAIN
00000912  13C1 00C00007           1314m         MOVE.B D1,DUART_TXA                         ; SEND THE NEXT CHARACTER
00000918                          1315m     ENDC
00000918                          1316m 
00000918                 FALSE    1317m     IFNE DEBUG
00000918                          1318m     ENDC
00000918                          1319m 
00000918                          1320m     ENDM
00000918                          1321  
00000918  7400                    1322      MOVE.L #0,D2                                    ; clear the checksum
0000091A                          1323  
0000091A                          1324m     DOWNLOAD_BYTE D3,D5,D6,D7,D2,A4
0000091A  1E3C 0002               1325m     MOVE.B #2,D7
0000091E                          1326m     WHILE.B D7 <GT> 0 DO
0000091E                          1327ms _10000000
0000091E  BE38 0000               1328ms     CMP.B   0,D7
00000922  6F00 0062               1329ms     BLE _10000001
00000926  E98B                    1330m         LSL.L #4,D3                                 ; IT's OK to do this first, because we are either starting from 0, 
00000928                          1331mm         DOWNLOAD D5                                 ; OR WE ARE READING THE NEXT BYTE ALONG, SO NEED TO SHIFT UP THE PREVIOUS ONE
00000928                          1332mm WAIT_FOR_READY_61                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000928                          1333mm 
00000928  1A39 00C00003           1334mm     MOVE.B DUART_SRA,D5                             ; CHECK FOR COMMAND
0000092E  0805 0000               1335mm     BTST #0,D5                                      ; CHECK FOR CHARACTER
00000932  6700 0010               1336mm     BEQ CONTINUE_61                                 ; NOTHING, CONTINUE
00000936                          1337mm 
00000936                          1338mmm     READ_CHAR D5                                    ; WE're not going to do anything with it, just check for escape
00000936                 TRUE     1339mmm     IFEQ DEBUG
00000936  1A39 00C00007           1340mmm         MOVE.B DUART_RXA,D5                         ; GOT A CHARACTER, READ IT
0000093C                          1341mmm     ENDC
0000093C                 FALSE    1342mmm     IFNE DEBUG
0000093C                          1343mmm     ENDC
0000093C                          1344mmm 
0000093C  BA3C 001B               1345mmm     CMP.B #$1B,D5                                   ; CHECK FOR ESCAPE AND GO TO START
00000940  6700 FABE               1346mmm     BEQ START
00000944                          1347mmm     ENDM
00000944                          1348mm CONTINUE_61
00000944  1A39 00C00013           1349mm     MOVE.B DUART_SRB,D5                             ; READ DOWNLOAD STATUS REGISTER
0000094A  0805 0000               1350mm     BTST #0,D5                                      ; CHECK FOR CHARACTER
0000094E  67D8                    1351mm     BEQ WAIT_FOR_READY_61                           ; NOTHING, CHECK AGAIN
00000950                          1352mm     
00000950  1A39 00C00017           1353mm     MOVE.B DUART_RXB,D5                             ; GOT A CHARACTER, READ IT
00000956  13C5 00E00001           1354mm     MOVE.B D5,DISPLAY                               ; ECHO TO THE DISPLAY
0000095C                          1355mm 
0000095C                          1356mm     ENDM
0000095C                          1357mm         PRINT_CHAR D5,D6
0000095C                          1358mm WAIT_FOR_READY_63                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
0000095C                 TRUE     1359mm     IFEQ DEBUG
0000095C  1C39 00C00003           1360mm         MOVE.B DUART_SRA,D6                         ; READ STATUS REGISTER
00000962  0806 0002               1361mm         BTST #2,D6                                  ; CHECK FOR SPACE TO SEND
00000966  67F4                    1362mm         BEQ WAIT_FOR_READY_63                       ; NO SPACE, CHECK AGAIN
00000968  13C5 00C00007           1363mm         MOVE.B D5,DUART_TXA                         ; SEND THE NEXT CHARACTER
0000096E                          1364mm     ENDC
0000096E                          1365mm 
0000096E                 FALSE    1366mm     IFNE DEBUG
0000096E                          1367mm     ENDC
0000096E                          1368mm 
0000096E                          1369mm     ENDM
0000096E                          1370mm         HEX2BIN D5,D5,A4
0000096E  49FA 1150               1371mm     LEA HEX2BIN_LUT(PC),A4                          ; LOAD THE LOOKUP TABLE
00000972  0405 0030               1372mm     SUB.B #'0',D5                                   ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
00000976  CABC 000000FF           1373mm     AND.L #$FF,D5                                   ; IGNORE THE TOP 3 BYTES
0000097C  1A34 5000               1374mm     MOVE.B 0(A4,D5),D5                              ; USE THAT AS AN INDEX INTO THE LUT   
00000980                          1375mm     ENDM
00000980  8605                    1376m         OR.B D5,D3
00000982  5307                    1377m         SUB.B #1,D7
00000984                          1378m     ENDW
00000984  6098                    1379ms     BRA _10000000
00000986                          1380ms _10000001
00000986                          1381m 
00000986  7A00                    1382m     MOVE.L #0,D5                                    ; REXTRACT LATEST BYTE OF ADDRESS AND ADD INTO CHECKSUM
00000988  1A03                    1383m     MOVE.B D3,D5
0000098A  D483                    1384m     ADD.L D3,D2
0000098C                          1385m 
0000098C                          1386m     ENDM
0000098C                          1387  
0000098C                          1388      IF.B D1 <EQ> #'0' THEN.L                        ; header, just ignore it
0000098C  B23C 0030               1389s     CMP.B   #'0',D1
00000990  6600 002A               1390s     BNE.L   _00000002
00000994                          1391m         PRINT_CRLF D5,A4
00000994  49FA 1198               1392m     LEA CRLF(PC),A4
00000998                          1393mm     PRINT_STR A4,D5
00000998                          1394mm LOOP_66
00000998  0C14 0000               1395mm     CMP.B #NULL,(A4)                                ; 0 -> DONE
0000099C  6700 0016               1396mm     BEQ EXIT_66
000009A0                          1397mmm     PRINT_CHAR (A4)+,D5
000009A0                          1398mmm WAIT_FOR_READY_67                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
000009A0                 TRUE     1399mmm     IFEQ DEBUG
000009A0  1A39 00C00003           1400mmm         MOVE.B DUART_SRA,D5                         ; READ STATUS REGISTER
000009A6  0805 0002               1401mmm         BTST #2,D5                                  ; CHECK FOR SPACE TO SEND
000009AA  67F4                    1402mmm         BEQ WAIT_FOR_READY_67                       ; NO SPACE, CHECK AGAIN
000009AC  13DC 00C00007           1403mmm         MOVE.B (A4)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
000009B2                          1404mmm     ENDC
000009B2                          1405mmm 
000009B2                 FALSE    1406mmm     IFNE DEBUG
000009B2                          1407mmm     ENDC
000009B2                          1408mmm 
000009B2                          1409mmm     ENDM
000009B2  60E4                    1410mm     BRA LOOP_66
000009B4                          1411mm EXIT_66
000009B4                          1412mm     ENDM
000009B4                          1413m     ENDM
000009B4  6000 FECC               1414          BRA WAIT_FOR_SRECORD
000009B8                          1415      ELSE
000009B8  6000 03DE               1416s     BRA _00000003
000009BC                          1417s _00000002
000009BC                          1418          IF.B D1 <EQ> #'1' OR.B D1 <EQ> #'2' THEN.L  ; 16 or 24 bit address data record
000009BC  B23C 0031               1419s     CMP.B   #'1',D1
000009C0  6708                    1420s     BEQ.S   _00000004
000009C2  B23C 0032               1421s     CMP.B   #'2',D1
000009C6  6600 01F0               1422s     BNE.L   _00000005
000009CA                          1423s _00000004
000009CA  5783                    1424              SUB.L #3,D3                             ; subtract three bytes for 16 bit address and 1 byte checksum
000009CC                          1425  
000009CC  7800                    1426              MOVE.L #0,D4                            ; read two bytes of address
000009CE                          1427m             DOWNLOAD_BYTE D4,D5,D6,D7,D2,A4         ; first byte                                    
000009CE  1E3C 0002               1428m     MOVE.B #2,D7
000009D2                          1429m     WHILE.B D7 <GT> 0 DO
000009D2                          1430ms _10000002
000009D2  BE38 0000               1431ms     CMP.B   0,D7
000009D6  6F00 0062               1432ms     BLE _10000003
000009DA  E98C                    1433m         LSL.L #4,D4                                 ; IT's OK to do this first, because we are either starting from 0, 
000009DC                          1434mm         DOWNLOAD D5                                 ; OR WE ARE READING THE NEXT BYTE ALONG, SO NEED TO SHIFT UP THE PREVIOUS ONE
000009DC                          1435mm WAIT_FOR_READY_69                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
000009DC                          1436mm 
000009DC  1A39 00C00003           1437mm     MOVE.B DUART_SRA,D5                             ; CHECK FOR COMMAND
000009E2  0805 0000               1438mm     BTST #0,D5                                      ; CHECK FOR CHARACTER
000009E6  6700 0010               1439mm     BEQ CONTINUE_69                                 ; NOTHING, CONTINUE
000009EA                          1440mm 
000009EA                          1441mmm     READ_CHAR D5                                    ; WE're not going to do anything with it, just check for escape
000009EA                 TRUE     1442mmm     IFEQ DEBUG
000009EA  1A39 00C00007           1443mmm         MOVE.B DUART_RXA,D5                         ; GOT A CHARACTER, READ IT
000009F0                          1444mmm     ENDC
000009F0                 FALSE    1445mmm     IFNE DEBUG
000009F0                          1446mmm     ENDC
000009F0                          1447mmm 
000009F0  BA3C 001B               1448mmm     CMP.B #$1B,D5                                   ; CHECK FOR ESCAPE AND GO TO START
000009F4  6700 FA0A               1449mmm     BEQ START
000009F8                          1450mmm     ENDM
000009F8                          1451mm CONTINUE_69
000009F8  1A39 00C00013           1452mm     MOVE.B DUART_SRB,D5                             ; READ DOWNLOAD STATUS REGISTER
000009FE  0805 0000               1453mm     BTST #0,D5                                      ; CHECK FOR CHARACTER
00000A02  67D8                    1454mm     BEQ WAIT_FOR_READY_69                           ; NOTHING, CHECK AGAIN
00000A04                          1455mm     
00000A04  1A39 00C00017           1456mm     MOVE.B DUART_RXB,D5                             ; GOT A CHARACTER, READ IT
00000A0A  13C5 00E00001           1457mm     MOVE.B D5,DISPLAY                               ; ECHO TO THE DISPLAY
00000A10                          1458mm 
00000A10                          1459mm     ENDM
00000A10                          1460mm         PRINT_CHAR D5,D6
00000A10                          1461mm WAIT_FOR_READY_71                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000A10                 TRUE     1462mm     IFEQ DEBUG
00000A10  1C39 00C00003           1463mm         MOVE.B DUART_SRA,D6                         ; READ STATUS REGISTER
00000A16  0806 0002               1464mm         BTST #2,D6                                  ; CHECK FOR SPACE TO SEND
00000A1A  67F4                    1465mm         BEQ WAIT_FOR_READY_71                       ; NO SPACE, CHECK AGAIN
00000A1C  13C5 00C00007           1466mm         MOVE.B D5,DUART_TXA                         ; SEND THE NEXT CHARACTER
00000A22                          1467mm     ENDC
00000A22                          1468mm 
00000A22                 FALSE    1469mm     IFNE DEBUG
00000A22                          1470mm     ENDC
00000A22                          1471mm 
00000A22                          1472mm     ENDM
00000A22                          1473mm         HEX2BIN D5,D5,A4
00000A22  49FA 109C               1474mm     LEA HEX2BIN_LUT(PC),A4                          ; LOAD THE LOOKUP TABLE
00000A26  0405 0030               1475mm     SUB.B #'0',D5                                   ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
00000A2A  CABC 000000FF           1476mm     AND.L #$FF,D5                                   ; IGNORE THE TOP 3 BYTES
00000A30  1A34 5000               1477mm     MOVE.B 0(A4,D5),D5                              ; USE THAT AS AN INDEX INTO THE LUT   
00000A34                          1478mm     ENDM
00000A34  8805                    1479m         OR.B D5,D4
00000A36  5307                    1480m         SUB.B #1,D7
00000A38                          1481m     ENDW
00000A38  6098                    1482ms     BRA _10000002
00000A3A                          1483ms _10000003
00000A3A                          1484m 
00000A3A  7A00                    1485m     MOVE.L #0,D5                                    ; REXTRACT LATEST BYTE OF ADDRESS AND ADD INTO CHECKSUM
00000A3C  1A04                    1486m     MOVE.B D4,D5
00000A3E  D484                    1487m     ADD.L D4,D2
00000A40                          1488m 
00000A40                          1489m     ENDM
00000A40                          1490m             DOWNLOAD_BYTE D4,D5,D6,D7,D2,A4         ; second one
00000A40  1E3C 0002               1491m     MOVE.B #2,D7
00000A44                          1492m     WHILE.B D7 <GT> 0 DO
00000A44                          1493ms _10000004
00000A44  BE38 0000               1494ms     CMP.B   0,D7
00000A48  6F00 0062               1495ms     BLE _10000005
00000A4C  E98C                    1496m         LSL.L #4,D4                                 ; IT's OK to do this first, because we are either starting from 0, 
00000A4E                          1497mm         DOWNLOAD D5                                 ; OR WE ARE READING THE NEXT BYTE ALONG, SO NEED TO SHIFT UP THE PREVIOUS ONE
00000A4E                          1498mm WAIT_FOR_READY_74                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000A4E                          1499mm 
00000A4E  1A39 00C00003           1500mm     MOVE.B DUART_SRA,D5                             ; CHECK FOR COMMAND
00000A54  0805 0000               1501mm     BTST #0,D5                                      ; CHECK FOR CHARACTER
00000A58  6700 0010               1502mm     BEQ CONTINUE_74                                 ; NOTHING, CONTINUE
00000A5C                          1503mm 
00000A5C                          1504mmm     READ_CHAR D5                                    ; WE're not going to do anything with it, just check for escape
00000A5C                 TRUE     1505mmm     IFEQ DEBUG
00000A5C  1A39 00C00007           1506mmm         MOVE.B DUART_RXA,D5                         ; GOT A CHARACTER, READ IT
00000A62                          1507mmm     ENDC
00000A62                 FALSE    1508mmm     IFNE DEBUG
00000A62                          1509mmm     ENDC
00000A62                          1510mmm 
00000A62  BA3C 001B               1511mmm     CMP.B #$1B,D5                                   ; CHECK FOR ESCAPE AND GO TO START
00000A66  6700 F998               1512mmm     BEQ START
00000A6A                          1513mmm     ENDM
00000A6A                          1514mm CONTINUE_74
00000A6A  1A39 00C00013           1515mm     MOVE.B DUART_SRB,D5                             ; READ DOWNLOAD STATUS REGISTER
00000A70  0805 0000               1516mm     BTST #0,D5                                      ; CHECK FOR CHARACTER
00000A74  67D8                    1517mm     BEQ WAIT_FOR_READY_74                           ; NOTHING, CHECK AGAIN
00000A76                          1518mm     
00000A76  1A39 00C00017           1519mm     MOVE.B DUART_RXB,D5                             ; GOT A CHARACTER, READ IT
00000A7C  13C5 00E00001           1520mm     MOVE.B D5,DISPLAY                               ; ECHO TO THE DISPLAY
00000A82                          1521mm 
00000A82                          1522mm     ENDM
00000A82                          1523mm         PRINT_CHAR D5,D6
00000A82                          1524mm WAIT_FOR_READY_76                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000A82                 TRUE     1525mm     IFEQ DEBUG
00000A82  1C39 00C00003           1526mm         MOVE.B DUART_SRA,D6                         ; READ STATUS REGISTER
00000A88  0806 0002               1527mm         BTST #2,D6                                  ; CHECK FOR SPACE TO SEND
00000A8C  67F4                    1528mm         BEQ WAIT_FOR_READY_76                       ; NO SPACE, CHECK AGAIN
00000A8E  13C5 00C00007           1529mm         MOVE.B D5,DUART_TXA                         ; SEND THE NEXT CHARACTER
00000A94                          1530mm     ENDC
00000A94                          1531mm 
00000A94                 FALSE    1532mm     IFNE DEBUG
00000A94                          1533mm     ENDC
00000A94                          1534mm 
00000A94                          1535mm     ENDM
00000A94                          1536mm         HEX2BIN D5,D5,A4
00000A94  49FA 102A               1537mm     LEA HEX2BIN_LUT(PC),A4                          ; LOAD THE LOOKUP TABLE
00000A98  0405 0030               1538mm     SUB.B #'0',D5                                   ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
00000A9C  CABC 000000FF           1539mm     AND.L #$FF,D5                                   ; IGNORE THE TOP 3 BYTES
00000AA2  1A34 5000               1540mm     MOVE.B 0(A4,D5),D5                              ; USE THAT AS AN INDEX INTO THE LUT   
00000AA6                          1541mm     ENDM
00000AA6  8805                    1542m         OR.B D5,D4
00000AA8  5307                    1543m         SUB.B #1,D7
00000AAA                          1544m     ENDW
00000AAA  6098                    1545ms     BRA _10000004
00000AAC                          1546ms _10000005
00000AAC                          1547m 
00000AAC  7A00                    1548m     MOVE.L #0,D5                                    ; REXTRACT LATEST BYTE OF ADDRESS AND ADD INTO CHECKSUM
00000AAE  1A04                    1549m     MOVE.B D4,D5
00000AB0  D484                    1550m     ADD.L D4,D2
00000AB2                          1551m 
00000AB2                          1552m     ENDM
00000AB2                          1553  
00000AB2                          1554              IF.B D1 <EQ> #'2'  THEN.L               ; 24 bit address data record, read another byte
00000AB2  B23C 0032               1555s     CMP.B   #'2',D1
00000AB6  6600 0076               1556s     BNE.L   _00000006
00000ABA  5383                    1557                  SUB.L #1,D3                         ; subtract an extra bytes for 24 bit address    
00000ABC                          1558m                 DOWNLOAD_BYTE D4,D5,D6,D7,D2,A4     ; 3rd byte
00000ABC  1E3C 0002               1559m     MOVE.B #2,D7
00000AC0                          1560m     WHILE.B D7 <GT> 0 DO
00000AC0                          1561ms _10000006
00000AC0  BE38 0000               1562ms     CMP.B   0,D7
00000AC4  6F00 0062               1563ms     BLE _10000007
00000AC8  E98C                    1564m         LSL.L #4,D4                                 ; IT's OK to do this first, because we are either starting from 0, 
00000ACA                          1565mm         DOWNLOAD D5                                 ; OR WE ARE READING THE NEXT BYTE ALONG, SO NEED TO SHIFT UP THE PREVIOUS ONE
00000ACA                          1566mm WAIT_FOR_READY_79                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000ACA                          1567mm 
00000ACA  1A39 00C00003           1568mm     MOVE.B DUART_SRA,D5                             ; CHECK FOR COMMAND
00000AD0  0805 0000               1569mm     BTST #0,D5                                      ; CHECK FOR CHARACTER
00000AD4  6700 0010               1570mm     BEQ CONTINUE_79                                 ; NOTHING, CONTINUE
00000AD8                          1571mm 
00000AD8                          1572mmm     READ_CHAR D5                                    ; WE're not going to do anything with it, just check for escape
00000AD8                 TRUE     1573mmm     IFEQ DEBUG
00000AD8  1A39 00C00007           1574mmm         MOVE.B DUART_RXA,D5                         ; GOT A CHARACTER, READ IT
00000ADE                          1575mmm     ENDC
00000ADE                 FALSE    1576mmm     IFNE DEBUG
00000ADE                          1577mmm     ENDC
00000ADE                          1578mmm 
00000ADE  BA3C 001B               1579mmm     CMP.B #$1B,D5                                   ; CHECK FOR ESCAPE AND GO TO START
00000AE2  6700 F91C               1580mmm     BEQ START
00000AE6                          1581mmm     ENDM
00000AE6                          1582mm CONTINUE_79
00000AE6  1A39 00C00013           1583mm     MOVE.B DUART_SRB,D5                             ; READ DOWNLOAD STATUS REGISTER
00000AEC  0805 0000               1584mm     BTST #0,D5                                      ; CHECK FOR CHARACTER
00000AF0  67D8                    1585mm     BEQ WAIT_FOR_READY_79                           ; NOTHING, CHECK AGAIN
00000AF2                          1586mm     
00000AF2  1A39 00C00017           1587mm     MOVE.B DUART_RXB,D5                             ; GOT A CHARACTER, READ IT
00000AF8  13C5 00E00001           1588mm     MOVE.B D5,DISPLAY                               ; ECHO TO THE DISPLAY
00000AFE                          1589mm 
00000AFE                          1590mm     ENDM
00000AFE                          1591mm         PRINT_CHAR D5,D6
00000AFE                          1592mm WAIT_FOR_READY_81                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000AFE                 TRUE     1593mm     IFEQ DEBUG
00000AFE  1C39 00C00003           1594mm         MOVE.B DUART_SRA,D6                         ; READ STATUS REGISTER
00000B04  0806 0002               1595mm         BTST #2,D6                                  ; CHECK FOR SPACE TO SEND
00000B08  67F4                    1596mm         BEQ WAIT_FOR_READY_81                       ; NO SPACE, CHECK AGAIN
00000B0A  13C5 00C00007           1597mm         MOVE.B D5,DUART_TXA                         ; SEND THE NEXT CHARACTER
00000B10                          1598mm     ENDC
00000B10                          1599mm 
00000B10                 FALSE    1600mm     IFNE DEBUG
00000B10                          1601mm     ENDC
00000B10                          1602mm 
00000B10                          1603mm     ENDM
00000B10                          1604mm         HEX2BIN D5,D5,A4
00000B10  49FA 0FAE               1605mm     LEA HEX2BIN_LUT(PC),A4                          ; LOAD THE LOOKUP TABLE
00000B14  0405 0030               1606mm     SUB.B #'0',D5                                   ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
00000B18  CABC 000000FF           1607mm     AND.L #$FF,D5                                   ; IGNORE THE TOP 3 BYTES
00000B1E  1A34 5000               1608mm     MOVE.B 0(A4,D5),D5                              ; USE THAT AS AN INDEX INTO THE LUT   
00000B22                          1609mm     ENDM
00000B22  8805                    1610m         OR.B D5,D4
00000B24  5307                    1611m         SUB.B #1,D7
00000B26                          1612m     ENDW
00000B26  6098                    1613ms     BRA _10000006
00000B28                          1614ms _10000007
00000B28                          1615m 
00000B28  7A00                    1616m     MOVE.L #0,D5                                    ; REXTRACT LATEST BYTE OF ADDRESS AND ADD INTO CHECKSUM
00000B2A  1A04                    1617m     MOVE.B D4,D5
00000B2C  D484                    1618m     ADD.L D4,D2
00000B2E                          1619m 
00000B2E                          1620m     ENDM
00000B2E                          1621              ENDI
00000B2E                          1622s _00000006
00000B2E                          1623  
00000B2E  2444                    1624              MOVE.L D4,A2                            ; put the address in an address register
00000B30  D5C9                    1625              ADD.L A1,A2                             ; add in the offset
00000B32                          1626  
00000B32                          1627              WHILE.B D3 <GT> #0 DO                   ; read the data bytes
00000B32                          1628s _10000008
00000B32  B63C 0000               1629s     CMP.B   #0,D3
00000B36  6F00 007A               1630s     BLE _10000009
00000B3A                          1631m                 DOWNLOAD_BYTE D1,D5,D6,D7,D2,A4     ; read it
00000B3A  1E3C 0002               1632m     MOVE.B #2,D7
00000B3E                          1633m     WHILE.B D7 <GT> 0 DO
00000B3E                          1634ms _1000000A
00000B3E  BE38 0000               1635ms     CMP.B   0,D7
00000B42  6F00 0062               1636ms     BLE _1000000B
00000B46  E989                    1637m         LSL.L #4,D1                                 ; IT's OK to do this first, because we are either starting from 0, 
00000B48                          1638mm         DOWNLOAD D5                                 ; OR WE ARE READING THE NEXT BYTE ALONG, SO NEED TO SHIFT UP THE PREVIOUS ONE
00000B48                          1639mm WAIT_FOR_READY_84                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000B48                          1640mm 
00000B48  1A39 00C00003           1641mm     MOVE.B DUART_SRA,D5                             ; CHECK FOR COMMAND
00000B4E  0805 0000               1642mm     BTST #0,D5                                      ; CHECK FOR CHARACTER
00000B52  6700 0010               1643mm     BEQ CONTINUE_84                                 ; NOTHING, CONTINUE
00000B56                          1644mm 
00000B56                          1645mmm     READ_CHAR D5                                    ; WE're not going to do anything with it, just check for escape
00000B56                 TRUE     1646mmm     IFEQ DEBUG
00000B56  1A39 00C00007           1647mmm         MOVE.B DUART_RXA,D5                         ; GOT A CHARACTER, READ IT
00000B5C                          1648mmm     ENDC
00000B5C                 FALSE    1649mmm     IFNE DEBUG
00000B5C                          1650mmm     ENDC
00000B5C                          1651mmm 
00000B5C  BA3C 001B               1652mmm     CMP.B #$1B,D5                                   ; CHECK FOR ESCAPE AND GO TO START
00000B60  6700 F89E               1653mmm     BEQ START
00000B64                          1654mmm     ENDM
00000B64                          1655mm CONTINUE_84
00000B64  1A39 00C00013           1656mm     MOVE.B DUART_SRB,D5                             ; READ DOWNLOAD STATUS REGISTER
00000B6A  0805 0000               1657mm     BTST #0,D5                                      ; CHECK FOR CHARACTER
00000B6E  67D8                    1658mm     BEQ WAIT_FOR_READY_84                           ; NOTHING, CHECK AGAIN
00000B70                          1659mm     
00000B70  1A39 00C00017           1660mm     MOVE.B DUART_RXB,D5                             ; GOT A CHARACTER, READ IT
00000B76  13C5 00E00001           1661mm     MOVE.B D5,DISPLAY                               ; ECHO TO THE DISPLAY
00000B7C                          1662mm 
00000B7C                          1663mm     ENDM
00000B7C                          1664mm         PRINT_CHAR D5,D6
00000B7C                          1665mm WAIT_FOR_READY_86                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000B7C                 TRUE     1666mm     IFEQ DEBUG
00000B7C  1C39 00C00003           1667mm         MOVE.B DUART_SRA,D6                         ; READ STATUS REGISTER
00000B82  0806 0002               1668mm         BTST #2,D6                                  ; CHECK FOR SPACE TO SEND
00000B86  67F4                    1669mm         BEQ WAIT_FOR_READY_86                       ; NO SPACE, CHECK AGAIN
00000B88  13C5 00C00007           1670mm         MOVE.B D5,DUART_TXA                         ; SEND THE NEXT CHARACTER
00000B8E                          1671mm     ENDC
00000B8E                          1672mm 
00000B8E                 FALSE    1673mm     IFNE DEBUG
00000B8E                          1674mm     ENDC
00000B8E                          1675mm 
00000B8E                          1676mm     ENDM
00000B8E                          1677mm         HEX2BIN D5,D5,A4
00000B8E  49FA 0F30               1678mm     LEA HEX2BIN_LUT(PC),A4                          ; LOAD THE LOOKUP TABLE
00000B92  0405 0030               1679mm     SUB.B #'0',D5                                   ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
00000B96  CABC 000000FF           1680mm     AND.L #$FF,D5                                   ; IGNORE THE TOP 3 BYTES
00000B9C  1A34 5000               1681mm     MOVE.B 0(A4,D5),D5                              ; USE THAT AS AN INDEX INTO THE LUT   
00000BA0                          1682mm     ENDM
00000BA0  8205                    1683m         OR.B D5,D1
00000BA2  5307                    1684m         SUB.B #1,D7
00000BA4                          1685m     ENDW
00000BA4  6098                    1686ms     BRA _1000000A
00000BA6                          1687ms _1000000B
00000BA6                          1688m 
00000BA6  7A00                    1689m     MOVE.L #0,D5                                    ; REXTRACT LATEST BYTE OF ADDRESS AND ADD INTO CHECKSUM
00000BA8  1A01                    1690m     MOVE.B D1,D5
00000BAA  D481                    1691m     ADD.L D1,D2
00000BAC                          1692m 
00000BAC                          1693m     ENDM
00000BAC                          1694   
00000BAC  14C1                    1695                  MOVE.B D1,(A2)+                     ; store it!
00000BAE                          1696  
00000BAE  5303                    1697                  SUB.B #1,D3                         ; 1 less byte to go
00000BB0                          1698              ENDW
00000BB0  6080                    1699s     BRA _10000008
00000BB2                          1700s _10000009
00000BB2                          1701  
00000BB2  7200                    1702              MOVE.L #0,D1                            ; not done yet
00000BB4                          1703          ELSE
00000BB4  6000 01E2               1704s     BRA _00000007
00000BB8                          1705s _00000005
00000BB8                          1706              IF.B D1 <EQ> #'8' THEN.L                ; termination record, exit
00000BB8  B23C 0038               1707s     CMP.B   #'8',D1
00000BBC  6600 0164               1708s     BNE.L   _00000008
00000BC0  7800                    1709                  MOVE.L #0,D4                        ; read the 24 bit start address
00000BC2                          1710m                 DOWNLOAD_BYTE D4,D5,D6,D7,D2,A4     ; top byte
00000BC2  1E3C 0002               1711m     MOVE.B #2,D7
00000BC6                          1712m     WHILE.B D7 <GT> 0 DO
00000BC6                          1713ms _1000000C
00000BC6  BE38 0000               1714ms     CMP.B   0,D7
00000BCA  6F00 0062               1715ms     BLE _1000000D
00000BCE  E98C                    1716m         LSL.L #4,D4                                 ; IT's OK to do this first, because we are either starting from 0, 
00000BD0                          1717mm         DOWNLOAD D5                                 ; OR WE ARE READING THE NEXT BYTE ALONG, SO NEED TO SHIFT UP THE PREVIOUS ONE
00000BD0                          1718mm WAIT_FOR_READY_89                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000BD0                          1719mm 
00000BD0  1A39 00C00003           1720mm     MOVE.B DUART_SRA,D5                             ; CHECK FOR COMMAND
00000BD6  0805 0000               1721mm     BTST #0,D5                                      ; CHECK FOR CHARACTER
00000BDA  6700 0010               1722mm     BEQ CONTINUE_89                                 ; NOTHING, CONTINUE
00000BDE                          1723mm 
00000BDE                          1724mmm     READ_CHAR D5                                    ; WE're not going to do anything with it, just check for escape
00000BDE                 TRUE     1725mmm     IFEQ DEBUG
00000BDE  1A39 00C00007           1726mmm         MOVE.B DUART_RXA,D5                         ; GOT A CHARACTER, READ IT
00000BE4                          1727mmm     ENDC
00000BE4                 FALSE    1728mmm     IFNE DEBUG
00000BE4                          1729mmm     ENDC
00000BE4                          1730mmm 
00000BE4  BA3C 001B               1731mmm     CMP.B #$1B,D5                                   ; CHECK FOR ESCAPE AND GO TO START
00000BE8  6700 F816               1732mmm     BEQ START
00000BEC                          1733mmm     ENDM
00000BEC                          1734mm CONTINUE_89
00000BEC  1A39 00C00013           1735mm     MOVE.B DUART_SRB,D5                             ; READ DOWNLOAD STATUS REGISTER
00000BF2  0805 0000               1736mm     BTST #0,D5                                      ; CHECK FOR CHARACTER
00000BF6  67D8                    1737mm     BEQ WAIT_FOR_READY_89                           ; NOTHING, CHECK AGAIN
00000BF8                          1738mm     
00000BF8  1A39 00C00017           1739mm     MOVE.B DUART_RXB,D5                             ; GOT A CHARACTER, READ IT
00000BFE  13C5 00E00001           1740mm     MOVE.B D5,DISPLAY                               ; ECHO TO THE DISPLAY
00000C04                          1741mm 
00000C04                          1742mm     ENDM
00000C04                          1743mm         PRINT_CHAR D5,D6
00000C04                          1744mm WAIT_FOR_READY_91                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000C04                 TRUE     1745mm     IFEQ DEBUG
00000C04  1C39 00C00003           1746mm         MOVE.B DUART_SRA,D6                         ; READ STATUS REGISTER
00000C0A  0806 0002               1747mm         BTST #2,D6                                  ; CHECK FOR SPACE TO SEND
00000C0E  67F4                    1748mm         BEQ WAIT_FOR_READY_91                       ; NO SPACE, CHECK AGAIN
00000C10  13C5 00C00007           1749mm         MOVE.B D5,DUART_TXA                         ; SEND THE NEXT CHARACTER
00000C16                          1750mm     ENDC
00000C16                          1751mm 
00000C16                 FALSE    1752mm     IFNE DEBUG
00000C16                          1753mm     ENDC
00000C16                          1754mm 
00000C16                          1755mm     ENDM
00000C16                          1756mm         HEX2BIN D5,D5,A4
00000C16  49FA 0EA8               1757mm     LEA HEX2BIN_LUT(PC),A4                          ; LOAD THE LOOKUP TABLE
00000C1A  0405 0030               1758mm     SUB.B #'0',D5                                   ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
00000C1E  CABC 000000FF           1759mm     AND.L #$FF,D5                                   ; IGNORE THE TOP 3 BYTES
00000C24  1A34 5000               1760mm     MOVE.B 0(A4,D5),D5                              ; USE THAT AS AN INDEX INTO THE LUT   
00000C28                          1761mm     ENDM
00000C28  8805                    1762m         OR.B D5,D4
00000C2A  5307                    1763m         SUB.B #1,D7
00000C2C                          1764m     ENDW
00000C2C  6098                    1765ms     BRA _1000000C
00000C2E                          1766ms _1000000D
00000C2E                          1767m 
00000C2E  7A00                    1768m     MOVE.L #0,D5                                    ; REXTRACT LATEST BYTE OF ADDRESS AND ADD INTO CHECKSUM
00000C30  1A04                    1769m     MOVE.B D4,D5
00000C32  D484                    1770m     ADD.L D4,D2
00000C34                          1771m 
00000C34                          1772m     ENDM
00000C34                          1773m                 DOWNLOAD_BYTE D4,D5,D6,D7,D2,A4     ; middle byte
00000C34  1E3C 0002               1774m     MOVE.B #2,D7
00000C38                          1775m     WHILE.B D7 <GT> 0 DO
00000C38                          1776ms _1000000E
00000C38  BE38 0000               1777ms     CMP.B   0,D7
00000C3C  6F00 0062               1778ms     BLE _1000000F
00000C40  E98C                    1779m         LSL.L #4,D4                                 ; IT's OK to do this first, because we are either starting from 0, 
00000C42                          1780mm         DOWNLOAD D5                                 ; OR WE ARE READING THE NEXT BYTE ALONG, SO NEED TO SHIFT UP THE PREVIOUS ONE
00000C42                          1781mm WAIT_FOR_READY_94                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000C42                          1782mm 
00000C42  1A39 00C00003           1783mm     MOVE.B DUART_SRA,D5                             ; CHECK FOR COMMAND
00000C48  0805 0000               1784mm     BTST #0,D5                                      ; CHECK FOR CHARACTER
00000C4C  6700 0010               1785mm     BEQ CONTINUE_94                                 ; NOTHING, CONTINUE
00000C50                          1786mm 
00000C50                          1787mmm     READ_CHAR D5                                    ; WE're not going to do anything with it, just check for escape
00000C50                 TRUE     1788mmm     IFEQ DEBUG
00000C50  1A39 00C00007           1789mmm         MOVE.B DUART_RXA,D5                         ; GOT A CHARACTER, READ IT
00000C56                          1790mmm     ENDC
00000C56                 FALSE    1791mmm     IFNE DEBUG
00000C56                          1792mmm     ENDC
00000C56                          1793mmm 
00000C56  BA3C 001B               1794mmm     CMP.B #$1B,D5                                   ; CHECK FOR ESCAPE AND GO TO START
00000C5A  6700 F7A4               1795mmm     BEQ START
00000C5E                          1796mmm     ENDM
00000C5E                          1797mm CONTINUE_94
00000C5E  1A39 00C00013           1798mm     MOVE.B DUART_SRB,D5                             ; READ DOWNLOAD STATUS REGISTER
00000C64  0805 0000               1799mm     BTST #0,D5                                      ; CHECK FOR CHARACTER
00000C68  67D8                    1800mm     BEQ WAIT_FOR_READY_94                           ; NOTHING, CHECK AGAIN
00000C6A                          1801mm     
00000C6A  1A39 00C00017           1802mm     MOVE.B DUART_RXB,D5                             ; GOT A CHARACTER, READ IT
00000C70  13C5 00E00001           1803mm     MOVE.B D5,DISPLAY                               ; ECHO TO THE DISPLAY
00000C76                          1804mm 
00000C76                          1805mm     ENDM
00000C76                          1806mm         PRINT_CHAR D5,D6
00000C76                          1807mm WAIT_FOR_READY_96                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000C76                 TRUE     1808mm     IFEQ DEBUG
00000C76  1C39 00C00003           1809mm         MOVE.B DUART_SRA,D6                         ; READ STATUS REGISTER
00000C7C  0806 0002               1810mm         BTST #2,D6                                  ; CHECK FOR SPACE TO SEND
00000C80  67F4                    1811mm         BEQ WAIT_FOR_READY_96                       ; NO SPACE, CHECK AGAIN
00000C82  13C5 00C00007           1812mm         MOVE.B D5,DUART_TXA                         ; SEND THE NEXT CHARACTER
00000C88                          1813mm     ENDC
00000C88                          1814mm 
00000C88                 FALSE    1815mm     IFNE DEBUG
00000C88                          1816mm     ENDC
00000C88                          1817mm 
00000C88                          1818mm     ENDM
00000C88                          1819mm         HEX2BIN D5,D5,A4
00000C88  49FA 0E36               1820mm     LEA HEX2BIN_LUT(PC),A4                          ; LOAD THE LOOKUP TABLE
00000C8C  0405 0030               1821mm     SUB.B #'0',D5                                   ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
00000C90  CABC 000000FF           1822mm     AND.L #$FF,D5                                   ; IGNORE THE TOP 3 BYTES
00000C96  1A34 5000               1823mm     MOVE.B 0(A4,D5),D5                              ; USE THAT AS AN INDEX INTO THE LUT   
00000C9A                          1824mm     ENDM
00000C9A  8805                    1825m         OR.B D5,D4
00000C9C  5307                    1826m         SUB.B #1,D7
00000C9E                          1827m     ENDW
00000C9E  6098                    1828ms     BRA _1000000E
00000CA0                          1829ms _1000000F
00000CA0                          1830m 
00000CA0  7A00                    1831m     MOVE.L #0,D5                                    ; REXTRACT LATEST BYTE OF ADDRESS AND ADD INTO CHECKSUM
00000CA2  1A04                    1832m     MOVE.B D4,D5
00000CA4  D484                    1833m     ADD.L D4,D2
00000CA6                          1834m 
00000CA6                          1835m     ENDM
00000CA6                          1836m                 DOWNLOAD_BYTE D4,D5,D6,D7,D2,A4     ; bottom byte
00000CA6  1E3C 0002               1837m     MOVE.B #2,D7
00000CAA                          1838m     WHILE.B D7 <GT> 0 DO
00000CAA                          1839ms _10000010
00000CAA  BE38 0000               1840ms     CMP.B   0,D7
00000CAE  6F00 0062               1841ms     BLE _10000011
00000CB2  E98C                    1842m         LSL.L #4,D4                                 ; IT's OK to do this first, because we are either starting from 0, 
00000CB4                          1843mm         DOWNLOAD D5                                 ; OR WE ARE READING THE NEXT BYTE ALONG, SO NEED TO SHIFT UP THE PREVIOUS ONE
00000CB4                          1844mm WAIT_FOR_READY_99                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000CB4                          1845mm 
00000CB4  1A39 00C00003           1846mm     MOVE.B DUART_SRA,D5                             ; CHECK FOR COMMAND
00000CBA  0805 0000               1847mm     BTST #0,D5                                      ; CHECK FOR CHARACTER
00000CBE  6700 0010               1848mm     BEQ CONTINUE_99                                 ; NOTHING, CONTINUE
00000CC2                          1849mm 
00000CC2                          1850mmm     READ_CHAR D5                                    ; WE're not going to do anything with it, just check for escape
00000CC2                 TRUE     1851mmm     IFEQ DEBUG
00000CC2  1A39 00C00007           1852mmm         MOVE.B DUART_RXA,D5                         ; GOT A CHARACTER, READ IT
00000CC8                          1853mmm     ENDC
00000CC8                 FALSE    1854mmm     IFNE DEBUG
00000CC8                          1855mmm     ENDC
00000CC8                          1856mmm 
00000CC8  BA3C 001B               1857mmm     CMP.B #$1B,D5                                   ; CHECK FOR ESCAPE AND GO TO START
00000CCC  6700 F732               1858mmm     BEQ START
00000CD0                          1859mmm     ENDM
00000CD0                          1860mm CONTINUE_99
00000CD0  1A39 00C00013           1861mm     MOVE.B DUART_SRB,D5                             ; READ DOWNLOAD STATUS REGISTER
00000CD6  0805 0000               1862mm     BTST #0,D5                                      ; CHECK FOR CHARACTER
00000CDA  67D8                    1863mm     BEQ WAIT_FOR_READY_99                           ; NOTHING, CHECK AGAIN
00000CDC                          1864mm     
00000CDC  1A39 00C00017           1865mm     MOVE.B DUART_RXB,D5                             ; GOT A CHARACTER, READ IT
00000CE2  13C5 00E00001           1866mm     MOVE.B D5,DISPLAY                               ; ECHO TO THE DISPLAY
00000CE8                          1867mm 
00000CE8                          1868mm     ENDM
00000CE8                          1869mm         PRINT_CHAR D5,D6
00000CE8                          1870mm WAIT_FOR_READY_101                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000CE8                 TRUE     1871mm     IFEQ DEBUG
00000CE8  1C39 00C00003           1872mm         MOVE.B DUART_SRA,D6                         ; READ STATUS REGISTER
00000CEE  0806 0002               1873mm         BTST #2,D6                                  ; CHECK FOR SPACE TO SEND
00000CF2  67F4                    1874mm         BEQ WAIT_FOR_READY_101                      ; NO SPACE, CHECK AGAIN
00000CF4  13C5 00C00007           1875mm         MOVE.B D5,DUART_TXA                         ; SEND THE NEXT CHARACTER
00000CFA                          1876mm     ENDC
00000CFA                          1877mm 
00000CFA                 FALSE    1878mm     IFNE DEBUG
00000CFA                          1879mm     ENDC
00000CFA                          1880mm 
00000CFA                          1881mm     ENDM
00000CFA                          1882mm         HEX2BIN D5,D5,A4
00000CFA  49FA 0DC4               1883mm     LEA HEX2BIN_LUT(PC),A4                          ; LOAD THE LOOKUP TABLE
00000CFE  0405 0030               1884mm     SUB.B #'0',D5                                   ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
00000D02  CABC 000000FF           1885mm     AND.L #$FF,D5                                   ; IGNORE THE TOP 3 BYTES
00000D08  1A34 5000               1886mm     MOVE.B 0(A4,D5),D5                              ; USE THAT AS AN INDEX INTO THE LUT   
00000D0C                          1887mm     ENDM
00000D0C  8805                    1888m         OR.B D5,D4
00000D0E  5307                    1889m         SUB.B #1,D7
00000D10                          1890m     ENDW
00000D10  6098                    1891ms     BRA _10000010
00000D12                          1892ms _10000011
00000D12                          1893m 
00000D12  7A00                    1894m     MOVE.L #0,D5                                    ; REXTRACT LATEST BYTE OF ADDRESS AND ADD INTO CHECKSUM
00000D14  1A04                    1895m     MOVE.B D4,D5
00000D16  D484                    1896m     ADD.L D4,D2
00000D18                          1897m 
00000D18                          1898m     ENDM
00000D18                          1899  
00000D18  2044                    1900                  MOVE.L D4,A0                        ; start address -> A0
00000D1A  D1C9                    1901                  ADD.L A1,A0                         ; add in the offset
00000D1C                          1902  
00000D1C  72FF                    1903                  MOVE.L #$FFFFFFFF,D1                ; done
00000D1E                          1904              ELSE
00000D1E  6000 0078               1905s     BRA _00000009
00000D22                          1906s _00000008
00000D22                          1907m                 PRINT_CRLF D5,A4
00000D22  49FA 0E0A               1908m     LEA CRLF(PC),A4
00000D26                          1909mm     PRINT_STR A4,D5
00000D26                          1910mm LOOP_104
00000D26  0C14 0000               1911mm     CMP.B #NULL,(A4)                                ; 0 -> DONE
00000D2A  6700 0016               1912mm     BEQ EXIT_104
00000D2E                          1913mmm     PRINT_CHAR (A4)+,D5
00000D2E                          1914mmm WAIT_FOR_READY_105                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000D2E                 TRUE     1915mmm     IFEQ DEBUG
00000D2E  1A39 00C00003           1916mmm         MOVE.B DUART_SRA,D5                         ; READ STATUS REGISTER
00000D34  0805 0002               1917mmm         BTST #2,D5                                  ; CHECK FOR SPACE TO SEND
00000D38  67F4                    1918mmm         BEQ WAIT_FOR_READY_105                      ; NO SPACE, CHECK AGAIN
00000D3A  13DC 00C00007           1919mmm         MOVE.B (A4)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00000D40                          1920mmm     ENDC
00000D40                          1921mmm 
00000D40                 FALSE    1922mmm     IFNE DEBUG
00000D40                          1923mmm     ENDC
00000D40                          1924mmm 
00000D40                          1925mmm     ENDM
00000D40  60E4                    1926mm     BRA LOOP_104
00000D42                          1927mm EXIT_104
00000D42                          1928mm     ENDM
00000D42                          1929m     ENDM
00000D42                          1930  
00000D42  49FA 0D33               1931                  LEA UNREC(PC),A4                    ; warn for unrecognised type
00000D46                          1932m                 PRINT_STR A4,D5
00000D46                          1933m LOOP_106
00000D46  0C14 0000               1934m     CMP.B #NULL,(A4)                                ; 0 -> DONE
00000D4A  6700 0016               1935m     BEQ EXIT_106
00000D4E                          1936mm     PRINT_CHAR (A4)+,D5
00000D4E                          1937mm WAIT_FOR_READY_107                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000D4E                 TRUE     1938mm     IFEQ DEBUG
00000D4E  1A39 00C00003           1939mm         MOVE.B DUART_SRA,D5                         ; READ STATUS REGISTER
00000D54  0805 0002               1940mm         BTST #2,D5                                  ; CHECK FOR SPACE TO SEND
00000D58  67F4                    1941mm         BEQ WAIT_FOR_READY_107                      ; NO SPACE, CHECK AGAIN
00000D5A  13DC 00C00007           1942mm         MOVE.B (A4)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00000D60                          1943mm     ENDC
00000D60                          1944mm 
00000D60                 FALSE    1945mm     IFNE DEBUG
00000D60                          1946mm     ENDC
00000D60                          1947mm 
00000D60                          1948mm     ENDM
00000D60  60E4                    1949m     BRA LOOP_106
00000D62                          1950m EXIT_106
00000D62                          1951m     ENDM
00000D62                          1952m                 PRINT_CHAR D1,D5
00000D62                          1953m WAIT_FOR_READY_108                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000D62                 TRUE     1954m     IFEQ DEBUG
00000D62  1A39 00C00003           1955m         MOVE.B DUART_SRA,D5                         ; READ STATUS REGISTER
00000D68  0805 0002               1956m         BTST #2,D5                                  ; CHECK FOR SPACE TO SEND
00000D6C  67F4                    1957m         BEQ WAIT_FOR_READY_108                      ; NO SPACE, CHECK AGAIN
00000D6E  13C1 00C00007           1958m         MOVE.B D1,DUART_TXA                         ; SEND THE NEXT CHARACTER
00000D74                          1959m     ENDC
00000D74                          1960m 
00000D74                 FALSE    1961m     IFNE DEBUG
00000D74                          1962m     ENDC
00000D74                          1963m 
00000D74                          1964m     ENDM
00000D74                          1965m                 PRINT_CRLF D5,A4
00000D74  49FA 0DB8               1966m     LEA CRLF(PC),A4
00000D78                          1967mm     PRINT_STR A4,D5
00000D78                          1968mm LOOP_110
00000D78  0C14 0000               1969mm     CMP.B #NULL,(A4)                                ; 0 -> DONE
00000D7C  6700 0016               1970mm     BEQ EXIT_110
00000D80                          1971mmm     PRINT_CHAR (A4)+,D5
00000D80                          1972mmm WAIT_FOR_READY_111                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000D80                 TRUE     1973mmm     IFEQ DEBUG
00000D80  1A39 00C00003           1974mmm         MOVE.B DUART_SRA,D5                         ; READ STATUS REGISTER
00000D86  0805 0002               1975mmm         BTST #2,D5                                  ; CHECK FOR SPACE TO SEND
00000D8A  67F4                    1976mmm         BEQ WAIT_FOR_READY_111                      ; NO SPACE, CHECK AGAIN
00000D8C  13DC 00C00007           1977mmm         MOVE.B (A4)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00000D92                          1978mmm     ENDC
00000D92                          1979mmm 
00000D92                 FALSE    1980mmm     IFNE DEBUG
00000D92                          1981mmm     ENDC
00000D92                          1982mmm 
00000D92                          1983mmm     ENDM
00000D92  60E4                    1984mm     BRA LOOP_110
00000D94                          1985mm EXIT_110
00000D94                          1986mm     ENDM
00000D94                          1987m     ENDM
00000D94                          1988  
00000D94  6000 FAEC               1989                  BRA WAIT_FOR_SRECORD                ; ignore any other type 
00000D98                          1990              ENDI
00000D98                          1991s _00000009
00000D98                          1992          ENDI
00000D98                          1993s _00000007
00000D98                          1994      ENDI
00000D98                          1995s _00000003
00000D98                          1996  
00000D98                          1997m     DOWNLOAD_BYTE D4,D5,D6,D7,D2,A4
00000D98  1E3C 0002               1998m     MOVE.B #2,D7
00000D9C                          1999m     WHILE.B D7 <GT> 0 DO
00000D9C                          2000ms _10000012
00000D9C  BE38 0000               2001ms     CMP.B   0,D7
00000DA0  6F00 0062               2002ms     BLE _10000013
00000DA4  E98C                    2003m         LSL.L #4,D4                                 ; IT's OK to do this first, because we are either starting from 0, 
00000DA6                          2004mm         DOWNLOAD D5                                 ; OR WE ARE READING THE NEXT BYTE ALONG, SO NEED TO SHIFT UP THE PREVIOUS ONE
00000DA6                          2005mm WAIT_FOR_READY_113                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000DA6                          2006mm 
00000DA6  1A39 00C00003           2007mm     MOVE.B DUART_SRA,D5                             ; CHECK FOR COMMAND
00000DAC  0805 0000               2008mm     BTST #0,D5                                      ; CHECK FOR CHARACTER
00000DB0  6700 0010               2009mm     BEQ CONTINUE_113                                    ; NOTHING, CONTINUE
00000DB4                          2010mm 
00000DB4                          2011mmm     READ_CHAR D5                                    ; WE're not going to do anything with it, just check for escape
00000DB4                 TRUE     2012mmm     IFEQ DEBUG
00000DB4  1A39 00C00007           2013mmm         MOVE.B DUART_RXA,D5                         ; GOT A CHARACTER, READ IT
00000DBA                          2014mmm     ENDC
00000DBA                 FALSE    2015mmm     IFNE DEBUG
00000DBA                          2016mmm     ENDC
00000DBA                          2017mmm 
00000DBA  BA3C 001B               2018mmm     CMP.B #$1B,D5                                   ; CHECK FOR ESCAPE AND GO TO START
00000DBE  6700 F640               2019mmm     BEQ START
00000DC2                          2020mmm     ENDM
00000DC2                          2021mm CONTINUE_113
00000DC2  1A39 00C00013           2022mm     MOVE.B DUART_SRB,D5                             ; READ DOWNLOAD STATUS REGISTER
00000DC8  0805 0000               2023mm     BTST #0,D5                                      ; CHECK FOR CHARACTER
00000DCC  67D8                    2024mm     BEQ WAIT_FOR_READY_113                          ; NOTHING, CHECK AGAIN
00000DCE                          2025mm     
00000DCE  1A39 00C00017           2026mm     MOVE.B DUART_RXB,D5                             ; GOT A CHARACTER, READ IT
00000DD4  13C5 00E00001           2027mm     MOVE.B D5,DISPLAY                               ; ECHO TO THE DISPLAY
00000DDA                          2028mm 
00000DDA                          2029mm     ENDM
00000DDA                          2030mm         PRINT_CHAR D5,D6
00000DDA                          2031mm WAIT_FOR_READY_115                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000DDA                 TRUE     2032mm     IFEQ DEBUG
00000DDA  1C39 00C00003           2033mm         MOVE.B DUART_SRA,D6                         ; READ STATUS REGISTER
00000DE0  0806 0002               2034mm         BTST #2,D6                                  ; CHECK FOR SPACE TO SEND
00000DE4  67F4                    2035mm         BEQ WAIT_FOR_READY_115                      ; NO SPACE, CHECK AGAIN
00000DE6  13C5 00C00007           2036mm         MOVE.B D5,DUART_TXA                         ; SEND THE NEXT CHARACTER
00000DEC                          2037mm     ENDC
00000DEC                          2038mm 
00000DEC                 FALSE    2039mm     IFNE DEBUG
00000DEC                          2040mm     ENDC
00000DEC                          2041mm 
00000DEC                          2042mm     ENDM
00000DEC                          2043mm         HEX2BIN D5,D5,A4
00000DEC  49FA 0CD2               2044mm     LEA HEX2BIN_LUT(PC),A4                          ; LOAD THE LOOKUP TABLE
00000DF0  0405 0030               2045mm     SUB.B #'0',D5                                   ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
00000DF4  CABC 000000FF           2046mm     AND.L #$FF,D5                                   ; IGNORE THE TOP 3 BYTES
00000DFA  1A34 5000               2047mm     MOVE.B 0(A4,D5),D5                              ; USE THAT AS AN INDEX INTO THE LUT   
00000DFE                          2048mm     ENDM
00000DFE  8805                    2049m         OR.B D5,D4
00000E00  5307                    2050m         SUB.B #1,D7
00000E02                          2051m     ENDW
00000E02  6098                    2052ms     BRA _10000012
00000E04                          2053ms _10000013
00000E04                          2054m 
00000E04  7A00                    2055m     MOVE.L #0,D5                                    ; REXTRACT LATEST BYTE OF ADDRESS AND ADD INTO CHECKSUM
00000E06  1A04                    2056m     MOVE.B D4,D5
00000E08  D484                    2057m     ADD.L D4,D2
00000E0A                          2058m 
00000E0A                          2059m     ENDM
00000E0A                          2060m     PRINT_CRLF D5,A4
00000E0A  49FA 0D22               2061m     LEA CRLF(PC),A4
00000E0E                          2062mm     PRINT_STR A4,D5
00000E0E                          2063mm LOOP_118
00000E0E  0C14 0000               2064mm     CMP.B #NULL,(A4)                                ; 0 -> DONE
00000E12  6700 0016               2065mm     BEQ EXIT_118
00000E16                          2066mmm     PRINT_CHAR (A4)+,D5
00000E16                          2067mmm WAIT_FOR_READY_119                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000E16                 TRUE     2068mmm     IFEQ DEBUG
00000E16  1A39 00C00003           2069mmm         MOVE.B DUART_SRA,D5                         ; READ STATUS REGISTER
00000E1C  0805 0002               2070mmm         BTST #2,D5                                  ; CHECK FOR SPACE TO SEND
00000E20  67F4                    2071mmm         BEQ WAIT_FOR_READY_119                      ; NO SPACE, CHECK AGAIN
00000E22  13DC 00C00007           2072mmm         MOVE.B (A4)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00000E28                          2073mmm     ENDC
00000E28                          2074mmm 
00000E28                 FALSE    2075mmm     IFNE DEBUG
00000E28                          2076mmm     ENDC
00000E28                          2077mmm 
00000E28                          2078mmm     ENDM
00000E28  60E4                    2079mm     BRA LOOP_118
00000E2A                          2080mm EXIT_118
00000E2A                          2081mm     ENDM
00000E2A                          2082m     ENDM
00000E2A                          2083  
00000E2A                          2084      IF.B D2 <NE> #$FF THEN.L
00000E2A  B43C 00FF               2085s     CMP.B   #$FF,D2
00000E2E  6700 0090               2086s     BEQ.L   _0000000A
00000E32  49FA 0C5A               2087          LEA CS_FAILURE(PC),A4                       ; warn for mismatched checksum
00000E36                          2088m         PRINT_STR A4,D5
00000E36                          2089m LOOP_120
00000E36  0C14 0000               2090m     CMP.B #NULL,(A4)                                ; 0 -> DONE
00000E3A  6700 0016               2091m     BEQ EXIT_120
00000E3E                          2092mm     PRINT_CHAR (A4)+,D5
00000E3E                          2093mm WAIT_FOR_READY_121                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000E3E                 TRUE     2094mm     IFEQ DEBUG
00000E3E  1A39 00C00003           2095mm         MOVE.B DUART_SRA,D5                         ; READ STATUS REGISTER
00000E44  0805 0002               2096mm         BTST #2,D5                                  ; CHECK FOR SPACE TO SEND
00000E48  67F4                    2097mm         BEQ WAIT_FOR_READY_121                      ; NO SPACE, CHECK AGAIN
00000E4A  13DC 00C00007           2098mm         MOVE.B (A4)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00000E50                          2099mm     ENDC
00000E50                          2100mm 
00000E50                 FALSE    2101mm     IFNE DEBUG
00000E50                          2102mm     ENDC
00000E50                          2103mm 
00000E50                          2104mm     ENDM
00000E50  60E4                    2105m     BRA LOOP_120
00000E52                          2106m EXIT_120
00000E52                          2107m     ENDM
00000E52                          2108m         PRINT_REG D0,D5,D3,D6,A4
00000E52  49FA 0CE0               2109m     LEA OX(PC),A4
00000E56                          2110mm     PRINT_STR A4,D5
00000E56                          2111mm LOOP_123
00000E56  0C14 0000               2112mm     CMP.B #NULL,(A4)                                ; 0 -> DONE
00000E5A  6700 0016               2113mm     BEQ EXIT_123
00000E5E                          2114mmm     PRINT_CHAR (A4)+,D5
00000E5E                          2115mmm WAIT_FOR_READY_124                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000E5E                 TRUE     2116mmm     IFEQ DEBUG
00000E5E  1A39 00C00003           2117mmm         MOVE.B DUART_SRA,D5                         ; READ STATUS REGISTER
00000E64  0805 0002               2118mmm         BTST #2,D5                                  ; CHECK FOR SPACE TO SEND
00000E68  67F4                    2119mmm         BEQ WAIT_FOR_READY_124                      ; NO SPACE, CHECK AGAIN
00000E6A  13DC 00C00007           2120mmm         MOVE.B (A4)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00000E70                          2121mmm     ENDC
00000E70                          2122mmm 
00000E70                 FALSE    2123mmm     IFNE DEBUG
00000E70                          2124mmm     ENDC
00000E70                          2125mmm 
00000E70                          2126mmm     ENDM
00000E70  60E4                    2127mm     BRA LOOP_123
00000E72                          2128mm EXIT_123
00000E72                          2129mm     ENDM
00000E72  7C07                    2130m     MOVE.L #7,D6                                    ; LOOP ROUND ALL 8 HEX CHARACTERS OF 4 BITS EACH
00000E74                          2131m LOOP_122
00000E74                          2132mm     BIN2HEX D0,D3,A4
00000E74  49FA 0C3A               2133mm     LEA BIN2HEX_LUT(PC),A4                          ; LOAD THE LOOKUP TABLE
00000E78  E998                    2134mm     ROL.L #4,D0                                     ; SHIFT THE TOP 4 BITS DOWN TO BOTTOM OF THE REGISTER THE AND MASK OFF EVERYTHING ELSE
00000E7A  1600                    2135mm     MOVE.B D0,D3
00000E7C  0283 0000000F           2136mm     ANDI.L #$F,D3
00000E82  1634 3000               2137mm     MOVE.B 0(A4,D3),D3                              ; USE THAT AS AN INDEX INTO THE LUT
00000E86                          2138mm     ENDM
00000E86                          2139mm     PRINT_CHAR D3,D5
00000E86                          2140mm WAIT_FOR_READY_126                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000E86                 TRUE     2141mm     IFEQ DEBUG
00000E86  1A39 00C00003           2142mm         MOVE.B DUART_SRA,D5                         ; READ STATUS REGISTER
00000E8C  0805 0002               2143mm         BTST #2,D5                                  ; CHECK FOR SPACE TO SEND
00000E90  67F4                    2144mm         BEQ WAIT_FOR_READY_126                      ; NO SPACE, CHECK AGAIN
00000E92  13C3 00C00007           2145mm         MOVE.B D3,DUART_TXA                         ; SEND THE NEXT CHARACTER
00000E98                          2146mm     ENDC
00000E98                          2147mm 
00000E98                 FALSE    2148mm     IFNE DEBUG
00000E98                          2149mm     ENDC
00000E98                          2150mm 
00000E98                          2151mm     ENDM
00000E98  57CE FFDA               2152m     DBEQ D6,LOOP_122
00000E9C                          2153m     ENDM
00000E9C                          2154m         PRINT_CRLF D5,A4
00000E9C  49FA 0C90               2155m     LEA CRLF(PC),A4
00000EA0                          2156mm     PRINT_STR A4,D5
00000EA0                          2157mm LOOP_128
00000EA0  0C14 0000               2158mm     CMP.B #NULL,(A4)                                ; 0 -> DONE
00000EA4  6700 0016               2159mm     BEQ EXIT_128
00000EA8                          2160mmm     PRINT_CHAR (A4)+,D5
00000EA8                          2161mmm WAIT_FOR_READY_129                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000EA8                 TRUE     2162mmm     IFEQ DEBUG
00000EA8  1A39 00C00003           2163mmm         MOVE.B DUART_SRA,D5                         ; READ STATUS REGISTER
00000EAE  0805 0002               2164mmm         BTST #2,D5                                  ; CHECK FOR SPACE TO SEND
00000EB2  67F4                    2165mmm         BEQ WAIT_FOR_READY_129                      ; NO SPACE, CHECK AGAIN
00000EB4  13DC 00C00007           2166mmm         MOVE.B (A4)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00000EBA                          2167mmm     ENDC
00000EBA                          2168mmm 
00000EBA                 FALSE    2169mmm     IFNE DEBUG
00000EBA                          2170mmm     ENDC
00000EBA                          2171mmm 
00000EBA                          2172mmm     ENDM
00000EBA  60E4                    2173mm     BRA LOOP_128
00000EBC                          2174mm EXIT_128
00000EBC                          2175mm     ENDM
00000EBC                          2176m     ENDM
00000EBC                          2177          
00000EBC  6000 F72C               2178          BRA MAIN_LOOP
00000EC0                          2179      ENDI
00000EC0                          2180s _0000000A
00000EC0                          2181  
00000EC0                          2182      IF D1 <EQ> #0 THEN
00000EC0  B27C 0000               2183s     CMP.W   #0,D1
00000EC4  6600 0006               2184s     BNE _0000000B
00000EC8  6000 F9B8               2185        BRA WAIT_FOR_SRECORD
00000ECC                          2186      ENDI
00000ECC                          2187s _0000000B
00000ECC                          2188  DOWNLOAD_DONE
00000ECC                          2189m     PRINT_REG D0,D5,D6,D2,A1                        ; print out number of Srecords read
00000ECC  43FA 0C66               2190m     LEA OX(PC),A1
00000ED0                          2191mm     PRINT_STR A1,D5
00000ED0                          2192mm LOOP_131
00000ED0  0C11 0000               2193mm     CMP.B #NULL,(A1)                                ; 0 -> DONE
00000ED4  6700 0016               2194mm     BEQ EXIT_131
00000ED8                          2195mmm     PRINT_CHAR (A1)+,D5
00000ED8                          2196mmm WAIT_FOR_READY_132                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000ED8                 TRUE     2197mmm     IFEQ DEBUG
00000ED8  1A39 00C00003           2198mmm         MOVE.B DUART_SRA,D5                         ; READ STATUS REGISTER
00000EDE  0805 0002               2199mmm         BTST #2,D5                                  ; CHECK FOR SPACE TO SEND
00000EE2  67F4                    2200mmm         BEQ WAIT_FOR_READY_132                      ; NO SPACE, CHECK AGAIN
00000EE4  13D9 00C00007           2201mmm         MOVE.B (A1)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00000EEA                          2202mmm     ENDC
00000EEA                          2203mmm 
00000EEA                 FALSE    2204mmm     IFNE DEBUG
00000EEA                          2205mmm     ENDC
00000EEA                          2206mmm 
00000EEA                          2207mmm     ENDM
00000EEA  60E4                    2208mm     BRA LOOP_131
00000EEC                          2209mm EXIT_131
00000EEC                          2210mm     ENDM
00000EEC  7407                    2211m     MOVE.L #7,D2                                    ; LOOP ROUND ALL 8 HEX CHARACTERS OF 4 BITS EACH
00000EEE                          2212m LOOP_130
00000EEE                          2213mm     BIN2HEX D0,D6,A1
00000EEE  43FA 0BC0               2214mm     LEA BIN2HEX_LUT(PC),A1                          ; LOAD THE LOOKUP TABLE
00000EF2  E998                    2215mm     ROL.L #4,D0                                     ; SHIFT THE TOP 4 BITS DOWN TO BOTTOM OF THE REGISTER THE AND MASK OFF EVERYTHING ELSE
00000EF4  1C00                    2216mm     MOVE.B D0,D6
00000EF6  0286 0000000F           2217mm     ANDI.L #$F,D6
00000EFC  1C31 6000               2218mm     MOVE.B 0(A1,D6),D6                              ; USE THAT AS AN INDEX INTO THE LUT
00000F00                          2219mm     ENDM
00000F00                          2220mm     PRINT_CHAR D6,D5
00000F00                          2221mm WAIT_FOR_READY_134                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000F00                 TRUE     2222mm     IFEQ DEBUG
00000F00  1A39 00C00003           2223mm         MOVE.B DUART_SRA,D5                         ; READ STATUS REGISTER
00000F06  0805 0002               2224mm         BTST #2,D5                                  ; CHECK FOR SPACE TO SEND
00000F0A  67F4                    2225mm         BEQ WAIT_FOR_READY_134                      ; NO SPACE, CHECK AGAIN
00000F0C  13C6 00C00007           2226mm         MOVE.B D6,DUART_TXA                         ; SEND THE NEXT CHARACTER
00000F12                          2227mm     ENDC
00000F12                          2228mm 
00000F12                 FALSE    2229mm     IFNE DEBUG
00000F12                          2230mm     ENDC
00000F12                          2231mm 
00000F12                          2232mm     ENDM
00000F12  57CA FFDA               2233m     DBEQ D2,LOOP_130
00000F16                          2234m     ENDM
00000F16  43FA 0B3D               2235      LEA READ(PC),A1
00000F1A                          2236m     PRINT_STR A1,D5
00000F1A                          2237m LOOP_135
00000F1A  0C11 0000               2238m     CMP.B #NULL,(A1)                                ; 0 -> DONE
00000F1E  6700 0016               2239m     BEQ EXIT_135
00000F22                          2240mm     PRINT_CHAR (A1)+,D5
00000F22                          2241mm WAIT_FOR_READY_136                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000F22                 TRUE     2242mm     IFEQ DEBUG
00000F22  1A39 00C00003           2243mm         MOVE.B DUART_SRA,D5                         ; READ STATUS REGISTER
00000F28  0805 0002               2244mm         BTST #2,D5                                  ; CHECK FOR SPACE TO SEND
00000F2C  67F4                    2245mm         BEQ WAIT_FOR_READY_136                      ; NO SPACE, CHECK AGAIN
00000F2E  13D9 00C00007           2246mm         MOVE.B (A1)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00000F34                          2247mm     ENDC
00000F34                          2248mm 
00000F34                 FALSE    2249mm     IFNE DEBUG
00000F34                          2250mm     ENDC
00000F34                          2251mm 
00000F34                          2252mm     ENDM
00000F34  60E4                    2253m     BRA LOOP_135
00000F36                          2254m EXIT_135
00000F36                          2255m     ENDM
00000F36  2E08                    2256      MOVE.L A0,D7                                    ; set address accumulator to start address
00000F38                          2257m     PRINT_REG D7,D5,D6,D2,A1                        ; print out start address
00000F38  43FA 0BFA               2258m     LEA OX(PC),A1
00000F3C                          2259mm     PRINT_STR A1,D5
00000F3C                          2260mm LOOP_138
00000F3C  0C11 0000               2261mm     CMP.B #NULL,(A1)                                ; 0 -> DONE
00000F40  6700 0016               2262mm     BEQ EXIT_138
00000F44                          2263mmm     PRINT_CHAR (A1)+,D5
00000F44                          2264mmm WAIT_FOR_READY_139                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000F44                 TRUE     2265mmm     IFEQ DEBUG
00000F44  1A39 00C00003           2266mmm         MOVE.B DUART_SRA,D5                         ; READ STATUS REGISTER
00000F4A  0805 0002               2267mmm         BTST #2,D5                                  ; CHECK FOR SPACE TO SEND
00000F4E  67F4                    2268mmm         BEQ WAIT_FOR_READY_139                      ; NO SPACE, CHECK AGAIN
00000F50  13D9 00C00007           2269mmm         MOVE.B (A1)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00000F56                          2270mmm     ENDC
00000F56                          2271mmm 
00000F56                 FALSE    2272mmm     IFNE DEBUG
00000F56                          2273mmm     ENDC
00000F56                          2274mmm 
00000F56                          2275mmm     ENDM
00000F56  60E4                    2276mm     BRA LOOP_138
00000F58                          2277mm EXIT_138
00000F58                          2278mm     ENDM
00000F58  7407                    2279m     MOVE.L #7,D2                                    ; LOOP ROUND ALL 8 HEX CHARACTERS OF 4 BITS EACH
00000F5A                          2280m LOOP_137
00000F5A                          2281mm     BIN2HEX D7,D6,A1
00000F5A  43FA 0B54               2282mm     LEA BIN2HEX_LUT(PC),A1                          ; LOAD THE LOOKUP TABLE
00000F5E  E99F                    2283mm     ROL.L #4,D7                                     ; SHIFT THE TOP 4 BITS DOWN TO BOTTOM OF THE REGISTER THE AND MASK OFF EVERYTHING ELSE
00000F60  1C07                    2284mm     MOVE.B D7,D6
00000F62  0286 0000000F           2285mm     ANDI.L #$F,D6
00000F68  1C31 6000               2286mm     MOVE.B 0(A1,D6),D6                              ; USE THAT AS AN INDEX INTO THE LUT
00000F6C                          2287mm     ENDM
00000F6C                          2288mm     PRINT_CHAR D6,D5
00000F6C                          2289mm WAIT_FOR_READY_141                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000F6C                 TRUE     2290mm     IFEQ DEBUG
00000F6C  1A39 00C00003           2291mm         MOVE.B DUART_SRA,D5                         ; READ STATUS REGISTER
00000F72  0805 0002               2292mm         BTST #2,D5                                  ; CHECK FOR SPACE TO SEND
00000F76  67F4                    2293mm         BEQ WAIT_FOR_READY_141                      ; NO SPACE, CHECK AGAIN
00000F78  13C6 00C00007           2294mm         MOVE.B D6,DUART_TXA                         ; SEND THE NEXT CHARACTER
00000F7E                          2295mm     ENDC
00000F7E                          2296mm 
00000F7E                 FALSE    2297mm     IFNE DEBUG
00000F7E                          2298mm     ENDC
00000F7E                          2299mm 
00000F7E                          2300mm     ENDM
00000F7E  57CA FFDA               2301m     DBEQ D2,LOOP_137
00000F82                          2302m     ENDM
00000F82                          2303m     PRINT_CRLF D5,A4
00000F82  49FA 0BAA               2304m     LEA CRLF(PC),A4
00000F86                          2305mm     PRINT_STR A4,D5
00000F86                          2306mm LOOP_143
00000F86  0C14 0000               2307mm     CMP.B #NULL,(A4)                                ; 0 -> DONE
00000F8A  6700 0016               2308mm     BEQ EXIT_143
00000F8E                          2309mmm     PRINT_CHAR (A4)+,D5
00000F8E                          2310mmm WAIT_FOR_READY_144                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000F8E                 TRUE     2311mmm     IFEQ DEBUG
00000F8E  1A39 00C00003           2312mmm         MOVE.B DUART_SRA,D5                         ; READ STATUS REGISTER
00000F94  0805 0002               2313mmm         BTST #2,D5                                  ; CHECK FOR SPACE TO SEND
00000F98  67F4                    2314mmm         BEQ WAIT_FOR_READY_144                      ; NO SPACE, CHECK AGAIN
00000F9A  13DC 00C00007           2315mmm         MOVE.B (A4)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00000FA0                          2316mmm     ENDC
00000FA0                          2317mmm 
00000FA0                 FALSE    2318mmm     IFNE DEBUG
00000FA0                          2319mmm     ENDC
00000FA0                          2320mmm 
00000FA0                          2321mmm     ENDM
00000FA0  60E4                    2322mm     BRA LOOP_143
00000FA2                          2323mm EXIT_143
00000FA2                          2324mm     ENDM
00000FA2                          2325m     ENDM
00000FA2                          2326  
00000FA2  6000 F646               2327      BRA MAIN_LOOP
00000FA6                          2328  
00000FA6                          2329  G
00000FA6  2047                    2330      MOVE.L D7,A0                                        ; grab the address accumulator and then clear it
00000FA8  7E00                    2331      MOVE.L #0,D7
00000FAA                          2332  
00000FAA  4ED0                    2333      JMP (A0)
00000FAC                          2334          
00000FAC                          2335  Z
00000FAC  207C 00200000           2336      MOVE.L #RAM,A0                                  ; address of RAM
00000FB2  D1FC 00100000           2337      ADD.L #$100000,A0
00000FB8                          2338  
00000FB8                          2339      FOR.L D0 = #0 TO #$FFFFC BY #4 DO               ; write
00000FB8  7000                    2340s     MOVE.L  #0,D0
00000FBA  6000 0012               2341s     BRA _20000007
00000FBE                          2342s _20000006
00000FBE  2200                    2343          MOVE.L D0,D1                                ; progress update
00000FC0  E089                    2344          LSR.L #8,D1 
00000FC2  E089                    2345          LSR.L #8,D1
00000FC4  13C1 00E00001           2346          MOVE.B D1,DISPLAY
00000FCA                          2347          
00000FCA  2108                    2348          MOVE.L A0,-(A0)
00000FCC                          2349      ENDF
00000FCC  5880                    2350s     ADD.L   #4,D0
00000FCE                          2351s _20000007
00000FCE  B0BC 000FFFFC           2352s     CMP.L   #$FFFFC,D0
00000FD4  6FE8                    2353s     BLE _20000006
00000FD6                          2354  
00000FD6  207C 00200000           2355      MOVE.L #RAM,A0                                  ; address of RAM
00000FDC  D1FC 00100000           2356      ADD.L #$100000,A0
00000FE2                          2357  
00000FE2                          2358      FOR.L D0 = #0 TO #$FFFFC BY #4 DO               ; read back and check 
00000FE2  7000                    2359s     MOVE.L  #0,D0
00000FE4  6000 00A8               2360s     BRA _20000009
00000FE8                          2361s _20000008
00000FE8  2200                    2362          MOVE.L D0,D1                                ; progress update
00000FEA  E089                    2363          LSR.L #8,D1
00000FEC  E089                    2364          LSR.L #8,D1
00000FEE  13C1 00E00001           2365          MOVE.B D1,DISPLAY
00000FF4                          2366  
00000FF4  2408                    2367          MOVE.L A0,D2
00000FF6  2220                    2368          MOVE.L -(A0),D1
00000FF8                          2369  
00000FF8                          2370          IF.L D2 <NE> D1 THEN
00000FF8  B481                    2371s     CMP.L   D1,D2
00000FFA  6700 0090               2372s     BEQ _0000000C
00000FFE  43FA 0A9F               2373              LEA RAM_ERROR(PC),A1
00001002                          2374m             PRINT_STR A1,D1
00001002                          2375m LOOP_145
00001002  0C11 0000               2376m     CMP.B #NULL,(A1)                                ; 0 -> DONE
00001006  6700 0016               2377m     BEQ EXIT_145
0000100A                          2378mm     PRINT_CHAR (A1)+,D1
0000100A                          2379mm WAIT_FOR_READY_146                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
0000100A                 TRUE     2380mm     IFEQ DEBUG
0000100A  1239 00C00003           2381mm         MOVE.B DUART_SRA,D1                         ; READ STATUS REGISTER
00001010  0801 0002               2382mm         BTST #2,D1                                  ; CHECK FOR SPACE TO SEND
00001014  67F4                    2383mm         BEQ WAIT_FOR_READY_146                      ; NO SPACE, CHECK AGAIN
00001016  13D9 00C00007           2384mm         MOVE.B (A1)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
0000101C                          2385mm     ENDC
0000101C                          2386mm 
0000101C                 FALSE    2387mm     IFNE DEBUG
0000101C                          2388mm     ENDC
0000101C                          2389mm 
0000101C                          2390mm     ENDM
0000101C  60E4                    2391m     BRA LOOP_145
0000101E                          2392m EXIT_145
0000101E                          2393m     ENDM
0000101E  2208                    2394              MOVE.L A0,D1
00001020  5981                    2395              SUB.L #4,D1
00001022                          2396m             PRINT_REG D1,D3,D2,D6,A1                ; print out failure address
00001022  43FA 0B10               2397m     LEA OX(PC),A1
00001026                          2398mm     PRINT_STR A1,D3
00001026                          2399mm LOOP_148
00001026  0C11 0000               2400mm     CMP.B #NULL,(A1)                                ; 0 -> DONE
0000102A  6700 0016               2401mm     BEQ EXIT_148
0000102E                          2402mmm     PRINT_CHAR (A1)+,D3
0000102E                          2403mmm WAIT_FOR_READY_149                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
0000102E                 TRUE     2404mmm     IFEQ DEBUG
0000102E  1639 00C00003           2405mmm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
00001034  0803 0002               2406mmm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
00001038  67F4                    2407mmm         BEQ WAIT_FOR_READY_149                      ; NO SPACE, CHECK AGAIN
0000103A  13D9 00C00007           2408mmm         MOVE.B (A1)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00001040                          2409mmm     ENDC
00001040                          2410mmm 
00001040                 FALSE    2411mmm     IFNE DEBUG
00001040                          2412mmm     ENDC
00001040                          2413mmm 
00001040                          2414mmm     ENDM
00001040  60E4                    2415mm     BRA LOOP_148
00001042                          2416mm EXIT_148
00001042                          2417mm     ENDM
00001042  7C07                    2418m     MOVE.L #7,D6                                    ; LOOP ROUND ALL 8 HEX CHARACTERS OF 4 BITS EACH
00001044                          2419m LOOP_147
00001044                          2420mm     BIN2HEX D1,D2,A1
00001044  43FA 0A6A               2421mm     LEA BIN2HEX_LUT(PC),A1                          ; LOAD THE LOOKUP TABLE
00001048  E999                    2422mm     ROL.L #4,D1                                     ; SHIFT THE TOP 4 BITS DOWN TO BOTTOM OF THE REGISTER THE AND MASK OFF EVERYTHING ELSE
0000104A  1401                    2423mm     MOVE.B D1,D2
0000104C  0282 0000000F           2424mm     ANDI.L #$F,D2
00001052  1431 2000               2425mm     MOVE.B 0(A1,D2),D2                              ; USE THAT AS AN INDEX INTO THE LUT
00001056                          2426mm     ENDM
00001056                          2427mm     PRINT_CHAR D2,D3
00001056                          2428mm WAIT_FOR_READY_151                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00001056                 TRUE     2429mm     IFEQ DEBUG
00001056  1639 00C00003           2430mm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
0000105C  0803 0002               2431mm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
00001060  67F4                    2432mm         BEQ WAIT_FOR_READY_151                      ; NO SPACE, CHECK AGAIN
00001062  13C2 00C00007           2433mm         MOVE.B D2,DUART_TXA                         ; SEND THE NEXT CHARACTER
00001068                          2434mm     ENDC
00001068                          2435mm 
00001068                 FALSE    2436mm     IFNE DEBUG
00001068                          2437mm     ENDC
00001068                          2438mm 
00001068                          2439mm     ENDM
00001068  57CE FFDA               2440m     DBEQ D6,LOOP_147
0000106C                          2441m     ENDM
0000106C                          2442m             PRINT_CRLF D3,A1
0000106C  43FA 0AC0               2443m     LEA CRLF(PC),A1
00001070                          2444mm     PRINT_STR A1,D3
00001070                          2445mm LOOP_153
00001070  0C11 0000               2446mm     CMP.B #NULL,(A1)                                ; 0 -> DONE
00001074  6700 0016               2447mm     BEQ EXIT_153
00001078                          2448mmm     PRINT_CHAR (A1)+,D3
00001078                          2449mmm WAIT_FOR_READY_154                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00001078                 TRUE     2450mmm     IFEQ DEBUG
00001078  1639 00C00003           2451mmm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
0000107E  0803 0002               2452mmm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
00001082  67F4                    2453mmm         BEQ WAIT_FOR_READY_154                      ; NO SPACE, CHECK AGAIN
00001084  13D9 00C00007           2454mmm         MOVE.B (A1)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
0000108A                          2455mmm     ENDC
0000108A                          2456mmm 
0000108A                 FALSE    2457mmm     IFNE DEBUG
0000108A                          2458mmm     ENDC
0000108A                          2459mmm 
0000108A                          2460mmm     ENDM
0000108A  60E4                    2461mm     BRA LOOP_153
0000108C                          2462mm EXIT_153
0000108C                          2463mm     ENDM
0000108C                          2464m     ENDM
0000108C                          2465          ENDI 
0000108C                          2466s _0000000C
0000108C                          2467      ENDF
0000108C  5880                    2468s     ADD.L   #4,D0
0000108E                          2469s _20000009
0000108E  B0BC 000FFFFC           2470s     CMP.L   #$FFFFC,D0
00001094  6F00 FF52               2471s     BLE _20000008
00001098                          2472  
00001098  6000 F550               2473      BRA MAIN_LOOP
0000109C                          2474  
0000109C                          2475  L
0000109C  7000                    2476      MOVE.L #0,D0                                    ; D0 will be the length to write               
0000109E  7200                    2477      MOVE.L #0,D1                                    ; D1 will be the address to write 
000010A0                          2478  
000010A0                          2479      FOR D2 = #0 TO #7 DO                            ; read 4 bytes, we'll split into 2 byte address (MS) and 2 byte length (LS)
000010A0  343C 0000               2480s     MOVE.W  #0,D2
000010A4  6000 0046               2481s     BRA _2000000B
000010A8                          2482s _2000000A
000010A8  E989                    2483          LSL.L #4,D1                                 ; make what we have so far more significant
000010AA                          2484m         WAIT_CHAR D3,D4                             ; next character -> D2
000010AA                          2485m WAIT_FOR_READY_155                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
000010AA                 TRUE     2486m     IFEQ DEBUG
000010AA  1839 00C00003           2487m         MOVE.B DUART_SRA,D4                         ; READ STATUS REGISTER
000010B0  0804 0000               2488m         BTST #0,D4                                  ; CHECK FOR CHARACTER
000010B4  67F4                    2489m         BEQ WAIT_FOR_READY_155                      ; NOTHING, CHECK AGAIN
000010B6                          2490m     ENDC
000010B6                          2491m 
000010B6                          2492mm     READ_CHAR D3
000010B6                 TRUE     2493mm     IFEQ DEBUG
000010B6  1639 00C00007           2494mm         MOVE.B DUART_RXA,D3                         ; GOT A CHARACTER, READ IT
000010BC                          2495mm     ENDC
000010BC                 FALSE    2496mm     IFNE DEBUG
000010BC                          2497mm     ENDC
000010BC                          2498mm 
000010BC  B63C 001B               2499mm     CMP.B #$1B,D3                                   ; CHECK FOR ESCAPE AND GO TO START
000010C0  6700 F33E               2500mm     BEQ START
000010C4                          2501mm     ENDM
000010C4                          2502m 
000010C4                 TRUE     2503m     IFEQ DEBUG
000010C4                          2504mm         PRINT_CHAR D3,D4                            ; ECHO IT BACK
000010C4                          2505mm WAIT_FOR_READY_157                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
000010C4                 TRUE     2506mm     IFEQ DEBUG
000010C4  1839 00C00003           2507mm         MOVE.B DUART_SRA,D4                         ; READ STATUS REGISTER
000010CA  0804 0002               2508mm         BTST #2,D4                                  ; CHECK FOR SPACE TO SEND
000010CE  67F4                    2509mm         BEQ WAIT_FOR_READY_157                      ; NO SPACE, CHECK AGAIN
000010D0  13C3 00C00007           2510mm         MOVE.B D3,DUART_TXA                         ; SEND THE NEXT CHARACTER
000010D6                          2511mm     ENDC
000010D6                          2512mm 
000010D6                 FALSE    2513mm     IFNE DEBUG
000010D6                          2514mm     ENDC
000010D6                          2515mm 
000010D6                          2516mm     ENDM
000010D6                          2517m     ENDC
000010D6                          2518m     ENDM
000010D6                          2519m         HEX2BIN D3,D3,A0                            ; convert to binary -> D2
000010D6  41FA 09E8               2520m     LEA HEX2BIN_LUT(PC),A0                          ; LOAD THE LOOKUP TABLE
000010DA  0403 0030               2521m     SUB.B #'0',D3                                   ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
000010DE  C6BC 000000FF           2522m     AND.L #$FF,D3                                   ; IGNORE THE TOP 3 BYTES
000010E4  1630 3000               2523m     MOVE.B 0(A0,D3),D3                              ; USE THAT AS AN INDEX INTO THE LUT   
000010E8                          2524m     ENDM
000010E8  8203                    2525          OR.B D3,D1
000010EA                          2526      ENDF
000010EA  5242                    2527s     ADD.W   #1,D2
000010EC                          2528s _2000000B
000010EC  B47C 0007               2529s     CMP.W   #7,D2
000010F0  6FB6                    2530s     BLE _2000000A
000010F2                          2531  
000010F2  3001                    2532      MOVE.W D1,D0                                    ; extract the LSword for the length
000010F4  E089                    2533      LSR.L #8,D1                                     ; extract the MSword for the address
000010F6  E089                    2534      LSR.L #8,D1
000010F8                          2535  
000010F8                          2536m     PRINT_CRLF D2,A1
000010F8  43FA 0A34               2537m     LEA CRLF(PC),A1
000010FC                          2538mm     PRINT_STR A1,D2
000010FC                          2539mm LOOP_160
000010FC  0C11 0000               2540mm     CMP.B #NULL,(A1)                                ; 0 -> DONE
00001100  6700 0016               2541mm     BEQ EXIT_160
00001104                          2542mmm     PRINT_CHAR (A1)+,D2
00001104                          2543mmm WAIT_FOR_READY_161                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00001104                 TRUE     2544mmm     IFEQ DEBUG
00001104  1439 00C00003           2545mmm         MOVE.B DUART_SRA,D2                         ; READ STATUS REGISTER
0000110A  0802 0002               2546mmm         BTST #2,D2                                  ; CHECK FOR SPACE TO SEND
0000110E  67F4                    2547mmm         BEQ WAIT_FOR_READY_161                      ; NO SPACE, CHECK AGAIN
00001110  13D9 00C00007           2548mmm         MOVE.B (A1)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00001116                          2549mmm     ENDC
00001116                          2550mmm 
00001116                 FALSE    2551mmm     IFNE DEBUG
00001116                          2552mmm     ENDC
00001116                          2553mmm 
00001116                          2554mmm     ENDM
00001116  60E4                    2555mm     BRA LOOP_160
00001118                          2556mm EXIT_160
00001118                          2557mm     ENDM
00001118                          2558m     ENDM
00001118                          2559  
00001118  2041                    2560      MOVE.L D1,A0                                    ; target address
0000111A  2641                    2561      MOVE.L D1,A3                                    ; keep a copy for later
0000111C                          2562  
0000111C  2247                    2563      MOVE.L D7,A1                                    ; address accumulator -> address register
0000111E  D3FC 00000400           2564      ADD.L #START,A1                             ; skip the vectors
00001124  2847                    2565      MOVE.L D7,A4                                    ; keep a clean copy for later
00001126  7E00                    2566      MOVE.L #0,D7                                    ; clear the now used address accumulator
00001128                          2567  
00001128                          2568m     UNPROTECT
00001128  31FC AAAA 2AAA          2569m     MOVE.W #$AAAA,$2AAA                             ; REMOVE WRITE PROTECT
0000112E  4E71                    2570m     NOP
00001130  31FC 5555 1554          2571m     MOVE.W #$5555,$1554
00001136  4E71                    2572m     NOP
00001138  31FC 8080 2AAA          2573m     MOVE.W #$8080,$2AAA
0000113E  4E71                    2574m     NOP
00001140  31FC AAAA 2AAA          2575m     MOVE.W #$AAAA,$2AAA
00001146  4E71                    2576m     NOP
00001148  31FC 5555 1554          2577m     MOVE.W #$5555,$1554
0000114E  4E71                    2578m     NOP
00001150  31FC 2020 2AAA          2579m     MOVE.W #$2020,$2AAA
00001156                          2580m     ENDM
00001156                          2581  
00001156  45FA 097F               2582      LEA LOADING(PC),A2                              ; the prints seem to be important for timing to unprotect the EEPROM
0000115A                          2583m     PRINT_STR A2,D2
0000115A                          2584m LOOP_163
0000115A  0C12 0000               2585m     CMP.B #NULL,(A2)                                ; 0 -> DONE
0000115E  6700 0016               2586m     BEQ EXIT_163
00001162                          2587mm     PRINT_CHAR (A2)+,D2
00001162                          2588mm WAIT_FOR_READY_164                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00001162                 TRUE     2589mm     IFEQ DEBUG
00001162  1439 00C00003           2590mm         MOVE.B DUART_SRA,D2                         ; READ STATUS REGISTER
00001168  0802 0002               2591mm         BTST #2,D2                                  ; CHECK FOR SPACE TO SEND
0000116C  67F4                    2592mm         BEQ WAIT_FOR_READY_164                      ; NO SPACE, CHECK AGAIN
0000116E  13DA 00C00007           2593mm         MOVE.B (A2)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00001174                          2594mm     ENDC
00001174                          2595mm 
00001174                 FALSE    2596mm     IFNE DEBUG
00001174                          2597mm     ENDC
00001174                          2598mm 
00001174                          2599mm     ENDM
00001174  60E4                    2600m     BRA LOOP_163
00001176                          2601m EXIT_163
00001176                          2602m     ENDM
00001176                          2603  
00001176  45FA 0973               2604      LEA CODE(PC),A2
0000117A                          2605m     PRINT_STR A2,D2
0000117A                          2606m LOOP_165
0000117A  0C12 0000               2607m     CMP.B #NULL,(A2)                                ; 0 -> DONE
0000117E  6700 0016               2608m     BEQ EXIT_165
00001182                          2609mm     PRINT_CHAR (A2)+,D2
00001182                          2610mm WAIT_FOR_READY_166                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00001182                 TRUE     2611mm     IFEQ DEBUG
00001182  1439 00C00003           2612mm         MOVE.B DUART_SRA,D2                         ; READ STATUS REGISTER
00001188  0802 0002               2613mm         BTST #2,D2                                  ; CHECK FOR SPACE TO SEND
0000118C  67F4                    2614mm         BEQ WAIT_FOR_READY_166                      ; NO SPACE, CHECK AGAIN
0000118E  13DA 00C00007           2615mm         MOVE.B (A2)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00001194                          2616mm     ENDC
00001194                          2617mm 
00001194                 FALSE    2618mm     IFNE DEBUG
00001194                          2619mm     ENDC
00001194                          2620mm 
00001194                          2621mm     ENDM
00001194  60E4                    2622m     BRA LOOP_165
00001196                          2623m EXIT_165
00001196                          2624m     ENDM
00001196                          2625      
00001196  2409                    2626      MOVE.L A1,D2
00001198                          2627m     PRINT_REG D2,D3,D4,D5,A2
00001198  45FA 099A               2628m     LEA OX(PC),A2
0000119C                          2629mm     PRINT_STR A2,D3
0000119C                          2630mm LOOP_168
0000119C  0C12 0000               2631mm     CMP.B #NULL,(A2)                                ; 0 -> DONE
000011A0  6700 0016               2632mm     BEQ EXIT_168
000011A4                          2633mmm     PRINT_CHAR (A2)+,D3
000011A4                          2634mmm WAIT_FOR_READY_169                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
000011A4                 TRUE     2635mmm     IFEQ DEBUG
000011A4  1639 00C00003           2636mmm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
000011AA  0803 0002               2637mmm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
000011AE  67F4                    2638mmm         BEQ WAIT_FOR_READY_169                      ; NO SPACE, CHECK AGAIN
000011B0  13DA 00C00007           2639mmm         MOVE.B (A2)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
000011B6                          2640mmm     ENDC
000011B6                          2641mmm 
000011B6                 FALSE    2642mmm     IFNE DEBUG
000011B6                          2643mmm     ENDC
000011B6                          2644mmm 
000011B6                          2645mmm     ENDM
000011B6  60E4                    2646mm     BRA LOOP_168
000011B8                          2647mm EXIT_168
000011B8                          2648mm     ENDM
000011B8  7A07                    2649m     MOVE.L #7,D5                                    ; LOOP ROUND ALL 8 HEX CHARACTERS OF 4 BITS EACH
000011BA                          2650m LOOP_167
000011BA                          2651mm     BIN2HEX D2,D4,A2
000011BA  45FA 08F4               2652mm     LEA BIN2HEX_LUT(PC),A2                          ; LOAD THE LOOKUP TABLE
000011BE  E99A                    2653mm     ROL.L #4,D2                                     ; SHIFT THE TOP 4 BITS DOWN TO BOTTOM OF THE REGISTER THE AND MASK OFF EVERYTHING ELSE
000011C0  1802                    2654mm     MOVE.B D2,D4
000011C2  0284 0000000F           2655mm     ANDI.L #$F,D4
000011C8  1832 4000               2656mm     MOVE.B 0(A2,D4),D4                              ; USE THAT AS AN INDEX INTO THE LUT
000011CC                          2657mm     ENDM
000011CC                          2658mm     PRINT_CHAR D4,D3
000011CC                          2659mm WAIT_FOR_READY_171                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
000011CC                 TRUE     2660mm     IFEQ DEBUG
000011CC  1639 00C00003           2661mm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
000011D2  0803 0002               2662mm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
000011D6  67F4                    2663mm         BEQ WAIT_FOR_READY_171                      ; NO SPACE, CHECK AGAIN
000011D8  13C4 00C00007           2664mm         MOVE.B D4,DUART_TXA                         ; SEND THE NEXT CHARACTER
000011DE                          2665mm     ENDC
000011DE                          2666mm 
000011DE                 FALSE    2667mm     IFNE DEBUG
000011DE                          2668mm     ENDC
000011DE                          2669mm 
000011DE                          2670mm     ENDM
000011DE  57CD FFDA               2671m     DBEQ D5,LOOP_167
000011E2                          2672m     ENDM
000011E2                          2673  
000011E2  45FA 0953               2674      LEA TO(PC),A2
000011E6                          2675m     PRINT_STR A2,D3
000011E6                          2676m LOOP_172
000011E6  0C12 0000               2677m     CMP.B #NULL,(A2)                                ; 0 -> DONE
000011EA  6700 0016               2678m     BEQ EXIT_172
000011EE                          2679mm     PRINT_CHAR (A2)+,D3
000011EE                          2680mm WAIT_FOR_READY_173                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
000011EE                 TRUE     2681mm     IFEQ DEBUG
000011EE  1639 00C00003           2682mm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
000011F4  0803 0002               2683mm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
000011F8  67F4                    2684mm         BEQ WAIT_FOR_READY_173                      ; NO SPACE, CHECK AGAIN
000011FA  13DA 00C00007           2685mm         MOVE.B (A2)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00001200                          2686mm     ENDC
00001200                          2687mm 
00001200                 FALSE    2688mm     IFNE DEBUG
00001200                          2689mm     ENDC
00001200                          2690mm 
00001200                          2691mm     ENDM
00001200  60E4                    2692m     BRA LOOP_172
00001202                          2693m EXIT_172
00001202                          2694m     ENDM
00001202                          2695  
00001202  2408                    2696      MOVE.L A0,D2
00001204                          2697m     PRINT_REG D2,D3,D4,D5,A2
00001204  45FA 092E               2698m     LEA OX(PC),A2
00001208                          2699mm     PRINT_STR A2,D3
00001208                          2700mm LOOP_175
00001208  0C12 0000               2701mm     CMP.B #NULL,(A2)                                ; 0 -> DONE
0000120C  6700 0016               2702mm     BEQ EXIT_175
00001210                          2703mmm     PRINT_CHAR (A2)+,D3
00001210                          2704mmm WAIT_FOR_READY_176                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00001210                 TRUE     2705mmm     IFEQ DEBUG
00001210  1639 00C00003           2706mmm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
00001216  0803 0002               2707mmm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
0000121A  67F4                    2708mmm         BEQ WAIT_FOR_READY_176                      ; NO SPACE, CHECK AGAIN
0000121C  13DA 00C00007           2709mmm         MOVE.B (A2)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00001222                          2710mmm     ENDC
00001222                          2711mmm 
00001222                 FALSE    2712mmm     IFNE DEBUG
00001222                          2713mmm     ENDC
00001222                          2714mmm 
00001222                          2715mmm     ENDM
00001222  60E4                    2716mm     BRA LOOP_175
00001224                          2717mm EXIT_175
00001224                          2718mm     ENDM
00001224  7A07                    2719m     MOVE.L #7,D5                                    ; LOOP ROUND ALL 8 HEX CHARACTERS OF 4 BITS EACH
00001226                          2720m LOOP_174
00001226                          2721mm     BIN2HEX D2,D4,A2
00001226  45FA 0888               2722mm     LEA BIN2HEX_LUT(PC),A2                          ; LOAD THE LOOKUP TABLE
0000122A  E99A                    2723mm     ROL.L #4,D2                                     ; SHIFT THE TOP 4 BITS DOWN TO BOTTOM OF THE REGISTER THE AND MASK OFF EVERYTHING ELSE
0000122C  1802                    2724mm     MOVE.B D2,D4
0000122E  0284 0000000F           2725mm     ANDI.L #$F,D4
00001234  1832 4000               2726mm     MOVE.B 0(A2,D4),D4                              ; USE THAT AS AN INDEX INTO THE LUT
00001238                          2727mm     ENDM
00001238                          2728mm     PRINT_CHAR D4,D3
00001238                          2729mm WAIT_FOR_READY_178                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00001238                 TRUE     2730mm     IFEQ DEBUG
00001238  1639 00C00003           2731mm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
0000123E  0803 0002               2732mm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
00001242  67F4                    2733mm         BEQ WAIT_FOR_READY_178                      ; NO SPACE, CHECK AGAIN
00001244  13C4 00C00007           2734mm         MOVE.B D4,DUART_TXA                         ; SEND THE NEXT CHARACTER
0000124A                          2735mm     ENDC
0000124A                          2736mm 
0000124A                 FALSE    2737mm     IFNE DEBUG
0000124A                          2738mm     ENDC
0000124A                          2739mm 
0000124A                          2740mm     ENDM
0000124A  57CD FFDA               2741m     DBEQ D5,LOOP_174
0000124E                          2742m     ENDM
0000124E                          2743  
0000124E                          2744m     PRINT_CRLF D3,A2
0000124E  45FA 08DE               2745m     LEA CRLF(PC),A2
00001252                          2746mm     PRINT_STR A2,D3
00001252                          2747mm LOOP_180
00001252  0C12 0000               2748mm     CMP.B #NULL,(A2)                                ; 0 -> DONE
00001256  6700 0016               2749mm     BEQ EXIT_180
0000125A                          2750mmm     PRINT_CHAR (A2)+,D3
0000125A                          2751mmm WAIT_FOR_READY_181                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
0000125A                 TRUE     2752mmm     IFEQ DEBUG
0000125A  1639 00C00003           2753mmm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
00001260  0803 0002               2754mmm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
00001264  67F4                    2755mmm         BEQ WAIT_FOR_READY_181                      ; NO SPACE, CHECK AGAIN
00001266  13DA 00C00007           2756mmm         MOVE.B (A2)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
0000126C                          2757mmm     ENDC
0000126C                          2758mmm 
0000126C                 FALSE    2759mmm     IFNE DEBUG
0000126C                          2760mmm     ENDC
0000126C                          2761mmm 
0000126C                          2762mmm     ENDM
0000126C  60E4                    2763mm     BRA LOOP_180
0000126E                          2764mm EXIT_180
0000126E                          2765mm     ENDM
0000126E                          2766m     ENDM
0000126E                          2767  
0000126E                          2768      WHILE D0 <GT> #0 DO
0000126E                          2769s _10000014
0000126E  B07C 0000               2770s     CMP.W   #0,D0
00001272  6F00 001C               2771s     BLE _10000015
00001276  5580                    2772          SUB.L #2,D0
00001278                          2773  
00001278  13D1 00E00001           2774          MOVE.B (A1),DISPLAY
0000127E                          2775m         PROGRAM (A1),(A0),D2
0000127E  3091                    2776m   MOVE.W (A1),(A0)                                      ; WRITE THE DATA
00001280                          2777m 
00001280                          2778m WAIT_FOR_COMPLETE_182
00001280  3410                    2779m         MOVE.W (A0),D2
00001282                          2780m 
00001282                          2781m         IF.W D2 <NE> (A1) THEN
00001282  B451                    2782ms     CMP.W   (A1),D2
00001284  6700 0004               2783ms     BEQ _0000000D
00001288  60F6                    2784m             BRA WAIT_FOR_COMPLETE_182
0000128A                          2785m         ENDI
0000128A                          2786ms _0000000D
0000128A                          2787m         ENDM
0000128A                          2788  
0000128A  5488                    2789          ADD.L #2,A0
0000128C  5489                    2790          ADD.L #2,A1
0000128E                          2791      ENDW
0000128E  60DE                    2792s     BRA _10000014
00001290                          2793s _10000015
00001290                          2794  
00001290  45FA 0868               2795      LEA SP(PC),A2
00001294                          2796m     PRINT_STR A2,D2
00001294                          2797m LOOP_183
00001294  0C12 0000               2798m     CMP.B #NULL,(A2)                                ; 0 -> DONE
00001298  6700 0016               2799m     BEQ EXIT_183
0000129C                          2800mm     PRINT_CHAR (A2)+,D2
0000129C                          2801mm WAIT_FOR_READY_184                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
0000129C                 TRUE     2802mm     IFEQ DEBUG
0000129C  1439 00C00003           2803mm         MOVE.B DUART_SRA,D2                         ; READ STATUS REGISTER
000012A2  0802 0002               2804mm         BTST #2,D2                                  ; CHECK FOR SPACE TO SEND
000012A6  67F4                    2805mm         BEQ WAIT_FOR_READY_184                      ; NO SPACE, CHECK AGAIN
000012A8  13DA 00C00007           2806mm         MOVE.B (A2)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
000012AE                          2807mm     ENDC
000012AE                          2808mm 
000012AE                 FALSE    2809mm     IFNE DEBUG
000012AE                          2810mm     ENDC
000012AE                          2811mm 
000012AE                          2812mm     ENDM
000012AE  60E4                    2813m     BRA LOOP_183
000012B0                          2814m EXIT_183
000012B0                          2815m     ENDM
000012B0                          2816m     PRINT_CRLF D2,A2
000012B0  45FA 087C               2817m     LEA CRLF(PC),A2
000012B4                          2818mm     PRINT_STR A2,D2
000012B4                          2819mm LOOP_186
000012B4  0C12 0000               2820mm     CMP.B #NULL,(A2)                                ; 0 -> DONE
000012B8  6700 0016               2821mm     BEQ EXIT_186
000012BC                          2822mmm     PRINT_CHAR (A2)+,D2
000012BC                          2823mmm WAIT_FOR_READY_187                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
000012BC                 TRUE     2824mmm     IFEQ DEBUG
000012BC  1439 00C00003           2825mmm         MOVE.B DUART_SRA,D2                         ; READ STATUS REGISTER
000012C2  0802 0002               2826mmm         BTST #2,D2                                  ; CHECK FOR SPACE TO SEND
000012C6  67F4                    2827mmm         BEQ WAIT_FOR_READY_187                      ; NO SPACE, CHECK AGAIN
000012C8  13DA 00C00007           2828mmm         MOVE.B (A2)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
000012CE                          2829mmm     ENDC
000012CE                          2830mmm 
000012CE                 FALSE    2831mmm     IFNE DEBUG
000012CE                          2832mmm     ENDC
000012CE                          2833mmm 
000012CE                          2834mmm     ENDM
000012CE  60E4                    2835mm     BRA LOOP_186
000012D0                          2836mm EXIT_186
000012D0                          2837mm     ENDM
000012D0                          2838m     ENDM
000012D0                          2839      
000012D0                          2840m     PROGRAM #$FFFC, $2, D2                          ; SP, should read this from above
000012D0  31FC FFFC 0002          2841m   MOVE.W #$FFFC,$2                                      ; WRITE THE DATA
000012D6                          2842m 
000012D6                          2843m WAIT_FOR_COMPLETE_188
000012D6  3438 0002               2844m         MOVE.W $2,D2
000012DA                          2845m 
000012DA                          2846m         IF.W D2 <NE> #$FFFC THEN
000012DA  B47C FFFC               2847ms     CMP.W   #$FFFC,D2
000012DE  6700 0004               2848ms     BEQ _0000000E
000012E2  60F2                    2849m             BRA WAIT_FOR_COMPLETE_188
000012E4                          2850m         ENDI
000012E4                          2851ms _0000000E
000012E4                          2852m         ENDM
000012E4                          2853m     PROGRAM #$002F, $0, D2          
000012E4  31FC 002F 0000          2854m   MOVE.W #$002F,$0                                      ; WRITE THE DATA
000012EA                          2855m 
000012EA                          2856m WAIT_FOR_COMPLETE_189
000012EA  3438 0000               2857m         MOVE.W $0,D2
000012EE                          2858m 
000012EE                          2859m         IF.W D2 <NE> #$002F THEN
000012EE  B47C 002F               2860ms     CMP.W   #$002F,D2
000012F2  6700 0004               2861ms     BEQ _0000000F
000012F6  60F2                    2862m             BRA WAIT_FOR_COMPLETE_189
000012F8                          2863m         ENDI
000012F8                          2864ms _0000000F
000012F8                          2865m         ENDM
000012F8                          2866  
000012F8  45FA 0822               2867      LEA VECTORS(PC),A2
000012FC                          2868m     PRINT_STR A2,D2
000012FC                          2869m LOOP_190
000012FC  0C12 0000               2870m     CMP.B #NULL,(A2)                                ; 0 -> DONE
00001300  6700 0016               2871m     BEQ EXIT_190
00001304                          2872mm     PRINT_CHAR (A2)+,D2
00001304                          2873mm WAIT_FOR_READY_191                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00001304                 TRUE     2874mm     IFEQ DEBUG
00001304  1439 00C00003           2875mm         MOVE.B DUART_SRA,D2                         ; READ STATUS REGISTER
0000130A  0802 0002               2876mm         BTST #2,D2                                  ; CHECK FOR SPACE TO SEND
0000130E  67F4                    2877mm         BEQ WAIT_FOR_READY_191                      ; NO SPACE, CHECK AGAIN
00001310  13DA 00C00007           2878mm         MOVE.B (A2)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00001316                          2879mm     ENDC
00001316                          2880mm 
00001316                 FALSE    2881mm     IFNE DEBUG
00001316                          2882mm     ENDC
00001316                          2883mm 
00001316                          2884mm     ENDM
00001316  60E4                    2885m     BRA LOOP_190
00001318                          2886m EXIT_190
00001318                          2887m     ENDM
00001318                          2888  
00001318                          2889      FOR A0 = #RESET TO #START-4 BY #4 DO
00001318  307C 0004               2890s     MOVE.W  #RESET,A0
0000131C  6000 00E8               2891s     BRA _2000000D
00001320                          2892s _2000000C
00001320                          2893  
00001320  2248                    2894          MOVE.L A0,A1
00001322  D3CC                    2895          ADD.L A4,A1
00001324                          2896              
00001324  2011                    2897          MOVE.L (A1),D0  
00001326  D081                    2898          ADD.L D1,D0
00001328  0480 00000400           2899          SUB.L #START,D0
0000132E                          2900m         PRINT_REG D0,D2,D3,D4,A3
0000132E  47FA 0804               2901m     LEA OX(PC),A3
00001332                          2902mm     PRINT_STR A3,D2
00001332                          2903mm LOOP_193
00001332  0C13 0000               2904mm     CMP.B #NULL,(A3)                                ; 0 -> DONE
00001336  6700 0016               2905mm     BEQ EXIT_193
0000133A                          2906mmm     PRINT_CHAR (A3)+,D2
0000133A                          2907mmm WAIT_FOR_READY_194                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
0000133A                 TRUE     2908mmm     IFEQ DEBUG
0000133A  1439 00C00003           2909mmm         MOVE.B DUART_SRA,D2                         ; READ STATUS REGISTER
00001340  0802 0002               2910mmm         BTST #2,D2                                  ; CHECK FOR SPACE TO SEND
00001344  67F4                    2911mmm         BEQ WAIT_FOR_READY_194                      ; NO SPACE, CHECK AGAIN
00001346  13DB 00C00007           2912mmm         MOVE.B (A3)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
0000134C                          2913mmm     ENDC
0000134C                          2914mmm 
0000134C                 FALSE    2915mmm     IFNE DEBUG
0000134C                          2916mmm     ENDC
0000134C                          2917mmm 
0000134C                          2918mmm     ENDM
0000134C  60E4                    2919mm     BRA LOOP_193
0000134E                          2920mm EXIT_193
0000134E                          2921mm     ENDM
0000134E  7807                    2922m     MOVE.L #7,D4                                    ; LOOP ROUND ALL 8 HEX CHARACTERS OF 4 BITS EACH
00001350                          2923m LOOP_192
00001350                          2924mm     BIN2HEX D0,D3,A3
00001350  47FA 075E               2925mm     LEA BIN2HEX_LUT(PC),A3                          ; LOAD THE LOOKUP TABLE
00001354  E998                    2926mm     ROL.L #4,D0                                     ; SHIFT THE TOP 4 BITS DOWN TO BOTTOM OF THE REGISTER THE AND MASK OFF EVERYTHING ELSE
00001356  1600                    2927mm     MOVE.B D0,D3
00001358  0283 0000000F           2928mm     ANDI.L #$F,D3
0000135E  1633 3000               2929mm     MOVE.B 0(A3,D3),D3                              ; USE THAT AS AN INDEX INTO THE LUT
00001362                          2930mm     ENDM
00001362                          2931mm     PRINT_CHAR D3,D2
00001362                          2932mm WAIT_FOR_READY_196                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00001362                 TRUE     2933mm     IFEQ DEBUG
00001362  1439 00C00003           2934mm         MOVE.B DUART_SRA,D2                         ; READ STATUS REGISTER
00001368  0802 0002               2935mm         BTST #2,D2                                  ; CHECK FOR SPACE TO SEND
0000136C  67F4                    2936mm         BEQ WAIT_FOR_READY_196                      ; NO SPACE, CHECK AGAIN
0000136E  13C3 00C00007           2937mm         MOVE.B D3,DUART_TXA                         ; SEND THE NEXT CHARACTER
00001374                          2938mm     ENDC
00001374                          2939mm 
00001374                 FALSE    2940mm     IFNE DEBUG
00001374                          2941mm     ENDC
00001374                          2942mm 
00001374                          2943mm     ENDM
00001374  57CC FFDA               2944m     DBEQ D4,LOOP_192
00001378                          2945m     ENDM
00001378                          2946  
00001378  47FA 07BD               2947          LEA TO(PC),A3
0000137C                          2948m         PRINT_STR A3,D3
0000137C                          2949m LOOP_197
0000137C  0C13 0000               2950m     CMP.B #NULL,(A3)                                ; 0 -> DONE
00001380  6700 0016               2951m     BEQ EXIT_197
00001384                          2952mm     PRINT_CHAR (A3)+,D3
00001384                          2953mm WAIT_FOR_READY_198                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00001384                 TRUE     2954mm     IFEQ DEBUG
00001384  1639 00C00003           2955mm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
0000138A  0803 0002               2956mm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
0000138E  67F4                    2957mm         BEQ WAIT_FOR_READY_198                      ; NO SPACE, CHECK AGAIN
00001390  13DB 00C00007           2958mm         MOVE.B (A3)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00001396                          2959mm     ENDC
00001396                          2960mm 
00001396                 FALSE    2961mm     IFNE DEBUG
00001396                          2962mm     ENDC
00001396                          2963mm 
00001396                          2964mm     ENDM
00001396  60E4                    2965m     BRA LOOP_197
00001398                          2966m EXIT_197
00001398                          2967m     ENDM
00001398                          2968  
00001398  2408                    2969          MOVE.L A0,D2
0000139A                          2970m         PRINT_REG D2,D3,D4,D5,A3
0000139A  47FA 0798               2971m     LEA OX(PC),A3
0000139E                          2972mm     PRINT_STR A3,D3
0000139E                          2973mm LOOP_200
0000139E  0C13 0000               2974mm     CMP.B #NULL,(A3)                                ; 0 -> DONE
000013A2  6700 0016               2975mm     BEQ EXIT_200
000013A6                          2976mmm     PRINT_CHAR (A3)+,D3
000013A6                          2977mmm WAIT_FOR_READY_201                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
000013A6                 TRUE     2978mmm     IFEQ DEBUG
000013A6  1639 00C00003           2979mmm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
000013AC  0803 0002               2980mmm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
000013B0  67F4                    2981mmm         BEQ WAIT_FOR_READY_201                      ; NO SPACE, CHECK AGAIN
000013B2  13DB 00C00007           2982mmm         MOVE.B (A3)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
000013B8                          2983mmm     ENDC
000013B8                          2984mmm 
000013B8                 FALSE    2985mmm     IFNE DEBUG
000013B8                          2986mmm     ENDC
000013B8                          2987mmm 
000013B8                          2988mmm     ENDM
000013B8  60E4                    2989mm     BRA LOOP_200
000013BA                          2990mm EXIT_200
000013BA                          2991mm     ENDM
000013BA  7A07                    2992m     MOVE.L #7,D5                                    ; LOOP ROUND ALL 8 HEX CHARACTERS OF 4 BITS EACH
000013BC                          2993m LOOP_199
000013BC                          2994mm     BIN2HEX D2,D4,A3
000013BC  47FA 06F2               2995mm     LEA BIN2HEX_LUT(PC),A3                          ; LOAD THE LOOKUP TABLE
000013C0  E99A                    2996mm     ROL.L #4,D2                                     ; SHIFT THE TOP 4 BITS DOWN TO BOTTOM OF THE REGISTER THE AND MASK OFF EVERYTHING ELSE
000013C2  1802                    2997mm     MOVE.B D2,D4
000013C4  0284 0000000F           2998mm     ANDI.L #$F,D4
000013CA  1833 4000               2999mm     MOVE.B 0(A3,D4),D4                              ; USE THAT AS AN INDEX INTO THE LUT
000013CE                          3000mm     ENDM
000013CE                          3001mm     PRINT_CHAR D4,D3
000013CE                          3002mm WAIT_FOR_READY_203                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
000013CE                 TRUE     3003mm     IFEQ DEBUG
000013CE  1639 00C00003           3004mm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
000013D4  0803 0002               3005mm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
000013D8  67F4                    3006mm         BEQ WAIT_FOR_READY_203                      ; NO SPACE, CHECK AGAIN
000013DA  13C4 00C00007           3007mm         MOVE.B D4,DUART_TXA                         ; SEND THE NEXT CHARACTER
000013E0                          3008mm     ENDC
000013E0                          3009mm 
000013E0                 FALSE    3010mm     IFNE DEBUG
000013E0                          3011mm     ENDC
000013E0                          3012mm 
000013E0                          3013mm     ENDM
000013E0  57CD FFDA               3014m     DBEQ D5,LOOP_199
000013E4                          3015m     ENDM
000013E4                          3016          
000013E4                          3017m         PRINT_CRLF D2,A3
000013E4  47FA 0748               3018m     LEA CRLF(PC),A3
000013E8                          3019mm     PRINT_STR A3,D2
000013E8                          3020mm LOOP_205
000013E8  0C13 0000               3021mm     CMP.B #NULL,(A3)                                ; 0 -> DONE
000013EC  6700 0016               3022mm     BEQ EXIT_205
000013F0                          3023mmm     PRINT_CHAR (A3)+,D2
000013F0                          3024mmm WAIT_FOR_READY_206                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
000013F0                 TRUE     3025mmm     IFEQ DEBUG
000013F0  1439 00C00003           3026mmm         MOVE.B DUART_SRA,D2                         ; READ STATUS REGISTER
000013F6  0802 0002               3027mmm         BTST #2,D2                                  ; CHECK FOR SPACE TO SEND
000013FA  67F4                    3028mmm         BEQ WAIT_FOR_READY_206                      ; NO SPACE, CHECK AGAIN
000013FC  13DB 00C00007           3029mmm         MOVE.B (A3)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00001402                          3030mmm     ENDC
00001402                          3031mmm 
00001402                 FALSE    3032mmm     IFNE DEBUG
00001402                          3033mmm     ENDC
00001402                          3034mmm 
00001402                          3035mmm     ENDM
00001402  60E4                    3036mm     BRA LOOP_205
00001404                          3037mm EXIT_205
00001404                          3038mm     ENDM
00001404                          3039m     ENDM
00001404                          3040          
00001404                          3041          ;PROGRAM_VECTOR D0,A0,D2
00001404                          3042      ENDF
00001404  5848                    3043s     ADD.W   #4,A0
00001406                          3044s _2000000D
00001406  B0FC 03FC               3045s     CMP.W   #START-4,A0
0000140A  6F00 FF14               3046s     BLE _2000000C
0000140E                          3047                                          
0000140E                          3048m     PROTECT
0000140E  31FC AAAA 2AAA          3049m     MOVE.W #$AAAA,$2AAA                             ; AND WRITE PROTECT
00001414  31FC 5555 1554          3050m     MOVE.W #$5555,$1554
0000141A  31FC A0A0 2AAA          3051m     MOVE.W #$A0A0,$2AAA
00001420                          3052m     ENDM
00001420                          3053  
00001420  6000 F1C8               3054      BRA MAIN_LOOP
00001424                          3055      
00001424                          3056  P
00001424  7000                    3057      MOVE.L #0,D0                                    ; D0 will be the data to write
00001426                          3058  
00001426                          3059      FOR D1 = #0 TO #3 DO                            ; read 2 bytes
00001426  323C 0000               3060s     MOVE.W  #0,D1
0000142A  6000 0046               3061s     BRA _2000000F
0000142E                          3062s _2000000E
0000142E  E988                    3063          LSL.L #4,D0                                 ; make what we have so far more significant
00001430                          3064m         WAIT_CHAR D2,D3                             ; next character -> D2
00001430                          3065m WAIT_FOR_READY_208                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00001430                 TRUE     3066m     IFEQ DEBUG
00001430  1639 00C00003           3067m         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
00001436  0803 0000               3068m         BTST #0,D3                                  ; CHECK FOR CHARACTER
0000143A  67F4                    3069m         BEQ WAIT_FOR_READY_208                      ; NOTHING, CHECK AGAIN
0000143C                          3070m     ENDC
0000143C                          3071m 
0000143C                          3072mm     READ_CHAR D2
0000143C                 TRUE     3073mm     IFEQ DEBUG
0000143C  1439 00C00007           3074mm         MOVE.B DUART_RXA,D2                         ; GOT A CHARACTER, READ IT
00001442                          3075mm     ENDC
00001442                 FALSE    3076mm     IFNE DEBUG
00001442                          3077mm     ENDC
00001442                          3078mm 
00001442  B43C 001B               3079mm     CMP.B #$1B,D2                                   ; CHECK FOR ESCAPE AND GO TO START
00001446  6700 EFB8               3080mm     BEQ START
0000144A                          3081mm     ENDM
0000144A                          3082m 
0000144A                 TRUE     3083m     IFEQ DEBUG
0000144A                          3084mm         PRINT_CHAR D2,D3                            ; ECHO IT BACK
0000144A                          3085mm WAIT_FOR_READY_210                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
0000144A                 TRUE     3086mm     IFEQ DEBUG
0000144A  1639 00C00003           3087mm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
00001450  0803 0002               3088mm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
00001454  67F4                    3089mm         BEQ WAIT_FOR_READY_210                      ; NO SPACE, CHECK AGAIN
00001456  13C2 00C00007           3090mm         MOVE.B D2,DUART_TXA                         ; SEND THE NEXT CHARACTER
0000145C                          3091mm     ENDC
0000145C                          3092mm 
0000145C                 FALSE    3093mm     IFNE DEBUG
0000145C                          3094mm     ENDC
0000145C                          3095mm 
0000145C                          3096mm     ENDM
0000145C                          3097m     ENDC
0000145C                          3098m     ENDM
0000145C                          3099m         HEX2BIN D2,D2,A0                            ; convert to binary -> D2
0000145C  41FA 0662               3100m     LEA HEX2BIN_LUT(PC),A0                          ; LOAD THE LOOKUP TABLE
00001460  0402 0030               3101m     SUB.B #'0',D2                                   ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
00001464  C4BC 000000FF           3102m     AND.L #$FF,D2                                   ; IGNORE THE TOP 3 BYTES
0000146A  1430 2000               3103m     MOVE.B 0(A0,D2),D2                              ; USE THAT AS AN INDEX INTO THE LUT   
0000146E                          3104m     ENDM
0000146E  8002                    3105          OR.B D2,D0
00001470                          3106      ENDF
00001470  5241                    3107s     ADD.W   #1,D1
00001472                          3108s _2000000F
00001472  B27C 0003               3109s     CMP.W   #3,D1
00001476  6FB6                    3110s     BLE _2000000E
00001478                          3111  
00001478                          3112m     PRINT_CRLF D2,A1
00001478  43FA 06B4               3113m     LEA CRLF(PC),A1
0000147C                          3114mm     PRINT_STR A1,D2
0000147C                          3115mm LOOP_213
0000147C  0C11 0000               3116mm     CMP.B #NULL,(A1)                                ; 0 -> DONE
00001480  6700 0016               3117mm     BEQ EXIT_213
00001484                          3118mmm     PRINT_CHAR (A1)+,D2
00001484                          3119mmm WAIT_FOR_READY_214                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00001484                 TRUE     3120mmm     IFEQ DEBUG
00001484  1439 00C00003           3121mmm         MOVE.B DUART_SRA,D2                         ; READ STATUS REGISTER
0000148A  0802 0002               3122mmm         BTST #2,D2                                  ; CHECK FOR SPACE TO SEND
0000148E  67F4                    3123mmm         BEQ WAIT_FOR_READY_214                      ; NO SPACE, CHECK AGAIN
00001490  13D9 00C00007           3124mmm         MOVE.B (A1)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00001496                          3125mmm     ENDC
00001496                          3126mmm 
00001496                 FALSE    3127mmm     IFNE DEBUG
00001496                          3128mmm     ENDC
00001496                          3129mmm 
00001496                          3130mmm     ENDM
00001496  60E4                    3131mm     BRA LOOP_213
00001498                          3132mm EXIT_213
00001498                          3133mm     ENDM
00001498                          3134m     ENDM
00001498                          3135  
00001498  2047                    3136      MOVE.L D7,A0                                    ; address accumulator -> target address register
0000149A  7E00                    3137      MOVE.L #0,D7                                    ; clear the now used address accumulator
0000149C                          3138  
0000149C                          3139m     UNPROTECT
0000149C  31FC AAAA 2AAA          3140m     MOVE.W #$AAAA,$2AAA                             ; REMOVE WRITE PROTECT
000014A2  4E71                    3141m     NOP
000014A4  31FC 5555 1554          3142m     MOVE.W #$5555,$1554
000014AA  4E71                    3143m     NOP
000014AC  31FC 8080 2AAA          3144m     MOVE.W #$8080,$2AAA
000014B2  4E71                    3145m     NOP
000014B4  31FC AAAA 2AAA          3146m     MOVE.W #$AAAA,$2AAA
000014BA  4E71                    3147m     NOP
000014BC  31FC 5555 1554          3148m     MOVE.W #$5555,$1554
000014C2  4E71                    3149m     NOP
000014C4  31FC 2020 2AAA          3150m     MOVE.W #$2020,$2AAA
000014CA                          3151m     ENDM
000014CA                          3152               
000014CA  45FA 060B               3153      LEA LOADING(PC),A2                              ; the prints seem to be important for timing to unprotect the EEPROM
000014CE                          3154m     PRINT_STR A2,D2
000014CE                          3155m LOOP_216
000014CE  0C12 0000               3156m     CMP.B #NULL,(A2)                                ; 0 -> DONE
000014D2  6700 0016               3157m     BEQ EXIT_216
000014D6                          3158mm     PRINT_CHAR (A2)+,D2
000014D6                          3159mm WAIT_FOR_READY_217                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
000014D6                 TRUE     3160mm     IFEQ DEBUG
000014D6  1439 00C00003           3161mm         MOVE.B DUART_SRA,D2                         ; READ STATUS REGISTER
000014DC  0802 0002               3162mm         BTST #2,D2                                  ; CHECK FOR SPACE TO SEND
000014E0  67F4                    3163mm         BEQ WAIT_FOR_READY_217                      ; NO SPACE, CHECK AGAIN
000014E2  13DA 00C00007           3164mm         MOVE.B (A2)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
000014E8                          3165mm     ENDC
000014E8                          3166mm 
000014E8                 FALSE    3167mm     IFNE DEBUG
000014E8                          3168mm     ENDC
000014E8                          3169mm 
000014E8                          3170mm     ENDM
000014E8  60E4                    3171m     BRA LOOP_216
000014EA                          3172m EXIT_216
000014EA                          3173m     ENDM
000014EA                          3174  
000014EA                          3175m     PRINT_REG D0,D3,D4,D5,A2
000014EA  45FA 0648               3176m     LEA OX(PC),A2
000014EE                          3177mm     PRINT_STR A2,D3
000014EE                          3178mm LOOP_219
000014EE  0C12 0000               3179mm     CMP.B #NULL,(A2)                                ; 0 -> DONE
000014F2  6700 0016               3180mm     BEQ EXIT_219
000014F6                          3181mmm     PRINT_CHAR (A2)+,D3
000014F6                          3182mmm WAIT_FOR_READY_220                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
000014F6                 TRUE     3183mmm     IFEQ DEBUG
000014F6  1639 00C00003           3184mmm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
000014FC  0803 0002               3185mmm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
00001500  67F4                    3186mmm         BEQ WAIT_FOR_READY_220                      ; NO SPACE, CHECK AGAIN
00001502  13DA 00C00007           3187mmm         MOVE.B (A2)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00001508                          3188mmm     ENDC
00001508                          3189mmm 
00001508                 FALSE    3190mmm     IFNE DEBUG
00001508                          3191mmm     ENDC
00001508                          3192mmm 
00001508                          3193mmm     ENDM
00001508  60E4                    3194mm     BRA LOOP_219
0000150A                          3195mm EXIT_219
0000150A                          3196mm     ENDM
0000150A  7A07                    3197m     MOVE.L #7,D5                                    ; LOOP ROUND ALL 8 HEX CHARACTERS OF 4 BITS EACH
0000150C                          3198m LOOP_218
0000150C                          3199mm     BIN2HEX D0,D4,A2
0000150C  45FA 05A2               3200mm     LEA BIN2HEX_LUT(PC),A2                          ; LOAD THE LOOKUP TABLE
00001510  E998                    3201mm     ROL.L #4,D0                                     ; SHIFT THE TOP 4 BITS DOWN TO BOTTOM OF THE REGISTER THE AND MASK OFF EVERYTHING ELSE
00001512  1800                    3202mm     MOVE.B D0,D4
00001514  0284 0000000F           3203mm     ANDI.L #$F,D4
0000151A  1832 4000               3204mm     MOVE.B 0(A2,D4),D4                              ; USE THAT AS AN INDEX INTO THE LUT
0000151E                          3205mm     ENDM
0000151E                          3206mm     PRINT_CHAR D4,D3
0000151E                          3207mm WAIT_FOR_READY_222                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
0000151E                 TRUE     3208mm     IFEQ DEBUG
0000151E  1639 00C00003           3209mm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
00001524  0803 0002               3210mm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
00001528  67F4                    3211mm         BEQ WAIT_FOR_READY_222                      ; NO SPACE, CHECK AGAIN
0000152A  13C4 00C00007           3212mm         MOVE.B D4,DUART_TXA                         ; SEND THE NEXT CHARACTER
00001530                          3213mm     ENDC
00001530                          3214mm 
00001530                 FALSE    3215mm     IFNE DEBUG
00001530                          3216mm     ENDC
00001530                          3217mm 
00001530                          3218mm     ENDM
00001530  57CD FFDA               3219m     DBEQ D5,LOOP_218
00001534                          3220m     ENDM
00001534                          3221  
00001534  45FA 0601               3222      LEA TO(PC),A2
00001538                          3223m     PRINT_STR A2,D3
00001538                          3224m LOOP_223
00001538  0C12 0000               3225m     CMP.B #NULL,(A2)                                ; 0 -> DONE
0000153C  6700 0016               3226m     BEQ EXIT_223
00001540                          3227mm     PRINT_CHAR (A2)+,D3
00001540                          3228mm WAIT_FOR_READY_224                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00001540                 TRUE     3229mm     IFEQ DEBUG
00001540  1639 00C00003           3230mm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
00001546  0803 0002               3231mm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
0000154A  67F4                    3232mm         BEQ WAIT_FOR_READY_224                      ; NO SPACE, CHECK AGAIN
0000154C  13DA 00C00007           3233mm         MOVE.B (A2)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00001552                          3234mm     ENDC
00001552                          3235mm 
00001552                 FALSE    3236mm     IFNE DEBUG
00001552                          3237mm     ENDC
00001552                          3238mm 
00001552                          3239mm     ENDM
00001552  60E4                    3240m     BRA LOOP_223
00001554                          3241m EXIT_223
00001554                          3242m     ENDM
00001554                          3243  
00001554  2408                    3244      MOVE.L A0,D2
00001556                          3245m     PRINT_REG D2,D3,D4,D5,A2
00001556  45FA 05DC               3246m     LEA OX(PC),A2
0000155A                          3247mm     PRINT_STR A2,D3
0000155A                          3248mm LOOP_226
0000155A  0C12 0000               3249mm     CMP.B #NULL,(A2)                                ; 0 -> DONE
0000155E  6700 0016               3250mm     BEQ EXIT_226
00001562                          3251mmm     PRINT_CHAR (A2)+,D3
00001562                          3252mmm WAIT_FOR_READY_227                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00001562                 TRUE     3253mmm     IFEQ DEBUG
00001562  1639 00C00003           3254mmm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
00001568  0803 0002               3255mmm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
0000156C  67F4                    3256mmm         BEQ WAIT_FOR_READY_227                      ; NO SPACE, CHECK AGAIN
0000156E  13DA 00C00007           3257mmm         MOVE.B (A2)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00001574                          3258mmm     ENDC
00001574                          3259mmm 
00001574                 FALSE    3260mmm     IFNE DEBUG
00001574                          3261mmm     ENDC
00001574                          3262mmm 
00001574                          3263mmm     ENDM
00001574  60E4                    3264mm     BRA LOOP_226
00001576                          3265mm EXIT_226
00001576                          3266mm     ENDM
00001576  7A07                    3267m     MOVE.L #7,D5                                    ; LOOP ROUND ALL 8 HEX CHARACTERS OF 4 BITS EACH
00001578                          3268m LOOP_225
00001578                          3269mm     BIN2HEX D2,D4,A2
00001578  45FA 0536               3270mm     LEA BIN2HEX_LUT(PC),A2                          ; LOAD THE LOOKUP TABLE
0000157C  E99A                    3271mm     ROL.L #4,D2                                     ; SHIFT THE TOP 4 BITS DOWN TO BOTTOM OF THE REGISTER THE AND MASK OFF EVERYTHING ELSE
0000157E  1802                    3272mm     MOVE.B D2,D4
00001580  0284 0000000F           3273mm     ANDI.L #$F,D4
00001586  1832 4000               3274mm     MOVE.B 0(A2,D4),D4                              ; USE THAT AS AN INDEX INTO THE LUT
0000158A                          3275mm     ENDM
0000158A                          3276mm     PRINT_CHAR D4,D3
0000158A                          3277mm WAIT_FOR_READY_229                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
0000158A                 TRUE     3278mm     IFEQ DEBUG
0000158A  1639 00C00003           3279mm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
00001590  0803 0002               3280mm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
00001594  67F4                    3281mm         BEQ WAIT_FOR_READY_229                      ; NO SPACE, CHECK AGAIN
00001596  13C4 00C00007           3282mm         MOVE.B D4,DUART_TXA                         ; SEND THE NEXT CHARACTER
0000159C                          3283mm     ENDC
0000159C                          3284mm 
0000159C                 FALSE    3285mm     IFNE DEBUG
0000159C                          3286mm     ENDC
0000159C                          3287mm 
0000159C                          3288mm     ENDM
0000159C  57CD FFDA               3289m     DBEQ D5,LOOP_225
000015A0                          3290m     ENDM
000015A0                          3291  
000015A0                          3292m     PRINT_CRLF D3,A2
000015A0  45FA 058C               3293m     LEA CRLF(PC),A2
000015A4                          3294mm     PRINT_STR A2,D3
000015A4                          3295mm LOOP_231
000015A4  0C12 0000               3296mm     CMP.B #NULL,(A2)                                ; 0 -> DONE
000015A8  6700 0016               3297mm     BEQ EXIT_231
000015AC                          3298mmm     PRINT_CHAR (A2)+,D3
000015AC                          3299mmm WAIT_FOR_READY_232                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
000015AC                 TRUE     3300mmm     IFEQ DEBUG
000015AC  1639 00C00003           3301mmm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
000015B2  0803 0002               3302mmm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
000015B6  67F4                    3303mmm         BEQ WAIT_FOR_READY_232                      ; NO SPACE, CHECK AGAIN
000015B8  13DA 00C00007           3304mmm         MOVE.B (A2)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
000015BE                          3305mmm     ENDC
000015BE                          3306mmm 
000015BE                 FALSE    3307mmm     IFNE DEBUG
000015BE                          3308mmm     ENDC
000015BE                          3309mmm 
000015BE                          3310mmm     ENDM
000015BE  60E4                    3311mm     BRA LOOP_231
000015C0                          3312mm EXIT_231
000015C0                          3313mm     ENDM
000015C0                          3314m     ENDM
000015C0                          3315  
000015C0                          3316m     PROGRAM D0,(A0),D2
000015C0  3080                    3317m   MOVE.W D0,(A0)                                        ; WRITE THE DATA
000015C2                          3318m 
000015C2                          3319m WAIT_FOR_COMPLETE_233
000015C2  3410                    3320m         MOVE.W (A0),D2
000015C4                          3321m 
000015C4                          3322m         IF.W D2 <NE> D0 THEN
000015C4  B440                    3323ms     CMP.W   D0,D2
000015C6  6700 0004               3324ms     BEQ _00000010
000015CA  60F6                    3325m             BRA WAIT_FOR_COMPLETE_233
000015CC                          3326m         ENDI
000015CC                          3327ms _00000010
000015CC                          3328m         ENDM
000015CC                          3329  
000015CC                          3330m     PROTECT
000015CC  31FC AAAA 2AAA          3331m     MOVE.W #$AAAA,$2AAA                             ; AND WRITE PROTECT
000015D2  31FC 5555 1554          3332m     MOVE.W #$5555,$1554
000015D8  31FC A0A0 2AAA          3333m     MOVE.W #$A0A0,$2AAA
000015DE                          3334m     ENDM
000015DE                          3335  
000015DE  6000 F00A               3336      BRA MAIN_LOOP
000015E2                          3337      
000015E2                          3338  M
000015E2  7000                    3339      MOVE.L #0,D0                                        ; D0 will be the length to read            
000015E4  7200                    3340      MOVE.L #0,D1                                        ; D1 will be the address to read 
000015E6                          3341  
000015E6                          3342      FOR D2 = #0 TO #7 DO                                ; read 4 bytes, we'll split into 2 byte address (MS) and 2 byte length (LS)
000015E6  343C 0000               3343s     MOVE.W  #0,D2
000015EA  6000 0046               3344s     BRA _20000011
000015EE                          3345s _20000010
000015EE  E989                    3346          LSL.L #4,D1                                     ; make what we have so far more significant
000015F0                          3347m         WAIT_CHAR D3,D4                                 ; next character -> D2
000015F0                          3348m WAIT_FOR_READY_235                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
000015F0                 TRUE     3349m     IFEQ DEBUG
000015F0  1839 00C00003           3350m         MOVE.B DUART_SRA,D4                         ; READ STATUS REGISTER
000015F6  0804 0000               3351m         BTST #0,D4                                  ; CHECK FOR CHARACTER
000015FA  67F4                    3352m         BEQ WAIT_FOR_READY_235                      ; NOTHING, CHECK AGAIN
000015FC                          3353m     ENDC
000015FC                          3354m 
000015FC                          3355mm     READ_CHAR D3
000015FC                 TRUE     3356mm     IFEQ DEBUG
000015FC  1639 00C00007           3357mm         MOVE.B DUART_RXA,D3                         ; GOT A CHARACTER, READ IT
00001602                          3358mm     ENDC
00001602                 FALSE    3359mm     IFNE DEBUG
00001602                          3360mm     ENDC
00001602                          3361mm 
00001602  B63C 001B               3362mm     CMP.B #$1B,D3                                   ; CHECK FOR ESCAPE AND GO TO START
00001606  6700 EDF8               3363mm     BEQ START
0000160A                          3364mm     ENDM
0000160A                          3365m 
0000160A                 TRUE     3366m     IFEQ DEBUG
0000160A                          3367mm         PRINT_CHAR D3,D4                            ; ECHO IT BACK
0000160A                          3368mm WAIT_FOR_READY_237                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
0000160A                 TRUE     3369mm     IFEQ DEBUG
0000160A  1839 00C00003           3370mm         MOVE.B DUART_SRA,D4                         ; READ STATUS REGISTER
00001610  0804 0002               3371mm         BTST #2,D4                                  ; CHECK FOR SPACE TO SEND
00001614  67F4                    3372mm         BEQ WAIT_FOR_READY_237                      ; NO SPACE, CHECK AGAIN
00001616  13C3 00C00007           3373mm         MOVE.B D3,DUART_TXA                         ; SEND THE NEXT CHARACTER
0000161C                          3374mm     ENDC
0000161C                          3375mm 
0000161C                 FALSE    3376mm     IFNE DEBUG
0000161C                          3377mm     ENDC
0000161C                          3378mm 
0000161C                          3379mm     ENDM
0000161C                          3380m     ENDC
0000161C                          3381m     ENDM
0000161C                          3382m         HEX2BIN D3,D3,A0                                ; convert to binary -> D2
0000161C  41FA 04A2               3383m     LEA HEX2BIN_LUT(PC),A0                          ; LOAD THE LOOKUP TABLE
00001620  0403 0030               3384m     SUB.B #'0',D3                                   ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
00001624  C6BC 000000FF           3385m     AND.L #$FF,D3                                   ; IGNORE THE TOP 3 BYTES
0000162A  1630 3000               3386m     MOVE.B 0(A0,D3),D3                              ; USE THAT AS AN INDEX INTO THE LUT   
0000162E                          3387m     ENDM
0000162E  8203                    3388          OR.B D3,D1
00001630                          3389      ENDF
00001630  5242                    3390s     ADD.W   #1,D2
00001632                          3391s _20000011
00001632  B47C 0007               3392s     CMP.W   #7,D2
00001636  6FB6                    3393s     BLE _20000010
00001638                          3394m     PRINT_CRLF D2,A1
00001638  43FA 04F4               3395m     LEA CRLF(PC),A1
0000163C                          3396mm     PRINT_STR A1,D2
0000163C                          3397mm LOOP_240
0000163C  0C11 0000               3398mm     CMP.B #NULL,(A1)                                ; 0 -> DONE
00001640  6700 0016               3399mm     BEQ EXIT_240
00001644                          3400mmm     PRINT_CHAR (A1)+,D2
00001644                          3401mmm WAIT_FOR_READY_241                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00001644                 TRUE     3402mmm     IFEQ DEBUG
00001644  1439 00C00003           3403mmm         MOVE.B DUART_SRA,D2                         ; READ STATUS REGISTER
0000164A  0802 0002               3404mmm         BTST #2,D2                                  ; CHECK FOR SPACE TO SEND
0000164E  67F4                    3405mmm         BEQ WAIT_FOR_READY_241                      ; NO SPACE, CHECK AGAIN
00001650  13D9 00C00007           3406mmm         MOVE.B (A1)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00001656                          3407mmm     ENDC
00001656                          3408mmm 
00001656                 FALSE    3409mmm     IFNE DEBUG
00001656                          3410mmm     ENDC
00001656                          3411mmm 
00001656                          3412mmm     ENDM
00001656  60E4                    3413mm     BRA LOOP_240
00001658                          3414mm EXIT_240
00001658                          3415mm     ENDM
00001658                          3416m     ENDM
00001658                          3417  
00001658  3001                    3418      MOVE.W D1,D0                                        ; extract the LSword for the length
0000165A  E089                    3419      LSR.L #8,D1                                         ; extract the MSword for the address
0000165C  E089                    3420      LSR.L #8,D1
0000165E                          3421  
0000165E  2241                    3422      MOVE.L D1,A1
00001660                          3423      
00001660  2047                    3424      MOVE.L D7,A0                                        ; address accumulator -> target address register
00001662                          3425      ;MOVE.L #0,D7                                       ; we're not going to clear it, so we can do go
00001662                          3426  
00001662                          3427      WHILE D0 <GT> #0 DO
00001662                          3428s _10000016
00001662  B07C 0000               3429s     CMP.W   #0,D0
00001666  6F00 000E               3430s     BLE _10000017
0000166A  5580                    3431          SUB.L #2,D0
0000166C                          3432  
0000166C  13D1 00E00001           3433          MOVE.B (A1),DISPLAY
00001672  30D9                    3434          MOVE.W (A1)+,(A0)+
00001674                          3435      ENDW
00001674  60EC                    3436s     BRA _10000016
00001676                          3437s _10000017
00001676                          3438      
00001676  6000 EF72               3439      BRA MAIN_LOOP
0000167A                          3440  
0000167A                          3441  X
0000167A  45FA 04C5               3442      LEA STATUS_REGISTER(PC),A2
0000167E                          3443m     PRINT_STR A2,D3
0000167E                          3444m LOOP_242
0000167E  0C12 0000               3445m     CMP.B #NULL,(A2)                                ; 0 -> DONE
00001682  6700 0016               3446m     BEQ EXIT_242
00001686                          3447mm     PRINT_CHAR (A2)+,D3
00001686                          3448mm WAIT_FOR_READY_243                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00001686                 TRUE     3449mm     IFEQ DEBUG
00001686  1639 00C00003           3450mm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
0000168C  0803 0002               3451mm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
00001690  67F4                    3452mm         BEQ WAIT_FOR_READY_243                      ; NO SPACE, CHECK AGAIN
00001692  13DA 00C00007           3453mm         MOVE.B (A2)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00001698                          3454mm     ENDC
00001698                          3455mm 
00001698                 FALSE    3456mm     IFNE DEBUG
00001698                          3457mm     ENDC
00001698                          3458mm 
00001698                          3459mm     ENDM
00001698  60E4                    3460m     BRA LOOP_242
0000169A                          3461m EXIT_242
0000169A                          3462m     ENDM
0000169A                          3463  
0000169A  40C0                    3464      MOVE SR,D0
0000169C                          3465m     PRINT_REG D0,D3,D4,D5,A2
0000169C  45FA 0496               3466m     LEA OX(PC),A2
000016A0                          3467mm     PRINT_STR A2,D3
000016A0                          3468mm LOOP_245
000016A0  0C12 0000               3469mm     CMP.B #NULL,(A2)                                ; 0 -> DONE
000016A4  6700 0016               3470mm     BEQ EXIT_245
000016A8                          3471mmm     PRINT_CHAR (A2)+,D3
000016A8                          3472mmm WAIT_FOR_READY_246                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
000016A8                 TRUE     3473mmm     IFEQ DEBUG
000016A8  1639 00C00003           3474mmm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
000016AE  0803 0002               3475mmm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
000016B2  67F4                    3476mmm         BEQ WAIT_FOR_READY_246                      ; NO SPACE, CHECK AGAIN
000016B4  13DA 00C00007           3477mmm         MOVE.B (A2)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
000016BA                          3478mmm     ENDC
000016BA                          3479mmm 
000016BA                 FALSE    3480mmm     IFNE DEBUG
000016BA                          3481mmm     ENDC
000016BA                          3482mmm 
000016BA                          3483mmm     ENDM
000016BA  60E4                    3484mm     BRA LOOP_245
000016BC                          3485mm EXIT_245
000016BC                          3486mm     ENDM
000016BC  7A07                    3487m     MOVE.L #7,D5                                    ; LOOP ROUND ALL 8 HEX CHARACTERS OF 4 BITS EACH
000016BE                          3488m LOOP_244
000016BE                          3489mm     BIN2HEX D0,D4,A2
000016BE  45FA 03F0               3490mm     LEA BIN2HEX_LUT(PC),A2                          ; LOAD THE LOOKUP TABLE
000016C2  E998                    3491mm     ROL.L #4,D0                                     ; SHIFT THE TOP 4 BITS DOWN TO BOTTOM OF THE REGISTER THE AND MASK OFF EVERYTHING ELSE
000016C4  1800                    3492mm     MOVE.B D0,D4
000016C6  0284 0000000F           3493mm     ANDI.L #$F,D4
000016CC  1832 4000               3494mm     MOVE.B 0(A2,D4),D4                              ; USE THAT AS AN INDEX INTO THE LUT
000016D0                          3495mm     ENDM
000016D0                          3496mm     PRINT_CHAR D4,D3
000016D0                          3497mm WAIT_FOR_READY_248                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
000016D0                 TRUE     3498mm     IFEQ DEBUG
000016D0  1639 00C00003           3499mm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
000016D6  0803 0002               3500mm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
000016DA  67F4                    3501mm         BEQ WAIT_FOR_READY_248                      ; NO SPACE, CHECK AGAIN
000016DC  13C4 00C00007           3502mm         MOVE.B D4,DUART_TXA                         ; SEND THE NEXT CHARACTER
000016E2                          3503mm     ENDC
000016E2                          3504mm 
000016E2                 FALSE    3505mm     IFNE DEBUG
000016E2                          3506mm     ENDC
000016E2                          3507mm 
000016E2                          3508mm     ENDM
000016E2  57CD FFDA               3509m     DBEQ D5,LOOP_244
000016E6                          3510m     ENDM
000016E6                          3511m     PRINT_CRLF D3,A2
000016E6  45FA 0446               3512m     LEA CRLF(PC),A2
000016EA                          3513mm     PRINT_STR A2,D3
000016EA                          3514mm LOOP_250
000016EA  0C12 0000               3515mm     CMP.B #NULL,(A2)                                ; 0 -> DONE
000016EE  6700 0016               3516mm     BEQ EXIT_250
000016F2                          3517mmm     PRINT_CHAR (A2)+,D3
000016F2                          3518mmm WAIT_FOR_READY_251                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
000016F2                 TRUE     3519mmm     IFEQ DEBUG
000016F2  1639 00C00003           3520mmm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
000016F8  0803 0002               3521mmm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
000016FC  67F4                    3522mmm         BEQ WAIT_FOR_READY_251                      ; NO SPACE, CHECK AGAIN
000016FE  13DA 00C00007           3523mmm         MOVE.B (A2)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00001704                          3524mmm     ENDC
00001704                          3525mmm 
00001704                 FALSE    3526mmm     IFNE DEBUG
00001704                          3527mmm     ENDC
00001704                          3528mmm 
00001704                          3529mmm     ENDM
00001704  60E4                    3530mm     BRA LOOP_250
00001706                          3531mm EXIT_250
00001706                          3532mm     ENDM
00001706                          3533m     ENDM
00001706                          3534  
00001706  45FA 0434               3535      LEA STACK_POINTER(PC),A2
0000170A                          3536m     PRINT_STR A2,D3
0000170A                          3537m LOOP_252
0000170A  0C12 0000               3538m     CMP.B #NULL,(A2)                                ; 0 -> DONE
0000170E  6700 0016               3539m     BEQ EXIT_252
00001712                          3540mm     PRINT_CHAR (A2)+,D3
00001712                          3541mm WAIT_FOR_READY_253                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00001712                 TRUE     3542mm     IFEQ DEBUG
00001712  1639 00C00003           3543mm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
00001718  0803 0002               3544mm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
0000171C  67F4                    3545mm         BEQ WAIT_FOR_READY_253                      ; NO SPACE, CHECK AGAIN
0000171E  13DA 00C00007           3546mm         MOVE.B (A2)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00001724                          3547mm     ENDC
00001724                          3548mm 
00001724                 FALSE    3549mm     IFNE DEBUG
00001724                          3550mm     ENDC
00001724                          3551mm 
00001724                          3552mm     ENDM
00001724  60E4                    3553m     BRA LOOP_252
00001726                          3554m EXIT_252
00001726                          3555m     ENDM
00001726                          3556  
00001726  200F                    3557      MOVE.L SP,D0
00001728                          3558m     PRINT_REG D0,D3,D4,D5,A2
00001728  45FA 040A               3559m     LEA OX(PC),A2
0000172C                          3560mm     PRINT_STR A2,D3
0000172C                          3561mm LOOP_255
0000172C  0C12 0000               3562mm     CMP.B #NULL,(A2)                                ; 0 -> DONE
00001730  6700 0016               3563mm     BEQ EXIT_255
00001734                          3564mmm     PRINT_CHAR (A2)+,D3
00001734                          3565mmm WAIT_FOR_READY_256                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00001734                 TRUE     3566mmm     IFEQ DEBUG
00001734  1639 00C00003           3567mmm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
0000173A  0803 0002               3568mmm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
0000173E  67F4                    3569mmm         BEQ WAIT_FOR_READY_256                      ; NO SPACE, CHECK AGAIN
00001740  13DA 00C00007           3570mmm         MOVE.B (A2)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00001746                          3571mmm     ENDC
00001746                          3572mmm 
00001746                 FALSE    3573mmm     IFNE DEBUG
00001746                          3574mmm     ENDC
00001746                          3575mmm 
00001746                          3576mmm     ENDM
00001746  60E4                    3577mm     BRA LOOP_255
00001748                          3578mm EXIT_255
00001748                          3579mm     ENDM
00001748  7A07                    3580m     MOVE.L #7,D5                                    ; LOOP ROUND ALL 8 HEX CHARACTERS OF 4 BITS EACH
0000174A                          3581m LOOP_254
0000174A                          3582mm     BIN2HEX D0,D4,A2
0000174A  45FA 0364               3583mm     LEA BIN2HEX_LUT(PC),A2                          ; LOAD THE LOOKUP TABLE
0000174E  E998                    3584mm     ROL.L #4,D0                                     ; SHIFT THE TOP 4 BITS DOWN TO BOTTOM OF THE REGISTER THE AND MASK OFF EVERYTHING ELSE
00001750  1800                    3585mm     MOVE.B D0,D4
00001752  0284 0000000F           3586mm     ANDI.L #$F,D4
00001758  1832 4000               3587mm     MOVE.B 0(A2,D4),D4                              ; USE THAT AS AN INDEX INTO THE LUT
0000175C                          3588mm     ENDM
0000175C                          3589mm     PRINT_CHAR D4,D3
0000175C                          3590mm WAIT_FOR_READY_258                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
0000175C                 TRUE     3591mm     IFEQ DEBUG
0000175C  1639 00C00003           3592mm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
00001762  0803 0002               3593mm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
00001766  67F4                    3594mm         BEQ WAIT_FOR_READY_258                      ; NO SPACE, CHECK AGAIN
00001768  13C4 00C00007           3595mm         MOVE.B D4,DUART_TXA                         ; SEND THE NEXT CHARACTER
0000176E                          3596mm     ENDC
0000176E                          3597mm 
0000176E                 FALSE    3598mm     IFNE DEBUG
0000176E                          3599mm     ENDC
0000176E                          3600mm 
0000176E                          3601mm     ENDM
0000176E  57CD FFDA               3602m     DBEQ D5,LOOP_254
00001772                          3603m     ENDM
00001772                          3604m     PRINT_CRLF D3,A2
00001772  45FA 03BA               3605m     LEA CRLF(PC),A2
00001776                          3606mm     PRINT_STR A2,D3
00001776                          3607mm LOOP_260
00001776  0C12 0000               3608mm     CMP.B #NULL,(A2)                                ; 0 -> DONE
0000177A  6700 0016               3609mm     BEQ EXIT_260
0000177E                          3610mmm     PRINT_CHAR (A2)+,D3
0000177E                          3611mmm WAIT_FOR_READY_261                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
0000177E                 TRUE     3612mmm     IFEQ DEBUG
0000177E  1639 00C00003           3613mmm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
00001784  0803 0002               3614mmm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
00001788  67F4                    3615mmm         BEQ WAIT_FOR_READY_261                      ; NO SPACE, CHECK AGAIN
0000178A  13DA 00C00007           3616mmm         MOVE.B (A2)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00001790                          3617mmm     ENDC
00001790                          3618mmm 
00001790                 FALSE    3619mmm     IFNE DEBUG
00001790                          3620mmm     ENDC
00001790                          3621mmm 
00001790                          3622mmm     ENDM
00001790  60E4                    3623mm     BRA LOOP_260
00001792                          3624mm EXIT_260
00001792                          3625mm     ENDM
00001792                          3626m     ENDM
00001792                          3627  
00001792  6000 EE56               3628      BRA MAIN_LOOP
00001796                          3629  
00001796                          3630          
00001796                          3631  HEX_DIGIT
00001796  E98F                    3632      LSL.L #4,D7                                         ; add the next digit in the next 4 bits
00001798                          3633m     HEX2BIN D2,D2,A0
00001798  41FA 0326               3634m     LEA HEX2BIN_LUT(PC),A0                          ; LOAD THE LOOKUP TABLE
0000179C  0402 0030               3635m     SUB.B #'0',D2                                   ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
000017A0  C4BC 000000FF           3636m     AND.L #$FF,D2                                   ; IGNORE THE TOP 3 BYTES
000017A6  1430 2000               3637m     MOVE.B 0(A0,D2),D2                              ; USE THAT AS AN INDEX INTO THE LUT   
000017AA                          3638m     ENDM
000017AA  8E02                    3639      OR.B D2,D7  
000017AC  6000 EE5C               3640      BRA GET_INPUT
000017B0                          3641  
000017B0  FFFF FFFF               3642      SIMHALT                                             ; halt simulator
000017B4                          3643  
000017B4                          3644  ; exceptions
000017B4                          3645  BUS_ERROR_HANDLER
000017B4                          3646  
000017B4  41FA 0390               3647      LEA BUS_ERROR(PC),A0
000017B8                          3648m     PRINT_STR A0,D1
000017B8                          3649m LOOP_263
000017B8  0C10 0000               3650m     CMP.B #NULL,(A0)                                ; 0 -> DONE
000017BC  6700 0016               3651m     BEQ EXIT_263
000017C0                          3652mm     PRINT_CHAR (A0)+,D1
000017C0                          3653mm WAIT_FOR_READY_264                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
000017C0                 TRUE     3654mm     IFEQ DEBUG
000017C0  1239 00C00003           3655mm         MOVE.B DUART_SRA,D1                         ; READ STATUS REGISTER
000017C6  0801 0002               3656mm         BTST #2,D1                                  ; CHECK FOR SPACE TO SEND
000017CA  67F4                    3657mm         BEQ WAIT_FOR_READY_264                      ; NO SPACE, CHECK AGAIN
000017CC  13D8 00C00007           3658mm         MOVE.B (A0)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
000017D2                          3659mm     ENDC
000017D2                          3660mm 
000017D2                 FALSE    3661mm     IFNE DEBUG
000017D2                          3662mm     ENDC
000017D2                          3663mm 
000017D2                          3664mm     ENDM
000017D2  60E4                    3665m     BRA LOOP_263
000017D4                          3666m EXIT_263
000017D4                          3667m     ENDM
000017D4                          3668  
000017D4  7000                    3669      MOVE.L #0,D0
000017D6  3017                    3670      MOVE.W (SP),D0
000017D8                          3671  
000017D8  0800 0004               3672      BTST #4,D0
000017DC  6700 0026               3673      BEQ WRITE
000017E0                          3674      
000017E0  41FA 0379               3675      LEA READING(PC),A0
000017E4                          3676m     PRINT_STR A0,D1
000017E4                          3677m LOOP_265
000017E4  0C10 0000               3678m     CMP.B #NULL,(A0)                                ; 0 -> DONE
000017E8  6700 0016               3679m     BEQ EXIT_265
000017EC                          3680mm     PRINT_CHAR (A0)+,D1
000017EC                          3681mm WAIT_FOR_READY_266                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
000017EC                 TRUE     3682mm     IFEQ DEBUG
000017EC  1239 00C00003           3683mm         MOVE.B DUART_SRA,D1                         ; READ STATUS REGISTER
000017F2  0801 0002               3684mm         BTST #2,D1                                  ; CHECK FOR SPACE TO SEND
000017F6  67F4                    3685mm         BEQ WAIT_FOR_READY_266                      ; NO SPACE, CHECK AGAIN
000017F8  13D8 00C00007           3686mm         MOVE.B (A0)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
000017FE                          3687mm     ENDC
000017FE                          3688mm 
000017FE                 FALSE    3689mm     IFNE DEBUG
000017FE                          3690mm     ENDC
000017FE                          3691mm 
000017FE                          3692mm     ENDM
000017FE  60E4                    3693m     BRA LOOP_265
00001800                          3694m EXIT_265
00001800                          3695m     ENDM
00001800                          3696  
00001800  6000 0022               3697      BRA CONTINUE    
00001804                          3698  WRITE
00001804  41FA 035E               3699      LEA WRITING(PC),A0
00001808                          3700m     PRINT_STR A0,D1
00001808                          3701m LOOP_267
00001808  0C10 0000               3702m     CMP.B #NULL,(A0)                                ; 0 -> DONE
0000180C  6700 0016               3703m     BEQ EXIT_267
00001810                          3704mm     PRINT_CHAR (A0)+,D1
00001810                          3705mm WAIT_FOR_READY_268                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00001810                 TRUE     3706mm     IFEQ DEBUG
00001810  1239 00C00003           3707mm         MOVE.B DUART_SRA,D1                         ; READ STATUS REGISTER
00001816  0801 0002               3708mm         BTST #2,D1                                  ; CHECK FOR SPACE TO SEND
0000181A  67F4                    3709mm         BEQ WAIT_FOR_READY_268                      ; NO SPACE, CHECK AGAIN
0000181C  13D8 00C00007           3710mm         MOVE.B (A0)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00001822                          3711mm     ENDC
00001822                          3712mm 
00001822                 FALSE    3713mm     IFNE DEBUG
00001822                          3714mm     ENDC
00001822                          3715mm 
00001822                          3716mm     ENDM
00001822  60E4                    3717m     BRA LOOP_267
00001824                          3718m EXIT_267
00001824                          3719m     ENDM
00001824                          3720  
00001824                          3721  CONTINUE
00001824  222F 0002               3722      MOVE.L 2(SP),D1
00001828                          3723m     PRINT_REG D1,D2,D3,D4,A0
00001828  41FA 030A               3724m     LEA OX(PC),A0
0000182C                          3725mm     PRINT_STR A0,D2
0000182C                          3726mm LOOP_270
0000182C  0C10 0000               3727mm     CMP.B #NULL,(A0)                                ; 0 -> DONE
00001830  6700 0016               3728mm     BEQ EXIT_270
00001834                          3729mmm     PRINT_CHAR (A0)+,D2
00001834                          3730mmm WAIT_FOR_READY_271                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00001834                 TRUE     3731mmm     IFEQ DEBUG
00001834  1439 00C00003           3732mmm         MOVE.B DUART_SRA,D2                         ; READ STATUS REGISTER
0000183A  0802 0002               3733mmm         BTST #2,D2                                  ; CHECK FOR SPACE TO SEND
0000183E  67F4                    3734mmm         BEQ WAIT_FOR_READY_271                      ; NO SPACE, CHECK AGAIN
00001840  13D8 00C00007           3735mmm         MOVE.B (A0)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00001846                          3736mmm     ENDC
00001846                          3737mmm 
00001846                 FALSE    3738mmm     IFNE DEBUG
00001846                          3739mmm     ENDC
00001846                          3740mmm 
00001846                          3741mmm     ENDM
00001846  60E4                    3742mm     BRA LOOP_270
00001848                          3743mm EXIT_270
00001848                          3744mm     ENDM
00001848  7807                    3745m     MOVE.L #7,D4                                    ; LOOP ROUND ALL 8 HEX CHARACTERS OF 4 BITS EACH
0000184A                          3746m LOOP_269
0000184A                          3747mm     BIN2HEX D1,D3,A0
0000184A  41FA 0264               3748mm     LEA BIN2HEX_LUT(PC),A0                          ; LOAD THE LOOKUP TABLE
0000184E  E999                    3749mm     ROL.L #4,D1                                     ; SHIFT THE TOP 4 BITS DOWN TO BOTTOM OF THE REGISTER THE AND MASK OFF EVERYTHING ELSE
00001850  1601                    3750mm     MOVE.B D1,D3
00001852  0283 0000000F           3751mm     ANDI.L #$F,D3
00001858  1630 3000               3752mm     MOVE.B 0(A0,D3),D3                              ; USE THAT AS AN INDEX INTO THE LUT
0000185C                          3753mm     ENDM
0000185C                          3754mm     PRINT_CHAR D3,D2
0000185C                          3755mm WAIT_FOR_READY_273                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
0000185C                 TRUE     3756mm     IFEQ DEBUG
0000185C  1439 00C00003           3757mm         MOVE.B DUART_SRA,D2                         ; READ STATUS REGISTER
00001862  0802 0002               3758mm         BTST #2,D2                                  ; CHECK FOR SPACE TO SEND
00001866  67F4                    3759mm         BEQ WAIT_FOR_READY_273                      ; NO SPACE, CHECK AGAIN
00001868  13C3 00C00007           3760mm         MOVE.B D3,DUART_TXA                         ; SEND THE NEXT CHARACTER
0000186E                          3761mm     ENDC
0000186E                          3762mm 
0000186E                 FALSE    3763mm     IFNE DEBUG
0000186E                          3764mm     ENDC
0000186E                          3765mm 
0000186E                          3766mm     ENDM
0000186E  57CC FFDA               3767m     DBEQ D4,LOOP_269
00001872                          3768m     ENDM
00001872                          3769  
00001872  41FA 02F9               3770      LEA FROM(PC),A0
00001876                          3771m     PRINT_STR A0,D0
00001876                          3772m LOOP_274
00001876  0C10 0000               3773m     CMP.B #NULL,(A0)                                ; 0 -> DONE
0000187A  6700 0016               3774m     BEQ EXIT_274
0000187E                          3775mm     PRINT_CHAR (A0)+,D0
0000187E                          3776mm WAIT_FOR_READY_275                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
0000187E                 TRUE     3777mm     IFEQ DEBUG
0000187E  1039 00C00003           3778mm         MOVE.B DUART_SRA,D0                         ; READ STATUS REGISTER
00001884  0800 0002               3779mm         BTST #2,D0                                  ; CHECK FOR SPACE TO SEND
00001888  67F4                    3780mm         BEQ WAIT_FOR_READY_275                      ; NO SPACE, CHECK AGAIN
0000188A  13D8 00C00007           3781mm         MOVE.B (A0)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00001890                          3782mm     ENDC
00001890                          3783mm 
00001890                 FALSE    3784mm     IFNE DEBUG
00001890                          3785mm     ENDC
00001890                          3786mm 
00001890                          3787mm     ENDM
00001890  60E4                    3788m     BRA LOOP_274
00001892                          3789m EXIT_274
00001892                          3790m     ENDM
00001892                          3791  
00001892  222F 000A               3792      MOVE.L 10(SP),D1
00001896                          3793m     PRINT_REG D1,D2,D3,D4,A0
00001896  41FA 029C               3794m     LEA OX(PC),A0
0000189A                          3795mm     PRINT_STR A0,D2
0000189A                          3796mm LOOP_277
0000189A  0C10 0000               3797mm     CMP.B #NULL,(A0)                                ; 0 -> DONE
0000189E  6700 0016               3798mm     BEQ EXIT_277
000018A2                          3799mmm     PRINT_CHAR (A0)+,D2
000018A2                          3800mmm WAIT_FOR_READY_278                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
000018A2                 TRUE     3801mmm     IFEQ DEBUG
000018A2  1439 00C00003           3802mmm         MOVE.B DUART_SRA,D2                         ; READ STATUS REGISTER
000018A8  0802 0002               3803mmm         BTST #2,D2                                  ; CHECK FOR SPACE TO SEND
000018AC  67F4                    3804mmm         BEQ WAIT_FOR_READY_278                      ; NO SPACE, CHECK AGAIN
000018AE  13D8 00C00007           3805mmm         MOVE.B (A0)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
000018B4                          3806mmm     ENDC
000018B4                          3807mmm 
000018B4                 FALSE    3808mmm     IFNE DEBUG
000018B4                          3809mmm     ENDC
000018B4                          3810mmm 
000018B4                          3811mmm     ENDM
000018B4  60E4                    3812mm     BRA LOOP_277
000018B6                          3813mm EXIT_277
000018B6                          3814mm     ENDM
000018B6  7807                    3815m     MOVE.L #7,D4                                    ; LOOP ROUND ALL 8 HEX CHARACTERS OF 4 BITS EACH
000018B8                          3816m LOOP_276
000018B8                          3817mm     BIN2HEX D1,D3,A0
000018B8  41FA 01F6               3818mm     LEA BIN2HEX_LUT(PC),A0                          ; LOAD THE LOOKUP TABLE
000018BC  E999                    3819mm     ROL.L #4,D1                                     ; SHIFT THE TOP 4 BITS DOWN TO BOTTOM OF THE REGISTER THE AND MASK OFF EVERYTHING ELSE
000018BE  1601                    3820mm     MOVE.B D1,D3
000018C0  0283 0000000F           3821mm     ANDI.L #$F,D3
000018C6  1630 3000               3822mm     MOVE.B 0(A0,D3),D3                              ; USE THAT AS AN INDEX INTO THE LUT
000018CA                          3823mm     ENDM
000018CA                          3824mm     PRINT_CHAR D3,D2
000018CA                          3825mm WAIT_FOR_READY_280                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
000018CA                 TRUE     3826mm     IFEQ DEBUG
000018CA  1439 00C00003           3827mm         MOVE.B DUART_SRA,D2                         ; READ STATUS REGISTER
000018D0  0802 0002               3828mm         BTST #2,D2                                  ; CHECK FOR SPACE TO SEND
000018D4  67F4                    3829mm         BEQ WAIT_FOR_READY_280                      ; NO SPACE, CHECK AGAIN
000018D6  13C3 00C00007           3830mm         MOVE.B D3,DUART_TXA                         ; SEND THE NEXT CHARACTER
000018DC                          3831mm     ENDC
000018DC                          3832mm 
000018DC                 FALSE    3833mm     IFNE DEBUG
000018DC                          3834mm     ENDC
000018DC                          3835mm 
000018DC                          3836mm     ENDM
000018DC  57CC FFDA               3837m     DBEQ D4,LOOP_276
000018E0                          3838m     ENDM
000018E0                          3839m     PRINT_CRLF D0,A0
000018E0  41FA 024C               3840m     LEA CRLF(PC),A0
000018E4                          3841mm     PRINT_STR A0,D0
000018E4                          3842mm LOOP_282
000018E4  0C10 0000               3843mm     CMP.B #NULL,(A0)                                ; 0 -> DONE
000018E8  6700 0016               3844mm     BEQ EXIT_282
000018EC                          3845mmm     PRINT_CHAR (A0)+,D0
000018EC                          3846mmm WAIT_FOR_READY_283                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
000018EC                 TRUE     3847mmm     IFEQ DEBUG
000018EC  1039 00C00003           3848mmm         MOVE.B DUART_SRA,D0                         ; READ STATUS REGISTER
000018F2  0800 0002               3849mmm         BTST #2,D0                                  ; CHECK FOR SPACE TO SEND
000018F6  67F4                    3850mmm         BEQ WAIT_FOR_READY_283                      ; NO SPACE, CHECK AGAIN
000018F8  13D8 00C00007           3851mmm         MOVE.B (A0)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
000018FE                          3852mmm     ENDC
000018FE                          3853mmm 
000018FE                 FALSE    3854mmm     IFNE DEBUG
000018FE                          3855mmm     ENDC
000018FE                          3856mmm 
000018FE                          3857mmm     ENDM
000018FE  60E4                    3858mm     BRA LOOP_282
00001900                          3859mm EXIT_282
00001900                          3860mm     ENDM
00001900                          3861m     ENDM
00001900                          3862      
00001900  207C 00000004           3863      MOVE.L #4,A0
00001906  4ED0                    3864      JMP (A0)
00001908                          3865          
00001908                          3866  ILLEGAL_HANDLER
00001908  13FC 0007 00E00001      3867      MOVE.B #7,DISPLAY   
00001910  207C 00000004           3868      MOVE.L #4,A0
00001916  4ED0                    3869      JMP (A0)
00001918                          3870          
00001918                          3871  UNHANDLED_HANDLER
00001918  13FC 0008 00E00001      3872      MOVE.B #8,DISPLAY   
00001920  207C 00000004           3873      MOVE.L #4,A0
00001926  4ED0                    3874      JMP (A0)
00001928                          3875  
00001928                          3876  ; strings
00001928= 50 72 65 73 73 20 ...   3877  HELPPROMPT DC.B 'Press ? for help',CR,LF,NULL
0000193B= 5B 3F 5D 09 09 09 ...   3878  HELP    DC.B '[?]',TAB,TAB,TAB,'help',CR,LF
00001947= 5B 76 5D 09 09 09 ...   3879          DC.B '[v]',TAB,TAB,TAB,'version',CR,LF
00001956= 78 78 78 78 78 78 ...   3880          DC.B 'xxxxxxxx[r]',TAB,TAB,'read long',CR,LF
0000196E= 78 78 78 78 78 78 ...   3881          DC.B 'xxxxxxxx[w]xxxxxxxx',TAB,'write long',CR,LF
0000198E= 78 78 78 78 78 78 ...   3882          DC.B 'xxxxxxxx[s]',TAB,TAB,'download S records',CR,LF
000019AF= 78 78 78 78 78 78 ...   3883          DC.B 'xxxxxxxx[g]',TAB,TAB,'go',CR,LF
000019C0= 5B 7A 5D 09 09 09 ...   3884          DC.B '[z]',TAB,TAB,TAB,'zap memory',CR,LF
000019D2= 78 78 78 78 78 78 ...   3885          DC.B 'xxxxxxxx[l]xxxx',TAB,TAB,'load to EEPROM',CR,LF
000019F3= 78 78 78 78 78 78 ...   3886          DC.B 'xxxxxxxx[p]xxxx',TAB,TAB,'patch EEPROM',CR,LF
00001A12= 78 78 78 78 78 78 ...   3887          DC.B 'xxxxxxxx[m]xxxxxxxx',TAB,'monitor to RAM',CR,LF
00001A36= 5B 78 5D 09 09 09 ...   3888          DC.B '[x]',TAB,TAB,TAB,'print registers',CR,LF,NULL
00001A4E= 48 75 68 3F 0D 0A 00    3889  HUH  DC.B 'Huh?',CR,LF,NULL
00001A55= 20 53 20 72 65 63 ...   3890  READ    DC.B ' S records read, start address = ',NULL
00001A77= 57 3A 20 55 6E 6B ...   3891  UNREC   DC.B 'W: Unknown Srec type: ',NULL
00001A8E= 21 20 43 53 20 66 ...   3892  CS_FAILURE  DC.B '! CS failure at ',NULL
00001A9F= 21 20 52 41 4D 20 ...   3893  RAM_ERROR   DC.B '! RAM error at: ',NULL
00001AB0= 30 31 32 33 34 35 ...   3894  BIN2HEX_LUT DC.B '0123456789ABCDEF'
00001AC0= 00 01 02 03 04 05 ...   3895  HEX2BIN_LUT DC.B 0,1,2,3,4,5,6,7,8,9,0,0,0,0,0,0,0,$A,$B,$C,$D,$E,$F
00001AD7= 4C 6F 61 64 69 6E ...   3896  LOADING DC.B 'Loading EEPROM...',CR,LF,NULL
00001AEB= 57 72 69 74 69 6E ...   3897  CODE        DC.B 'Writing code: ',NULL
00001AFA= 53 65 74 74 69 6E ...   3898  SP      DC.B 'Setting initial stack pointer to ',NULL
00001B1C= 57 72 69 74 69 6E ...   3899  VECTORS DC.B 'Writing vectors',CR,LF,NULL
00001B2E= 0D 0A 00                3900  CRLF    DC.B CR,LF,NULL
00001B31= 3E 20 00                3901  PROMPT  DC.B '> ',NULL
00001B34= 30 78 00                3902  ox      DC.B '0x',NULL
00001B37= 20 2D 3E 20 00          3903  to      DC.B ' -> ',NULL
00001B3C= 53 50 3A 20 00          3904  STACK_POINTER DC.B 'SP: ',NULL
00001B41= 53 52 3A 20 00          3905  STATUS_REGISTER DC.B 'SR: ',NULL
00001B46= 2A 20 42 75 73 2F ...   3906  BUS_ERROR DC.B '* Bus/address error ',NULL
00001B5B= 72 65 61 64 69 6E ...   3907  READING DC.B 'reading ',NULL
00001B64= 77 72 69 74 69 6E ...   3908  WRITING DC.B 'writing ',NULL
00001B6D= 20 66 72 6F 6D 20 00    3909  FROM DC.B ' from ',NULL
00001B74= 2A 20 55 6E 68 61 ...   3910  UNHANDLED DC.B '* Unhandled exception at ',NULL
00001B8E= 4D 44 46 2D 6D 6F ...   3911  VERSION DC.B 'MDF-mon V1.109 (25/04/2021)',CR,LF,NULL   ; this is the last line on purpose, so if it prints, we can be sure we got it all
00001BAC= 00                      3912  END     DC.B 0
00001BAD                          3913      END START                                           ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
BIN2HEX             0
BIN2HEX_LUT         1AB0
BUS_ERROR           1B46
BUS_ERROR_HANDLER   17B4
CODE                1AEB
CONTINUE            1824
CONTINUE_113        DC2
CONTINUE_54         89E
CONTINUE_57         8EE
CONTINUE_61         944
CONTINUE_69         9F8
CONTINUE_74         A6A
CONTINUE_79         AE6
CONTINUE_84         B64
CONTINUE_89         BEC
CONTINUE_94         C5E
CONTINUE_99         CD0
CR                  D
CRLF                1B2E
CS_FAILURE          1A8E
DEBUG               0
DISPLAY             E00001
DISPLAY_            0
DISPLAY_BASE        E00000
DOWNLOAD            734
DOWNLOAD_BYTE       AA4
DOWNLOAD_DONE       ECC
DUART_ACR           C00009
DUART_ACR_          4
DUART_BASE          C00000
DUART_CRA           C00005
DUART_CRA_          2
DUART_CRB           C00015
DUART_CRB_          A
DUART_CSRA          C00003
DUART_CSRA_         1
DUART_CSRB          C00013
DUART_CSRB_         9
DUART_IMR           C0000B
DUART_IMR_          5
DUART_IVR           C00019
DUART_IVR_          C
DUART_MRA           C00001
DUART_MRA_          0
DUART_MRB           C00011
DUART_MRB_          8
DUART_OPCR          C0001B
DUART_OPCR_         D
DUART_RESET_OPR     C0001F
DUART_RESET_OPR_    F
DUART_RXA           C00007
DUART_RXA_          3
DUART_RXB           C00017
DUART_RXB_          B
DUART_SET_OPR       C0001D
DUART_SET_OPR_      E
DUART_SRA           C00003
DUART_SRA_          1
DUART_SRB           C00013
DUART_SRB_          9
DUART_TXA           C00007
DUART_TXA_          3
DUART_TXB           C00017
DUART_TXB_          B
END                 1BAC
EXIT_10             556
EXIT_104            D42
EXIT_106            D62
EXIT_110            D94
EXIT_118            E2A
EXIT_120            E52
EXIT_123            E72
EXIT_128            EBC
EXIT_131            EEC
EXIT_135            F36
EXIT_138            F58
EXIT_143            FA2
EXIT_145            101E
EXIT_148            1042
EXIT_15             5A0
EXIT_153            108C
EXIT_160            1118
EXIT_163            1176
EXIT_165            1196
EXIT_168            11B8
EXIT_17             5C0
EXIT_172            1202
EXIT_175            1224
EXIT_180            126E
EXIT_183            12B0
EXIT_186            12D0
EXIT_190            1318
EXIT_193            134E
EXIT_197            1398
EXIT_20             5E0
EXIT_200            13BA
EXIT_205            1404
EXIT_213            1498
EXIT_216            14EA
EXIT_219            150A
EXIT_22             60A
EXIT_223            1554
EXIT_226            1576
EXIT_231            15C0
EXIT_240            1658
EXIT_242            169A
EXIT_245            16BC
EXIT_250            1706
EXIT_252            1726
EXIT_255            1748
EXIT_260            1792
EXIT_263            17D4
EXIT_265            1800
EXIT_267            1824
EXIT_270            1848
EXIT_274            1892
EXIT_277            18B6
EXIT_28             69E
EXIT_282            1900
EXIT_30             6F6
EXIT_32             722
EXIT_35             74C
EXIT_45             7FA
EXIT_5              50E
EXIT_52             870
EXIT_66             9B4
EXIT_7              52E
FROM                1B6D
G                   FA6
GET_INPUT           60A
H                   6FA
HELP                193B
HELPPROMPT          1928
HEX2BIN             10B
HEX2BIN_LUT         1AC0
HEX_DIGIT           1796
HUH                 1A4E
ILLEGAL_HANDLER     1908
L                   109C
LF                  A
LOADING             1AD7
LOOP_10             53A
LOOP_104            D26
LOOP_106            D46
LOOP_110            D78
LOOP_118            E0E
LOOP_120            E36
LOOP_122            E74
LOOP_123            E56
LOOP_128            EA0
LOOP_130            EEE
LOOP_131            ED0
LOOP_135            F1A
LOOP_137            F5A
LOOP_138            F3C
LOOP_143            F86
LOOP_145            1002
LOOP_147            1044
LOOP_148            1026
LOOP_15             584
LOOP_153            1070
LOOP_160            10FC
LOOP_163            115A
LOOP_165            117A
LOOP_167            11BA
LOOP_168            119C
LOOP_17             5A4
LOOP_172            11E6
LOOP_174            1226
LOOP_175            1208
LOOP_180            1252
LOOP_183            1294
LOOP_186            12B4
LOOP_190            12FC
LOOP_192            1350
LOOP_193            1332
LOOP_197            137C
LOOP_199            13BC
LOOP_20             5C4
LOOP_200            139E
LOOP_205            13E8
LOOP_213            147C
LOOP_216            14CE
LOOP_218            150C
LOOP_219            14EE
LOOP_22             5EE
LOOP_223            1538
LOOP_225            1578
LOOP_226            155A
LOOP_231            15A4
LOOP_240            163C
LOOP_242            167E
LOOP_244            16BE
LOOP_245            16A0
LOOP_250            16EA
LOOP_252            170A
LOOP_254            174A
LOOP_255            172C
LOOP_260            1776
LOOP_263            17B8
LOOP_265            17E4
LOOP_267            1808
LOOP_269            184A
LOOP_270            182C
LOOP_274            1876
LOOP_276            18B8
LOOP_277            189A
LOOP_28             682
LOOP_282            18E4
LOOP_30             6DA
LOOP_32             706
LOOP_34             74E
LOOP_35             730
LOOP_45             7DE
LOOP_5              4F2
LOOP_52             854
LOOP_66             998
LOOP_7              512
LOOP_9              558
M                   15E2
MAIN_LOOP           5EA
NULL                0
OX                  1B34
P                   1424
PRINTSTR            706
PRINT_CHAR          203
PRINT_CRLF          3A0
PRINT_REG           438
PRINT_STR           3CB
PROGRAM             C4D
PROGRAM_VECTOR      CE4
PROMPT              1B31
PROTECT             A40
R                   726
RAM                 200000
RAM_ERROR           1A9F
READ                1A55
READING             1B5B
READ_CHAR           62D
RESET               4
ROM                 0
S                   87A
SP                  1AFA
STACK               0
STACK_POINTER       1B3C
START               400
STATUS_REGISTER     1B41
TAB                 9
TO                  1B37
UNHANDLED           1B74
UNHANDLED_HANDLER   1918
UNPROTECT           979
UNREC               1A77
USER                100
V                   702
VECS                8
VECTORS             1B1C
VERSION             1B8E
W                   7FE
WAIT_CHAR           4E9
WAIT_FOR_COMPLETE_182  1280
WAIT_FOR_COMPLETE_188  12D6
WAIT_FOR_COMPLETE_189  12EA
WAIT_FOR_COMPLETE_233  15C2
WAIT_FOR_READY_1    4AA
WAIT_FOR_READY_101  CE8
WAIT_FOR_READY_105  D2E
WAIT_FOR_READY_107  D4E
WAIT_FOR_READY_108  D62
WAIT_FOR_READY_11   542
WAIT_FOR_READY_111  D80
WAIT_FOR_READY_113  DA6
WAIT_FOR_READY_115  DDA
WAIT_FOR_READY_119  E16
WAIT_FOR_READY_121  E3E
WAIT_FOR_READY_124  E5E
WAIT_FOR_READY_126  E86
WAIT_FOR_READY_129  EA8
WAIT_FOR_READY_13   56A
WAIT_FOR_READY_132  ED8
WAIT_FOR_READY_134  F00
WAIT_FOR_READY_136  F22
WAIT_FOR_READY_139  F44
WAIT_FOR_READY_141  F6C
WAIT_FOR_READY_144  F8E
WAIT_FOR_READY_146  100A
WAIT_FOR_READY_149  102E
WAIT_FOR_READY_151  1056
WAIT_FOR_READY_154  1078
WAIT_FOR_READY_155  10AA
WAIT_FOR_READY_157  10C4
WAIT_FOR_READY_16   58C
WAIT_FOR_READY_161  1104
WAIT_FOR_READY_164  1162
WAIT_FOR_READY_166  1182
WAIT_FOR_READY_169  11A4
WAIT_FOR_READY_171  11CC
WAIT_FOR_READY_173  11EE
WAIT_FOR_READY_176  1210
WAIT_FOR_READY_178  1238
WAIT_FOR_READY_18   5AC
WAIT_FOR_READY_181  125A
WAIT_FOR_READY_184  129C
WAIT_FOR_READY_187  12BC
WAIT_FOR_READY_191  1304
WAIT_FOR_READY_194  133A
WAIT_FOR_READY_196  1362
WAIT_FOR_READY_198  1384
WAIT_FOR_READY_2    4BE
WAIT_FOR_READY_201  13A6
WAIT_FOR_READY_203  13CE
WAIT_FOR_READY_206  13F0
WAIT_FOR_READY_208  1430
WAIT_FOR_READY_21   5CC
WAIT_FOR_READY_210  144A
WAIT_FOR_READY_214  1484
WAIT_FOR_READY_217  14D6
WAIT_FOR_READY_220  14F6
WAIT_FOR_READY_222  151E
WAIT_FOR_READY_224  1540
WAIT_FOR_READY_227  1562
WAIT_FOR_READY_229  158A
WAIT_FOR_READY_23   5F6
WAIT_FOR_READY_232  15AC
WAIT_FOR_READY_235  15F0
WAIT_FOR_READY_237  160A
WAIT_FOR_READY_24   60A
WAIT_FOR_READY_241  1644
WAIT_FOR_READY_243  1686
WAIT_FOR_READY_246  16A8
WAIT_FOR_READY_248  16D0
WAIT_FOR_READY_251  16F2
WAIT_FOR_READY_253  1712
WAIT_FOR_READY_256  1734
WAIT_FOR_READY_258  175C
WAIT_FOR_READY_26   624
WAIT_FOR_READY_261  177E
WAIT_FOR_READY_264  17C0
WAIT_FOR_READY_266  17EC
WAIT_FOR_READY_268  1810
WAIT_FOR_READY_271  1834
WAIT_FOR_READY_273  185C
WAIT_FOR_READY_275  187E
WAIT_FOR_READY_278  18A2
WAIT_FOR_READY_280  18CA
WAIT_FOR_READY_283  18EC
WAIT_FOR_READY_29   68A
WAIT_FOR_READY_3    4D2
WAIT_FOR_READY_31   6E2
WAIT_FOR_READY_33   70E
WAIT_FOR_READY_36   738
WAIT_FOR_READY_38   760
WAIT_FOR_READY_39   776
WAIT_FOR_READY_40   78C
WAIT_FOR_READY_41   7A0
WAIT_FOR_READY_42   7B4
WAIT_FOR_READY_43   7C8
WAIT_FOR_READY_46   7E6
WAIT_FOR_READY_47   808
WAIT_FOR_READY_49   822
WAIT_FOR_READY_53   85C
WAIT_FOR_READY_54   882
WAIT_FOR_READY_56   8BC
WAIT_FOR_READY_57   8D2
WAIT_FOR_READY_59   906
WAIT_FOR_READY_6    4FA
WAIT_FOR_READY_61   928
WAIT_FOR_READY_63   95C
WAIT_FOR_READY_67   9A0
WAIT_FOR_READY_69   9DC
WAIT_FOR_READY_71   A10
WAIT_FOR_READY_74   A4E
WAIT_FOR_READY_76   A82
WAIT_FOR_READY_79   ACA
WAIT_FOR_READY_8    51A
WAIT_FOR_READY_81   AFE
WAIT_FOR_READY_84   B48
WAIT_FOR_READY_86   B7C
WAIT_FOR_READY_89   BD0
WAIT_FOR_READY_91   C04
WAIT_FOR_READY_94   C42
WAIT_FOR_READY_96   C76
WAIT_FOR_READY_99   CB4
WAIT_FOR_SRECORD    882
WRITE               1804
WRITING             1B64
X                   167A
Z                   FAC
_00000000           64A
_00000001           65E
_00000002           9BC
_00000003           D98
_00000004           9CA
_00000005           BB8
_00000006           B2E
_00000007           D98
_00000008           D22
_00000009           D98
_0000000A           EC0
_0000000B           ECC
_0000000C           108C
_0000000D           128A
_0000000E           12E4
_0000000F           12F8
_00000010           15CC
_10000000           91E
_10000001           986
_10000002           9D2
_10000003           A3A
_10000004           A44
_10000005           AAC
_10000006           AC0
_10000007           B28
_10000008           B32
_10000009           BB2
_1000000A           B3E
_1000000B           BA6
_1000000C           BC6
_1000000D           C2E
_1000000E           C38
_1000000F           CA0
_10000010           CAA
_10000011           D12
_10000012           D9C
_10000013           E04
_10000014           126E
_10000015           1290
_10000016           1662
_10000017           1676
_20000000           426
_20000001           432
_20000002           440
_20000003           44C
_20000004           806
_20000005           84A
_20000006           FBE
_20000007           FCE
_20000008           FE8
_20000009           108E
_2000000A           10A8
_2000000B           10EC
_2000000C           1320
_2000000D           1406
_2000000E           142E
_2000000F           1472
_20000010           15EE
_20000011           1632
