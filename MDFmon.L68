00000400 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 25/04/2021 15:52:28

00000000                             1  *------------------------------------------------------------
00000000                             2  * Title         MDFmon 
00000000                             3  * Written by    Mark Flitter
00000000                             4  * Date          March 2021
00000000                             5  * Description:  68000 monitor program
00000000                             6  *-----------------------------------------------------------
00000000                             7  ; to do
00000000                             8  
00000000                             9  ; other ideas
00000000                            10  ;------------
00000000                            11  ; use DBLoop?
00000000                            12  ; keep track of highest address hit during srec download
00000000                            13  ; implement backspace
00000000                            14  ; fix being able to enter random chars when W'ing
00000000                            15  ; ram check at startup?  Not sure if this is a good idea!
00000000                            16  ; check for escape during Z and L?  Not sure if W is a good idea either
00000000                            17  
00000000                            18      ORG  $0
00000000                            19  
00000000  =00000000                 20  DEBUG               EQU 0
00000000                            21  
00000000                            22  ; constants
00000000  =00000000                 23  NULL                EQU 0
00000000  =00000009                 24  TAB                 EQU 9
00000000  =0000000D                 25  CR                  EQU 13
00000000  =0000000A                 26  LF                  EQU 10
00000000                            27  
00000000  =00000000                 28  ROM                 EQU $0
00000000  =00200000                 29  RAM                 EQU $200000
00000000  =002E0000                 30  STACK_ADDRESS       EQU $2E0000
00000000                            31  
00000000  =00C00000                 32  DUART_BASE          EQU $C00000
00000000  =00000000                 33  DUART_MRA_          EQU $0
00000000  =00000001                 34  DUART_CSRA_         EQU $1
00000000  =00000001                 35  DUART_SRA_          EQU $1
00000000  =00000002                 36  DUART_CRA_          EQU $2
00000000  =00000003                 37  DUART_TXA_          EQU $3
00000000  =00000003                 38  DUART_RXA_          EQU $3
00000000  =00000004                 39  DUART_ACR_          EQU $4
00000000  =00000005                 40  DUART_IMR_          EQU $5
00000000  =00000008                 41  DUART_MRB_          EQU $8
00000000  =00000009                 42  DUART_CSRB_         EQU $9
00000000  =00000009                 43  DUART_SRB_          EQU $9
00000000  =0000000A                 44  DUART_CRB_          EQU $A
00000000  =0000000B                 45  DUART_TXB_          EQU $B
00000000  =0000000B                 46  DUART_RXB_          EQU $B
00000000  =0000000C                 47  DUART_IVR_          EQU $C
00000000  =0000000D                 48  DUART_OPCR_         EQU $D
00000000  =0000000E                 49  DUART_SET_OPR_      EQU $E
00000000  =0000000F                 50  DUART_RESET_OPR_    EQU $F
00000000                            51  
00000000  =00C00001                 52  DUART_MRA           EQU DUART_BASE+2*DUART_MRA_+1
00000000  =00C00003                 53  DUART_SRA           EQU DUART_BASE+2*DUART_SRA_+1
00000000  =00C00003                 54  DUART_CSRA          EQU DUART_BASE+2*DUART_CSRA_+1
00000000  =00C00005                 55  DUART_CRA           EQU DUART_BASE+2*DUART_CRA_+1
00000000  =00C00007                 56  DUART_TXA           EQU DUART_BASE+2*DUART_TXA_+1
00000000  =00C00007                 57  DUART_RXA           EQU DUART_BASE+2*DUART_RXA_+1
00000000                            58  
00000000  =00C00011                 59  DUART_MRB           EQU DUART_BASE+2*DUART_MRB_+1
00000000  =00C00013                 60  DUART_SRB           EQU DUART_BASE+2*DUART_SRB_+1
00000000  =00C00013                 61  DUART_CSRB          EQU DUART_BASE+2*DUART_CSRB_+1
00000000  =00C00015                 62  DUART_CRB           EQU DUART_BASE+2*DUART_CRB_+1
00000000  =00C00017                 63  DUART_TXB           EQU DUART_BASE+2*DUART_TXB_+1
00000000  =00C00017                 64  DUART_RXB           EQU DUART_BASE+2*DUART_RXB_+1
00000000                            65  
00000000  =00C00009                 66  DUART_ACR           EQU DUART_BASE+2*DUART_ACR_+1
00000000  =00C0000B                 67  DUART_IMR           EQU DUART_BASE+2*DUART_IMR_+1
00000000  =00C00019                 68  DUART_IVR           EQU DUART_BASE+2*DUART_IVR_+1
00000000  =00C0001B                 69  DUART_OPCR          EQU DUART_BASE+2*DUART_OPCR_+1
00000000  =00C0001D                 70  DUART_SET_OPR       EQU DUART_BASE+2*DUART_SET_OPR_+1
00000000  =00C0001F                 71  DUART_RESET_OPR     EQU DUART_BASE+2*DUART_RESET_OPR_+1
00000000                            72  
00000000  =00E00000                 73  DISPLAY_BASE        EQU $E00000
00000000  =00000000                 74  DISPLAY_            EQU $0
00000000  =00E00001                 75  DISPLAY             EQU DISPLAY_BASE+2*DISPLAY_+1
00000000                            76  
00000000                            77  ; macros
00000000                            78  ; convert top 4 bits of input register from binary to a single hex digit
00000000                            79  ; the input register is changed during the process
00000000                            80  ; \1 input data register containing binary number, \2 data register for return value, \3 working address register
00000000                            81  BIN2HEX MACRO
00000000                            82      LEA BIN2HEX_LUT(PC),\3                          ; load the lookup table
00000000                            83      ROL.L #4,\1                                     ; shift the top 4 bits down to bottom of the register the and mask off everything else
00000000                            84      MOVE.B \1,\2
00000000                            85      ANDI.L #$F,\2
00000000                            86      MOVE.B 0(\3,\2),\2                              ; use that as an index into the LUT
00000000                            87      ENDM
00000000                            88  
00000000                            89  ; convert single hex digit to 4 bit binary number in LSbits
00000000                            90  ; the input register is changed during the process
00000000                            91  ; \1 data register containing hex character, \2 data register for return value, \3 working address register
00000000                            92  HEX2BIN MACRO
00000000                            93      LEA HEX2BIN_LUT(PC),\3                          ; load the lookup table
00000000                            94      SUB.B #'0',\1                                   ; work out offset and mask off anything rogue
00000000                            95      AND.L #$FF,\1                                   ; ignore the top 3 bytes
00000000                            96      MOVE.B 0(\3,\1),\2                              ; use that as an index into the LUT   
00000000                            97      ENDM
00000000                            98  
00000000                            99  ; send a single char to the serial port
00000000                           100  ; \1 = char to send, \2 = data register to use for status poll
00000000                           101  ; will stamp on D0 and D1 in debug mode
00000000                           102  PRINT_CHAR MACRO
00000000                           103  WAIT_FOR_READY\@                                    ; wait until the there is space to send
00000000                           104      IFEQ DEBUG
00000000                           105          MOVE.B DUART_SRA,\2                         ; read status register
00000000                           106          BTST #2,\2                                  ; check for space to send
00000000                           107          BEQ WAIT_FOR_READY\@                        ; no space, check again
00000000                           108          MOVE.B \1,DUART_TXA                         ; send the next character
00000000                           109      ENDC
00000000                           110  
00000000                           111      IFNE DEBUG
00000000                           112          MOVE.B \1,D1
00000000                           113          MOVE.L #6,D0   
00000000                           114          TRAP #15                                    ; write to terminal in simulator
00000000                           115      ENDC
00000000                           116  
00000000                           117      ENDM
00000000                           118  
00000000                           119  ; send CR,LF to the serial port
00000000                           120  ; \1 = data register to use for status poll, /2 = working address register
00000000                           121  PRINT_CRLF MACRO
00000000                           122      LEA CRLF(PC),\2
00000000                           123      PRINT_STR \2,\1
00000000                           124      ENDM
00000000                           125  
00000000                           126  ; send C-style, zero terminated string to the serial port
00000000                           127  ; \1 = address register containing address of zero terminated string, \2 = data register to use for status poll, 
00000000                           128  PRINT_STR MACRO
00000000                           129  LOOP\@
00000000                           130      CMP.B #NULL,(\1)                                ; 0 -> done
00000000                           131      BEQ EXIT\@
00000000                           132      PRINT_CHAR (\1)+,\2
00000000                           133      BRA LOOP\@
00000000                           134  EXIT\@
00000000                           135      ENDM
00000000                           136    
00000000                           137  ; send the contents of a data register to the serial port as a 8 digit hex number
00000000                           138  ; \1 = data register containing binary number, \2 = data register to use for status poll, \3 working data register, \4 counter register, \5 working address register
00000000                           139  PRINT_REG MACRO
00000000                           140      LEA ox(PC),\5
00000000                           141      PRINT_STR \5,\2
00000000                           142      MOVE.L #7,\4                                    ; loop round all 8 hex characters of 4 bits each
00000000                           143  LOOP\@
00000000                           144      BIN2HEX \1,\3,\5
00000000                           145      PRINT_CHAR \3,\2
00000000                           146      DBEQ \4,LOOP\@
00000000                           147      ENDM
00000000                           148  
00000000                           149  ; wait for a char from the serial port
00000000                           150  ; \ 1= data register for read char, \2 = register to use for status poll
00000000                           151  ; will stamp on D0 and D1 in debug mode
00000000                           152  WAIT_CHAR MACRO
00000000                           153  WAIT_FOR_READY\@                                    ; wait until the there is space to send
00000000                           154      IFEQ DEBUG
00000000                           155          MOVE.B DUART_SRA,\2                         ; read status register
00000000                           156          BTST #0,\2                                  ; check for character
00000000                           157          BEQ WAIT_FOR_READY\@                        ; nothing, check again
00000000                           158      ENDC
00000000                           159  
00000000                           160      READ_CHAR \1
00000000                           161  
00000000                           162      IFEQ DEBUG
00000000                           163          PRINT_CHAR \1,\2                            ; echo it back
00000000                           164      ENDC
00000000                           165      ENDM
00000000                           166  
00000000                           167  ; read a char from the serial port - assumes that there is one!
00000000                           168  ; \ 1= data register for read char
00000000                           169  ; will stamp on D0 and D1 in debug mode
00000000                           170  READ_CHAR MACRO
00000000                           171      IFEQ DEBUG
00000000                           172          MOVE.B DUART_RXA,\1                         ; got a character, read it
00000000                           173      ENDC
00000000                           174      IFNE DEBUG
00000000                           175          MOVE.L #5,D0    
00000000                           176          TRAP #15                                    ; read from keyboard in simulator
00000000                           177          MOVE.L D1,\1
00000000                           178      ENDC
00000000                           179  
00000000                           180      CMP.B #$1B,\1                                   ; check for escape and go to start
00000000                           181      BEQ START
00000000                           182      ENDM
00000000                           183  
00000000                           184  
00000000                           185  ; read data from the download serial port
00000000                           186  ; \ 1= data register for read char
00000000                           187  DOWNLOAD MACRO
00000000                           188  WAIT_FOR_READY\@                                    ; wait until the there is space to send
00000000                           189  
00000000                           190      MOVE.B DUART_SRA,\1                             ; check for command
00000000                           191      BTST #0,\1                                      ; check for character
00000000                           192      BEQ CONTINUE\@                                  ; nothing, continue
00000000                           193  
00000000                           194      READ_CHAR \1                                    ; we're not going to do anything with it, just check for escape
00000000                           195  CONTINUE\@
00000000                           196      MOVE.B DUART_SRB,\1                             ; read download status register
00000000                           197      BTST #0,\1                                      ; check for character
00000000                           198      BEQ WAIT_FOR_READY\@                            ; nothing, check again
00000000                           199      
00000000                           200      MOVE.B DUART_RXB,\1                             ; got a character, read it
00000000                           201      MOVE.B \1,DISPLAY                               ; echo to the display
00000000                           202  
00000000                           203      ENDM
00000000                           204  
00000000                           205  ; unprotect the EEPROM
00000000                           206  UNPROTECT MACRO
00000000                           207      MOVE.W #$AAAA,$2AAA                             ; remove write protect
00000000                           208      NOP
00000000                           209      MOVE.W #$5555,$1554
00000000                           210      NOP
00000000                           211      MOVE.W #$8080,$2AAA
00000000                           212      NOP
00000000                           213      MOVE.W #$AAAA,$2AAA
00000000                           214      NOP
00000000                           215      MOVE.W #$5555,$1554
00000000                           216      NOP
00000000                           217      MOVE.W #$2020,$2AAA
00000000                           218      ENDM
00000000                           219      
00000000                           220  ; protect the EEPROM
00000000                           221  PROTECT MACRO
00000000                           222      MOVE.W #$AAAA,$2AAA                             ; and write protect
00000000                           223      MOVE.W #$5555,$1554
00000000                           224      MOVE.W #$A0A0,$2AAA
00000000                           225      ENDM
00000000                           226  
00000000                           227  
00000000                           228  ; read two hex digits from the download serial port and convert to a byte
00000000                           229  ; \1 result register, \2 = data register for read char, \3 = register to use for status poll, \4 = working data register, \5 = checksum register, \6 = working address register
00000000                           230  DOWNLOAD_BYTE MACRO
00000000                           231      MOVE.B #2,\4
00000000                           232      WHILE.B \4 <GT> 0 DO
00000000                           233          LSL.L #4,\1                                 ; it's OK to do this first, because we are either starting from 0, 
00000000                           234          DOWNLOAD \2                                 ; or we are reading the next byte along, so need to shift up the previous one
00000000                           235          PRINT_CHAR \2,\3
00000000                           236          HEX2BIN \2,\2,\6
00000000                           237          OR.B \2,\1
00000000                           238          SUB.B #1,\4
00000000                           239      ENDW
00000000                           240  
00000000                           241      MOVE.L #0,\2                                    ; rextract latest byte of address and add into checksum
00000000                           242      MOVE.B \1,\2
00000000                           243      ADD.L \1,\5
00000000                           244  
00000000                           245      ENDM
00000000                           246  
00000000                           247  ; write word to EEPROM
00000000                           248  ; \1 word to write, \2 = target address, \3 = working data register
00000000                           249  PROGRAM MACRO
00000000                           250    MOVE.W \1,\2                                      ; write the data
00000000                           251  
00000000                           252  WAIT_FOR_COMPLETE\@
00000000                           253          MOVE.W \2,\3
00000000                           254  
00000000                           255          IF.W \3 <NE> \1 THEN
00000000                           256              BRA WAIT_FOR_COMPLETE\@
00000000                           257          ENDI
00000000                           258          ENDM
00000000                           259          
00000000                           260  ; program vector to EEPROM
00000000                           261  ; \1 handler address, \2 = target address, \3 = working data register
00000000                           262  PROGRAM_VECTOR MACRO
00000000                           263      ADD.L #2,\2
00000000                           264      PROGRAM \1, (\2), \3                                ; write it
00000000                           265      LSR.L #8,\1
00000000                           266      LSR.L #8,\1
00000000                           267      SUB.L #2,\2
00000000                           268      PROGRAM \1, (\2), \3
00000000                           269      ENDM
00000000                           270  
00000000                           271  
00000000                           272  ; register catalogue
00000000                           273  ; D0 - used for simulator I/O
00000000                           274  ; D1 - used for simulator I/O
00000000                           275  ; D2 - read character
00000000                           276  ; D3 - serial port status poll / task for TRAP in simulator
00000000                           277  ; D6 - working register used in R/W
00000000                           278  ; D7 - address accumulator, reset by download
00000000                           279  ; A0 - address of string to print 
00000000                           280  
00000000                           281  ; start vector
00000000= 002E0000                 282  STACK   DC.L STACK_ADDRESS                      ; STACK
00000004= 00000400                 283  RESET   DC.L START                              ; RESET
00000008= 00001824                 284  VECS    DC.L BUS_ERROR_HANDLER                      ; BUS ERROR
0000000C= 00001824                 285          DC.L BUS_ERROR_HANDLER                  ; ADDRESS ERROR
00000010= 00001978                 286          DC.L ILLEGAL_HANDLER                        ; ILLEGAL INSTRUCTION
00000014= 00001988                 287          DC.L UNHANDLED_HANDLER
00000018= 00001988                 288          DC.L UNHANDLED_HANDLER
0000001C= 00001988                 289          DC.L UNHANDLED_HANDLER
00000020= 00001988                 290          DC.L UNHANDLED_HANDLER
00000024= 00001988                 291          DC.L UNHANDLED_HANDLER
00000028= 00001988                 292          DC.L UNHANDLED_HANDLER
0000002C= 00001988                 293          DC.L UNHANDLED_HANDLER
00000030= 00001988                 294          DC.L UNHANDLED_HANDLER
00000034= 00001988                 295          DC.L UNHANDLED_HANDLER
00000038= 00001988                 296          DC.L UNHANDLED_HANDLER
0000003C= 00001988                 297          DC.L UNHANDLED_HANDLER
00000040= 00001988                 298          DC.L UNHANDLED_HANDLER
00000044= 00001988                 299          DC.L UNHANDLED_HANDLER
00000048= 00001988                 300          DC.L UNHANDLED_HANDLER
0000004C= 00001988                 301          DC.L UNHANDLED_HANDLER
00000050= 00001988                 302          DC.L UNHANDLED_HANDLER
00000054= 00001988                 303          DC.L UNHANDLED_HANDLER
00000058= 00001988                 304          DC.L UNHANDLED_HANDLER
0000005C= 00001988                 305          DC.L UNHANDLED_HANDLER
00000060= 00001988                 306          DC.L UNHANDLED_HANDLER
00000064= 00001988                 307          DC.L UNHANDLED_HANDLER
00000068= 00001988                 308          DC.L UNHANDLED_HANDLER
0000006C= 00001988                 309          DC.L UNHANDLED_HANDLER
00000070= 00001988                 310          DC.L UNHANDLED_HANDLER
00000074= 00001988                 311          DC.L UNHANDLED_HANDLER
00000078= 00001988                 312          DC.L UNHANDLED_HANDLER
0000007C= 00001988                 313          DC.L UNHANDLED_HANDLER
00000080= 00001988                 314          DC.L UNHANDLED_HANDLER
00000084= 00001988                 315          DC.L UNHANDLED_HANDLER
00000088= 00001988                 316          DC.L UNHANDLED_HANDLER
0000008C= 00001988                 317          DC.L UNHANDLED_HANDLER
00000090= 00001988                 318          DC.L UNHANDLED_HANDLER
00000094= 00001988                 319          DC.L UNHANDLED_HANDLER
00000098= 00001988                 320          DC.L UNHANDLED_HANDLER
0000009C= 00001988                 321          DC.L UNHANDLED_HANDLER
000000A0= 00001988                 322          DC.L UNHANDLED_HANDLER
000000A4= 00001988                 323          DC.L UNHANDLED_HANDLER
000000A8= 00001988                 324          DC.L UNHANDLED_HANDLER
000000AC= 00001988                 325          DC.L UNHANDLED_HANDLER
000000B0= 00001988                 326          DC.L UNHANDLED_HANDLER
000000B4= 00001988                 327          DC.L UNHANDLED_HANDLER
000000B8= 00001988                 328          DC.L UNHANDLED_HANDLER
000000BC= 00001988                 329          DC.L UNHANDLED_HANDLER
000000C0= 00001988                 330          DC.L UNHANDLED_HANDLER
000000C4= 00001988                 331          DC.L UNHANDLED_HANDLER
000000C8= 00001988                 332          DC.L UNHANDLED_HANDLER
000000CC= 00001988                 333          DC.L UNHANDLED_HANDLER
000000D0= 00001988                 334          DC.L UNHANDLED_HANDLER
000000D4= 00001988                 335          DC.L UNHANDLED_HANDLER
000000D8= 00001988                 336          DC.L UNHANDLED_HANDLER
000000DC= 00001988                 337          DC.L UNHANDLED_HANDLER
000000E0= 00001988                 338          DC.L UNHANDLED_HANDLER
000000E4= 00001988                 339          DC.L UNHANDLED_HANDLER
000000E8= 00001988                 340          DC.L UNHANDLED_HANDLER
000000EC= 00001988                 341          DC.L UNHANDLED_HANDLER
000000F0= 00001988                 342          DC.L UNHANDLED_HANDLER
000000F4= 00001988                 343          DC.L UNHANDLED_HANDLER
000000F8= 00001988                 344          DC.L UNHANDLED_HANDLER
000000FC= 00001988                 345          DC.L UNHANDLED_HANDLER
00000100= 00001988                 346  USER        DC.L UNHANDLED_HANDLER
00000104= 00001988                 347          DC.L UNHANDLED_HANDLER
00000108= 00001988                 348          DC.L UNHANDLED_HANDLER
0000010C= 00001988                 349          DC.L UNHANDLED_HANDLER
00000110= 00001988                 350          DC.L UNHANDLED_HANDLER
00000114= 00001988                 351          DC.L UNHANDLED_HANDLER
00000118= 00001988                 352          DC.L UNHANDLED_HANDLER
0000011C= 00001988                 353          DC.L UNHANDLED_HANDLER
00000120= 00001988                 354          DC.L UNHANDLED_HANDLER
00000124= 00001988                 355          DC.L UNHANDLED_HANDLER
00000128= 00001988                 356          DC.L UNHANDLED_HANDLER
0000012C= 00001988                 357          DC.L UNHANDLED_HANDLER
00000130= 00001988                 358          DC.L UNHANDLED_HANDLER
00000134= 00001988                 359          DC.L UNHANDLED_HANDLER
00000138= 00001988                 360          DC.L UNHANDLED_HANDLER
0000013C= 00001988                 361          DC.L UNHANDLED_HANDLER
00000140= 00001988                 362          DC.L UNHANDLED_HANDLER
00000144= 00001988                 363          DC.L UNHANDLED_HANDLER
00000148= 00001988                 364          DC.L UNHANDLED_HANDLER
0000014C= 00001988                 365          DC.L UNHANDLED_HANDLER
00000150= 00001988                 366          DC.L UNHANDLED_HANDLER
00000154= 00001988                 367          DC.L UNHANDLED_HANDLER
00000158= 00001988                 368          DC.L UNHANDLED_HANDLER
0000015C= 00001988                 369          DC.L UNHANDLED_HANDLER
00000160= 00001988                 370          DC.L UNHANDLED_HANDLER
00000164= 00001988                 371          DC.L UNHANDLED_HANDLER
00000168= 00001988                 372          DC.L UNHANDLED_HANDLER
0000016C= 00001988                 373          DC.L UNHANDLED_HANDLER
00000170= 00001988                 374          DC.L UNHANDLED_HANDLER
00000174= 00001988                 375          DC.L UNHANDLED_HANDLER
00000178= 00001988                 376          DC.L UNHANDLED_HANDLER
0000017C= 00001988                 377          DC.L UNHANDLED_HANDLER
00000180= 00001988                 378          DC.L UNHANDLED_HANDLER
00000184= 00001988                 379          DC.L UNHANDLED_HANDLER
00000188= 00001988                 380          DC.L UNHANDLED_HANDLER
0000018C= 00001988                 381          DC.L UNHANDLED_HANDLER
00000190= 00001988                 382          DC.L UNHANDLED_HANDLER
00000194= 00001988                 383          DC.L UNHANDLED_HANDLER
00000198= 00001988                 384          DC.L UNHANDLED_HANDLER
0000019C= 00001988                 385          DC.L UNHANDLED_HANDLER
000001A0= 00001988                 386          DC.L UNHANDLED_HANDLER
000001A4= 00001988                 387          DC.L UNHANDLED_HANDLER
000001A8= 00001988                 388          DC.L UNHANDLED_HANDLER
000001AC= 00001988                 389          DC.L UNHANDLED_HANDLER
000001B0= 00001988                 390          DC.L UNHANDLED_HANDLER
000001B4= 00001988                 391          DC.L UNHANDLED_HANDLER
000001B8= 00001988                 392          DC.L UNHANDLED_HANDLER
000001BC= 00001988                 393          DC.L UNHANDLED_HANDLER
000001C0= 00001988                 394          DC.L UNHANDLED_HANDLER
000001C4= 00001988                 395          DC.L UNHANDLED_HANDLER
000001C8= 00001988                 396          DC.L UNHANDLED_HANDLER
000001CC= 00001988                 397          DC.L UNHANDLED_HANDLER
000001D0= 00001988                 398          DC.L UNHANDLED_HANDLER
000001D4= 00001988                 399          DC.L UNHANDLED_HANDLER
000001D8= 00001988                 400          DC.L UNHANDLED_HANDLER
000001DC= 00001988                 401          DC.L UNHANDLED_HANDLER
000001E0= 00001988                 402          DC.L UNHANDLED_HANDLER
000001E4= 00001988                 403          DC.L UNHANDLED_HANDLER
000001E8= 00001988                 404          DC.L UNHANDLED_HANDLER
000001EC= 00001988                 405          DC.L UNHANDLED_HANDLER
000001F0= 00001988                 406          DC.L UNHANDLED_HANDLER
000001F4= 00001988                 407          DC.L UNHANDLED_HANDLER
000001F8= 00001988                 408          DC.L UNHANDLED_HANDLER
000001FC= 00001988                 409          DC.L UNHANDLED_HANDLER
00000200= 00001988                 410          DC.L UNHANDLED_HANDLER
00000204= 00001988                 411          DC.L UNHANDLED_HANDLER
00000208= 00001988                 412          DC.L UNHANDLED_HANDLER
0000020C= 00001988                 413          DC.L UNHANDLED_HANDLER
00000210= 00001988                 414          DC.L UNHANDLED_HANDLER
00000214= 00001988                 415          DC.L UNHANDLED_HANDLER
00000218= 00001988                 416          DC.L UNHANDLED_HANDLER
0000021C= 00001988                 417          DC.L UNHANDLED_HANDLER
00000220= 00001988                 418          DC.L UNHANDLED_HANDLER
00000224= 00001988                 419          DC.L UNHANDLED_HANDLER
00000228= 00001988                 420          DC.L UNHANDLED_HANDLER
0000022C= 00001988                 421          DC.L UNHANDLED_HANDLER
00000230= 00001988                 422          DC.L UNHANDLED_HANDLER
00000234= 00001988                 423          DC.L UNHANDLED_HANDLER
00000238= 00001988                 424          DC.L UNHANDLED_HANDLER
0000023C= 00001988                 425          DC.L UNHANDLED_HANDLER
00000240= 00001988                 426          DC.L UNHANDLED_HANDLER
00000244= 00001988                 427          DC.L UNHANDLED_HANDLER
00000248= 00001988                 428          DC.L UNHANDLED_HANDLER
0000024C= 00001988                 429          DC.L UNHANDLED_HANDLER
00000250= 00001988                 430          DC.L UNHANDLED_HANDLER
00000254= 00001988                 431          DC.L UNHANDLED_HANDLER
00000258= 00001988                 432          DC.L UNHANDLED_HANDLER
0000025C= 00001988                 433          DC.L UNHANDLED_HANDLER
00000260= 00001988                 434          DC.L UNHANDLED_HANDLER
00000264= 00001988                 435          DC.L UNHANDLED_HANDLER
00000268= 00001988                 436          DC.L UNHANDLED_HANDLER
0000026C= 00001988                 437          DC.L UNHANDLED_HANDLER
00000270= 00001988                 438          DC.L UNHANDLED_HANDLER
00000274= 00001988                 439          DC.L UNHANDLED_HANDLER
00000278= 00001988                 440          DC.L UNHANDLED_HANDLER
0000027C= 00001988                 441          DC.L UNHANDLED_HANDLER
00000280= 00001988                 442          DC.L UNHANDLED_HANDLER
00000284= 00001988                 443          DC.L UNHANDLED_HANDLER
00000288= 00001988                 444          DC.L UNHANDLED_HANDLER
0000028C= 00001988                 445          DC.L UNHANDLED_HANDLER
00000290= 00001988                 446          DC.L UNHANDLED_HANDLER
00000294= 00001988                 447          DC.L UNHANDLED_HANDLER
00000298= 00001988                 448          DC.L UNHANDLED_HANDLER
0000029C= 00001988                 449          DC.L UNHANDLED_HANDLER
000002A0= 00001988                 450          DC.L UNHANDLED_HANDLER
000002A4= 00001988                 451          DC.L UNHANDLED_HANDLER
000002A8= 00001988                 452          DC.L UNHANDLED_HANDLER
000002AC= 00001988                 453          DC.L UNHANDLED_HANDLER
000002B0= 00001988                 454          DC.L UNHANDLED_HANDLER
000002B4= 00001988                 455          DC.L UNHANDLED_HANDLER
000002B8= 00001988                 456          DC.L UNHANDLED_HANDLER
000002BC= 00001988                 457          DC.L UNHANDLED_HANDLER
000002C0= 00001988                 458          DC.L UNHANDLED_HANDLER
000002C4= 00001988                 459          DC.L UNHANDLED_HANDLER
000002C8= 00001988                 460          DC.L UNHANDLED_HANDLER
000002CC= 00001988                 461          DC.L UNHANDLED_HANDLER
000002D0= 00001988                 462          DC.L UNHANDLED_HANDLER
000002D4= 00001988                 463          DC.L UNHANDLED_HANDLER
000002D8= 00001988                 464          DC.L UNHANDLED_HANDLER
000002DC= 00001988                 465          DC.L UNHANDLED_HANDLER
000002E0= 00001988                 466          DC.L UNHANDLED_HANDLER
000002E4= 00001988                 467          DC.L UNHANDLED_HANDLER
000002E8= 00001988                 468          DC.L UNHANDLED_HANDLER
000002EC= 00001988                 469          DC.L UNHANDLED_HANDLER
000002F0= 00001988                 470          DC.L UNHANDLED_HANDLER
000002F4= 00001988                 471          DC.L UNHANDLED_HANDLER
000002F8= 00001988                 472          DC.L UNHANDLED_HANDLER
000002FC= 00001988                 473          DC.L UNHANDLED_HANDLER
00000300= 00001988                 474          DC.L UNHANDLED_HANDLER
00000304= 00001988                 475          DC.L UNHANDLED_HANDLER
00000308= 00001988                 476          DC.L UNHANDLED_HANDLER
0000030C= 00001988                 477          DC.L UNHANDLED_HANDLER
00000310= 00001988                 478          DC.L UNHANDLED_HANDLER
00000314= 00001988                 479          DC.L UNHANDLED_HANDLER
00000318= 00001988                 480          DC.L UNHANDLED_HANDLER
0000031C= 00001988                 481          DC.L UNHANDLED_HANDLER
00000320= 00001988                 482          DC.L UNHANDLED_HANDLER
00000324= 00001988                 483          DC.L UNHANDLED_HANDLER
00000328= 00001988                 484          DC.L UNHANDLED_HANDLER
0000032C= 00001988                 485          DC.L UNHANDLED_HANDLER
00000330= 00001988                 486          DC.L UNHANDLED_HANDLER
00000334= 00001988                 487          DC.L UNHANDLED_HANDLER
00000338= 00001988                 488          DC.L UNHANDLED_HANDLER
0000033C= 00001988                 489          DC.L UNHANDLED_HANDLER
00000340= 00001988                 490          DC.L UNHANDLED_HANDLER
00000344= 00001988                 491          DC.L UNHANDLED_HANDLER
00000348= 00001988                 492          DC.L UNHANDLED_HANDLER
0000034C= 00001988                 493          DC.L UNHANDLED_HANDLER
00000350= 00001988                 494          DC.L UNHANDLED_HANDLER
00000354= 00001988                 495          DC.L UNHANDLED_HANDLER
00000358= 00001988                 496          DC.L UNHANDLED_HANDLER
0000035C= 00001988                 497          DC.L UNHANDLED_HANDLER
00000360= 00001988                 498          DC.L UNHANDLED_HANDLER
00000364= 00001988                 499          DC.L UNHANDLED_HANDLER
00000368= 00001988                 500          DC.L UNHANDLED_HANDLER
0000036C= 00001988                 501          DC.L UNHANDLED_HANDLER
00000370= 00001988                 502          DC.L UNHANDLED_HANDLER
00000374= 00001988                 503          DC.L UNHANDLED_HANDLER
00000378= 00001988                 504          DC.L UNHANDLED_HANDLER
0000037C= 00001988                 505          DC.L UNHANDLED_HANDLER
00000380= 00001988                 506          DC.L UNHANDLED_HANDLER
00000384= 00001988                 507          DC.L UNHANDLED_HANDLER
00000388= 00001988                 508          DC.L UNHANDLED_HANDLER
0000038C= 00001988                 509          DC.L UNHANDLED_HANDLER
00000390= 00001988                 510          DC.L UNHANDLED_HANDLER
00000394= 00001988                 511          DC.L UNHANDLED_HANDLER
00000398= 00001988                 512          DC.L UNHANDLED_HANDLER
0000039C= 00001988                 513          DC.L UNHANDLED_HANDLER
000003A0= 00001988                 514          DC.L UNHANDLED_HANDLER
000003A4= 00001988                 515          DC.L UNHANDLED_HANDLER
000003A8= 00001988                 516          DC.L UNHANDLED_HANDLER
000003AC= 00001988                 517          DC.L UNHANDLED_HANDLER
000003B0= 00001988                 518          DC.L UNHANDLED_HANDLER
000003B4= 00001988                 519          DC.L UNHANDLED_HANDLER
000003B8= 00001988                 520          DC.L UNHANDLED_HANDLER
000003BC= 00001988                 521          DC.L UNHANDLED_HANDLER
000003C0= 00001988                 522          DC.L UNHANDLED_HANDLER
000003C4= 00001988                 523          DC.L UNHANDLED_HANDLER
000003C8= 00001988                 524          DC.L UNHANDLED_HANDLER
000003CC= 00001988                 525          DC.L UNHANDLED_HANDLER
000003D0= 00001988                 526          DC.L UNHANDLED_HANDLER
000003D4= 00001988                 527          DC.L UNHANDLED_HANDLER
000003D8= 00001988                 528          DC.L UNHANDLED_HANDLER
000003DC= 00001988                 529          DC.L UNHANDLED_HANDLER
000003E0= 00001988                 530          DC.L UNHANDLED_HANDLER
000003E4= 00001988                 531          DC.L UNHANDLED_HANDLER
000003E8= 00001988                 532          DC.L UNHANDLED_HANDLER
000003EC= 00001988                 533          DC.L UNHANDLED_HANDLER
000003F0= 00001988                 534          DC.L UNHANDLED_HANDLER
000003F4= 00001988                 535          DC.L UNHANDLED_HANDLER
000003F8= 00001988                 536          DC.L UNHANDLED_HANDLER
000003FC= 00001988                 537          DC.L UNHANDLED_HANDLER
00000400                           538  ; start of program  
00000400                           539  START
00000400  13FC 0000 00E00001       540      MOVE.B #0,DISPLAY
00000408                           541  
00000408  2E7C 002E0000            542      MOVE.L #STACK_ADDRESS,A7
0000040E                           543  
0000040E                           544  ; reset the UART in case of warm start
0000040E  13FC 000A 00C00005       545      MOVE.B #$A,DUART_CRA                                ; disable rx & tx
00000416  13FC 000A 00C00015       546      MOVE.B #$A,DUART_CRB                                ; disable rx & tx
0000041E                           547      
0000041E                           548      FOR D1 = #$50 DOWNTO #$10 BY #$10 DO
0000041E  323C 0050                549s     MOVE.W  #$50,D1
00000422  6000 000E                550s     BRA _20000001
00000426                           551s _20000000
00000426  13C1 00C00005            552          MOVE.B D1,DUART_CRA                         ; reset everyting
0000042C  4E71                     553          NOP
0000042E                           554      ENDF
0000042E  0441 0010                555s     SUB.W   #$10,D1
00000432                           556s _20000001
00000432  B27C 0010                557s     CMP.W   #$10,D1
00000436  6CEE                     558s     BGE _20000000
00000438                           559  
00000438                           560      FOR D1 = #$50 DOWNTO #$10 BY #$10 DO
00000438  323C 0050                561s     MOVE.W  #$50,D1
0000043C  6000 000E                562s     BRA _20000003
00000440                           563s _20000002
00000440  13C1 00C00015            564          MOVE.B D1,DUART_CRB                         ; reset everyting
00000446  4E71                     565          NOP
00000448                           566      ENDF
00000448  0441 0010                567s     SUB.W   #$10,D1
0000044C                           568s _20000003
0000044C  B27C 0010                569s     CMP.W   #$10,D1
00000450  6CEE                     570s     BGE _20000002
00000452                           571      
00000452                           572  ;initialise UART
00000452  13FC 0000 00C00009       573      MOVE.B #$0,DUART_ACR
0000045A  13FC 0000 00C0000B       574      MOVE.B #$0,DUART_IMR                                ; no interrupts, please
00000462  13FC 0000 00C0001B       575      MOVE.B #$0,DUART_OPCR                           ; enable all outputs
0000046A                           576  
0000046A                           577  ; channel A
0000046A  13FC 0013 00C00001       578      MOVE.B #$13,DUART_MRA                           ; no flow control, no parity, 8 data bits
00000472  13FC 0007 00C00001       579      MOVE.B #$07,DUART_MRA                           ; 1 stop bit
0000047A  13FC 00CC 00C00003       580      MOVE.B #$CC,DUART_CSRA                          ; 38400 baud
00000482  13FC 0005 00C00005       581      MOVE.B #$5,DUART_CRA                                ; enable rx & tx
0000048A                           582  
0000048A                           583  ; channel B
0000048A  13FC 0013 00C00011       584      MOVE.B #$13,DUART_MRB                           ; no flow control, no parity, 8 data bits
00000492  13FC 0007 00C00011       585      MOVE.B #$07,DUART_MRB                           ; 1 stop bit
0000049A  13FC 00CC 00C00013       586      MOVE.B #$CC,DUART_CSRB                          ; 38400 baud
000004A2  13FC 0005 00C00015       587      MOVE.B #$5,DUART_CRB                                ; enable rx & tx
000004AA                           588  
000004AA                           589m     PRINT_CHAR #0,D1                                    ; some non-printing char to flush out the serial port
000004AA                           590m WAIT_FOR_READY_1                                    ; WAIT UNTIL THE THERE IS SPACE TO SEND
000004AA                 TRUE      591m     IFEQ DEBUG
000004AA  1239 00C00003            592m         MOVE.B DUART_SRA,D1                         ; READ STATUS REGISTER
000004B0  0801 0002                593m         BTST #2,D1                                  ; CHECK FOR SPACE TO SEND
000004B4  67F4                     594m         BEQ WAIT_FOR_READY_1                        ; NO SPACE, CHECK AGAIN
000004B6  13FC 0000 00C00007       595m         MOVE.B #0,DUART_TXA                         ; SEND THE NEXT CHARACTER
000004BE                           596m     ENDC
000004BE                           597m 
000004BE                 FALSE     598m     IFNE DEBUG
000004BE                           599m     ENDC
000004BE                           600m 
000004BE                           601m     ENDM
000004BE                           602m     PRINT_CHAR #0,D1
000004BE                           603m WAIT_FOR_READY_2                                    ; WAIT UNTIL THE THERE IS SPACE TO SEND
000004BE                 TRUE      604m     IFEQ DEBUG
000004BE  1239 00C00003            605m         MOVE.B DUART_SRA,D1                         ; READ STATUS REGISTER
000004C4  0801 0002                606m         BTST #2,D1                                  ; CHECK FOR SPACE TO SEND
000004C8  67F4                     607m         BEQ WAIT_FOR_READY_2                        ; NO SPACE, CHECK AGAIN
000004CA  13FC 0000 00C00007       608m         MOVE.B #0,DUART_TXA                         ; SEND THE NEXT CHARACTER
000004D2                           609m     ENDC
000004D2                           610m 
000004D2                 FALSE     611m     IFNE DEBUG
000004D2                           612m     ENDC
000004D2                           613m 
000004D2                           614m     ENDM
000004D2                           615m     PRINT_CHAR #0,D1
000004D2                           616m WAIT_FOR_READY_3                                    ; WAIT UNTIL THE THERE IS SPACE TO SEND
000004D2                 TRUE      617m     IFEQ DEBUG
000004D2  1239 00C00003            618m         MOVE.B DUART_SRA,D1                         ; READ STATUS REGISTER
000004D8  0801 0002                619m         BTST #2,D1                                  ; CHECK FOR SPACE TO SEND
000004DC  67F4                     620m         BEQ WAIT_FOR_READY_3                        ; NO SPACE, CHECK AGAIN
000004DE  13FC 0000 00C00007       621m         MOVE.B #0,DUART_TXA                         ; SEND THE NEXT CHARACTER
000004E6                           622m     ENDC
000004E6                           623m 
000004E6                 FALSE     624m     IFNE DEBUG
000004E6                           625m     ENDC
000004E6                           626m 
000004E6                           627m     ENDM
000004E6                           628  
000004E6  13FC 0001 00E00001       629      MOVE.B #1,DISPLAY
000004EE                           630      
000004EE                           631m     PRINT_CRLF D1,A0
000004EE  41FA 16AE                632m     LEA CRLF(PC),A0
000004F2                           633mm     PRINT_STR A0,D1
000004F2                           634mm LOOP_5
000004F2  0C10 0000                635mm     CMP.B #NULL,(A0)                                ; 0 -> DONE
000004F6  6700 0016                636mm     BEQ EXIT_5
000004FA                           637mmm     PRINT_CHAR (A0)+,D1
000004FA                           638mmm WAIT_FOR_READY_6                                    ; WAIT UNTIL THE THERE IS SPACE TO SEND
000004FA                 TRUE      639mmm     IFEQ DEBUG
000004FA  1239 00C00003            640mmm         MOVE.B DUART_SRA,D1                         ; READ STATUS REGISTER
00000500  0801 0002                641mmm         BTST #2,D1                                  ; CHECK FOR SPACE TO SEND
00000504  67F4                     642mmm         BEQ WAIT_FOR_READY_6                        ; NO SPACE, CHECK AGAIN
00000506  13D8 00C00007            643mmm         MOVE.B (A0)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
0000050C                           644mmm     ENDC
0000050C                           645mmm 
0000050C                 FALSE     646mmm     IFNE DEBUG
0000050C                           647mmm     ENDC
0000050C                           648mmm 
0000050C                           649mmm     ENDM
0000050C  60E4                     650mm     BRA LOOP_5
0000050E                           651mm EXIT_5
0000050E                           652mm     ENDM
0000050E                           653m     ENDM
0000050E  41FA 16EE                654      LEA VERSION(PC),A0
00000512                           655m     PRINT_STR A0,D3
00000512                           656m LOOP_7
00000512  0C10 0000                657m     CMP.B #NULL,(A0)                                ; 0 -> DONE
00000516  6700 0016                658m     BEQ EXIT_7
0000051A                           659mm     PRINT_CHAR (A0)+,D3
0000051A                           660mm WAIT_FOR_READY_8                                    ; WAIT UNTIL THE THERE IS SPACE TO SEND
0000051A                 TRUE      661mm     IFEQ DEBUG
0000051A  1639 00C00003            662mm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
00000520  0803 0002                663mm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
00000524  67F4                     664mm         BEQ WAIT_FOR_READY_8                        ; NO SPACE, CHECK AGAIN
00000526  13D8 00C00007            665mm         MOVE.B (A0)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
0000052C                           666mm     ENDC
0000052C                           667mm 
0000052C                 FALSE     668mm     IFNE DEBUG
0000052C                           669mm     ENDC
0000052C                           670mm 
0000052C                           671mm     ENDM
0000052C  60E4                     672m     BRA LOOP_7
0000052E                           673m EXIT_7
0000052E                           674m     ENDM
0000052E                           675  
0000052E  41F9 00001C1C            676      LEA END,A0
00000534  2008                     677      MOVE.L A0,D0
00000536                           678m     PRINT_REG D0,D1,D2,D3,A0
00000536  41FA 166C                679m     LEA OX(PC),A0
0000053A                           680mm     PRINT_STR A0,D1
0000053A                           681mm LOOP_10
0000053A  0C10 0000                682mm     CMP.B #NULL,(A0)                                ; 0 -> DONE
0000053E  6700 0016                683mm     BEQ EXIT_10
00000542                           684mmm     PRINT_CHAR (A0)+,D1
00000542                           685mmm WAIT_FOR_READY_11                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000542                 TRUE      686mmm     IFEQ DEBUG
00000542  1239 00C00003            687mmm         MOVE.B DUART_SRA,D1                         ; READ STATUS REGISTER
00000548  0801 0002                688mmm         BTST #2,D1                                  ; CHECK FOR SPACE TO SEND
0000054C  67F4                     689mmm         BEQ WAIT_FOR_READY_11                       ; NO SPACE, CHECK AGAIN
0000054E  13D8 00C00007            690mmm         MOVE.B (A0)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00000554                           691mmm     ENDC
00000554                           692mmm 
00000554                 FALSE     693mmm     IFNE DEBUG
00000554                           694mmm     ENDC
00000554                           695mmm 
00000554                           696mmm     ENDM
00000554  60E4                     697mm     BRA LOOP_10
00000556                           698mm EXIT_10
00000556                           699mm     ENDM
00000556  7607                     700m     MOVE.L #7,D3                                    ; LOOP ROUND ALL 8 HEX CHARACTERS OF 4 BITS EACH
00000558                           701m LOOP_9
00000558                           702mm     BIN2HEX D0,D2,A0
00000558  41FA 15C6                703mm     LEA BIN2HEX_LUT(PC),A0                          ; LOAD THE LOOKUP TABLE
0000055C  E998                     704mm     ROL.L #4,D0                                     ; SHIFT THE TOP 4 BITS DOWN TO BOTTOM OF THE REGISTER THE AND MASK OFF EVERYTHING ELSE
0000055E  1400                     705mm     MOVE.B D0,D2
00000560  0282 0000000F            706mm     ANDI.L #$F,D2
00000566  1430 2000                707mm     MOVE.B 0(A0,D2),D2                              ; USE THAT AS AN INDEX INTO THE LUT
0000056A                           708mm     ENDM
0000056A                           709mm     PRINT_CHAR D2,D1
0000056A                           710mm WAIT_FOR_READY_13                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
0000056A                 TRUE      711mm     IFEQ DEBUG
0000056A  1239 00C00003            712mm         MOVE.B DUART_SRA,D1                         ; READ STATUS REGISTER
00000570  0801 0002                713mm         BTST #2,D1                                  ; CHECK FOR SPACE TO SEND
00000574  67F4                     714mm         BEQ WAIT_FOR_READY_13                       ; NO SPACE, CHECK AGAIN
00000576  13C2 00C00007            715mm         MOVE.B D2,DUART_TXA                         ; SEND THE NEXT CHARACTER
0000057C                           716mm     ENDC
0000057C                           717mm 
0000057C                 FALSE     718mm     IFNE DEBUG
0000057C                           719mm     ENDC
0000057C                           720mm 
0000057C                           721mm     ENDM
0000057C  57CB FFDA                722m     DBEQ D3,LOOP_9
00000580                           723m     ENDM
00000580                           724m     PRINT_CRLF D1,A0
00000580  41FA 161C                725m     LEA CRLF(PC),A0
00000584                           726mm     PRINT_STR A0,D1
00000584                           727mm LOOP_15
00000584  0C10 0000                728mm     CMP.B #NULL,(A0)                                ; 0 -> DONE
00000588  6700 0016                729mm     BEQ EXIT_15
0000058C                           730mmm     PRINT_CHAR (A0)+,D1
0000058C                           731mmm WAIT_FOR_READY_16                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
0000058C                 TRUE      732mmm     IFEQ DEBUG
0000058C  1239 00C00003            733mmm         MOVE.B DUART_SRA,D1                         ; READ STATUS REGISTER
00000592  0801 0002                734mmm         BTST #2,D1                                  ; CHECK FOR SPACE TO SEND
00000596  67F4                     735mmm         BEQ WAIT_FOR_READY_16                       ; NO SPACE, CHECK AGAIN
00000598  13D8 00C00007            736mmm         MOVE.B (A0)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
0000059E                           737mmm     ENDC
0000059E                           738mmm 
0000059E                 FALSE     739mmm     IFNE DEBUG
0000059E                           740mmm     ENDC
0000059E                           741mmm 
0000059E                           742mmm     ENDM
0000059E  60E4                     743mm     BRA LOOP_15
000005A0                           744mm EXIT_15
000005A0                           745mm     ENDM
000005A0                           746m     ENDM
000005A0                           747  
000005A0  41FA 13F6                748      LEA HELPPROMPT(PC),A0
000005A4                           749m     PRINT_STR A0,D3
000005A4                           750m LOOP_17
000005A4  0C10 0000                751m     CMP.B #NULL,(A0)                                ; 0 -> DONE
000005A8  6700 0016                752m     BEQ EXIT_17
000005AC                           753mm     PRINT_CHAR (A0)+,D3
000005AC                           754mm WAIT_FOR_READY_18                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
000005AC                 TRUE      755mm     IFEQ DEBUG
000005AC  1639 00C00003            756mm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
000005B2  0803 0002                757mm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
000005B6  67F4                     758mm         BEQ WAIT_FOR_READY_18                       ; NO SPACE, CHECK AGAIN
000005B8  13D8 00C00007            759mm         MOVE.B (A0)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
000005BE                           760mm     ENDC
000005BE                           761mm 
000005BE                 FALSE     762mm     IFNE DEBUG
000005BE                           763mm     ENDC
000005BE                           764mm 
000005BE                           765mm     ENDM
000005BE  60E4                     766m     BRA LOOP_17
000005C0                           767m EXIT_17
000005C0                           768m     ENDM
000005C0                           769  
000005C0                           770m     PRINT_CRLF D3,A0
000005C0  41FA 15DC                771m     LEA CRLF(PC),A0
000005C4                           772mm     PRINT_STR A0,D3
000005C4                           773mm LOOP_20
000005C4  0C10 0000                774mm     CMP.B #NULL,(A0)                                ; 0 -> DONE
000005C8  6700 0016                775mm     BEQ EXIT_20
000005CC                           776mmm     PRINT_CHAR (A0)+,D3
000005CC                           777mmm WAIT_FOR_READY_21                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
000005CC                 TRUE      778mmm     IFEQ DEBUG
000005CC  1639 00C00003            779mmm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
000005D2  0803 0002                780mmm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
000005D6  67F4                     781mmm         BEQ WAIT_FOR_READY_21                       ; NO SPACE, CHECK AGAIN
000005D8  13D8 00C00007            782mmm         MOVE.B (A0)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
000005DE                           783mmm     ENDC
000005DE                           784mmm 
000005DE                 FALSE     785mmm     IFNE DEBUG
000005DE                           786mmm     ENDC
000005DE                           787mmm 
000005DE                           788mmm     ENDM
000005DE  60E4                     789mm     BRA LOOP_20
000005E0                           790mm EXIT_20
000005E0                           791mm     ENDM
000005E0                           792m     ENDM
000005E0                           793  
000005E0  7E00                     794      MOVE.L #0,D7                                        ; address accumulator
000005E2                           795  
000005E2  13FC 0002 00E00001       796      MOVE.B #2,DISPLAY
000005EA                           797  MAIN_LOOP
000005EA  41FA 15B5                798      LEA PROMPT(PC),A0
000005EE                           799m     PRINT_STR A0,D3
000005EE                           800m LOOP_22
000005EE  0C10 0000                801m     CMP.B #NULL,(A0)                                ; 0 -> DONE
000005F2  6700 0016                802m     BEQ EXIT_22
000005F6                           803mm     PRINT_CHAR (A0)+,D3
000005F6                           804mm WAIT_FOR_READY_23                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
000005F6                 TRUE      805mm     IFEQ DEBUG
000005F6  1639 00C00003            806mm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
000005FC  0803 0002                807mm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
00000600  67F4                     808mm         BEQ WAIT_FOR_READY_23                       ; NO SPACE, CHECK AGAIN
00000602  13D8 00C00007            809mm         MOVE.B (A0)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00000608                           810mm     ENDC
00000608                           811mm 
00000608                 FALSE     812mm     IFNE DEBUG
00000608                           813mm     ENDC
00000608                           814mm 
00000608                           815mm     ENDM
00000608  60E4                     816m     BRA LOOP_22
0000060A                           817m EXIT_22
0000060A                           818m     ENDM
0000060A                           819  
0000060A                           820  GET_INPUT
0000060A                           821m     WAIT_CHAR D2,D3                                 ; fetch character from serial port -> D2
0000060A                           822m WAIT_FOR_READY_24                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
0000060A                 TRUE      823m     IFEQ DEBUG
0000060A  1639 00C00003            824m         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
00000610  0803 0000                825m         BTST #0,D3                                  ; CHECK FOR CHARACTER
00000614  67F4                     826m         BEQ WAIT_FOR_READY_24                       ; NOTHING, CHECK AGAIN
00000616                           827m     ENDC
00000616                           828m 
00000616                           829mm     READ_CHAR D2
00000616                 TRUE      830mm     IFEQ DEBUG
00000616  1439 00C00007            831mm         MOVE.B DUART_RXA,D2                         ; GOT A CHARACTER, READ IT
0000061C                           832mm     ENDC
0000061C                 FALSE     833mm     IFNE DEBUG
0000061C                           834mm     ENDC
0000061C                           835mm 
0000061C  B43C 001B                836mm     CMP.B #$1B,D2                                   ; CHECK FOR ESCAPE AND GO TO START
00000620  6700 FDDE                837mm     BEQ START
00000624                           838mm     ENDM
00000624                           839m 
00000624                 TRUE      840m     IFEQ DEBUG
00000624                           841mm         PRINT_CHAR D2,D3                            ; ECHO IT BACK
00000624                           842mm WAIT_FOR_READY_26                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000624                 TRUE      843mm     IFEQ DEBUG
00000624  1639 00C00003            844mm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
0000062A  0803 0002                845mm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
0000062E  67F4                     846mm         BEQ WAIT_FOR_READY_26                       ; NO SPACE, CHECK AGAIN
00000630  13C2 00C00007            847mm         MOVE.B D2,DUART_TXA                         ; SEND THE NEXT CHARACTER
00000636                           848mm     ENDC
00000636                           849mm 
00000636                 FALSE     850mm     IFNE DEBUG
00000636                           851mm     ENDC
00000636                           852mm 
00000636                           853mm     ENDM
00000636                           854m     ENDC
00000636                           855m     ENDM
00000636                           856  
00000636                           857      IF.B D2 <GE> #'0' AND.B D2 <LE> #'9' THEN
00000636  B43C 0030                858s     CMP.B   #'0',D2
0000063A  6D00 000E                859s     BLT _00000000
0000063E  B43C 0039                860s     CMP.B   #'9',D2
00000642  6E00 0006                861s     BGT _00000000
00000646  6000 11BE                862          BRA HEX_DIGIT
0000064A                           863      ENDI
0000064A                           864s _00000000
0000064A                           865      IF.B D2 <GE> #'A' AND.B D2 <LE> #'F' THEN
0000064A  B43C 0041                866s     CMP.B   #'A',D2
0000064E  6D00 000E                867s     BLT _00000001
00000652  B43C 0046                868s     CMP.B   #'F',D2
00000656  6E00 0006                869s     BGT _00000001
0000065A  6000 11AA                870          BRA HEX_DIGIT
0000065E                           871      ENDI
0000065E                           872s _00000001
0000065E                           873  
0000065E  B43C 0077                874      CMP.B #'w',D2
00000662  6700 019A                875      BEQ W
00000666                           876  
00000666  B43C 006C                877      CMP.B #'l',D2
0000066A  6700 0A30                878      BEQ L 
0000066E                           879  
0000066E  B43C 0070                880      CMP.B #'p',D2
00000672  6700 0E20                881      BEQ P
00000676                           882  
00000676  B43C 006D                883      CMP.B #'m',D2
0000067A  6700 0FD6                884      BEQ M
0000067E                           885  
0000067E                           886m     PRINT_CRLF D3,A0
0000067E  41FA 151E                887m     LEA CRLF(PC),A0
00000682                           888mm     PRINT_STR A0,D3
00000682                           889mm LOOP_28
00000682  0C10 0000                890mm     CMP.B #NULL,(A0)                                ; 0 -> DONE
00000686  6700 0016                891mm     BEQ EXIT_28
0000068A                           892mmm     PRINT_CHAR (A0)+,D3
0000068A                           893mmm WAIT_FOR_READY_29                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
0000068A                 TRUE      894mmm     IFEQ DEBUG
0000068A  1639 00C00003            895mmm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
00000690  0803 0002                896mmm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
00000694  67F4                     897mmm         BEQ WAIT_FOR_READY_29                       ; NO SPACE, CHECK AGAIN
00000696  13D8 00C00007            898mmm         MOVE.B (A0)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
0000069C                           899mmm     ENDC
0000069C                           900mmm 
0000069C                 FALSE     901mmm     IFNE DEBUG
0000069C                           902mmm     ENDC
0000069C                           903mmm 
0000069C                           904mmm     ENDM
0000069C  60E4                     905mm     BRA LOOP_28
0000069E                           906mm EXIT_28
0000069E                           907mm     ENDM
0000069E                           908m     ENDM
0000069E                           909   
0000069E  B43C 003F                910      CMP.B #'?',D2
000006A2  6700 0056                911      BEQ H
000006A6                           912   
000006A6  B43C 0076                913      CMP.B #'v',D2
000006AA  6700 0056                914      BEQ V
000006AE                           915      
000006AE  B43C 0072                916      CMP.B #'r',D2
000006B2  6700 0072                917      BEQ R
000006B6                           918  
000006B6  B43C 0073                919      CMP.B #'s',D2
000006BA  6700 01BE                920      BEQ S
000006BE                           921  
000006BE  B43C 0067                922      CMP.B #'g',D2
000006C2  6700 08E2                923      BEQ G   
000006C6                           924  
000006C6  B43C 007A                925      CMP.B #'z',D2
000006CA  6700 08E0                926      BEQ Z   
000006CE                           927  
000006CE  B43C 0078                928      CMP.B #'x',D2
000006D2  6700 1016                929      BEQ X
000006D6                           930  
000006D6  41FA 13E6                931      LEA HUH(PC),A0
000006DA                           932m     PRINT_STR A0,D3
000006DA                           933m LOOP_30
000006DA  0C10 0000                934m     CMP.B #NULL,(A0)                                ; 0 -> DONE
000006DE  6700 0016                935m     BEQ EXIT_30
000006E2                           936mm     PRINT_CHAR (A0)+,D3
000006E2                           937mm WAIT_FOR_READY_31                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
000006E2                 TRUE      938mm     IFEQ DEBUG
000006E2  1639 00C00003            939mm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
000006E8  0803 0002                940mm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
000006EC  67F4                     941mm         BEQ WAIT_FOR_READY_31                       ; NO SPACE, CHECK AGAIN
000006EE  13D8 00C00007            942mm         MOVE.B (A0)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
000006F4                           943mm     ENDC
000006F4                           944mm 
000006F4                 FALSE     945mm     IFNE DEBUG
000006F4                           946mm     ENDC
000006F4                           947mm 
000006F4                           948mm     ENDM
000006F4  60E4                     949m     BRA LOOP_30
000006F6                           950m EXIT_30
000006F6                           951m     ENDM
000006F6                           952  
000006F6  6000 FEF2                953      BRA MAIN_LOOP
000006FA                           954  
000006FA                           955  ; commands
000006FA                           956  H
000006FA  41FA 12AF                957      LEA HELP(PC),A0
000006FE  6000 0006                958      BRA PRINTSTR
00000702                           959  
00000702                           960  V
00000702  41FA 14FA                961      LEA VERSION(PC),A0
00000706                           962  PRINTSTR
00000706                           963m     PRINT_STR A0,D3    
00000706                           964m LOOP_32
00000706  0C10 0000                965m     CMP.B #NULL,(A0)                                ; 0 -> DONE
0000070A  6700 0016                966m     BEQ EXIT_32
0000070E                           967mm     PRINT_CHAR (A0)+,D3
0000070E                           968mm WAIT_FOR_READY_33                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
0000070E                 TRUE      969mm     IFEQ DEBUG
0000070E  1639 00C00003            970mm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
00000714  0803 0002                971mm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
00000718  67F4                     972mm         BEQ WAIT_FOR_READY_33                       ; NO SPACE, CHECK AGAIN
0000071A  13D8 00C00007            973mm         MOVE.B (A0)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00000720                           974mm     ENDC
00000720                           975mm 
00000720                 FALSE     976mm     IFNE DEBUG
00000720                           977mm     ENDC
00000720                           978mm 
00000720                           979mm     ENDM
00000720  60E4                     980m     BRA LOOP_32
00000722                           981m EXIT_32
00000722                           982m     ENDM
00000722  6000 FEC6                983      BRA MAIN_LOOP
00000726                           984  
00000726                           985  R
00000726  2047                     986      MOVE.L D7,A0                                    ; address accumulator -> address register
00000728  7E00                     987      MOVE.L #0,D7                                    ;clear the now used address accumulator
0000072A  2410                     988      MOVE.L (A0),D2                                  ; read the memory and print it
0000072C                           989m     PRINT_REG D2,D3,D4,D5,A0
0000072C  41FA 1476                990m     LEA OX(PC),A0
00000730                           991mm     PRINT_STR A0,D3
00000730                           992mm LOOP_35
00000730  0C10 0000                993mm     CMP.B #NULL,(A0)                                ; 0 -> DONE
00000734  6700 0016                994mm     BEQ EXIT_35
00000738                           995mmm     PRINT_CHAR (A0)+,D3
00000738                           996mmm WAIT_FOR_READY_36                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000738                 TRUE      997mmm     IFEQ DEBUG
00000738  1639 00C00003            998mmm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
0000073E  0803 0002                999mmm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
00000742  67F4                    1000mmm         BEQ WAIT_FOR_READY_36                       ; NO SPACE, CHECK AGAIN
00000744  13D8 00C00007           1001mmm         MOVE.B (A0)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
0000074A                          1002mmm     ENDC
0000074A                          1003mmm 
0000074A                 FALSE    1004mmm     IFNE DEBUG
0000074A                          1005mmm     ENDC
0000074A                          1006mmm 
0000074A                          1007mmm     ENDM
0000074A  60E4                    1008mm     BRA LOOP_35
0000074C                          1009mm EXIT_35
0000074C                          1010mm     ENDM
0000074C  7A07                    1011m     MOVE.L #7,D5                                    ; LOOP ROUND ALL 8 HEX CHARACTERS OF 4 BITS EACH
0000074E                          1012m LOOP_34
0000074E                          1013mm     BIN2HEX D2,D4,A0
0000074E  41FA 13D0               1014mm     LEA BIN2HEX_LUT(PC),A0                          ; LOAD THE LOOKUP TABLE
00000752  E99A                    1015mm     ROL.L #4,D2                                     ; SHIFT THE TOP 4 BITS DOWN TO BOTTOM OF THE REGISTER THE AND MASK OFF EVERYTHING ELSE
00000754  1802                    1016mm     MOVE.B D2,D4
00000756  0284 0000000F           1017mm     ANDI.L #$F,D4
0000075C  1830 4000               1018mm     MOVE.B 0(A0,D4),D4                              ; USE THAT AS AN INDEX INTO THE LUT
00000760                          1019mm     ENDM
00000760                          1020mm     PRINT_CHAR D4,D3
00000760                          1021mm WAIT_FOR_READY_38                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000760                 TRUE     1022mm     IFEQ DEBUG
00000760  1639 00C00003           1023mm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
00000766  0803 0002               1024mm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
0000076A  67F4                    1025mm         BEQ WAIT_FOR_READY_38                       ; NO SPACE, CHECK AGAIN
0000076C  13C4 00C00007           1026mm         MOVE.B D4,DUART_TXA                         ; SEND THE NEXT CHARACTER
00000772                          1027mm     ENDC
00000772                          1028mm 
00000772                 FALSE    1029mm     IFNE DEBUG
00000772                          1030mm     ENDC
00000772                          1031mm 
00000772                          1032mm     ENDM
00000772  57CD FFDA               1033m     DBEQ D5,LOOP_34
00000776                          1034m     ENDM
00000776                          1035      
00000776                          1036m     PRINT_CHAR #32,D3
00000776                          1037m WAIT_FOR_READY_39                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000776                 TRUE     1038m     IFEQ DEBUG
00000776  1639 00C00003           1039m         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
0000077C  0803 0002               1040m         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
00000780  67F4                    1041m         BEQ WAIT_FOR_READY_39                       ; NO SPACE, CHECK AGAIN
00000782  13FC 0020 00C00007      1042m         MOVE.B #32,DUART_TXA                            ; SEND THE NEXT CHARACTER
0000078A                          1043m     ENDC
0000078A                          1044m 
0000078A                 FALSE    1045m     IFNE DEBUG
0000078A                          1046m     ENDC
0000078A                          1047m 
0000078A                          1048m     ENDM
0000078A                          1049  
0000078A  E19A                    1050      ROL.L #8,D2
0000078C                          1051m     PRINT_CHAR D2,D3
0000078C                          1052m WAIT_FOR_READY_40                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
0000078C                 TRUE     1053m     IFEQ DEBUG
0000078C  1639 00C00003           1054m         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
00000792  0803 0002               1055m         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
00000796  67F4                    1056m         BEQ WAIT_FOR_READY_40                       ; NO SPACE, CHECK AGAIN
00000798  13C2 00C00007           1057m         MOVE.B D2,DUART_TXA                         ; SEND THE NEXT CHARACTER
0000079E                          1058m     ENDC
0000079E                          1059m 
0000079E                 FALSE    1060m     IFNE DEBUG
0000079E                          1061m     ENDC
0000079E                          1062m 
0000079E                          1063m     ENDM
0000079E  E19A                    1064      ROL.L #8,D2
000007A0                          1065m     PRINT_CHAR D2,D3
000007A0                          1066m WAIT_FOR_READY_41                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
000007A0                 TRUE     1067m     IFEQ DEBUG
000007A0  1639 00C00003           1068m         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
000007A6  0803 0002               1069m         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
000007AA  67F4                    1070m         BEQ WAIT_FOR_READY_41                       ; NO SPACE, CHECK AGAIN
000007AC  13C2 00C00007           1071m         MOVE.B D2,DUART_TXA                         ; SEND THE NEXT CHARACTER
000007B2                          1072m     ENDC
000007B2                          1073m 
000007B2                 FALSE    1074m     IFNE DEBUG
000007B2                          1075m     ENDC
000007B2                          1076m 
000007B2                          1077m     ENDM
000007B2  E19A                    1078      ROL.L #8,D2
000007B4                          1079m     PRINT_CHAR D2,D3
000007B4                          1080m WAIT_FOR_READY_42                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
000007B4                 TRUE     1081m     IFEQ DEBUG
000007B4  1639 00C00003           1082m         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
000007BA  0803 0002               1083m         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
000007BE  67F4                    1084m         BEQ WAIT_FOR_READY_42                       ; NO SPACE, CHECK AGAIN
000007C0  13C2 00C00007           1085m         MOVE.B D2,DUART_TXA                         ; SEND THE NEXT CHARACTER
000007C6                          1086m     ENDC
000007C6                          1087m 
000007C6                 FALSE    1088m     IFNE DEBUG
000007C6                          1089m     ENDC
000007C6                          1090m 
000007C6                          1091m     ENDM
000007C6  E19A                    1092      ROL.L #8,D2
000007C8                          1093m     PRINT_CHAR D2,D3
000007C8                          1094m WAIT_FOR_READY_43                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
000007C8                 TRUE     1095m     IFEQ DEBUG
000007C8  1639 00C00003           1096m         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
000007CE  0803 0002               1097m         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
000007D2  67F4                    1098m         BEQ WAIT_FOR_READY_43                       ; NO SPACE, CHECK AGAIN
000007D4  13C2 00C00007           1099m         MOVE.B D2,DUART_TXA                         ; SEND THE NEXT CHARACTER
000007DA                          1100m     ENDC
000007DA                          1101m 
000007DA                 FALSE    1102m     IFNE DEBUG
000007DA                          1103m     ENDC
000007DA                          1104m 
000007DA                          1105m     ENDM
000007DA                          1106  
000007DA                          1107m     PRINT_CRLF D3,A0
000007DA  41FA 13C2               1108m     LEA CRLF(PC),A0
000007DE                          1109mm     PRINT_STR A0,D3
000007DE                          1110mm LOOP_45
000007DE  0C10 0000               1111mm     CMP.B #NULL,(A0)                                ; 0 -> DONE
000007E2  6700 0016               1112mm     BEQ EXIT_45
000007E6                          1113mmm     PRINT_CHAR (A0)+,D3
000007E6                          1114mmm WAIT_FOR_READY_46                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
000007E6                 TRUE     1115mmm     IFEQ DEBUG
000007E6  1639 00C00003           1116mmm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
000007EC  0803 0002               1117mmm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
000007F0  67F4                    1118mmm         BEQ WAIT_FOR_READY_46                       ; NO SPACE, CHECK AGAIN
000007F2  13D8 00C00007           1119mmm         MOVE.B (A0)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
000007F8                          1120mmm     ENDC
000007F8                          1121mmm 
000007F8                 FALSE    1122mmm     IFNE DEBUG
000007F8                          1123mmm     ENDC
000007F8                          1124mmm 
000007F8                          1125mmm     ENDM
000007F8  60E4                    1126mm     BRA LOOP_45
000007FA                          1127mm EXIT_45
000007FA                          1128mm     ENDM
000007FA                          1129m     ENDM
000007FA                          1130      
000007FA  6000 FDEE               1131      BRA MAIN_LOOP
000007FE                          1132  
000007FE                          1133  W
000007FE                          1134      FOR D6 = #0 TO #7 DO                                ; read 4 bytes
000007FE  3C3C 0000               1135s     MOVE.W  #0,D6
00000802  6000 0046               1136s     BRA _20000005
00000806                          1137s _20000004
00000806  E98D                    1138          LSL.L #4,D5                                     ; make what we have so far more significant
00000808                          1139m         WAIT_CHAR D2,D3                                 ; next character -> D2
00000808                          1140m WAIT_FOR_READY_47                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000808                 TRUE     1141m     IFEQ DEBUG
00000808  1639 00C00003           1142m         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
0000080E  0803 0000               1143m         BTST #0,D3                                  ; CHECK FOR CHARACTER
00000812  67F4                    1144m         BEQ WAIT_FOR_READY_47                       ; NOTHING, CHECK AGAIN
00000814                          1145m     ENDC
00000814                          1146m 
00000814                          1147mm     READ_CHAR D2
00000814                 TRUE     1148mm     IFEQ DEBUG
00000814  1439 00C00007           1149mm         MOVE.B DUART_RXA,D2                         ; GOT A CHARACTER, READ IT
0000081A                          1150mm     ENDC
0000081A                 FALSE    1151mm     IFNE DEBUG
0000081A                          1152mm     ENDC
0000081A                          1153mm 
0000081A  B43C 001B               1154mm     CMP.B #$1B,D2                                   ; CHECK FOR ESCAPE AND GO TO START
0000081E  6700 FBE0               1155mm     BEQ START
00000822                          1156mm     ENDM
00000822                          1157m 
00000822                 TRUE     1158m     IFEQ DEBUG
00000822                          1159mm         PRINT_CHAR D2,D3                            ; ECHO IT BACK
00000822                          1160mm WAIT_FOR_READY_49                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000822                 TRUE     1161mm     IFEQ DEBUG
00000822  1639 00C00003           1162mm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
00000828  0803 0002               1163mm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
0000082C  67F4                    1164mm         BEQ WAIT_FOR_READY_49                       ; NO SPACE, CHECK AGAIN
0000082E  13C2 00C00007           1165mm         MOVE.B D2,DUART_TXA                         ; SEND THE NEXT CHARACTER
00000834                          1166mm     ENDC
00000834                          1167mm 
00000834                 FALSE    1168mm     IFNE DEBUG
00000834                          1169mm     ENDC
00000834                          1170mm 
00000834                          1171mm     ENDM
00000834                          1172m     ENDC
00000834                          1173m     ENDM
00000834                          1174m         HEX2BIN D2,D2,A0                                ; convert to binary -> D2
00000834  41FA 12FA               1175m     LEA HEX2BIN_LUT(PC),A0                          ; LOAD THE LOOKUP TABLE
00000838  0402 0030               1176m     SUB.B #'0',D2                                   ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
0000083C  C4BC 000000FF           1177m     AND.L #$FF,D2                                   ; IGNORE THE TOP 3 BYTES
00000842  1430 2000               1178m     MOVE.B 0(A0,D2),D2                              ; USE THAT AS AN INDEX INTO THE LUT   
00000846                          1179m     ENDM
00000846  8A02                    1180          OR.B D2,D5
00000848                          1181      ENDF
00000848  5246                    1182s     ADD.W   #1,D6
0000084A                          1183s _20000005
0000084A  BC7C 0007               1184s     CMP.W   #7,D6
0000084E  6FB6                    1185s     BLE _20000004
00000850                          1186  
00000850                          1187m     PRINT_CRLF D3,A0
00000850  41FA 134C               1188m     LEA CRLF(PC),A0
00000854                          1189mm     PRINT_STR A0,D3
00000854                          1190mm LOOP_52
00000854  0C10 0000               1191mm     CMP.B #NULL,(A0)                                ; 0 -> DONE
00000858  6700 0016               1192mm     BEQ EXIT_52
0000085C                          1193mmm     PRINT_CHAR (A0)+,D3
0000085C                          1194mmm WAIT_FOR_READY_53                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
0000085C                 TRUE     1195mmm     IFEQ DEBUG
0000085C  1639 00C00003           1196mmm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
00000862  0803 0002               1197mmm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
00000866  67F4                    1198mmm         BEQ WAIT_FOR_READY_53                       ; NO SPACE, CHECK AGAIN
00000868  13D8 00C00007           1199mmm         MOVE.B (A0)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
0000086E                          1200mmm     ENDC
0000086E                          1201mmm 
0000086E                 FALSE    1202mmm     IFNE DEBUG
0000086E                          1203mmm     ENDC
0000086E                          1204mmm 
0000086E                          1205mmm     ENDM
0000086E  60E4                    1206mm     BRA LOOP_52
00000870                          1207mm EXIT_52
00000870                          1208mm     ENDM
00000870                          1209m     ENDM
00000870                          1210  
00000870  2047                    1211      MOVE.L D7,A0                                    ; address accumulator -> address register
00000872  7E00                    1212      MOVE.L #0,D7                                    ; clear the now used address accumulator
00000874                          1213  
00000874  2085                    1214      MOVE.L D5,(A0)                                  ; write the data
00000876                          1215  
00000876  6000 FD72               1216      BRA MAIN_LOOP
0000087A                          1217  
0000087A                          1218  ; register map for S
0000087A                          1219  ; A0 - start address
0000087A                          1220  ; A1 - offset
0000087A                          1221  ; A2 - next address to write
0000087A                          1222  ; A3 - next location (jmp)
0000087A                          1223  ; A4 - Working Address Register
0000087A                          1224  ; D0 - record count
0000087A                          1225  ; D1 - 'S', record type, data byte, done flag (0x00000000 = continue, 0xFFFFFFFF = done)
0000087A                          1226  ; D2 - checksum
0000087A                          1227  ; D3 - data byte count
0000087A                          1228  ; D4 - read address, moved into A2
0000087A                          1229  ; D5 - temp
0000087A                          1230  ; D6 - temp
0000087A                          1231  ; D7 - temp
0000087A                          1232  S
0000087A  2078 0000               1233      MOVE.L 0,A0                                     ; start address -> A0
0000087E  2247                    1234      MOVE.L D7,A1                                    ; grab the address accumulator (offset) into A1
00000880                          1235      
00000880  7000                    1236      MOVE.L #0,D0                                    ; count of records read -> D0
00000882                          1237          
00000882                          1238  WAIT_FOR_SRECORD                                    ; wait for the start of a record, indicated by 'S'
00000882                          1239m     DOWNLOAD D1
00000882                          1240m WAIT_FOR_READY_54                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000882                          1241m 
00000882  1239 00C00003           1242m     MOVE.B DUART_SRA,D1                             ; CHECK FOR COMMAND
00000888  0801 0000               1243m     BTST #0,D1                                      ; CHECK FOR CHARACTER
0000088C  6700 0010               1244m     BEQ CONTINUE_54                                 ; NOTHING, CONTINUE
00000890                          1245m 
00000890                          1246mm     READ_CHAR D1                                    ; WE're not going to do anything with it, just check for escape
00000890                 TRUE     1247mm     IFEQ DEBUG
00000890  1239 00C00007           1248mm         MOVE.B DUART_RXA,D1                         ; GOT A CHARACTER, READ IT
00000896                          1249mm     ENDC
00000896                 FALSE    1250mm     IFNE DEBUG
00000896                          1251mm     ENDC
00000896                          1252mm 
00000896  B23C 001B               1253mm     CMP.B #$1B,D1                                   ; CHECK FOR ESCAPE AND GO TO START
0000089A  6700 FB64               1254mm     BEQ START
0000089E                          1255mm     ENDM
0000089E                          1256m CONTINUE_54
0000089E  1239 00C00013           1257m     MOVE.B DUART_SRB,D1                             ; READ DOWNLOAD STATUS REGISTER
000008A4  0801 0000               1258m     BTST #0,D1                                      ; CHECK FOR CHARACTER
000008A8  67D8                    1259m     BEQ WAIT_FOR_READY_54                           ; NOTHING, CHECK AGAIN
000008AA                          1260m     
000008AA  1239 00C00017           1261m     MOVE.B DUART_RXB,D1                             ; GOT A CHARACTER, READ IT
000008B0  13C1 00E00001           1262m     MOVE.B D1,DISPLAY                               ; ECHO TO THE DISPLAY
000008B6                          1263m 
000008B6                          1264m     ENDM
000008B6  B23C 0053               1265      CMP.B #'S',D1                                   ; found S?
000008BA  66C6                    1266      BNE WAIT_FOR_SRECORD                            ; nope, keep waiting
000008BC                          1267      
000008BC                          1268m     PRINT_CHAR #'S',D5                              ; print the S
000008BC                          1269m WAIT_FOR_READY_56                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
000008BC                 TRUE     1270m     IFEQ DEBUG
000008BC  1A39 00C00003           1271m         MOVE.B DUART_SRA,D5                         ; READ STATUS REGISTER
000008C2  0805 0002               1272m         BTST #2,D5                                  ; CHECK FOR SPACE TO SEND
000008C6  67F4                    1273m         BEQ WAIT_FOR_READY_56                       ; NO SPACE, CHECK AGAIN
000008C8  13FC 0053 00C00007      1274m         MOVE.B #'S',DUART_TXA                           ; SEND THE NEXT CHARACTER
000008D0                          1275m     ENDC
000008D0                          1276m 
000008D0                 FALSE    1277m     IFNE DEBUG
000008D0                          1278m     ENDC
000008D0                          1279m 
000008D0                          1280m     ENDM
000008D0  5280                    1281      ADD.L #1,D0                                     ; read another S record, increment count
000008D2                          1282      
000008D2                          1283m     DOWNLOAD D1                                     ; read the record identifier and echo it back
000008D2                          1284m WAIT_FOR_READY_57                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
000008D2                          1285m 
000008D2  1239 00C00003           1286m     MOVE.B DUART_SRA,D1                             ; CHECK FOR COMMAND
000008D8  0801 0000               1287m     BTST #0,D1                                      ; CHECK FOR CHARACTER
000008DC  6700 0010               1288m     BEQ CONTINUE_57                                 ; NOTHING, CONTINUE
000008E0                          1289m 
000008E0                          1290mm     READ_CHAR D1                                    ; WE're not going to do anything with it, just check for escape
000008E0                 TRUE     1291mm     IFEQ DEBUG
000008E0  1239 00C00007           1292mm         MOVE.B DUART_RXA,D1                         ; GOT A CHARACTER, READ IT
000008E6                          1293mm     ENDC
000008E6                 FALSE    1294mm     IFNE DEBUG
000008E6                          1295mm     ENDC
000008E6                          1296mm 
000008E6  B23C 001B               1297mm     CMP.B #$1B,D1                                   ; CHECK FOR ESCAPE AND GO TO START
000008EA  6700 FB14               1298mm     BEQ START
000008EE                          1299mm     ENDM
000008EE                          1300m CONTINUE_57
000008EE  1239 00C00013           1301m     MOVE.B DUART_SRB,D1                             ; READ DOWNLOAD STATUS REGISTER
000008F4  0801 0000               1302m     BTST #0,D1                                      ; CHECK FOR CHARACTER
000008F8  67D8                    1303m     BEQ WAIT_FOR_READY_57                           ; NOTHING, CHECK AGAIN
000008FA                          1304m     
000008FA  1239 00C00017           1305m     MOVE.B DUART_RXB,D1                             ; GOT A CHARACTER, READ IT
00000900  13C1 00E00001           1306m     MOVE.B D1,DISPLAY                               ; ECHO TO THE DISPLAY
00000906                          1307m 
00000906                          1308m     ENDM
00000906                          1309m     PRINT_CHAR D1,D5
00000906                          1310m WAIT_FOR_READY_59                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000906                 TRUE     1311m     IFEQ DEBUG
00000906  1A39 00C00003           1312m         MOVE.B DUART_SRA,D5                         ; READ STATUS REGISTER
0000090C  0805 0002               1313m         BTST #2,D5                                  ; CHECK FOR SPACE TO SEND
00000910  67F4                    1314m         BEQ WAIT_FOR_READY_59                       ; NO SPACE, CHECK AGAIN
00000912  13C1 00C00007           1315m         MOVE.B D1,DUART_TXA                         ; SEND THE NEXT CHARACTER
00000918                          1316m     ENDC
00000918                          1317m 
00000918                 FALSE    1318m     IFNE DEBUG
00000918                          1319m     ENDC
00000918                          1320m 
00000918                          1321m     ENDM
00000918                          1322  
00000918  7400                    1323      MOVE.L #0,D2                                    ; clear the checksum
0000091A                          1324  
0000091A                          1325m     DOWNLOAD_BYTE D3,D5,D6,D7,D2,A4
0000091A  1E3C 0002               1326m     MOVE.B #2,D7
0000091E                          1327m     WHILE.B D7 <GT> 0 DO
0000091E                          1328ms _10000000
0000091E  BE38 0000               1329ms     CMP.B   0,D7
00000922  6F00 0062               1330ms     BLE _10000001
00000926  E98B                    1331m         LSL.L #4,D3                                 ; IT's OK to do this first, because we are either starting from 0, 
00000928                          1332mm         DOWNLOAD D5                                 ; OR WE ARE READING THE NEXT BYTE ALONG, SO NEED TO SHIFT UP THE PREVIOUS ONE
00000928                          1333mm WAIT_FOR_READY_61                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000928                          1334mm 
00000928  1A39 00C00003           1335mm     MOVE.B DUART_SRA,D5                             ; CHECK FOR COMMAND
0000092E  0805 0000               1336mm     BTST #0,D5                                      ; CHECK FOR CHARACTER
00000932  6700 0010               1337mm     BEQ CONTINUE_61                                 ; NOTHING, CONTINUE
00000936                          1338mm 
00000936                          1339mmm     READ_CHAR D5                                    ; WE're not going to do anything with it, just check for escape
00000936                 TRUE     1340mmm     IFEQ DEBUG
00000936  1A39 00C00007           1341mmm         MOVE.B DUART_RXA,D5                         ; GOT A CHARACTER, READ IT
0000093C                          1342mmm     ENDC
0000093C                 FALSE    1343mmm     IFNE DEBUG
0000093C                          1344mmm     ENDC
0000093C                          1345mmm 
0000093C  BA3C 001B               1346mmm     CMP.B #$1B,D5                                   ; CHECK FOR ESCAPE AND GO TO START
00000940  6700 FABE               1347mmm     BEQ START
00000944                          1348mmm     ENDM
00000944                          1349mm CONTINUE_61
00000944  1A39 00C00013           1350mm     MOVE.B DUART_SRB,D5                             ; READ DOWNLOAD STATUS REGISTER
0000094A  0805 0000               1351mm     BTST #0,D5                                      ; CHECK FOR CHARACTER
0000094E  67D8                    1352mm     BEQ WAIT_FOR_READY_61                           ; NOTHING, CHECK AGAIN
00000950                          1353mm     
00000950  1A39 00C00017           1354mm     MOVE.B DUART_RXB,D5                             ; GOT A CHARACTER, READ IT
00000956  13C5 00E00001           1355mm     MOVE.B D5,DISPLAY                               ; ECHO TO THE DISPLAY
0000095C                          1356mm 
0000095C                          1357mm     ENDM
0000095C                          1358mm         PRINT_CHAR D5,D6
0000095C                          1359mm WAIT_FOR_READY_63                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
0000095C                 TRUE     1360mm     IFEQ DEBUG
0000095C  1C39 00C00003           1361mm         MOVE.B DUART_SRA,D6                         ; READ STATUS REGISTER
00000962  0806 0002               1362mm         BTST #2,D6                                  ; CHECK FOR SPACE TO SEND
00000966  67F4                    1363mm         BEQ WAIT_FOR_READY_63                       ; NO SPACE, CHECK AGAIN
00000968  13C5 00C00007           1364mm         MOVE.B D5,DUART_TXA                         ; SEND THE NEXT CHARACTER
0000096E                          1365mm     ENDC
0000096E                          1366mm 
0000096E                 FALSE    1367mm     IFNE DEBUG
0000096E                          1368mm     ENDC
0000096E                          1369mm 
0000096E                          1370mm     ENDM
0000096E                          1371mm         HEX2BIN D5,D5,A4
0000096E  49FA 11C0               1372mm     LEA HEX2BIN_LUT(PC),A4                          ; LOAD THE LOOKUP TABLE
00000972  0405 0030               1373mm     SUB.B #'0',D5                                   ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
00000976  CABC 000000FF           1374mm     AND.L #$FF,D5                                   ; IGNORE THE TOP 3 BYTES
0000097C  1A34 5000               1375mm     MOVE.B 0(A4,D5),D5                              ; USE THAT AS AN INDEX INTO THE LUT   
00000980                          1376mm     ENDM
00000980  8605                    1377m         OR.B D5,D3
00000982  5307                    1378m         SUB.B #1,D7
00000984                          1379m     ENDW
00000984  6098                    1380ms     BRA _10000000
00000986                          1381ms _10000001
00000986                          1382m 
00000986  7A00                    1383m     MOVE.L #0,D5                                    ; REXTRACT LATEST BYTE OF ADDRESS AND ADD INTO CHECKSUM
00000988  1A03                    1384m     MOVE.B D3,D5
0000098A  D483                    1385m     ADD.L D3,D2
0000098C                          1386m 
0000098C                          1387m     ENDM
0000098C                          1388  
0000098C                          1389      IF.B D1 <EQ> #'0' THEN.L                        ; header, just ignore it
0000098C  B23C 0030               1390s     CMP.B   #'0',D1
00000990  6600 002A               1391s     BNE.L   _00000002
00000994                          1392m         PRINT_CRLF D5,A4
00000994  49FA 1208               1393m     LEA CRLF(PC),A4
00000998                          1394mm     PRINT_STR A4,D5
00000998                          1395mm LOOP_66
00000998  0C14 0000               1396mm     CMP.B #NULL,(A4)                                ; 0 -> DONE
0000099C  6700 0016               1397mm     BEQ EXIT_66
000009A0                          1398mmm     PRINT_CHAR (A4)+,D5
000009A0                          1399mmm WAIT_FOR_READY_67                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
000009A0                 TRUE     1400mmm     IFEQ DEBUG
000009A0  1A39 00C00003           1401mmm         MOVE.B DUART_SRA,D5                         ; READ STATUS REGISTER
000009A6  0805 0002               1402mmm         BTST #2,D5                                  ; CHECK FOR SPACE TO SEND
000009AA  67F4                    1403mmm         BEQ WAIT_FOR_READY_67                       ; NO SPACE, CHECK AGAIN
000009AC  13DC 00C00007           1404mmm         MOVE.B (A4)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
000009B2                          1405mmm     ENDC
000009B2                          1406mmm 
000009B2                 FALSE    1407mmm     IFNE DEBUG
000009B2                          1408mmm     ENDC
000009B2                          1409mmm 
000009B2                          1410mmm     ENDM
000009B2  60E4                    1411mm     BRA LOOP_66
000009B4                          1412mm EXIT_66
000009B4                          1413mm     ENDM
000009B4                          1414m     ENDM
000009B4  6000 FECC               1415          BRA WAIT_FOR_SRECORD
000009B8                          1416      ELSE
000009B8  6000 03DE               1417s     BRA _00000003
000009BC                          1418s _00000002
000009BC                          1419          IF.B D1 <EQ> #'1' OR.B D1 <EQ> #'2' THEN.L  ; 16 or 24 bit address data record
000009BC  B23C 0031               1420s     CMP.B   #'1',D1
000009C0  6708                    1421s     BEQ.S   _00000004
000009C2  B23C 0032               1422s     CMP.B   #'2',D1
000009C6  6600 01F0               1423s     BNE.L   _00000005
000009CA                          1424s _00000004
000009CA  5783                    1425              SUB.L #3,D3                             ; subtract three bytes for 16 bit address and 1 byte checksum
000009CC                          1426  
000009CC  7800                    1427              MOVE.L #0,D4                            ; read two bytes of address
000009CE                          1428m             DOWNLOAD_BYTE D4,D5,D6,D7,D2,A4         ; first byte                                    
000009CE  1E3C 0002               1429m     MOVE.B #2,D7
000009D2                          1430m     WHILE.B D7 <GT> 0 DO
000009D2                          1431ms _10000002
000009D2  BE38 0000               1432ms     CMP.B   0,D7
000009D6  6F00 0062               1433ms     BLE _10000003
000009DA  E98C                    1434m         LSL.L #4,D4                                 ; IT's OK to do this first, because we are either starting from 0, 
000009DC                          1435mm         DOWNLOAD D5                                 ; OR WE ARE READING THE NEXT BYTE ALONG, SO NEED TO SHIFT UP THE PREVIOUS ONE
000009DC                          1436mm WAIT_FOR_READY_69                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
000009DC                          1437mm 
000009DC  1A39 00C00003           1438mm     MOVE.B DUART_SRA,D5                             ; CHECK FOR COMMAND
000009E2  0805 0000               1439mm     BTST #0,D5                                      ; CHECK FOR CHARACTER
000009E6  6700 0010               1440mm     BEQ CONTINUE_69                                 ; NOTHING, CONTINUE
000009EA                          1441mm 
000009EA                          1442mmm     READ_CHAR D5                                    ; WE're not going to do anything with it, just check for escape
000009EA                 TRUE     1443mmm     IFEQ DEBUG
000009EA  1A39 00C00007           1444mmm         MOVE.B DUART_RXA,D5                         ; GOT A CHARACTER, READ IT
000009F0                          1445mmm     ENDC
000009F0                 FALSE    1446mmm     IFNE DEBUG
000009F0                          1447mmm     ENDC
000009F0                          1448mmm 
000009F0  BA3C 001B               1449mmm     CMP.B #$1B,D5                                   ; CHECK FOR ESCAPE AND GO TO START
000009F4  6700 FA0A               1450mmm     BEQ START
000009F8                          1451mmm     ENDM
000009F8                          1452mm CONTINUE_69
000009F8  1A39 00C00013           1453mm     MOVE.B DUART_SRB,D5                             ; READ DOWNLOAD STATUS REGISTER
000009FE  0805 0000               1454mm     BTST #0,D5                                      ; CHECK FOR CHARACTER
00000A02  67D8                    1455mm     BEQ WAIT_FOR_READY_69                           ; NOTHING, CHECK AGAIN
00000A04                          1456mm     
00000A04  1A39 00C00017           1457mm     MOVE.B DUART_RXB,D5                             ; GOT A CHARACTER, READ IT
00000A0A  13C5 00E00001           1458mm     MOVE.B D5,DISPLAY                               ; ECHO TO THE DISPLAY
00000A10                          1459mm 
00000A10                          1460mm     ENDM
00000A10                          1461mm         PRINT_CHAR D5,D6
00000A10                          1462mm WAIT_FOR_READY_71                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000A10                 TRUE     1463mm     IFEQ DEBUG
00000A10  1C39 00C00003           1464mm         MOVE.B DUART_SRA,D6                         ; READ STATUS REGISTER
00000A16  0806 0002               1465mm         BTST #2,D6                                  ; CHECK FOR SPACE TO SEND
00000A1A  67F4                    1466mm         BEQ WAIT_FOR_READY_71                       ; NO SPACE, CHECK AGAIN
00000A1C  13C5 00C00007           1467mm         MOVE.B D5,DUART_TXA                         ; SEND THE NEXT CHARACTER
00000A22                          1468mm     ENDC
00000A22                          1469mm 
00000A22                 FALSE    1470mm     IFNE DEBUG
00000A22                          1471mm     ENDC
00000A22                          1472mm 
00000A22                          1473mm     ENDM
00000A22                          1474mm         HEX2BIN D5,D5,A4
00000A22  49FA 110C               1475mm     LEA HEX2BIN_LUT(PC),A4                          ; LOAD THE LOOKUP TABLE
00000A26  0405 0030               1476mm     SUB.B #'0',D5                                   ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
00000A2A  CABC 000000FF           1477mm     AND.L #$FF,D5                                   ; IGNORE THE TOP 3 BYTES
00000A30  1A34 5000               1478mm     MOVE.B 0(A4,D5),D5                              ; USE THAT AS AN INDEX INTO THE LUT   
00000A34                          1479mm     ENDM
00000A34  8805                    1480m         OR.B D5,D4
00000A36  5307                    1481m         SUB.B #1,D7
00000A38                          1482m     ENDW
00000A38  6098                    1483ms     BRA _10000002
00000A3A                          1484ms _10000003
00000A3A                          1485m 
00000A3A  7A00                    1486m     MOVE.L #0,D5                                    ; REXTRACT LATEST BYTE OF ADDRESS AND ADD INTO CHECKSUM
00000A3C  1A04                    1487m     MOVE.B D4,D5
00000A3E  D484                    1488m     ADD.L D4,D2
00000A40                          1489m 
00000A40                          1490m     ENDM
00000A40                          1491m             DOWNLOAD_BYTE D4,D5,D6,D7,D2,A4         ; second one
00000A40  1E3C 0002               1492m     MOVE.B #2,D7
00000A44                          1493m     WHILE.B D7 <GT> 0 DO
00000A44                          1494ms _10000004
00000A44  BE38 0000               1495ms     CMP.B   0,D7
00000A48  6F00 0062               1496ms     BLE _10000005
00000A4C  E98C                    1497m         LSL.L #4,D4                                 ; IT's OK to do this first, because we are either starting from 0, 
00000A4E                          1498mm         DOWNLOAD D5                                 ; OR WE ARE READING THE NEXT BYTE ALONG, SO NEED TO SHIFT UP THE PREVIOUS ONE
00000A4E                          1499mm WAIT_FOR_READY_74                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000A4E                          1500mm 
00000A4E  1A39 00C00003           1501mm     MOVE.B DUART_SRA,D5                             ; CHECK FOR COMMAND
00000A54  0805 0000               1502mm     BTST #0,D5                                      ; CHECK FOR CHARACTER
00000A58  6700 0010               1503mm     BEQ CONTINUE_74                                 ; NOTHING, CONTINUE
00000A5C                          1504mm 
00000A5C                          1505mmm     READ_CHAR D5                                    ; WE're not going to do anything with it, just check for escape
00000A5C                 TRUE     1506mmm     IFEQ DEBUG
00000A5C  1A39 00C00007           1507mmm         MOVE.B DUART_RXA,D5                         ; GOT A CHARACTER, READ IT
00000A62                          1508mmm     ENDC
00000A62                 FALSE    1509mmm     IFNE DEBUG
00000A62                          1510mmm     ENDC
00000A62                          1511mmm 
00000A62  BA3C 001B               1512mmm     CMP.B #$1B,D5                                   ; CHECK FOR ESCAPE AND GO TO START
00000A66  6700 F998               1513mmm     BEQ START
00000A6A                          1514mmm     ENDM
00000A6A                          1515mm CONTINUE_74
00000A6A  1A39 00C00013           1516mm     MOVE.B DUART_SRB,D5                             ; READ DOWNLOAD STATUS REGISTER
00000A70  0805 0000               1517mm     BTST #0,D5                                      ; CHECK FOR CHARACTER
00000A74  67D8                    1518mm     BEQ WAIT_FOR_READY_74                           ; NOTHING, CHECK AGAIN
00000A76                          1519mm     
00000A76  1A39 00C00017           1520mm     MOVE.B DUART_RXB,D5                             ; GOT A CHARACTER, READ IT
00000A7C  13C5 00E00001           1521mm     MOVE.B D5,DISPLAY                               ; ECHO TO THE DISPLAY
00000A82                          1522mm 
00000A82                          1523mm     ENDM
00000A82                          1524mm         PRINT_CHAR D5,D6
00000A82                          1525mm WAIT_FOR_READY_76                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000A82                 TRUE     1526mm     IFEQ DEBUG
00000A82  1C39 00C00003           1527mm         MOVE.B DUART_SRA,D6                         ; READ STATUS REGISTER
00000A88  0806 0002               1528mm         BTST #2,D6                                  ; CHECK FOR SPACE TO SEND
00000A8C  67F4                    1529mm         BEQ WAIT_FOR_READY_76                       ; NO SPACE, CHECK AGAIN
00000A8E  13C5 00C00007           1530mm         MOVE.B D5,DUART_TXA                         ; SEND THE NEXT CHARACTER
00000A94                          1531mm     ENDC
00000A94                          1532mm 
00000A94                 FALSE    1533mm     IFNE DEBUG
00000A94                          1534mm     ENDC
00000A94                          1535mm 
00000A94                          1536mm     ENDM
00000A94                          1537mm         HEX2BIN D5,D5,A4
00000A94  49FA 109A               1538mm     LEA HEX2BIN_LUT(PC),A4                          ; LOAD THE LOOKUP TABLE
00000A98  0405 0030               1539mm     SUB.B #'0',D5                                   ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
00000A9C  CABC 000000FF           1540mm     AND.L #$FF,D5                                   ; IGNORE THE TOP 3 BYTES
00000AA2  1A34 5000               1541mm     MOVE.B 0(A4,D5),D5                              ; USE THAT AS AN INDEX INTO THE LUT   
00000AA6                          1542mm     ENDM
00000AA6  8805                    1543m         OR.B D5,D4
00000AA8  5307                    1544m         SUB.B #1,D7
00000AAA                          1545m     ENDW
00000AAA  6098                    1546ms     BRA _10000004
00000AAC                          1547ms _10000005
00000AAC                          1548m 
00000AAC  7A00                    1549m     MOVE.L #0,D5                                    ; REXTRACT LATEST BYTE OF ADDRESS AND ADD INTO CHECKSUM
00000AAE  1A04                    1550m     MOVE.B D4,D5
00000AB0  D484                    1551m     ADD.L D4,D2
00000AB2                          1552m 
00000AB2                          1553m     ENDM
00000AB2                          1554  
00000AB2                          1555              IF.B D1 <EQ> #'2'  THEN.L               ; 24 bit address data record, read another byte
00000AB2  B23C 0032               1556s     CMP.B   #'2',D1
00000AB6  6600 0076               1557s     BNE.L   _00000006
00000ABA  5383                    1558                  SUB.L #1,D3                         ; subtract an extra bytes for 24 bit address    
00000ABC                          1559m                 DOWNLOAD_BYTE D4,D5,D6,D7,D2,A4     ; 3rd byte
00000ABC  1E3C 0002               1560m     MOVE.B #2,D7
00000AC0                          1561m     WHILE.B D7 <GT> 0 DO
00000AC0                          1562ms _10000006
00000AC0  BE38 0000               1563ms     CMP.B   0,D7
00000AC4  6F00 0062               1564ms     BLE _10000007
00000AC8  E98C                    1565m         LSL.L #4,D4                                 ; IT's OK to do this first, because we are either starting from 0, 
00000ACA                          1566mm         DOWNLOAD D5                                 ; OR WE ARE READING THE NEXT BYTE ALONG, SO NEED TO SHIFT UP THE PREVIOUS ONE
00000ACA                          1567mm WAIT_FOR_READY_79                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000ACA                          1568mm 
00000ACA  1A39 00C00003           1569mm     MOVE.B DUART_SRA,D5                             ; CHECK FOR COMMAND
00000AD0  0805 0000               1570mm     BTST #0,D5                                      ; CHECK FOR CHARACTER
00000AD4  6700 0010               1571mm     BEQ CONTINUE_79                                 ; NOTHING, CONTINUE
00000AD8                          1572mm 
00000AD8                          1573mmm     READ_CHAR D5                                    ; WE're not going to do anything with it, just check for escape
00000AD8                 TRUE     1574mmm     IFEQ DEBUG
00000AD8  1A39 00C00007           1575mmm         MOVE.B DUART_RXA,D5                         ; GOT A CHARACTER, READ IT
00000ADE                          1576mmm     ENDC
00000ADE                 FALSE    1577mmm     IFNE DEBUG
00000ADE                          1578mmm     ENDC
00000ADE                          1579mmm 
00000ADE  BA3C 001B               1580mmm     CMP.B #$1B,D5                                   ; CHECK FOR ESCAPE AND GO TO START
00000AE2  6700 F91C               1581mmm     BEQ START
00000AE6                          1582mmm     ENDM
00000AE6                          1583mm CONTINUE_79
00000AE6  1A39 00C00013           1584mm     MOVE.B DUART_SRB,D5                             ; READ DOWNLOAD STATUS REGISTER
00000AEC  0805 0000               1585mm     BTST #0,D5                                      ; CHECK FOR CHARACTER
00000AF0  67D8                    1586mm     BEQ WAIT_FOR_READY_79                           ; NOTHING, CHECK AGAIN
00000AF2                          1587mm     
00000AF2  1A39 00C00017           1588mm     MOVE.B DUART_RXB,D5                             ; GOT A CHARACTER, READ IT
00000AF8  13C5 00E00001           1589mm     MOVE.B D5,DISPLAY                               ; ECHO TO THE DISPLAY
00000AFE                          1590mm 
00000AFE                          1591mm     ENDM
00000AFE                          1592mm         PRINT_CHAR D5,D6
00000AFE                          1593mm WAIT_FOR_READY_81                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000AFE                 TRUE     1594mm     IFEQ DEBUG
00000AFE  1C39 00C00003           1595mm         MOVE.B DUART_SRA,D6                         ; READ STATUS REGISTER
00000B04  0806 0002               1596mm         BTST #2,D6                                  ; CHECK FOR SPACE TO SEND
00000B08  67F4                    1597mm         BEQ WAIT_FOR_READY_81                       ; NO SPACE, CHECK AGAIN
00000B0A  13C5 00C00007           1598mm         MOVE.B D5,DUART_TXA                         ; SEND THE NEXT CHARACTER
00000B10                          1599mm     ENDC
00000B10                          1600mm 
00000B10                 FALSE    1601mm     IFNE DEBUG
00000B10                          1602mm     ENDC
00000B10                          1603mm 
00000B10                          1604mm     ENDM
00000B10                          1605mm         HEX2BIN D5,D5,A4
00000B10  49FA 101E               1606mm     LEA HEX2BIN_LUT(PC),A4                          ; LOAD THE LOOKUP TABLE
00000B14  0405 0030               1607mm     SUB.B #'0',D5                                   ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
00000B18  CABC 000000FF           1608mm     AND.L #$FF,D5                                   ; IGNORE THE TOP 3 BYTES
00000B1E  1A34 5000               1609mm     MOVE.B 0(A4,D5),D5                              ; USE THAT AS AN INDEX INTO THE LUT   
00000B22                          1610mm     ENDM
00000B22  8805                    1611m         OR.B D5,D4
00000B24  5307                    1612m         SUB.B #1,D7
00000B26                          1613m     ENDW
00000B26  6098                    1614ms     BRA _10000006
00000B28                          1615ms _10000007
00000B28                          1616m 
00000B28  7A00                    1617m     MOVE.L #0,D5                                    ; REXTRACT LATEST BYTE OF ADDRESS AND ADD INTO CHECKSUM
00000B2A  1A04                    1618m     MOVE.B D4,D5
00000B2C  D484                    1619m     ADD.L D4,D2
00000B2E                          1620m 
00000B2E                          1621m     ENDM
00000B2E                          1622              ENDI
00000B2E                          1623s _00000006
00000B2E                          1624  
00000B2E  2444                    1625              MOVE.L D4,A2                            ; put the address in an address register
00000B30  D5C9                    1626              ADD.L A1,A2                             ; add in the offset
00000B32                          1627  
00000B32                          1628              WHILE.B D3 <GT> #0 DO                   ; read the data bytes
00000B32                          1629s _10000008
00000B32  B63C 0000               1630s     CMP.B   #0,D3
00000B36  6F00 007A               1631s     BLE _10000009
00000B3A                          1632m                 DOWNLOAD_BYTE D1,D5,D6,D7,D2,A4     ; read it
00000B3A  1E3C 0002               1633m     MOVE.B #2,D7
00000B3E                          1634m     WHILE.B D7 <GT> 0 DO
00000B3E                          1635ms _1000000A
00000B3E  BE38 0000               1636ms     CMP.B   0,D7
00000B42  6F00 0062               1637ms     BLE _1000000B
00000B46  E989                    1638m         LSL.L #4,D1                                 ; IT's OK to do this first, because we are either starting from 0, 
00000B48                          1639mm         DOWNLOAD D5                                 ; OR WE ARE READING THE NEXT BYTE ALONG, SO NEED TO SHIFT UP THE PREVIOUS ONE
00000B48                          1640mm WAIT_FOR_READY_84                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000B48                          1641mm 
00000B48  1A39 00C00003           1642mm     MOVE.B DUART_SRA,D5                             ; CHECK FOR COMMAND
00000B4E  0805 0000               1643mm     BTST #0,D5                                      ; CHECK FOR CHARACTER
00000B52  6700 0010               1644mm     BEQ CONTINUE_84                                 ; NOTHING, CONTINUE
00000B56                          1645mm 
00000B56                          1646mmm     READ_CHAR D5                                    ; WE're not going to do anything with it, just check for escape
00000B56                 TRUE     1647mmm     IFEQ DEBUG
00000B56  1A39 00C00007           1648mmm         MOVE.B DUART_RXA,D5                         ; GOT A CHARACTER, READ IT
00000B5C                          1649mmm     ENDC
00000B5C                 FALSE    1650mmm     IFNE DEBUG
00000B5C                          1651mmm     ENDC
00000B5C                          1652mmm 
00000B5C  BA3C 001B               1653mmm     CMP.B #$1B,D5                                   ; CHECK FOR ESCAPE AND GO TO START
00000B60  6700 F89E               1654mmm     BEQ START
00000B64                          1655mmm     ENDM
00000B64                          1656mm CONTINUE_84
00000B64  1A39 00C00013           1657mm     MOVE.B DUART_SRB,D5                             ; READ DOWNLOAD STATUS REGISTER
00000B6A  0805 0000               1658mm     BTST #0,D5                                      ; CHECK FOR CHARACTER
00000B6E  67D8                    1659mm     BEQ WAIT_FOR_READY_84                           ; NOTHING, CHECK AGAIN
00000B70                          1660mm     
00000B70  1A39 00C00017           1661mm     MOVE.B DUART_RXB,D5                             ; GOT A CHARACTER, READ IT
00000B76  13C5 00E00001           1662mm     MOVE.B D5,DISPLAY                               ; ECHO TO THE DISPLAY
00000B7C                          1663mm 
00000B7C                          1664mm     ENDM
00000B7C                          1665mm         PRINT_CHAR D5,D6
00000B7C                          1666mm WAIT_FOR_READY_86                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000B7C                 TRUE     1667mm     IFEQ DEBUG
00000B7C  1C39 00C00003           1668mm         MOVE.B DUART_SRA,D6                         ; READ STATUS REGISTER
00000B82  0806 0002               1669mm         BTST #2,D6                                  ; CHECK FOR SPACE TO SEND
00000B86  67F4                    1670mm         BEQ WAIT_FOR_READY_86                       ; NO SPACE, CHECK AGAIN
00000B88  13C5 00C00007           1671mm         MOVE.B D5,DUART_TXA                         ; SEND THE NEXT CHARACTER
00000B8E                          1672mm     ENDC
00000B8E                          1673mm 
00000B8E                 FALSE    1674mm     IFNE DEBUG
00000B8E                          1675mm     ENDC
00000B8E                          1676mm 
00000B8E                          1677mm     ENDM
00000B8E                          1678mm         HEX2BIN D5,D5,A4
00000B8E  49FA 0FA0               1679mm     LEA HEX2BIN_LUT(PC),A4                          ; LOAD THE LOOKUP TABLE
00000B92  0405 0030               1680mm     SUB.B #'0',D5                                   ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
00000B96  CABC 000000FF           1681mm     AND.L #$FF,D5                                   ; IGNORE THE TOP 3 BYTES
00000B9C  1A34 5000               1682mm     MOVE.B 0(A4,D5),D5                              ; USE THAT AS AN INDEX INTO THE LUT   
00000BA0                          1683mm     ENDM
00000BA0  8205                    1684m         OR.B D5,D1
00000BA2  5307                    1685m         SUB.B #1,D7
00000BA4                          1686m     ENDW
00000BA4  6098                    1687ms     BRA _1000000A
00000BA6                          1688ms _1000000B
00000BA6                          1689m 
00000BA6  7A00                    1690m     MOVE.L #0,D5                                    ; REXTRACT LATEST BYTE OF ADDRESS AND ADD INTO CHECKSUM
00000BA8  1A01                    1691m     MOVE.B D1,D5
00000BAA  D481                    1692m     ADD.L D1,D2
00000BAC                          1693m 
00000BAC                          1694m     ENDM
00000BAC                          1695   
00000BAC  14C1                    1696                  MOVE.B D1,(A2)+                     ; store it!
00000BAE                          1697  
00000BAE  5303                    1698                  SUB.B #1,D3                         ; 1 less byte to go
00000BB0                          1699              ENDW
00000BB0  6080                    1700s     BRA _10000008
00000BB2                          1701s _10000009
00000BB2                          1702  
00000BB2  7200                    1703              MOVE.L #0,D1                            ; not done yet
00000BB4                          1704          ELSE
00000BB4  6000 01E2               1705s     BRA _00000007
00000BB8                          1706s _00000005
00000BB8                          1707              IF.B D1 <EQ> #'8' THEN.L                ; termination record, exit
00000BB8  B23C 0038               1708s     CMP.B   #'8',D1
00000BBC  6600 0164               1709s     BNE.L   _00000008
00000BC0  7800                    1710                  MOVE.L #0,D4                        ; read the 24 bit start address
00000BC2                          1711m                 DOWNLOAD_BYTE D4,D5,D6,D7,D2,A4     ; top byte
00000BC2  1E3C 0002               1712m     MOVE.B #2,D7
00000BC6                          1713m     WHILE.B D7 <GT> 0 DO
00000BC6                          1714ms _1000000C
00000BC6  BE38 0000               1715ms     CMP.B   0,D7
00000BCA  6F00 0062               1716ms     BLE _1000000D
00000BCE  E98C                    1717m         LSL.L #4,D4                                 ; IT's OK to do this first, because we are either starting from 0, 
00000BD0                          1718mm         DOWNLOAD D5                                 ; OR WE ARE READING THE NEXT BYTE ALONG, SO NEED TO SHIFT UP THE PREVIOUS ONE
00000BD0                          1719mm WAIT_FOR_READY_89                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000BD0                          1720mm 
00000BD0  1A39 00C00003           1721mm     MOVE.B DUART_SRA,D5                             ; CHECK FOR COMMAND
00000BD6  0805 0000               1722mm     BTST #0,D5                                      ; CHECK FOR CHARACTER
00000BDA  6700 0010               1723mm     BEQ CONTINUE_89                                 ; NOTHING, CONTINUE
00000BDE                          1724mm 
00000BDE                          1725mmm     READ_CHAR D5                                    ; WE're not going to do anything with it, just check for escape
00000BDE                 TRUE     1726mmm     IFEQ DEBUG
00000BDE  1A39 00C00007           1727mmm         MOVE.B DUART_RXA,D5                         ; GOT A CHARACTER, READ IT
00000BE4                          1728mmm     ENDC
00000BE4                 FALSE    1729mmm     IFNE DEBUG
00000BE4                          1730mmm     ENDC
00000BE4                          1731mmm 
00000BE4  BA3C 001B               1732mmm     CMP.B #$1B,D5                                   ; CHECK FOR ESCAPE AND GO TO START
00000BE8  6700 F816               1733mmm     BEQ START
00000BEC                          1734mmm     ENDM
00000BEC                          1735mm CONTINUE_89
00000BEC  1A39 00C00013           1736mm     MOVE.B DUART_SRB,D5                             ; READ DOWNLOAD STATUS REGISTER
00000BF2  0805 0000               1737mm     BTST #0,D5                                      ; CHECK FOR CHARACTER
00000BF6  67D8                    1738mm     BEQ WAIT_FOR_READY_89                           ; NOTHING, CHECK AGAIN
00000BF8                          1739mm     
00000BF8  1A39 00C00017           1740mm     MOVE.B DUART_RXB,D5                             ; GOT A CHARACTER, READ IT
00000BFE  13C5 00E00001           1741mm     MOVE.B D5,DISPLAY                               ; ECHO TO THE DISPLAY
00000C04                          1742mm 
00000C04                          1743mm     ENDM
00000C04                          1744mm         PRINT_CHAR D5,D6
00000C04                          1745mm WAIT_FOR_READY_91                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000C04                 TRUE     1746mm     IFEQ DEBUG
00000C04  1C39 00C00003           1747mm         MOVE.B DUART_SRA,D6                         ; READ STATUS REGISTER
00000C0A  0806 0002               1748mm         BTST #2,D6                                  ; CHECK FOR SPACE TO SEND
00000C0E  67F4                    1749mm         BEQ WAIT_FOR_READY_91                       ; NO SPACE, CHECK AGAIN
00000C10  13C5 00C00007           1750mm         MOVE.B D5,DUART_TXA                         ; SEND THE NEXT CHARACTER
00000C16                          1751mm     ENDC
00000C16                          1752mm 
00000C16                 FALSE    1753mm     IFNE DEBUG
00000C16                          1754mm     ENDC
00000C16                          1755mm 
00000C16                          1756mm     ENDM
00000C16                          1757mm         HEX2BIN D5,D5,A4
00000C16  49FA 0F18               1758mm     LEA HEX2BIN_LUT(PC),A4                          ; LOAD THE LOOKUP TABLE
00000C1A  0405 0030               1759mm     SUB.B #'0',D5                                   ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
00000C1E  CABC 000000FF           1760mm     AND.L #$FF,D5                                   ; IGNORE THE TOP 3 BYTES
00000C24  1A34 5000               1761mm     MOVE.B 0(A4,D5),D5                              ; USE THAT AS AN INDEX INTO THE LUT   
00000C28                          1762mm     ENDM
00000C28  8805                    1763m         OR.B D5,D4
00000C2A  5307                    1764m         SUB.B #1,D7
00000C2C                          1765m     ENDW
00000C2C  6098                    1766ms     BRA _1000000C
00000C2E                          1767ms _1000000D
00000C2E                          1768m 
00000C2E  7A00                    1769m     MOVE.L #0,D5                                    ; REXTRACT LATEST BYTE OF ADDRESS AND ADD INTO CHECKSUM
00000C30  1A04                    1770m     MOVE.B D4,D5
00000C32  D484                    1771m     ADD.L D4,D2
00000C34                          1772m 
00000C34                          1773m     ENDM
00000C34                          1774m                 DOWNLOAD_BYTE D4,D5,D6,D7,D2,A4     ; middle byte
00000C34  1E3C 0002               1775m     MOVE.B #2,D7
00000C38                          1776m     WHILE.B D7 <GT> 0 DO
00000C38                          1777ms _1000000E
00000C38  BE38 0000               1778ms     CMP.B   0,D7
00000C3C  6F00 0062               1779ms     BLE _1000000F
00000C40  E98C                    1780m         LSL.L #4,D4                                 ; IT's OK to do this first, because we are either starting from 0, 
00000C42                          1781mm         DOWNLOAD D5                                 ; OR WE ARE READING THE NEXT BYTE ALONG, SO NEED TO SHIFT UP THE PREVIOUS ONE
00000C42                          1782mm WAIT_FOR_READY_94                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000C42                          1783mm 
00000C42  1A39 00C00003           1784mm     MOVE.B DUART_SRA,D5                             ; CHECK FOR COMMAND
00000C48  0805 0000               1785mm     BTST #0,D5                                      ; CHECK FOR CHARACTER
00000C4C  6700 0010               1786mm     BEQ CONTINUE_94                                 ; NOTHING, CONTINUE
00000C50                          1787mm 
00000C50                          1788mmm     READ_CHAR D5                                    ; WE're not going to do anything with it, just check for escape
00000C50                 TRUE     1789mmm     IFEQ DEBUG
00000C50  1A39 00C00007           1790mmm         MOVE.B DUART_RXA,D5                         ; GOT A CHARACTER, READ IT
00000C56                          1791mmm     ENDC
00000C56                 FALSE    1792mmm     IFNE DEBUG
00000C56                          1793mmm     ENDC
00000C56                          1794mmm 
00000C56  BA3C 001B               1795mmm     CMP.B #$1B,D5                                   ; CHECK FOR ESCAPE AND GO TO START
00000C5A  6700 F7A4               1796mmm     BEQ START
00000C5E                          1797mmm     ENDM
00000C5E                          1798mm CONTINUE_94
00000C5E  1A39 00C00013           1799mm     MOVE.B DUART_SRB,D5                             ; READ DOWNLOAD STATUS REGISTER
00000C64  0805 0000               1800mm     BTST #0,D5                                      ; CHECK FOR CHARACTER
00000C68  67D8                    1801mm     BEQ WAIT_FOR_READY_94                           ; NOTHING, CHECK AGAIN
00000C6A                          1802mm     
00000C6A  1A39 00C00017           1803mm     MOVE.B DUART_RXB,D5                             ; GOT A CHARACTER, READ IT
00000C70  13C5 00E00001           1804mm     MOVE.B D5,DISPLAY                               ; ECHO TO THE DISPLAY
00000C76                          1805mm 
00000C76                          1806mm     ENDM
00000C76                          1807mm         PRINT_CHAR D5,D6
00000C76                          1808mm WAIT_FOR_READY_96                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000C76                 TRUE     1809mm     IFEQ DEBUG
00000C76  1C39 00C00003           1810mm         MOVE.B DUART_SRA,D6                         ; READ STATUS REGISTER
00000C7C  0806 0002               1811mm         BTST #2,D6                                  ; CHECK FOR SPACE TO SEND
00000C80  67F4                    1812mm         BEQ WAIT_FOR_READY_96                       ; NO SPACE, CHECK AGAIN
00000C82  13C5 00C00007           1813mm         MOVE.B D5,DUART_TXA                         ; SEND THE NEXT CHARACTER
00000C88                          1814mm     ENDC
00000C88                          1815mm 
00000C88                 FALSE    1816mm     IFNE DEBUG
00000C88                          1817mm     ENDC
00000C88                          1818mm 
00000C88                          1819mm     ENDM
00000C88                          1820mm         HEX2BIN D5,D5,A4
00000C88  49FA 0EA6               1821mm     LEA HEX2BIN_LUT(PC),A4                          ; LOAD THE LOOKUP TABLE
00000C8C  0405 0030               1822mm     SUB.B #'0',D5                                   ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
00000C90  CABC 000000FF           1823mm     AND.L #$FF,D5                                   ; IGNORE THE TOP 3 BYTES
00000C96  1A34 5000               1824mm     MOVE.B 0(A4,D5),D5                              ; USE THAT AS AN INDEX INTO THE LUT   
00000C9A                          1825mm     ENDM
00000C9A  8805                    1826m         OR.B D5,D4
00000C9C  5307                    1827m         SUB.B #1,D7
00000C9E                          1828m     ENDW
00000C9E  6098                    1829ms     BRA _1000000E
00000CA0                          1830ms _1000000F
00000CA0                          1831m 
00000CA0  7A00                    1832m     MOVE.L #0,D5                                    ; REXTRACT LATEST BYTE OF ADDRESS AND ADD INTO CHECKSUM
00000CA2  1A04                    1833m     MOVE.B D4,D5
00000CA4  D484                    1834m     ADD.L D4,D2
00000CA6                          1835m 
00000CA6                          1836m     ENDM
00000CA6                          1837m                 DOWNLOAD_BYTE D4,D5,D6,D7,D2,A4     ; bottom byte
00000CA6  1E3C 0002               1838m     MOVE.B #2,D7
00000CAA                          1839m     WHILE.B D7 <GT> 0 DO
00000CAA                          1840ms _10000010
00000CAA  BE38 0000               1841ms     CMP.B   0,D7
00000CAE  6F00 0062               1842ms     BLE _10000011
00000CB2  E98C                    1843m         LSL.L #4,D4                                 ; IT's OK to do this first, because we are either starting from 0, 
00000CB4                          1844mm         DOWNLOAD D5                                 ; OR WE ARE READING THE NEXT BYTE ALONG, SO NEED TO SHIFT UP THE PREVIOUS ONE
00000CB4                          1845mm WAIT_FOR_READY_99                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000CB4                          1846mm 
00000CB4  1A39 00C00003           1847mm     MOVE.B DUART_SRA,D5                             ; CHECK FOR COMMAND
00000CBA  0805 0000               1848mm     BTST #0,D5                                      ; CHECK FOR CHARACTER
00000CBE  6700 0010               1849mm     BEQ CONTINUE_99                                 ; NOTHING, CONTINUE
00000CC2                          1850mm 
00000CC2                          1851mmm     READ_CHAR D5                                    ; WE're not going to do anything with it, just check for escape
00000CC2                 TRUE     1852mmm     IFEQ DEBUG
00000CC2  1A39 00C00007           1853mmm         MOVE.B DUART_RXA,D5                         ; GOT A CHARACTER, READ IT
00000CC8                          1854mmm     ENDC
00000CC8                 FALSE    1855mmm     IFNE DEBUG
00000CC8                          1856mmm     ENDC
00000CC8                          1857mmm 
00000CC8  BA3C 001B               1858mmm     CMP.B #$1B,D5                                   ; CHECK FOR ESCAPE AND GO TO START
00000CCC  6700 F732               1859mmm     BEQ START
00000CD0                          1860mmm     ENDM
00000CD0                          1861mm CONTINUE_99
00000CD0  1A39 00C00013           1862mm     MOVE.B DUART_SRB,D5                             ; READ DOWNLOAD STATUS REGISTER
00000CD6  0805 0000               1863mm     BTST #0,D5                                      ; CHECK FOR CHARACTER
00000CDA  67D8                    1864mm     BEQ WAIT_FOR_READY_99                           ; NOTHING, CHECK AGAIN
00000CDC                          1865mm     
00000CDC  1A39 00C00017           1866mm     MOVE.B DUART_RXB,D5                             ; GOT A CHARACTER, READ IT
00000CE2  13C5 00E00001           1867mm     MOVE.B D5,DISPLAY                               ; ECHO TO THE DISPLAY
00000CE8                          1868mm 
00000CE8                          1869mm     ENDM
00000CE8                          1870mm         PRINT_CHAR D5,D6
00000CE8                          1871mm WAIT_FOR_READY_101                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000CE8                 TRUE     1872mm     IFEQ DEBUG
00000CE8  1C39 00C00003           1873mm         MOVE.B DUART_SRA,D6                         ; READ STATUS REGISTER
00000CEE  0806 0002               1874mm         BTST #2,D6                                  ; CHECK FOR SPACE TO SEND
00000CF2  67F4                    1875mm         BEQ WAIT_FOR_READY_101                      ; NO SPACE, CHECK AGAIN
00000CF4  13C5 00C00007           1876mm         MOVE.B D5,DUART_TXA                         ; SEND THE NEXT CHARACTER
00000CFA                          1877mm     ENDC
00000CFA                          1878mm 
00000CFA                 FALSE    1879mm     IFNE DEBUG
00000CFA                          1880mm     ENDC
00000CFA                          1881mm 
00000CFA                          1882mm     ENDM
00000CFA                          1883mm         HEX2BIN D5,D5,A4
00000CFA  49FA 0E34               1884mm     LEA HEX2BIN_LUT(PC),A4                          ; LOAD THE LOOKUP TABLE
00000CFE  0405 0030               1885mm     SUB.B #'0',D5                                   ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
00000D02  CABC 000000FF           1886mm     AND.L #$FF,D5                                   ; IGNORE THE TOP 3 BYTES
00000D08  1A34 5000               1887mm     MOVE.B 0(A4,D5),D5                              ; USE THAT AS AN INDEX INTO THE LUT   
00000D0C                          1888mm     ENDM
00000D0C  8805                    1889m         OR.B D5,D4
00000D0E  5307                    1890m         SUB.B #1,D7
00000D10                          1891m     ENDW
00000D10  6098                    1892ms     BRA _10000010
00000D12                          1893ms _10000011
00000D12                          1894m 
00000D12  7A00                    1895m     MOVE.L #0,D5                                    ; REXTRACT LATEST BYTE OF ADDRESS AND ADD INTO CHECKSUM
00000D14  1A04                    1896m     MOVE.B D4,D5
00000D16  D484                    1897m     ADD.L D4,D2
00000D18                          1898m 
00000D18                          1899m     ENDM
00000D18                          1900  
00000D18  2044                    1901                  MOVE.L D4,A0                        ; start address -> A0
00000D1A  D1C9                    1902                  ADD.L A1,A0                         ; add in the offset
00000D1C                          1903  
00000D1C  72FF                    1904                  MOVE.L #$FFFFFFFF,D1                ; done
00000D1E                          1905              ELSE
00000D1E  6000 0078               1906s     BRA _00000009
00000D22                          1907s _00000008
00000D22                          1908m                 PRINT_CRLF D5,A4
00000D22  49FA 0E7A               1909m     LEA CRLF(PC),A4
00000D26                          1910mm     PRINT_STR A4,D5
00000D26                          1911mm LOOP_104
00000D26  0C14 0000               1912mm     CMP.B #NULL,(A4)                                ; 0 -> DONE
00000D2A  6700 0016               1913mm     BEQ EXIT_104
00000D2E                          1914mmm     PRINT_CHAR (A4)+,D5
00000D2E                          1915mmm WAIT_FOR_READY_105                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000D2E                 TRUE     1916mmm     IFEQ DEBUG
00000D2E  1A39 00C00003           1917mmm         MOVE.B DUART_SRA,D5                         ; READ STATUS REGISTER
00000D34  0805 0002               1918mmm         BTST #2,D5                                  ; CHECK FOR SPACE TO SEND
00000D38  67F4                    1919mmm         BEQ WAIT_FOR_READY_105                      ; NO SPACE, CHECK AGAIN
00000D3A  13DC 00C00007           1920mmm         MOVE.B (A4)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00000D40                          1921mmm     ENDC
00000D40                          1922mmm 
00000D40                 FALSE    1923mmm     IFNE DEBUG
00000D40                          1924mmm     ENDC
00000D40                          1925mmm 
00000D40                          1926mmm     ENDM
00000D40  60E4                    1927mm     BRA LOOP_104
00000D42                          1928mm EXIT_104
00000D42                          1929mm     ENDM
00000D42                          1930m     ENDM
00000D42                          1931  
00000D42  49FA 0DA3               1932                  LEA UNREC(PC),A4                    ; warn for unrecognised type
00000D46                          1933m                 PRINT_STR A4,D5
00000D46                          1934m LOOP_106
00000D46  0C14 0000               1935m     CMP.B #NULL,(A4)                                ; 0 -> DONE
00000D4A  6700 0016               1936m     BEQ EXIT_106
00000D4E                          1937mm     PRINT_CHAR (A4)+,D5
00000D4E                          1938mm WAIT_FOR_READY_107                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000D4E                 TRUE     1939mm     IFEQ DEBUG
00000D4E  1A39 00C00003           1940mm         MOVE.B DUART_SRA,D5                         ; READ STATUS REGISTER
00000D54  0805 0002               1941mm         BTST #2,D5                                  ; CHECK FOR SPACE TO SEND
00000D58  67F4                    1942mm         BEQ WAIT_FOR_READY_107                      ; NO SPACE, CHECK AGAIN
00000D5A  13DC 00C00007           1943mm         MOVE.B (A4)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00000D60                          1944mm     ENDC
00000D60                          1945mm 
00000D60                 FALSE    1946mm     IFNE DEBUG
00000D60                          1947mm     ENDC
00000D60                          1948mm 
00000D60                          1949mm     ENDM
00000D60  60E4                    1950m     BRA LOOP_106
00000D62                          1951m EXIT_106
00000D62                          1952m     ENDM
00000D62                          1953m                 PRINT_CHAR D1,D5
00000D62                          1954m WAIT_FOR_READY_108                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000D62                 TRUE     1955m     IFEQ DEBUG
00000D62  1A39 00C00003           1956m         MOVE.B DUART_SRA,D5                         ; READ STATUS REGISTER
00000D68  0805 0002               1957m         BTST #2,D5                                  ; CHECK FOR SPACE TO SEND
00000D6C  67F4                    1958m         BEQ WAIT_FOR_READY_108                      ; NO SPACE, CHECK AGAIN
00000D6E  13C1 00C00007           1959m         MOVE.B D1,DUART_TXA                         ; SEND THE NEXT CHARACTER
00000D74                          1960m     ENDC
00000D74                          1961m 
00000D74                 FALSE    1962m     IFNE DEBUG
00000D74                          1963m     ENDC
00000D74                          1964m 
00000D74                          1965m     ENDM
00000D74                          1966m                 PRINT_CRLF D5,A4
00000D74  49FA 0E28               1967m     LEA CRLF(PC),A4
00000D78                          1968mm     PRINT_STR A4,D5
00000D78                          1969mm LOOP_110
00000D78  0C14 0000               1970mm     CMP.B #NULL,(A4)                                ; 0 -> DONE
00000D7C  6700 0016               1971mm     BEQ EXIT_110
00000D80                          1972mmm     PRINT_CHAR (A4)+,D5
00000D80                          1973mmm WAIT_FOR_READY_111                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000D80                 TRUE     1974mmm     IFEQ DEBUG
00000D80  1A39 00C00003           1975mmm         MOVE.B DUART_SRA,D5                         ; READ STATUS REGISTER
00000D86  0805 0002               1976mmm         BTST #2,D5                                  ; CHECK FOR SPACE TO SEND
00000D8A  67F4                    1977mmm         BEQ WAIT_FOR_READY_111                      ; NO SPACE, CHECK AGAIN
00000D8C  13DC 00C00007           1978mmm         MOVE.B (A4)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00000D92                          1979mmm     ENDC
00000D92                          1980mmm 
00000D92                 FALSE    1981mmm     IFNE DEBUG
00000D92                          1982mmm     ENDC
00000D92                          1983mmm 
00000D92                          1984mmm     ENDM
00000D92  60E4                    1985mm     BRA LOOP_110
00000D94                          1986mm EXIT_110
00000D94                          1987mm     ENDM
00000D94                          1988m     ENDM
00000D94                          1989  
00000D94  6000 FAEC               1990                  BRA WAIT_FOR_SRECORD                ; ignore any other type 
00000D98                          1991              ENDI
00000D98                          1992s _00000009
00000D98                          1993          ENDI
00000D98                          1994s _00000007
00000D98                          1995      ENDI
00000D98                          1996s _00000003
00000D98                          1997  
00000D98                          1998m     DOWNLOAD_BYTE D4,D5,D6,D7,D2,A4
00000D98  1E3C 0002               1999m     MOVE.B #2,D7
00000D9C                          2000m     WHILE.B D7 <GT> 0 DO
00000D9C                          2001ms _10000012
00000D9C  BE38 0000               2002ms     CMP.B   0,D7
00000DA0  6F00 0062               2003ms     BLE _10000013
00000DA4  E98C                    2004m         LSL.L #4,D4                                 ; IT's OK to do this first, because we are either starting from 0, 
00000DA6                          2005mm         DOWNLOAD D5                                 ; OR WE ARE READING THE NEXT BYTE ALONG, SO NEED TO SHIFT UP THE PREVIOUS ONE
00000DA6                          2006mm WAIT_FOR_READY_113                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000DA6                          2007mm 
00000DA6  1A39 00C00003           2008mm     MOVE.B DUART_SRA,D5                             ; CHECK FOR COMMAND
00000DAC  0805 0000               2009mm     BTST #0,D5                                      ; CHECK FOR CHARACTER
00000DB0  6700 0010               2010mm     BEQ CONTINUE_113                                    ; NOTHING, CONTINUE
00000DB4                          2011mm 
00000DB4                          2012mmm     READ_CHAR D5                                    ; WE're not going to do anything with it, just check for escape
00000DB4                 TRUE     2013mmm     IFEQ DEBUG
00000DB4  1A39 00C00007           2014mmm         MOVE.B DUART_RXA,D5                         ; GOT A CHARACTER, READ IT
00000DBA                          2015mmm     ENDC
00000DBA                 FALSE    2016mmm     IFNE DEBUG
00000DBA                          2017mmm     ENDC
00000DBA                          2018mmm 
00000DBA  BA3C 001B               2019mmm     CMP.B #$1B,D5                                   ; CHECK FOR ESCAPE AND GO TO START
00000DBE  6700 F640               2020mmm     BEQ START
00000DC2                          2021mmm     ENDM
00000DC2                          2022mm CONTINUE_113
00000DC2  1A39 00C00013           2023mm     MOVE.B DUART_SRB,D5                             ; READ DOWNLOAD STATUS REGISTER
00000DC8  0805 0000               2024mm     BTST #0,D5                                      ; CHECK FOR CHARACTER
00000DCC  67D8                    2025mm     BEQ WAIT_FOR_READY_113                          ; NOTHING, CHECK AGAIN
00000DCE                          2026mm     
00000DCE  1A39 00C00017           2027mm     MOVE.B DUART_RXB,D5                             ; GOT A CHARACTER, READ IT
00000DD4  13C5 00E00001           2028mm     MOVE.B D5,DISPLAY                               ; ECHO TO THE DISPLAY
00000DDA                          2029mm 
00000DDA                          2030mm     ENDM
00000DDA                          2031mm         PRINT_CHAR D5,D6
00000DDA                          2032mm WAIT_FOR_READY_115                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000DDA                 TRUE     2033mm     IFEQ DEBUG
00000DDA  1C39 00C00003           2034mm         MOVE.B DUART_SRA,D6                         ; READ STATUS REGISTER
00000DE0  0806 0002               2035mm         BTST #2,D6                                  ; CHECK FOR SPACE TO SEND
00000DE4  67F4                    2036mm         BEQ WAIT_FOR_READY_115                      ; NO SPACE, CHECK AGAIN
00000DE6  13C5 00C00007           2037mm         MOVE.B D5,DUART_TXA                         ; SEND THE NEXT CHARACTER
00000DEC                          2038mm     ENDC
00000DEC                          2039mm 
00000DEC                 FALSE    2040mm     IFNE DEBUG
00000DEC                          2041mm     ENDC
00000DEC                          2042mm 
00000DEC                          2043mm     ENDM
00000DEC                          2044mm         HEX2BIN D5,D5,A4
00000DEC  49FA 0D42               2045mm     LEA HEX2BIN_LUT(PC),A4                          ; LOAD THE LOOKUP TABLE
00000DF0  0405 0030               2046mm     SUB.B #'0',D5                                   ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
00000DF4  CABC 000000FF           2047mm     AND.L #$FF,D5                                   ; IGNORE THE TOP 3 BYTES
00000DFA  1A34 5000               2048mm     MOVE.B 0(A4,D5),D5                              ; USE THAT AS AN INDEX INTO THE LUT   
00000DFE                          2049mm     ENDM
00000DFE  8805                    2050m         OR.B D5,D4
00000E00  5307                    2051m         SUB.B #1,D7
00000E02                          2052m     ENDW
00000E02  6098                    2053ms     BRA _10000012
00000E04                          2054ms _10000013
00000E04                          2055m 
00000E04  7A00                    2056m     MOVE.L #0,D5                                    ; REXTRACT LATEST BYTE OF ADDRESS AND ADD INTO CHECKSUM
00000E06  1A04                    2057m     MOVE.B D4,D5
00000E08  D484                    2058m     ADD.L D4,D2
00000E0A                          2059m 
00000E0A                          2060m     ENDM
00000E0A                          2061m     PRINT_CRLF D5,A4
00000E0A  49FA 0D92               2062m     LEA CRLF(PC),A4
00000E0E                          2063mm     PRINT_STR A4,D5
00000E0E                          2064mm LOOP_118
00000E0E  0C14 0000               2065mm     CMP.B #NULL,(A4)                                ; 0 -> DONE
00000E12  6700 0016               2066mm     BEQ EXIT_118
00000E16                          2067mmm     PRINT_CHAR (A4)+,D5
00000E16                          2068mmm WAIT_FOR_READY_119                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000E16                 TRUE     2069mmm     IFEQ DEBUG
00000E16  1A39 00C00003           2070mmm         MOVE.B DUART_SRA,D5                         ; READ STATUS REGISTER
00000E1C  0805 0002               2071mmm         BTST #2,D5                                  ; CHECK FOR SPACE TO SEND
00000E20  67F4                    2072mmm         BEQ WAIT_FOR_READY_119                      ; NO SPACE, CHECK AGAIN
00000E22  13DC 00C00007           2073mmm         MOVE.B (A4)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00000E28                          2074mmm     ENDC
00000E28                          2075mmm 
00000E28                 FALSE    2076mmm     IFNE DEBUG
00000E28                          2077mmm     ENDC
00000E28                          2078mmm 
00000E28                          2079mmm     ENDM
00000E28  60E4                    2080mm     BRA LOOP_118
00000E2A                          2081mm EXIT_118
00000E2A                          2082mm     ENDM
00000E2A                          2083m     ENDM
00000E2A                          2084  
00000E2A                          2085      IF.B D2 <NE> #$FF THEN.L
00000E2A  B43C 00FF               2086s     CMP.B   #$FF,D2
00000E2E  6700 0090               2087s     BEQ.L   _0000000A
00000E32  49FA 0CCA               2088          LEA CS_FAILURE(PC),A4                       ; warn for mismatched checksum
00000E36                          2089m         PRINT_STR A4,D5
00000E36                          2090m LOOP_120
00000E36  0C14 0000               2091m     CMP.B #NULL,(A4)                                ; 0 -> DONE
00000E3A  6700 0016               2092m     BEQ EXIT_120
00000E3E                          2093mm     PRINT_CHAR (A4)+,D5
00000E3E                          2094mm WAIT_FOR_READY_121                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000E3E                 TRUE     2095mm     IFEQ DEBUG
00000E3E  1A39 00C00003           2096mm         MOVE.B DUART_SRA,D5                         ; READ STATUS REGISTER
00000E44  0805 0002               2097mm         BTST #2,D5                                  ; CHECK FOR SPACE TO SEND
00000E48  67F4                    2098mm         BEQ WAIT_FOR_READY_121                      ; NO SPACE, CHECK AGAIN
00000E4A  13DC 00C00007           2099mm         MOVE.B (A4)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00000E50                          2100mm     ENDC
00000E50                          2101mm 
00000E50                 FALSE    2102mm     IFNE DEBUG
00000E50                          2103mm     ENDC
00000E50                          2104mm 
00000E50                          2105mm     ENDM
00000E50  60E4                    2106m     BRA LOOP_120
00000E52                          2107m EXIT_120
00000E52                          2108m     ENDM
00000E52                          2109m         PRINT_REG D0,D5,D3,D6,A4
00000E52  49FA 0D50               2110m     LEA OX(PC),A4
00000E56                          2111mm     PRINT_STR A4,D5
00000E56                          2112mm LOOP_123
00000E56  0C14 0000               2113mm     CMP.B #NULL,(A4)                                ; 0 -> DONE
00000E5A  6700 0016               2114mm     BEQ EXIT_123
00000E5E                          2115mmm     PRINT_CHAR (A4)+,D5
00000E5E                          2116mmm WAIT_FOR_READY_124                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000E5E                 TRUE     2117mmm     IFEQ DEBUG
00000E5E  1A39 00C00003           2118mmm         MOVE.B DUART_SRA,D5                         ; READ STATUS REGISTER
00000E64  0805 0002               2119mmm         BTST #2,D5                                  ; CHECK FOR SPACE TO SEND
00000E68  67F4                    2120mmm         BEQ WAIT_FOR_READY_124                      ; NO SPACE, CHECK AGAIN
00000E6A  13DC 00C00007           2121mmm         MOVE.B (A4)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00000E70                          2122mmm     ENDC
00000E70                          2123mmm 
00000E70                 FALSE    2124mmm     IFNE DEBUG
00000E70                          2125mmm     ENDC
00000E70                          2126mmm 
00000E70                          2127mmm     ENDM
00000E70  60E4                    2128mm     BRA LOOP_123
00000E72                          2129mm EXIT_123
00000E72                          2130mm     ENDM
00000E72  7C07                    2131m     MOVE.L #7,D6                                    ; LOOP ROUND ALL 8 HEX CHARACTERS OF 4 BITS EACH
00000E74                          2132m LOOP_122
00000E74                          2133mm     BIN2HEX D0,D3,A4
00000E74  49FA 0CAA               2134mm     LEA BIN2HEX_LUT(PC),A4                          ; LOAD THE LOOKUP TABLE
00000E78  E998                    2135mm     ROL.L #4,D0                                     ; SHIFT THE TOP 4 BITS DOWN TO BOTTOM OF THE REGISTER THE AND MASK OFF EVERYTHING ELSE
00000E7A  1600                    2136mm     MOVE.B D0,D3
00000E7C  0283 0000000F           2137mm     ANDI.L #$F,D3
00000E82  1634 3000               2138mm     MOVE.B 0(A4,D3),D3                              ; USE THAT AS AN INDEX INTO THE LUT
00000E86                          2139mm     ENDM
00000E86                          2140mm     PRINT_CHAR D3,D5
00000E86                          2141mm WAIT_FOR_READY_126                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000E86                 TRUE     2142mm     IFEQ DEBUG
00000E86  1A39 00C00003           2143mm         MOVE.B DUART_SRA,D5                         ; READ STATUS REGISTER
00000E8C  0805 0002               2144mm         BTST #2,D5                                  ; CHECK FOR SPACE TO SEND
00000E90  67F4                    2145mm         BEQ WAIT_FOR_READY_126                      ; NO SPACE, CHECK AGAIN
00000E92  13C3 00C00007           2146mm         MOVE.B D3,DUART_TXA                         ; SEND THE NEXT CHARACTER
00000E98                          2147mm     ENDC
00000E98                          2148mm 
00000E98                 FALSE    2149mm     IFNE DEBUG
00000E98                          2150mm     ENDC
00000E98                          2151mm 
00000E98                          2152mm     ENDM
00000E98  57CE FFDA               2153m     DBEQ D6,LOOP_122
00000E9C                          2154m     ENDM
00000E9C                          2155m         PRINT_CRLF D5,A4
00000E9C  49FA 0D00               2156m     LEA CRLF(PC),A4
00000EA0                          2157mm     PRINT_STR A4,D5
00000EA0                          2158mm LOOP_128
00000EA0  0C14 0000               2159mm     CMP.B #NULL,(A4)                                ; 0 -> DONE
00000EA4  6700 0016               2160mm     BEQ EXIT_128
00000EA8                          2161mmm     PRINT_CHAR (A4)+,D5
00000EA8                          2162mmm WAIT_FOR_READY_129                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000EA8                 TRUE     2163mmm     IFEQ DEBUG
00000EA8  1A39 00C00003           2164mmm         MOVE.B DUART_SRA,D5                         ; READ STATUS REGISTER
00000EAE  0805 0002               2165mmm         BTST #2,D5                                  ; CHECK FOR SPACE TO SEND
00000EB2  67F4                    2166mmm         BEQ WAIT_FOR_READY_129                      ; NO SPACE, CHECK AGAIN
00000EB4  13DC 00C00007           2167mmm         MOVE.B (A4)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00000EBA                          2168mmm     ENDC
00000EBA                          2169mmm 
00000EBA                 FALSE    2170mmm     IFNE DEBUG
00000EBA                          2171mmm     ENDC
00000EBA                          2172mmm 
00000EBA                          2173mmm     ENDM
00000EBA  60E4                    2174mm     BRA LOOP_128
00000EBC                          2175mm EXIT_128
00000EBC                          2176mm     ENDM
00000EBC                          2177m     ENDM
00000EBC                          2178          
00000EBC  6000 F72C               2179          BRA MAIN_LOOP
00000EC0                          2180      ENDI
00000EC0                          2181s _0000000A
00000EC0                          2182  
00000EC0                          2183      IF D1 <EQ> #0 THEN
00000EC0  B27C 0000               2184s     CMP.W   #0,D1
00000EC4  6600 0006               2185s     BNE _0000000B
00000EC8  6000 F9B8               2186        BRA WAIT_FOR_SRECORD
00000ECC                          2187      ENDI
00000ECC                          2188s _0000000B
00000ECC                          2189  DOWNLOAD_DONE
00000ECC                          2190m     PRINT_REG D0,D5,D6,D2,A1                        ; print out number of Srecords read
00000ECC  43FA 0CD6               2191m     LEA OX(PC),A1
00000ED0                          2192mm     PRINT_STR A1,D5
00000ED0                          2193mm LOOP_131
00000ED0  0C11 0000               2194mm     CMP.B #NULL,(A1)                                ; 0 -> DONE
00000ED4  6700 0016               2195mm     BEQ EXIT_131
00000ED8                          2196mmm     PRINT_CHAR (A1)+,D5
00000ED8                          2197mmm WAIT_FOR_READY_132                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000ED8                 TRUE     2198mmm     IFEQ DEBUG
00000ED8  1A39 00C00003           2199mmm         MOVE.B DUART_SRA,D5                         ; READ STATUS REGISTER
00000EDE  0805 0002               2200mmm         BTST #2,D5                                  ; CHECK FOR SPACE TO SEND
00000EE2  67F4                    2201mmm         BEQ WAIT_FOR_READY_132                      ; NO SPACE, CHECK AGAIN
00000EE4  13D9 00C00007           2202mmm         MOVE.B (A1)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00000EEA                          2203mmm     ENDC
00000EEA                          2204mmm 
00000EEA                 FALSE    2205mmm     IFNE DEBUG
00000EEA                          2206mmm     ENDC
00000EEA                          2207mmm 
00000EEA                          2208mmm     ENDM
00000EEA  60E4                    2209mm     BRA LOOP_131
00000EEC                          2210mm EXIT_131
00000EEC                          2211mm     ENDM
00000EEC  7407                    2212m     MOVE.L #7,D2                                    ; LOOP ROUND ALL 8 HEX CHARACTERS OF 4 BITS EACH
00000EEE                          2213m LOOP_130
00000EEE                          2214mm     BIN2HEX D0,D6,A1
00000EEE  43FA 0C30               2215mm     LEA BIN2HEX_LUT(PC),A1                          ; LOAD THE LOOKUP TABLE
00000EF2  E998                    2216mm     ROL.L #4,D0                                     ; SHIFT THE TOP 4 BITS DOWN TO BOTTOM OF THE REGISTER THE AND MASK OFF EVERYTHING ELSE
00000EF4  1C00                    2217mm     MOVE.B D0,D6
00000EF6  0286 0000000F           2218mm     ANDI.L #$F,D6
00000EFC  1C31 6000               2219mm     MOVE.B 0(A1,D6),D6                              ; USE THAT AS AN INDEX INTO THE LUT
00000F00                          2220mm     ENDM
00000F00                          2221mm     PRINT_CHAR D6,D5
00000F00                          2222mm WAIT_FOR_READY_134                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000F00                 TRUE     2223mm     IFEQ DEBUG
00000F00  1A39 00C00003           2224mm         MOVE.B DUART_SRA,D5                         ; READ STATUS REGISTER
00000F06  0805 0002               2225mm         BTST #2,D5                                  ; CHECK FOR SPACE TO SEND
00000F0A  67F4                    2226mm         BEQ WAIT_FOR_READY_134                      ; NO SPACE, CHECK AGAIN
00000F0C  13C6 00C00007           2227mm         MOVE.B D6,DUART_TXA                         ; SEND THE NEXT CHARACTER
00000F12                          2228mm     ENDC
00000F12                          2229mm 
00000F12                 FALSE    2230mm     IFNE DEBUG
00000F12                          2231mm     ENDC
00000F12                          2232mm 
00000F12                          2233mm     ENDM
00000F12  57CA FFDA               2234m     DBEQ D2,LOOP_130
00000F16                          2235m     ENDM
00000F16  43FA 0BAD               2236      LEA READ(PC),A1
00000F1A                          2237m     PRINT_STR A1,D5
00000F1A                          2238m LOOP_135
00000F1A  0C11 0000               2239m     CMP.B #NULL,(A1)                                ; 0 -> DONE
00000F1E  6700 0016               2240m     BEQ EXIT_135
00000F22                          2241mm     PRINT_CHAR (A1)+,D5
00000F22                          2242mm WAIT_FOR_READY_136                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000F22                 TRUE     2243mm     IFEQ DEBUG
00000F22  1A39 00C00003           2244mm         MOVE.B DUART_SRA,D5                         ; READ STATUS REGISTER
00000F28  0805 0002               2245mm         BTST #2,D5                                  ; CHECK FOR SPACE TO SEND
00000F2C  67F4                    2246mm         BEQ WAIT_FOR_READY_136                      ; NO SPACE, CHECK AGAIN
00000F2E  13D9 00C00007           2247mm         MOVE.B (A1)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00000F34                          2248mm     ENDC
00000F34                          2249mm 
00000F34                 FALSE    2250mm     IFNE DEBUG
00000F34                          2251mm     ENDC
00000F34                          2252mm 
00000F34                          2253mm     ENDM
00000F34  60E4                    2254m     BRA LOOP_135
00000F36                          2255m EXIT_135
00000F36                          2256m     ENDM
00000F36  2E08                    2257      MOVE.L A0,D7                                    ; set address accumulator to start address
00000F38                          2258m     PRINT_REG D7,D5,D6,D2,A1                        ; print out start address
00000F38  43FA 0C6A               2259m     LEA OX(PC),A1
00000F3C                          2260mm     PRINT_STR A1,D5
00000F3C                          2261mm LOOP_138
00000F3C  0C11 0000               2262mm     CMP.B #NULL,(A1)                                ; 0 -> DONE
00000F40  6700 0016               2263mm     BEQ EXIT_138
00000F44                          2264mmm     PRINT_CHAR (A1)+,D5
00000F44                          2265mmm WAIT_FOR_READY_139                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000F44                 TRUE     2266mmm     IFEQ DEBUG
00000F44  1A39 00C00003           2267mmm         MOVE.B DUART_SRA,D5                         ; READ STATUS REGISTER
00000F4A  0805 0002               2268mmm         BTST #2,D5                                  ; CHECK FOR SPACE TO SEND
00000F4E  67F4                    2269mmm         BEQ WAIT_FOR_READY_139                      ; NO SPACE, CHECK AGAIN
00000F50  13D9 00C00007           2270mmm         MOVE.B (A1)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00000F56                          2271mmm     ENDC
00000F56                          2272mmm 
00000F56                 FALSE    2273mmm     IFNE DEBUG
00000F56                          2274mmm     ENDC
00000F56                          2275mmm 
00000F56                          2276mmm     ENDM
00000F56  60E4                    2277mm     BRA LOOP_138
00000F58                          2278mm EXIT_138
00000F58                          2279mm     ENDM
00000F58  7407                    2280m     MOVE.L #7,D2                                    ; LOOP ROUND ALL 8 HEX CHARACTERS OF 4 BITS EACH
00000F5A                          2281m LOOP_137
00000F5A                          2282mm     BIN2HEX D7,D6,A1
00000F5A  43FA 0BC4               2283mm     LEA BIN2HEX_LUT(PC),A1                          ; LOAD THE LOOKUP TABLE
00000F5E  E99F                    2284mm     ROL.L #4,D7                                     ; SHIFT THE TOP 4 BITS DOWN TO BOTTOM OF THE REGISTER THE AND MASK OFF EVERYTHING ELSE
00000F60  1C07                    2285mm     MOVE.B D7,D6
00000F62  0286 0000000F           2286mm     ANDI.L #$F,D6
00000F68  1C31 6000               2287mm     MOVE.B 0(A1,D6),D6                              ; USE THAT AS AN INDEX INTO THE LUT
00000F6C                          2288mm     ENDM
00000F6C                          2289mm     PRINT_CHAR D6,D5
00000F6C                          2290mm WAIT_FOR_READY_141                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000F6C                 TRUE     2291mm     IFEQ DEBUG
00000F6C  1A39 00C00003           2292mm         MOVE.B DUART_SRA,D5                         ; READ STATUS REGISTER
00000F72  0805 0002               2293mm         BTST #2,D5                                  ; CHECK FOR SPACE TO SEND
00000F76  67F4                    2294mm         BEQ WAIT_FOR_READY_141                      ; NO SPACE, CHECK AGAIN
00000F78  13C6 00C00007           2295mm         MOVE.B D6,DUART_TXA                         ; SEND THE NEXT CHARACTER
00000F7E                          2296mm     ENDC
00000F7E                          2297mm 
00000F7E                 FALSE    2298mm     IFNE DEBUG
00000F7E                          2299mm     ENDC
00000F7E                          2300mm 
00000F7E                          2301mm     ENDM
00000F7E  57CA FFDA               2302m     DBEQ D2,LOOP_137
00000F82                          2303m     ENDM
00000F82                          2304m     PRINT_CRLF D5,A4
00000F82  49FA 0C1A               2305m     LEA CRLF(PC),A4
00000F86                          2306mm     PRINT_STR A4,D5
00000F86                          2307mm LOOP_143
00000F86  0C14 0000               2308mm     CMP.B #NULL,(A4)                                ; 0 -> DONE
00000F8A  6700 0016               2309mm     BEQ EXIT_143
00000F8E                          2310mmm     PRINT_CHAR (A4)+,D5
00000F8E                          2311mmm WAIT_FOR_READY_144                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000F8E                 TRUE     2312mmm     IFEQ DEBUG
00000F8E  1A39 00C00003           2313mmm         MOVE.B DUART_SRA,D5                         ; READ STATUS REGISTER
00000F94  0805 0002               2314mmm         BTST #2,D5                                  ; CHECK FOR SPACE TO SEND
00000F98  67F4                    2315mmm         BEQ WAIT_FOR_READY_144                      ; NO SPACE, CHECK AGAIN
00000F9A  13DC 00C00007           2316mmm         MOVE.B (A4)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00000FA0                          2317mmm     ENDC
00000FA0                          2318mmm 
00000FA0                 FALSE    2319mmm     IFNE DEBUG
00000FA0                          2320mmm     ENDC
00000FA0                          2321mmm 
00000FA0                          2322mmm     ENDM
00000FA0  60E4                    2323mm     BRA LOOP_143
00000FA2                          2324mm EXIT_143
00000FA2                          2325mm     ENDM
00000FA2                          2326m     ENDM
00000FA2                          2327  
00000FA2  6000 F646               2328      BRA MAIN_LOOP
00000FA6                          2329  
00000FA6                          2330  G
00000FA6  2047                    2331      MOVE.L D7,A0                                        ; grab the address accumulator and then clear it
00000FA8  7E00                    2332      MOVE.L #0,D7
00000FAA                          2333  
00000FAA  4ED0                    2334      JMP (A0)
00000FAC                          2335          
00000FAC                          2336  Z
00000FAC  207C 00200000           2337      MOVE.L #RAM,A0                                  ; address of RAM
00000FB2  D1FC 00100000           2338      ADD.L #$100000,A0
00000FB8                          2339  
00000FB8                          2340      FOR.L D0 = #0 TO #$FFFFC BY #4 DO               ; write
00000FB8  7000                    2341s     MOVE.L  #0,D0
00000FBA  6000 0012               2342s     BRA _20000007
00000FBE                          2343s _20000006
00000FBE  2200                    2344          MOVE.L D0,D1                                ; progress update
00000FC0  E089                    2345          LSR.L #8,D1 
00000FC2  E089                    2346          LSR.L #8,D1
00000FC4  13C1 00E00001           2347          MOVE.B D1,DISPLAY
00000FCA                          2348          
00000FCA  2108                    2349          MOVE.L A0,-(A0)
00000FCC                          2350      ENDF
00000FCC  5880                    2351s     ADD.L   #4,D0
00000FCE                          2352s _20000007
00000FCE  B0BC 000FFFFC           2353s     CMP.L   #$FFFFC,D0
00000FD4  6FE8                    2354s     BLE _20000006
00000FD6                          2355  
00000FD6  207C 00200000           2356      MOVE.L #RAM,A0                                  ; address of RAM
00000FDC  D1FC 00100000           2357      ADD.L #$100000,A0
00000FE2                          2358  
00000FE2                          2359      FOR.L D0 = #0 TO #$FFFFC BY #4 DO               ; read back and check 
00000FE2  7000                    2360s     MOVE.L  #0,D0
00000FE4  6000 00A8               2361s     BRA _20000009
00000FE8                          2362s _20000008
00000FE8  2200                    2363          MOVE.L D0,D1                                ; progress update
00000FEA  E089                    2364          LSR.L #8,D1
00000FEC  E089                    2365          LSR.L #8,D1
00000FEE  13C1 00E00001           2366          MOVE.B D1,DISPLAY
00000FF4                          2367  
00000FF4  2408                    2368          MOVE.L A0,D2
00000FF6  2220                    2369          MOVE.L -(A0),D1
00000FF8                          2370  
00000FF8                          2371          IF.L D2 <NE> D1 THEN
00000FF8  B481                    2372s     CMP.L   D1,D2
00000FFA  6700 0090               2373s     BEQ _0000000C
00000FFE  43FA 0B0F               2374              LEA RAM_ERROR(PC),A1
00001002                          2375m             PRINT_STR A1,D1
00001002                          2376m LOOP_145
00001002  0C11 0000               2377m     CMP.B #NULL,(A1)                                ; 0 -> DONE
00001006  6700 0016               2378m     BEQ EXIT_145
0000100A                          2379mm     PRINT_CHAR (A1)+,D1
0000100A                          2380mm WAIT_FOR_READY_146                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
0000100A                 TRUE     2381mm     IFEQ DEBUG
0000100A  1239 00C00003           2382mm         MOVE.B DUART_SRA,D1                         ; READ STATUS REGISTER
00001010  0801 0002               2383mm         BTST #2,D1                                  ; CHECK FOR SPACE TO SEND
00001014  67F4                    2384mm         BEQ WAIT_FOR_READY_146                      ; NO SPACE, CHECK AGAIN
00001016  13D9 00C00007           2385mm         MOVE.B (A1)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
0000101C                          2386mm     ENDC
0000101C                          2387mm 
0000101C                 FALSE    2388mm     IFNE DEBUG
0000101C                          2389mm     ENDC
0000101C                          2390mm 
0000101C                          2391mm     ENDM
0000101C  60E4                    2392m     BRA LOOP_145
0000101E                          2393m EXIT_145
0000101E                          2394m     ENDM
0000101E  2208                    2395              MOVE.L A0,D1
00001020  5981                    2396              SUB.L #4,D1
00001022                          2397m             PRINT_REG D1,D3,D2,D6,A1                ; print out failure address
00001022  43FA 0B80               2398m     LEA OX(PC),A1
00001026                          2399mm     PRINT_STR A1,D3
00001026                          2400mm LOOP_148
00001026  0C11 0000               2401mm     CMP.B #NULL,(A1)                                ; 0 -> DONE
0000102A  6700 0016               2402mm     BEQ EXIT_148
0000102E                          2403mmm     PRINT_CHAR (A1)+,D3
0000102E                          2404mmm WAIT_FOR_READY_149                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
0000102E                 TRUE     2405mmm     IFEQ DEBUG
0000102E  1639 00C00003           2406mmm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
00001034  0803 0002               2407mmm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
00001038  67F4                    2408mmm         BEQ WAIT_FOR_READY_149                      ; NO SPACE, CHECK AGAIN
0000103A  13D9 00C00007           2409mmm         MOVE.B (A1)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00001040                          2410mmm     ENDC
00001040                          2411mmm 
00001040                 FALSE    2412mmm     IFNE DEBUG
00001040                          2413mmm     ENDC
00001040                          2414mmm 
00001040                          2415mmm     ENDM
00001040  60E4                    2416mm     BRA LOOP_148
00001042                          2417mm EXIT_148
00001042                          2418mm     ENDM
00001042  7C07                    2419m     MOVE.L #7,D6                                    ; LOOP ROUND ALL 8 HEX CHARACTERS OF 4 BITS EACH
00001044                          2420m LOOP_147
00001044                          2421mm     BIN2HEX D1,D2,A1
00001044  43FA 0ADA               2422mm     LEA BIN2HEX_LUT(PC),A1                          ; LOAD THE LOOKUP TABLE
00001048  E999                    2423mm     ROL.L #4,D1                                     ; SHIFT THE TOP 4 BITS DOWN TO BOTTOM OF THE REGISTER THE AND MASK OFF EVERYTHING ELSE
0000104A  1401                    2424mm     MOVE.B D1,D2
0000104C  0282 0000000F           2425mm     ANDI.L #$F,D2
00001052  1431 2000               2426mm     MOVE.B 0(A1,D2),D2                              ; USE THAT AS AN INDEX INTO THE LUT
00001056                          2427mm     ENDM
00001056                          2428mm     PRINT_CHAR D2,D3
00001056                          2429mm WAIT_FOR_READY_151                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00001056                 TRUE     2430mm     IFEQ DEBUG
00001056  1639 00C00003           2431mm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
0000105C  0803 0002               2432mm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
00001060  67F4                    2433mm         BEQ WAIT_FOR_READY_151                      ; NO SPACE, CHECK AGAIN
00001062  13C2 00C00007           2434mm         MOVE.B D2,DUART_TXA                         ; SEND THE NEXT CHARACTER
00001068                          2435mm     ENDC
00001068                          2436mm 
00001068                 FALSE    2437mm     IFNE DEBUG
00001068                          2438mm     ENDC
00001068                          2439mm 
00001068                          2440mm     ENDM
00001068  57CE FFDA               2441m     DBEQ D6,LOOP_147
0000106C                          2442m     ENDM
0000106C                          2443m             PRINT_CRLF D3,A1
0000106C  43FA 0B30               2444m     LEA CRLF(PC),A1
00001070                          2445mm     PRINT_STR A1,D3
00001070                          2446mm LOOP_153
00001070  0C11 0000               2447mm     CMP.B #NULL,(A1)                                ; 0 -> DONE
00001074  6700 0016               2448mm     BEQ EXIT_153
00001078                          2449mmm     PRINT_CHAR (A1)+,D3
00001078                          2450mmm WAIT_FOR_READY_154                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00001078                 TRUE     2451mmm     IFEQ DEBUG
00001078  1639 00C00003           2452mmm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
0000107E  0803 0002               2453mmm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
00001082  67F4                    2454mmm         BEQ WAIT_FOR_READY_154                      ; NO SPACE, CHECK AGAIN
00001084  13D9 00C00007           2455mmm         MOVE.B (A1)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
0000108A                          2456mmm     ENDC
0000108A                          2457mmm 
0000108A                 FALSE    2458mmm     IFNE DEBUG
0000108A                          2459mmm     ENDC
0000108A                          2460mmm 
0000108A                          2461mmm     ENDM
0000108A  60E4                    2462mm     BRA LOOP_153
0000108C                          2463mm EXIT_153
0000108C                          2464mm     ENDM
0000108C                          2465m     ENDM
0000108C                          2466          ENDI 
0000108C                          2467s _0000000C
0000108C                          2468      ENDF
0000108C  5880                    2469s     ADD.L   #4,D0
0000108E                          2470s _20000009
0000108E  B0BC 000FFFFC           2471s     CMP.L   #$FFFFC,D0
00001094  6F00 FF52               2472s     BLE _20000008
00001098                          2473  
00001098  6000 F550               2474      BRA MAIN_LOOP
0000109C                          2475  
0000109C                          2476  L
0000109C  7000                    2477      MOVE.L #0,D0                                    ; D0 will be the length to write               
0000109E  7200                    2478      MOVE.L #0,D1                                    ; D1 will be the address to write 
000010A0                          2479  
000010A0                          2480      FOR D2 = #0 TO #7 DO                            ; read 4 bytes, we'll split into 2 byte address (MS) and 2 byte length (LS)
000010A0  343C 0000               2481s     MOVE.W  #0,D2
000010A4  6000 0046               2482s     BRA _2000000B
000010A8                          2483s _2000000A
000010A8  E989                    2484          LSL.L #4,D1                                 ; make what we have so far more significant
000010AA                          2485m         WAIT_CHAR D3,D4                             ; next character -> D2
000010AA                          2486m WAIT_FOR_READY_155                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
000010AA                 TRUE     2487m     IFEQ DEBUG
000010AA  1839 00C00003           2488m         MOVE.B DUART_SRA,D4                         ; READ STATUS REGISTER
000010B0  0804 0000               2489m         BTST #0,D4                                  ; CHECK FOR CHARACTER
000010B4  67F4                    2490m         BEQ WAIT_FOR_READY_155                      ; NOTHING, CHECK AGAIN
000010B6                          2491m     ENDC
000010B6                          2492m 
000010B6                          2493mm     READ_CHAR D3
000010B6                 TRUE     2494mm     IFEQ DEBUG
000010B6  1639 00C00007           2495mm         MOVE.B DUART_RXA,D3                         ; GOT A CHARACTER, READ IT
000010BC                          2496mm     ENDC
000010BC                 FALSE    2497mm     IFNE DEBUG
000010BC                          2498mm     ENDC
000010BC                          2499mm 
000010BC  B63C 001B               2500mm     CMP.B #$1B,D3                                   ; CHECK FOR ESCAPE AND GO TO START
000010C0  6700 F33E               2501mm     BEQ START
000010C4                          2502mm     ENDM
000010C4                          2503m 
000010C4                 TRUE     2504m     IFEQ DEBUG
000010C4                          2505mm         PRINT_CHAR D3,D4                            ; ECHO IT BACK
000010C4                          2506mm WAIT_FOR_READY_157                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
000010C4                 TRUE     2507mm     IFEQ DEBUG
000010C4  1839 00C00003           2508mm         MOVE.B DUART_SRA,D4                         ; READ STATUS REGISTER
000010CA  0804 0002               2509mm         BTST #2,D4                                  ; CHECK FOR SPACE TO SEND
000010CE  67F4                    2510mm         BEQ WAIT_FOR_READY_157                      ; NO SPACE, CHECK AGAIN
000010D0  13C3 00C00007           2511mm         MOVE.B D3,DUART_TXA                         ; SEND THE NEXT CHARACTER
000010D6                          2512mm     ENDC
000010D6                          2513mm 
000010D6                 FALSE    2514mm     IFNE DEBUG
000010D6                          2515mm     ENDC
000010D6                          2516mm 
000010D6                          2517mm     ENDM
000010D6                          2518m     ENDC
000010D6                          2519m     ENDM
000010D6                          2520m         HEX2BIN D3,D3,A0                            ; convert to binary -> D2
000010D6  41FA 0A58               2521m     LEA HEX2BIN_LUT(PC),A0                          ; LOAD THE LOOKUP TABLE
000010DA  0403 0030               2522m     SUB.B #'0',D3                                   ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
000010DE  C6BC 000000FF           2523m     AND.L #$FF,D3                                   ; IGNORE THE TOP 3 BYTES
000010E4  1630 3000               2524m     MOVE.B 0(A0,D3),D3                              ; USE THAT AS AN INDEX INTO THE LUT   
000010E8                          2525m     ENDM
000010E8  8203                    2526          OR.B D3,D1
000010EA                          2527      ENDF
000010EA  5242                    2528s     ADD.W   #1,D2
000010EC                          2529s _2000000B
000010EC  B47C 0007               2530s     CMP.W   #7,D2
000010F0  6FB6                    2531s     BLE _2000000A
000010F2                          2532  
000010F2  3001                    2533      MOVE.W D1,D0                                    ; extract the LSword for the length
000010F4  E089                    2534      LSR.L #8,D1                                     ; extract the MSword for the address
000010F6  E089                    2535      LSR.L #8,D1
000010F8                          2536  
000010F8                          2537m     PRINT_CRLF D2,A1
000010F8  43FA 0AA4               2538m     LEA CRLF(PC),A1
000010FC                          2539mm     PRINT_STR A1,D2
000010FC                          2540mm LOOP_160
000010FC  0C11 0000               2541mm     CMP.B #NULL,(A1)                                ; 0 -> DONE
00001100  6700 0016               2542mm     BEQ EXIT_160
00001104                          2543mmm     PRINT_CHAR (A1)+,D2
00001104                          2544mmm WAIT_FOR_READY_161                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00001104                 TRUE     2545mmm     IFEQ DEBUG
00001104  1439 00C00003           2546mmm         MOVE.B DUART_SRA,D2                         ; READ STATUS REGISTER
0000110A  0802 0002               2547mmm         BTST #2,D2                                  ; CHECK FOR SPACE TO SEND
0000110E  67F4                    2548mmm         BEQ WAIT_FOR_READY_161                      ; NO SPACE, CHECK AGAIN
00001110  13D9 00C00007           2549mmm         MOVE.B (A1)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00001116                          2550mmm     ENDC
00001116                          2551mmm 
00001116                 FALSE    2552mmm     IFNE DEBUG
00001116                          2553mmm     ENDC
00001116                          2554mmm 
00001116                          2555mmm     ENDM
00001116  60E4                    2556mm     BRA LOOP_160
00001118                          2557mm EXIT_160
00001118                          2558mm     ENDM
00001118                          2559m     ENDM
00001118                          2560  
00001118  2041                    2561      MOVE.L D1,A0                                    ; target address
0000111A  2641                    2562      MOVE.L D1,A3                                    ; keep a copy for later
0000111C                          2563  
0000111C  2247                    2564      MOVE.L D7,A1                                    ; address accumulator -> address register
0000111E  D3FC 00000400           2565      ADD.L #START,A1                             ; skip the vectors
00001124  2847                    2566      MOVE.L D7,A4                                    ; keep a clean copy for later
00001126  7E00                    2567      MOVE.L #0,D7                                    ; clear the now used address accumulator
00001128                          2568  
00001128                          2569m     UNPROTECT
00001128  31FC AAAA 2AAA          2570m     MOVE.W #$AAAA,$2AAA                             ; REMOVE WRITE PROTECT
0000112E  4E71                    2571m     NOP
00001130  31FC 5555 1554          2572m     MOVE.W #$5555,$1554
00001136  4E71                    2573m     NOP
00001138  31FC 8080 2AAA          2574m     MOVE.W #$8080,$2AAA
0000113E  4E71                    2575m     NOP
00001140  31FC AAAA 2AAA          2576m     MOVE.W #$AAAA,$2AAA
00001146  4E71                    2577m     NOP
00001148  31FC 5555 1554          2578m     MOVE.W #$5555,$1554
0000114E  4E71                    2579m     NOP
00001150  31FC 2020 2AAA          2580m     MOVE.W #$2020,$2AAA
00001156                          2581m     ENDM
00001156                          2582  
00001156  45FA 09EF               2583      LEA LOADING(PC),A2                              ; the prints seem to be important for timing to unprotect the EEPROM
0000115A                          2584m     PRINT_STR A2,D2
0000115A                          2585m LOOP_163
0000115A  0C12 0000               2586m     CMP.B #NULL,(A2)                                ; 0 -> DONE
0000115E  6700 0016               2587m     BEQ EXIT_163
00001162                          2588mm     PRINT_CHAR (A2)+,D2
00001162                          2589mm WAIT_FOR_READY_164                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00001162                 TRUE     2590mm     IFEQ DEBUG
00001162  1439 00C00003           2591mm         MOVE.B DUART_SRA,D2                         ; READ STATUS REGISTER
00001168  0802 0002               2592mm         BTST #2,D2                                  ; CHECK FOR SPACE TO SEND
0000116C  67F4                    2593mm         BEQ WAIT_FOR_READY_164                      ; NO SPACE, CHECK AGAIN
0000116E  13DA 00C00007           2594mm         MOVE.B (A2)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00001174                          2595mm     ENDC
00001174                          2596mm 
00001174                 FALSE    2597mm     IFNE DEBUG
00001174                          2598mm     ENDC
00001174                          2599mm 
00001174                          2600mm     ENDM
00001174  60E4                    2601m     BRA LOOP_163
00001176                          2602m EXIT_163
00001176                          2603m     ENDM
00001176                          2604  
00001176  45FA 09E3               2605      LEA CODE(PC),A2
0000117A                          2606m     PRINT_STR A2,D2
0000117A                          2607m LOOP_165
0000117A  0C12 0000               2608m     CMP.B #NULL,(A2)                                ; 0 -> DONE
0000117E  6700 0016               2609m     BEQ EXIT_165
00001182                          2610mm     PRINT_CHAR (A2)+,D2
00001182                          2611mm WAIT_FOR_READY_166                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00001182                 TRUE     2612mm     IFEQ DEBUG
00001182  1439 00C00003           2613mm         MOVE.B DUART_SRA,D2                         ; READ STATUS REGISTER
00001188  0802 0002               2614mm         BTST #2,D2                                  ; CHECK FOR SPACE TO SEND
0000118C  67F4                    2615mm         BEQ WAIT_FOR_READY_166                      ; NO SPACE, CHECK AGAIN
0000118E  13DA 00C00007           2616mm         MOVE.B (A2)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00001194                          2617mm     ENDC
00001194                          2618mm 
00001194                 FALSE    2619mm     IFNE DEBUG
00001194                          2620mm     ENDC
00001194                          2621mm 
00001194                          2622mm     ENDM
00001194  60E4                    2623m     BRA LOOP_165
00001196                          2624m EXIT_165
00001196                          2625m     ENDM
00001196                          2626      
00001196  2409                    2627      MOVE.L A1,D2
00001198                          2628m     PRINT_REG D2,D3,D4,D5,A2
00001198  45FA 0A0A               2629m     LEA OX(PC),A2
0000119C                          2630mm     PRINT_STR A2,D3
0000119C                          2631mm LOOP_168
0000119C  0C12 0000               2632mm     CMP.B #NULL,(A2)                                ; 0 -> DONE
000011A0  6700 0016               2633mm     BEQ EXIT_168
000011A4                          2634mmm     PRINT_CHAR (A2)+,D3
000011A4                          2635mmm WAIT_FOR_READY_169                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
000011A4                 TRUE     2636mmm     IFEQ DEBUG
000011A4  1639 00C00003           2637mmm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
000011AA  0803 0002               2638mmm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
000011AE  67F4                    2639mmm         BEQ WAIT_FOR_READY_169                      ; NO SPACE, CHECK AGAIN
000011B0  13DA 00C00007           2640mmm         MOVE.B (A2)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
000011B6                          2641mmm     ENDC
000011B6                          2642mmm 
000011B6                 FALSE    2643mmm     IFNE DEBUG
000011B6                          2644mmm     ENDC
000011B6                          2645mmm 
000011B6                          2646mmm     ENDM
000011B6  60E4                    2647mm     BRA LOOP_168
000011B8                          2648mm EXIT_168
000011B8                          2649mm     ENDM
000011B8  7A07                    2650m     MOVE.L #7,D5                                    ; LOOP ROUND ALL 8 HEX CHARACTERS OF 4 BITS EACH
000011BA                          2651m LOOP_167
000011BA                          2652mm     BIN2HEX D2,D4,A2
000011BA  45FA 0964               2653mm     LEA BIN2HEX_LUT(PC),A2                          ; LOAD THE LOOKUP TABLE
000011BE  E99A                    2654mm     ROL.L #4,D2                                     ; SHIFT THE TOP 4 BITS DOWN TO BOTTOM OF THE REGISTER THE AND MASK OFF EVERYTHING ELSE
000011C0  1802                    2655mm     MOVE.B D2,D4
000011C2  0284 0000000F           2656mm     ANDI.L #$F,D4
000011C8  1832 4000               2657mm     MOVE.B 0(A2,D4),D4                              ; USE THAT AS AN INDEX INTO THE LUT
000011CC                          2658mm     ENDM
000011CC                          2659mm     PRINT_CHAR D4,D3
000011CC                          2660mm WAIT_FOR_READY_171                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
000011CC                 TRUE     2661mm     IFEQ DEBUG
000011CC  1639 00C00003           2662mm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
000011D2  0803 0002               2663mm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
000011D6  67F4                    2664mm         BEQ WAIT_FOR_READY_171                      ; NO SPACE, CHECK AGAIN
000011D8  13C4 00C00007           2665mm         MOVE.B D4,DUART_TXA                         ; SEND THE NEXT CHARACTER
000011DE                          2666mm     ENDC
000011DE                          2667mm 
000011DE                 FALSE    2668mm     IFNE DEBUG
000011DE                          2669mm     ENDC
000011DE                          2670mm 
000011DE                          2671mm     ENDM
000011DE  57CD FFDA               2672m     DBEQ D5,LOOP_167
000011E2                          2673m     ENDM
000011E2                          2674  
000011E2  45FA 09C3               2675      LEA TO(PC),A2
000011E6                          2676m     PRINT_STR A2,D3
000011E6                          2677m LOOP_172
000011E6  0C12 0000               2678m     CMP.B #NULL,(A2)                                ; 0 -> DONE
000011EA  6700 0016               2679m     BEQ EXIT_172
000011EE                          2680mm     PRINT_CHAR (A2)+,D3
000011EE                          2681mm WAIT_FOR_READY_173                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
000011EE                 TRUE     2682mm     IFEQ DEBUG
000011EE  1639 00C00003           2683mm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
000011F4  0803 0002               2684mm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
000011F8  67F4                    2685mm         BEQ WAIT_FOR_READY_173                      ; NO SPACE, CHECK AGAIN
000011FA  13DA 00C00007           2686mm         MOVE.B (A2)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00001200                          2687mm     ENDC
00001200                          2688mm 
00001200                 FALSE    2689mm     IFNE DEBUG
00001200                          2690mm     ENDC
00001200                          2691mm 
00001200                          2692mm     ENDM
00001200  60E4                    2693m     BRA LOOP_172
00001202                          2694m EXIT_172
00001202                          2695m     ENDM
00001202                          2696  
00001202  2408                    2697      MOVE.L A0,D2
00001204                          2698m     PRINT_REG D2,D3,D4,D5,A2
00001204  45FA 099E               2699m     LEA OX(PC),A2
00001208                          2700mm     PRINT_STR A2,D3
00001208                          2701mm LOOP_175
00001208  0C12 0000               2702mm     CMP.B #NULL,(A2)                                ; 0 -> DONE
0000120C  6700 0016               2703mm     BEQ EXIT_175
00001210                          2704mmm     PRINT_CHAR (A2)+,D3
00001210                          2705mmm WAIT_FOR_READY_176                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00001210                 TRUE     2706mmm     IFEQ DEBUG
00001210  1639 00C00003           2707mmm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
00001216  0803 0002               2708mmm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
0000121A  67F4                    2709mmm         BEQ WAIT_FOR_READY_176                      ; NO SPACE, CHECK AGAIN
0000121C  13DA 00C00007           2710mmm         MOVE.B (A2)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00001222                          2711mmm     ENDC
00001222                          2712mmm 
00001222                 FALSE    2713mmm     IFNE DEBUG
00001222                          2714mmm     ENDC
00001222                          2715mmm 
00001222                          2716mmm     ENDM
00001222  60E4                    2717mm     BRA LOOP_175
00001224                          2718mm EXIT_175
00001224                          2719mm     ENDM
00001224  7A07                    2720m     MOVE.L #7,D5                                    ; LOOP ROUND ALL 8 HEX CHARACTERS OF 4 BITS EACH
00001226                          2721m LOOP_174
00001226                          2722mm     BIN2HEX D2,D4,A2
00001226  45FA 08F8               2723mm     LEA BIN2HEX_LUT(PC),A2                          ; LOAD THE LOOKUP TABLE
0000122A  E99A                    2724mm     ROL.L #4,D2                                     ; SHIFT THE TOP 4 BITS DOWN TO BOTTOM OF THE REGISTER THE AND MASK OFF EVERYTHING ELSE
0000122C  1802                    2725mm     MOVE.B D2,D4
0000122E  0284 0000000F           2726mm     ANDI.L #$F,D4
00001234  1832 4000               2727mm     MOVE.B 0(A2,D4),D4                              ; USE THAT AS AN INDEX INTO THE LUT
00001238                          2728mm     ENDM
00001238                          2729mm     PRINT_CHAR D4,D3
00001238                          2730mm WAIT_FOR_READY_178                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00001238                 TRUE     2731mm     IFEQ DEBUG
00001238  1639 00C00003           2732mm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
0000123E  0803 0002               2733mm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
00001242  67F4                    2734mm         BEQ WAIT_FOR_READY_178                      ; NO SPACE, CHECK AGAIN
00001244  13C4 00C00007           2735mm         MOVE.B D4,DUART_TXA                         ; SEND THE NEXT CHARACTER
0000124A                          2736mm     ENDC
0000124A                          2737mm 
0000124A                 FALSE    2738mm     IFNE DEBUG
0000124A                          2739mm     ENDC
0000124A                          2740mm 
0000124A                          2741mm     ENDM
0000124A  57CD FFDA               2742m     DBEQ D5,LOOP_174
0000124E                          2743m     ENDM
0000124E                          2744  
0000124E                          2745m     PRINT_CRLF D3,A2
0000124E  45FA 094E               2746m     LEA CRLF(PC),A2
00001252                          2747mm     PRINT_STR A2,D3
00001252                          2748mm LOOP_180
00001252  0C12 0000               2749mm     CMP.B #NULL,(A2)                                ; 0 -> DONE
00001256  6700 0016               2750mm     BEQ EXIT_180
0000125A                          2751mmm     PRINT_CHAR (A2)+,D3
0000125A                          2752mmm WAIT_FOR_READY_181                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
0000125A                 TRUE     2753mmm     IFEQ DEBUG
0000125A  1639 00C00003           2754mmm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
00001260  0803 0002               2755mmm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
00001264  67F4                    2756mmm         BEQ WAIT_FOR_READY_181                      ; NO SPACE, CHECK AGAIN
00001266  13DA 00C00007           2757mmm         MOVE.B (A2)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
0000126C                          2758mmm     ENDC
0000126C                          2759mmm 
0000126C                 FALSE    2760mmm     IFNE DEBUG
0000126C                          2761mmm     ENDC
0000126C                          2762mmm 
0000126C                          2763mmm     ENDM
0000126C  60E4                    2764mm     BRA LOOP_180
0000126E                          2765mm EXIT_180
0000126E                          2766mm     ENDM
0000126E                          2767m     ENDM
0000126E                          2768  
0000126E                          2769      WHILE D0 <GT> #0 DO
0000126E                          2770s _10000014
0000126E  B07C 0000               2771s     CMP.W   #0,D0
00001272  6F00 001C               2772s     BLE _10000015
00001276  5580                    2773          SUB.L #2,D0
00001278                          2774  
00001278  13D1 00E00001           2775          MOVE.B (A1),DISPLAY
0000127E                          2776m         PROGRAM (A1),(A0),D2
0000127E  3091                    2777m   MOVE.W (A1),(A0)                                      ; WRITE THE DATA
00001280                          2778m 
00001280                          2779m WAIT_FOR_COMPLETE_182
00001280  3410                    2780m         MOVE.W (A0),D2
00001282                          2781m 
00001282                          2782m         IF.W D2 <NE> (A1) THEN
00001282  B451                    2783ms     CMP.W   (A1),D2
00001284  6700 0004               2784ms     BEQ _0000000D
00001288  60F6                    2785m             BRA WAIT_FOR_COMPLETE_182
0000128A                          2786m         ENDI
0000128A                          2787ms _0000000D
0000128A                          2788m         ENDM
0000128A                          2789  
0000128A  5488                    2790          ADD.L #2,A0
0000128C  5489                    2791          ADD.L #2,A1
0000128E                          2792      ENDW
0000128E  60DE                    2793s     BRA _10000014
00001290                          2794s _10000015
00001290                          2795  
00001290  45FA 08D8               2796      LEA SP(PC),A2
00001294                          2797m     PRINT_STR A2,D2
00001294                          2798m LOOP_183
00001294  0C12 0000               2799m     CMP.B #NULL,(A2)                                ; 0 -> DONE
00001298  6700 0016               2800m     BEQ EXIT_183
0000129C                          2801mm     PRINT_CHAR (A2)+,D2
0000129C                          2802mm WAIT_FOR_READY_184                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
0000129C                 TRUE     2803mm     IFEQ DEBUG
0000129C  1439 00C00003           2804mm         MOVE.B DUART_SRA,D2                         ; READ STATUS REGISTER
000012A2  0802 0002               2805mm         BTST #2,D2                                  ; CHECK FOR SPACE TO SEND
000012A6  67F4                    2806mm         BEQ WAIT_FOR_READY_184                      ; NO SPACE, CHECK AGAIN
000012A8  13DA 00C00007           2807mm         MOVE.B (A2)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
000012AE                          2808mm     ENDC
000012AE                          2809mm 
000012AE                 FALSE    2810mm     IFNE DEBUG
000012AE                          2811mm     ENDC
000012AE                          2812mm 
000012AE                          2813mm     ENDM
000012AE  60E4                    2814m     BRA LOOP_183
000012B0                          2815m EXIT_183
000012B0                          2816m     ENDM
000012B0                          2817      
000012B0  41F8 0000               2818      LEA STACK,A0
000012B4  D1CC                    2819      ADD.L A4,A0
000012B6  2010                    2820      MOVE.L (A0),D0
000012B8                          2821m     PRINT_REG D0,D2,D3,D4,A3
000012B8  47FA 08EA               2822m     LEA OX(PC),A3
000012BC                          2823mm     PRINT_STR A3,D2
000012BC                          2824mm LOOP_186
000012BC  0C13 0000               2825mm     CMP.B #NULL,(A3)                                ; 0 -> DONE
000012C0  6700 0016               2826mm     BEQ EXIT_186
000012C4                          2827mmm     PRINT_CHAR (A3)+,D2
000012C4                          2828mmm WAIT_FOR_READY_187                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
000012C4                 TRUE     2829mmm     IFEQ DEBUG
000012C4  1439 00C00003           2830mmm         MOVE.B DUART_SRA,D2                         ; READ STATUS REGISTER
000012CA  0802 0002               2831mmm         BTST #2,D2                                  ; CHECK FOR SPACE TO SEND
000012CE  67F4                    2832mmm         BEQ WAIT_FOR_READY_187                      ; NO SPACE, CHECK AGAIN
000012D0  13DB 00C00007           2833mmm         MOVE.B (A3)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
000012D6                          2834mmm     ENDC
000012D6                          2835mmm 
000012D6                 FALSE    2836mmm     IFNE DEBUG
000012D6                          2837mmm     ENDC
000012D6                          2838mmm 
000012D6                          2839mmm     ENDM
000012D6  60E4                    2840mm     BRA LOOP_186
000012D8                          2841mm EXIT_186
000012D8                          2842mm     ENDM
000012D8  7807                    2843m     MOVE.L #7,D4                                    ; LOOP ROUND ALL 8 HEX CHARACTERS OF 4 BITS EACH
000012DA                          2844m LOOP_185
000012DA                          2845mm     BIN2HEX D0,D3,A3
000012DA  47FA 0844               2846mm     LEA BIN2HEX_LUT(PC),A3                          ; LOAD THE LOOKUP TABLE
000012DE  E998                    2847mm     ROL.L #4,D0                                     ; SHIFT THE TOP 4 BITS DOWN TO BOTTOM OF THE REGISTER THE AND MASK OFF EVERYTHING ELSE
000012E0  1600                    2848mm     MOVE.B D0,D3
000012E2  0283 0000000F           2849mm     ANDI.L #$F,D3
000012E8  1633 3000               2850mm     MOVE.B 0(A3,D3),D3                              ; USE THAT AS AN INDEX INTO THE LUT
000012EC                          2851mm     ENDM
000012EC                          2852mm     PRINT_CHAR D3,D2
000012EC                          2853mm WAIT_FOR_READY_189                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
000012EC                 TRUE     2854mm     IFEQ DEBUG
000012EC  1439 00C00003           2855mm         MOVE.B DUART_SRA,D2                         ; READ STATUS REGISTER
000012F2  0802 0002               2856mm         BTST #2,D2                                  ; CHECK FOR SPACE TO SEND
000012F6  67F4                    2857mm         BEQ WAIT_FOR_READY_189                      ; NO SPACE, CHECK AGAIN
000012F8  13C3 00C00007           2858mm         MOVE.B D3,DUART_TXA                         ; SEND THE NEXT CHARACTER
000012FE                          2859mm     ENDC
000012FE                          2860mm 
000012FE                 FALSE    2861mm     IFNE DEBUG
000012FE                          2862mm     ENDC
000012FE                          2863mm 
000012FE                          2864mm     ENDM
000012FE  57CC FFDA               2865m     DBEQ D4,LOOP_185
00001302                          2866m     ENDM
00001302                          2867m     PRINT_CRLF D2,A2
00001302  45FA 089A               2868m     LEA CRLF(PC),A2
00001306                          2869mm     PRINT_STR A2,D2
00001306                          2870mm LOOP_191
00001306  0C12 0000               2871mm     CMP.B #NULL,(A2)                                ; 0 -> DONE
0000130A  6700 0016               2872mm     BEQ EXIT_191
0000130E                          2873mmm     PRINT_CHAR (A2)+,D2
0000130E                          2874mmm WAIT_FOR_READY_192                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
0000130E                 TRUE     2875mmm     IFEQ DEBUG
0000130E  1439 00C00003           2876mmm         MOVE.B DUART_SRA,D2                         ; READ STATUS REGISTER
00001314  0802 0002               2877mmm         BTST #2,D2                                  ; CHECK FOR SPACE TO SEND
00001318  67F4                    2878mmm         BEQ WAIT_FOR_READY_192                      ; NO SPACE, CHECK AGAIN
0000131A  13DA 00C00007           2879mmm         MOVE.B (A2)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00001320                          2880mmm     ENDC
00001320                          2881mmm 
00001320                 FALSE    2882mmm     IFNE DEBUG
00001320                          2883mmm     ENDC
00001320                          2884mmm 
00001320                          2885mmm     ENDM
00001320  60E4                    2886mm     BRA LOOP_191
00001322                          2887mm EXIT_191
00001322                          2888mm     ENDM
00001322                          2889m     ENDM
00001322                          2890      
00001322  207C 00000000           2891      MOVE.L #0,A0
00001328                          2892m     PROGRAM_VECTOR D0,A0,D2
00001328  5488                    2893m     ADD.L #2,A0
0000132A                          2894mm     PROGRAM D0, (A0), D2                                ; WRITE IT
0000132A  3080                    2895mm   MOVE.W D0,(A0)                                        ; WRITE THE DATA
0000132C                          2896mm 
0000132C                          2897mm WAIT_FOR_COMPLETE_194
0000132C  3410                    2898mm         MOVE.W (A0),D2
0000132E                          2899mm 
0000132E                          2900mm         IF.W D2 <NE> D0 THEN
0000132E  B440                    2901mms     CMP.W   D0,D2
00001330  6700 0004               2902mms     BEQ _0000000E
00001334  60F6                    2903mm             BRA WAIT_FOR_COMPLETE_194
00001336                          2904mm         ENDI
00001336                          2905mms _0000000E
00001336                          2906mm         ENDM
00001336  E088                    2907m     LSR.L #8,D0
00001338  E088                    2908m     LSR.L #8,D0
0000133A  5588                    2909m     SUB.L #2,A0
0000133C                          2910mm     PROGRAM D0, (A0), D2
0000133C  3080                    2911mm   MOVE.W D0,(A0)                                        ; WRITE THE DATA
0000133E                          2912mm 
0000133E                          2913mm WAIT_FOR_COMPLETE_195
0000133E  3410                    2914mm         MOVE.W (A0),D2
00001340                          2915mm 
00001340                          2916mm         IF.W D2 <NE> D0 THEN
00001340  B440                    2917mms     CMP.W   D0,D2
00001342  6700 0004               2918mms     BEQ _0000000F
00001346  60F6                    2919mm             BRA WAIT_FOR_COMPLETE_195
00001348                          2920mm         ENDI
00001348                          2921mms _0000000F
00001348                          2922mm         ENDM
00001348                          2923m     ENDM
00001348                          2924      
00001348  45FA 0842               2925      LEA VECTORS(PC),A2
0000134C                          2926m     PRINT_STR A2,D2
0000134C                          2927m LOOP_196
0000134C  0C12 0000               2928m     CMP.B #NULL,(A2)                                ; 0 -> DONE
00001350  6700 0016               2929m     BEQ EXIT_196
00001354                          2930mm     PRINT_CHAR (A2)+,D2
00001354                          2931mm WAIT_FOR_READY_197                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00001354                 TRUE     2932mm     IFEQ DEBUG
00001354  1439 00C00003           2933mm         MOVE.B DUART_SRA,D2                         ; READ STATUS REGISTER
0000135A  0802 0002               2934mm         BTST #2,D2                                  ; CHECK FOR SPACE TO SEND
0000135E  67F4                    2935mm         BEQ WAIT_FOR_READY_197                      ; NO SPACE, CHECK AGAIN
00001360  13DA 00C00007           2936mm         MOVE.B (A2)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00001366                          2937mm     ENDC
00001366                          2938mm 
00001366                 FALSE    2939mm     IFNE DEBUG
00001366                          2940mm     ENDC
00001366                          2941mm 
00001366                          2942mm     ENDM
00001366  60E4                    2943m     BRA LOOP_196
00001368                          2944m EXIT_196
00001368                          2945m     ENDM
00001368                          2946  
00001368                          2947      FOR A0 = #RESET TO #START-4 BY #4 DO
00001368  307C 0004               2948s     MOVE.W  #RESET,A0
0000136C  6000 0108               2949s     BRA _2000000D
00001370                          2950s _2000000C
00001370                          2951  
00001370  2248                    2952          MOVE.L A0,A1
00001372  D3CC                    2953          ADD.L A4,A1
00001374                          2954              
00001374  2011                    2955          MOVE.L (A1),D0  
00001376  D081                    2956          ADD.L D1,D0
00001378  0480 00000400           2957          SUB.L #START,D0
0000137E                          2958m         PRINT_REG D0,D2,D3,D4,A3
0000137E  47FA 0824               2959m     LEA OX(PC),A3
00001382                          2960mm     PRINT_STR A3,D2
00001382                          2961mm LOOP_199
00001382  0C13 0000               2962mm     CMP.B #NULL,(A3)                                ; 0 -> DONE
00001386  6700 0016               2963mm     BEQ EXIT_199
0000138A                          2964mmm     PRINT_CHAR (A3)+,D2
0000138A                          2965mmm WAIT_FOR_READY_200                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
0000138A                 TRUE     2966mmm     IFEQ DEBUG
0000138A  1439 00C00003           2967mmm         MOVE.B DUART_SRA,D2                         ; READ STATUS REGISTER
00001390  0802 0002               2968mmm         BTST #2,D2                                  ; CHECK FOR SPACE TO SEND
00001394  67F4                    2969mmm         BEQ WAIT_FOR_READY_200                      ; NO SPACE, CHECK AGAIN
00001396  13DB 00C00007           2970mmm         MOVE.B (A3)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
0000139C                          2971mmm     ENDC
0000139C                          2972mmm 
0000139C                 FALSE    2973mmm     IFNE DEBUG
0000139C                          2974mmm     ENDC
0000139C                          2975mmm 
0000139C                          2976mmm     ENDM
0000139C  60E4                    2977mm     BRA LOOP_199
0000139E                          2978mm EXIT_199
0000139E                          2979mm     ENDM
0000139E  7807                    2980m     MOVE.L #7,D4                                    ; LOOP ROUND ALL 8 HEX CHARACTERS OF 4 BITS EACH
000013A0                          2981m LOOP_198
000013A0                          2982mm     BIN2HEX D0,D3,A3
000013A0  47FA 077E               2983mm     LEA BIN2HEX_LUT(PC),A3                          ; LOAD THE LOOKUP TABLE
000013A4  E998                    2984mm     ROL.L #4,D0                                     ; SHIFT THE TOP 4 BITS DOWN TO BOTTOM OF THE REGISTER THE AND MASK OFF EVERYTHING ELSE
000013A6  1600                    2985mm     MOVE.B D0,D3
000013A8  0283 0000000F           2986mm     ANDI.L #$F,D3
000013AE  1633 3000               2987mm     MOVE.B 0(A3,D3),D3                              ; USE THAT AS AN INDEX INTO THE LUT
000013B2                          2988mm     ENDM
000013B2                          2989mm     PRINT_CHAR D3,D2
000013B2                          2990mm WAIT_FOR_READY_202                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
000013B2                 TRUE     2991mm     IFEQ DEBUG
000013B2  1439 00C00003           2992mm         MOVE.B DUART_SRA,D2                         ; READ STATUS REGISTER
000013B8  0802 0002               2993mm         BTST #2,D2                                  ; CHECK FOR SPACE TO SEND
000013BC  67F4                    2994mm         BEQ WAIT_FOR_READY_202                      ; NO SPACE, CHECK AGAIN
000013BE  13C3 00C00007           2995mm         MOVE.B D3,DUART_TXA                         ; SEND THE NEXT CHARACTER
000013C4                          2996mm     ENDC
000013C4                          2997mm 
000013C4                 FALSE    2998mm     IFNE DEBUG
000013C4                          2999mm     ENDC
000013C4                          3000mm 
000013C4                          3001mm     ENDM
000013C4  57CC FFDA               3002m     DBEQ D4,LOOP_198
000013C8                          3003m     ENDM
000013C8                          3004  
000013C8  47FA 07DD               3005          LEA TO(PC),A3
000013CC                          3006m         PRINT_STR A3,D3
000013CC                          3007m LOOP_203
000013CC  0C13 0000               3008m     CMP.B #NULL,(A3)                                ; 0 -> DONE
000013D0  6700 0016               3009m     BEQ EXIT_203
000013D4                          3010mm     PRINT_CHAR (A3)+,D3
000013D4                          3011mm WAIT_FOR_READY_204                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
000013D4                 TRUE     3012mm     IFEQ DEBUG
000013D4  1639 00C00003           3013mm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
000013DA  0803 0002               3014mm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
000013DE  67F4                    3015mm         BEQ WAIT_FOR_READY_204                      ; NO SPACE, CHECK AGAIN
000013E0  13DB 00C00007           3016mm         MOVE.B (A3)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
000013E6                          3017mm     ENDC
000013E6                          3018mm 
000013E6                 FALSE    3019mm     IFNE DEBUG
000013E6                          3020mm     ENDC
000013E6                          3021mm 
000013E6                          3022mm     ENDM
000013E6  60E4                    3023m     BRA LOOP_203
000013E8                          3024m EXIT_203
000013E8                          3025m     ENDM
000013E8                          3026  
000013E8  2408                    3027          MOVE.L A0,D2
000013EA                          3028m         PRINT_REG D2,D3,D4,D5,A3
000013EA  47FA 07B8               3029m     LEA OX(PC),A3
000013EE                          3030mm     PRINT_STR A3,D3
000013EE                          3031mm LOOP_206
000013EE  0C13 0000               3032mm     CMP.B #NULL,(A3)                                ; 0 -> DONE
000013F2  6700 0016               3033mm     BEQ EXIT_206
000013F6                          3034mmm     PRINT_CHAR (A3)+,D3
000013F6                          3035mmm WAIT_FOR_READY_207                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
000013F6                 TRUE     3036mmm     IFEQ DEBUG
000013F6  1639 00C00003           3037mmm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
000013FC  0803 0002               3038mmm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
00001400  67F4                    3039mmm         BEQ WAIT_FOR_READY_207                      ; NO SPACE, CHECK AGAIN
00001402  13DB 00C00007           3040mmm         MOVE.B (A3)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00001408                          3041mmm     ENDC
00001408                          3042mmm 
00001408                 FALSE    3043mmm     IFNE DEBUG
00001408                          3044mmm     ENDC
00001408                          3045mmm 
00001408                          3046mmm     ENDM
00001408  60E4                    3047mm     BRA LOOP_206
0000140A                          3048mm EXIT_206
0000140A                          3049mm     ENDM
0000140A  7A07                    3050m     MOVE.L #7,D5                                    ; LOOP ROUND ALL 8 HEX CHARACTERS OF 4 BITS EACH
0000140C                          3051m LOOP_205
0000140C                          3052mm     BIN2HEX D2,D4,A3
0000140C  47FA 0712               3053mm     LEA BIN2HEX_LUT(PC),A3                          ; LOAD THE LOOKUP TABLE
00001410  E99A                    3054mm     ROL.L #4,D2                                     ; SHIFT THE TOP 4 BITS DOWN TO BOTTOM OF THE REGISTER THE AND MASK OFF EVERYTHING ELSE
00001412  1802                    3055mm     MOVE.B D2,D4
00001414  0284 0000000F           3056mm     ANDI.L #$F,D4
0000141A  1833 4000               3057mm     MOVE.B 0(A3,D4),D4                              ; USE THAT AS AN INDEX INTO THE LUT
0000141E                          3058mm     ENDM
0000141E                          3059mm     PRINT_CHAR D4,D3
0000141E                          3060mm WAIT_FOR_READY_209                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
0000141E                 TRUE     3061mm     IFEQ DEBUG
0000141E  1639 00C00003           3062mm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
00001424  0803 0002               3063mm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
00001428  67F4                    3064mm         BEQ WAIT_FOR_READY_209                      ; NO SPACE, CHECK AGAIN
0000142A  13C4 00C00007           3065mm         MOVE.B D4,DUART_TXA                         ; SEND THE NEXT CHARACTER
00001430                          3066mm     ENDC
00001430                          3067mm 
00001430                 FALSE    3068mm     IFNE DEBUG
00001430                          3069mm     ENDC
00001430                          3070mm 
00001430                          3071mm     ENDM
00001430  57CD FFDA               3072m     DBEQ D5,LOOP_205
00001434                          3073m     ENDM
00001434                          3074          
00001434                          3075m         PRINT_CRLF D2,A3
00001434  47FA 0768               3076m     LEA CRLF(PC),A3
00001438                          3077mm     PRINT_STR A3,D2
00001438                          3078mm LOOP_211
00001438  0C13 0000               3079mm     CMP.B #NULL,(A3)                                ; 0 -> DONE
0000143C  6700 0016               3080mm     BEQ EXIT_211
00001440                          3081mmm     PRINT_CHAR (A3)+,D2
00001440                          3082mmm WAIT_FOR_READY_212                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00001440                 TRUE     3083mmm     IFEQ DEBUG
00001440  1439 00C00003           3084mmm         MOVE.B DUART_SRA,D2                         ; READ STATUS REGISTER
00001446  0802 0002               3085mmm         BTST #2,D2                                  ; CHECK FOR SPACE TO SEND
0000144A  67F4                    3086mmm         BEQ WAIT_FOR_READY_212                      ; NO SPACE, CHECK AGAIN
0000144C  13DB 00C00007           3087mmm         MOVE.B (A3)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00001452                          3088mmm     ENDC
00001452                          3089mmm 
00001452                 FALSE    3090mmm     IFNE DEBUG
00001452                          3091mmm     ENDC
00001452                          3092mmm 
00001452                          3093mmm     ENDM
00001452  60E4                    3094mm     BRA LOOP_211
00001454                          3095mm EXIT_211
00001454                          3096mm     ENDM
00001454                          3097m     ENDM
00001454                          3098          
00001454                          3099m         PROGRAM_VECTOR D0,A0,D2
00001454  5488                    3100m     ADD.L #2,A0
00001456                          3101mm     PROGRAM D0, (A0), D2                                ; WRITE IT
00001456  3080                    3102mm   MOVE.W D0,(A0)                                        ; WRITE THE DATA
00001458                          3103mm 
00001458                          3104mm WAIT_FOR_COMPLETE_214
00001458  3410                    3105mm         MOVE.W (A0),D2
0000145A                          3106mm 
0000145A                          3107mm         IF.W D2 <NE> D0 THEN
0000145A  B440                    3108mms     CMP.W   D0,D2
0000145C  6700 0004               3109mms     BEQ _00000010
00001460  60F6                    3110mm             BRA WAIT_FOR_COMPLETE_214
00001462                          3111mm         ENDI
00001462                          3112mms _00000010
00001462                          3113mm         ENDM
00001462  E088                    3114m     LSR.L #8,D0
00001464  E088                    3115m     LSR.L #8,D0
00001466  5588                    3116m     SUB.L #2,A0
00001468                          3117mm     PROGRAM D0, (A0), D2
00001468  3080                    3118mm   MOVE.W D0,(A0)                                        ; WRITE THE DATA
0000146A                          3119mm 
0000146A                          3120mm WAIT_FOR_COMPLETE_215
0000146A  3410                    3121mm         MOVE.W (A0),D2
0000146C                          3122mm 
0000146C                          3123mm         IF.W D2 <NE> D0 THEN
0000146C  B440                    3124mms     CMP.W   D0,D2
0000146E  6700 0004               3125mms     BEQ _00000011
00001472  60F6                    3126mm             BRA WAIT_FOR_COMPLETE_215
00001474                          3127mm         ENDI
00001474                          3128mms _00000011
00001474                          3129mm         ENDM
00001474                          3130m     ENDM
00001474                          3131      ENDF
00001474  5848                    3132s     ADD.W   #4,A0
00001476                          3133s _2000000D
00001476  B0FC 03FC               3134s     CMP.W   #START-4,A0
0000147A  6F00 FEF4               3135s     BLE _2000000C
0000147E                          3136                                          
0000147E                          3137m     PROTECT
0000147E  31FC AAAA 2AAA          3138m     MOVE.W #$AAAA,$2AAA                             ; AND WRITE PROTECT
00001484  31FC 5555 1554          3139m     MOVE.W #$5555,$1554
0000148A  31FC A0A0 2AAA          3140m     MOVE.W #$A0A0,$2AAA
00001490                          3141m     ENDM
00001490                          3142  
00001490  6000 F158               3143      BRA MAIN_LOOP
00001494                          3144      
00001494                          3145  P
00001494  7000                    3146      MOVE.L #0,D0                                    ; D0 will be the data to write
00001496                          3147  
00001496                          3148      FOR D1 = #0 TO #3 DO                            ; read 2 bytes
00001496  323C 0000               3149s     MOVE.W  #0,D1
0000149A  6000 0046               3150s     BRA _2000000F
0000149E                          3151s _2000000E
0000149E  E988                    3152          LSL.L #4,D0                                 ; make what we have so far more significant
000014A0                          3153m         WAIT_CHAR D2,D3                             ; next character -> D2
000014A0                          3154m WAIT_FOR_READY_217                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
000014A0                 TRUE     3155m     IFEQ DEBUG
000014A0  1639 00C00003           3156m         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
000014A6  0803 0000               3157m         BTST #0,D3                                  ; CHECK FOR CHARACTER
000014AA  67F4                    3158m         BEQ WAIT_FOR_READY_217                      ; NOTHING, CHECK AGAIN
000014AC                          3159m     ENDC
000014AC                          3160m 
000014AC                          3161mm     READ_CHAR D2
000014AC                 TRUE     3162mm     IFEQ DEBUG
000014AC  1439 00C00007           3163mm         MOVE.B DUART_RXA,D2                         ; GOT A CHARACTER, READ IT
000014B2                          3164mm     ENDC
000014B2                 FALSE    3165mm     IFNE DEBUG
000014B2                          3166mm     ENDC
000014B2                          3167mm 
000014B2  B43C 001B               3168mm     CMP.B #$1B,D2                                   ; CHECK FOR ESCAPE AND GO TO START
000014B6  6700 EF48               3169mm     BEQ START
000014BA                          3170mm     ENDM
000014BA                          3171m 
000014BA                 TRUE     3172m     IFEQ DEBUG
000014BA                          3173mm         PRINT_CHAR D2,D3                            ; ECHO IT BACK
000014BA                          3174mm WAIT_FOR_READY_219                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
000014BA                 TRUE     3175mm     IFEQ DEBUG
000014BA  1639 00C00003           3176mm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
000014C0  0803 0002               3177mm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
000014C4  67F4                    3178mm         BEQ WAIT_FOR_READY_219                      ; NO SPACE, CHECK AGAIN
000014C6  13C2 00C00007           3179mm         MOVE.B D2,DUART_TXA                         ; SEND THE NEXT CHARACTER
000014CC                          3180mm     ENDC
000014CC                          3181mm 
000014CC                 FALSE    3182mm     IFNE DEBUG
000014CC                          3183mm     ENDC
000014CC                          3184mm 
000014CC                          3185mm     ENDM
000014CC                          3186m     ENDC
000014CC                          3187m     ENDM
000014CC                          3188m         HEX2BIN D2,D2,A0                            ; convert to binary -> D2
000014CC  41FA 0662               3189m     LEA HEX2BIN_LUT(PC),A0                          ; LOAD THE LOOKUP TABLE
000014D0  0402 0030               3190m     SUB.B #'0',D2                                   ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
000014D4  C4BC 000000FF           3191m     AND.L #$FF,D2                                   ; IGNORE THE TOP 3 BYTES
000014DA  1430 2000               3192m     MOVE.B 0(A0,D2),D2                              ; USE THAT AS AN INDEX INTO THE LUT   
000014DE                          3193m     ENDM
000014DE  8002                    3194          OR.B D2,D0
000014E0                          3195      ENDF
000014E0  5241                    3196s     ADD.W   #1,D1
000014E2                          3197s _2000000F
000014E2  B27C 0003               3198s     CMP.W   #3,D1
000014E6  6FB6                    3199s     BLE _2000000E
000014E8                          3200  
000014E8                          3201m     PRINT_CRLF D2,A1
000014E8  43FA 06B4               3202m     LEA CRLF(PC),A1
000014EC                          3203mm     PRINT_STR A1,D2
000014EC                          3204mm LOOP_222
000014EC  0C11 0000               3205mm     CMP.B #NULL,(A1)                                ; 0 -> DONE
000014F0  6700 0016               3206mm     BEQ EXIT_222
000014F4                          3207mmm     PRINT_CHAR (A1)+,D2
000014F4                          3208mmm WAIT_FOR_READY_223                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
000014F4                 TRUE     3209mmm     IFEQ DEBUG
000014F4  1439 00C00003           3210mmm         MOVE.B DUART_SRA,D2                         ; READ STATUS REGISTER
000014FA  0802 0002               3211mmm         BTST #2,D2                                  ; CHECK FOR SPACE TO SEND
000014FE  67F4                    3212mmm         BEQ WAIT_FOR_READY_223                      ; NO SPACE, CHECK AGAIN
00001500  13D9 00C00007           3213mmm         MOVE.B (A1)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00001506                          3214mmm     ENDC
00001506                          3215mmm 
00001506                 FALSE    3216mmm     IFNE DEBUG
00001506                          3217mmm     ENDC
00001506                          3218mmm 
00001506                          3219mmm     ENDM
00001506  60E4                    3220mm     BRA LOOP_222
00001508                          3221mm EXIT_222
00001508                          3222mm     ENDM
00001508                          3223m     ENDM
00001508                          3224  
00001508  2047                    3225      MOVE.L D7,A0                                    ; address accumulator -> target address register
0000150A  7E00                    3226      MOVE.L #0,D7                                    ; clear the now used address accumulator
0000150C                          3227  
0000150C                          3228m     UNPROTECT
0000150C  31FC AAAA 2AAA          3229m     MOVE.W #$AAAA,$2AAA                             ; REMOVE WRITE PROTECT
00001512  4E71                    3230m     NOP
00001514  31FC 5555 1554          3231m     MOVE.W #$5555,$1554
0000151A  4E71                    3232m     NOP
0000151C  31FC 8080 2AAA          3233m     MOVE.W #$8080,$2AAA
00001522  4E71                    3234m     NOP
00001524  31FC AAAA 2AAA          3235m     MOVE.W #$AAAA,$2AAA
0000152A  4E71                    3236m     NOP
0000152C  31FC 5555 1554          3237m     MOVE.W #$5555,$1554
00001532  4E71                    3238m     NOP
00001534  31FC 2020 2AAA          3239m     MOVE.W #$2020,$2AAA
0000153A                          3240m     ENDM
0000153A                          3241               
0000153A  45FA 060B               3242      LEA LOADING(PC),A2                              ; the prints seem to be important for timing to unprotect the EEPROM
0000153E                          3243m     PRINT_STR A2,D2
0000153E                          3244m LOOP_225
0000153E  0C12 0000               3245m     CMP.B #NULL,(A2)                                ; 0 -> DONE
00001542  6700 0016               3246m     BEQ EXIT_225
00001546                          3247mm     PRINT_CHAR (A2)+,D2
00001546                          3248mm WAIT_FOR_READY_226                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00001546                 TRUE     3249mm     IFEQ DEBUG
00001546  1439 00C00003           3250mm         MOVE.B DUART_SRA,D2                         ; READ STATUS REGISTER
0000154C  0802 0002               3251mm         BTST #2,D2                                  ; CHECK FOR SPACE TO SEND
00001550  67F4                    3252mm         BEQ WAIT_FOR_READY_226                      ; NO SPACE, CHECK AGAIN
00001552  13DA 00C00007           3253mm         MOVE.B (A2)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00001558                          3254mm     ENDC
00001558                          3255mm 
00001558                 FALSE    3256mm     IFNE DEBUG
00001558                          3257mm     ENDC
00001558                          3258mm 
00001558                          3259mm     ENDM
00001558  60E4                    3260m     BRA LOOP_225
0000155A                          3261m EXIT_225
0000155A                          3262m     ENDM
0000155A                          3263  
0000155A                          3264m     PRINT_REG D0,D3,D4,D5,A2
0000155A  45FA 0648               3265m     LEA OX(PC),A2
0000155E                          3266mm     PRINT_STR A2,D3
0000155E                          3267mm LOOP_228
0000155E  0C12 0000               3268mm     CMP.B #NULL,(A2)                                ; 0 -> DONE
00001562  6700 0016               3269mm     BEQ EXIT_228
00001566                          3270mmm     PRINT_CHAR (A2)+,D3
00001566                          3271mmm WAIT_FOR_READY_229                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00001566                 TRUE     3272mmm     IFEQ DEBUG
00001566  1639 00C00003           3273mmm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
0000156C  0803 0002               3274mmm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
00001570  67F4                    3275mmm         BEQ WAIT_FOR_READY_229                      ; NO SPACE, CHECK AGAIN
00001572  13DA 00C00007           3276mmm         MOVE.B (A2)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00001578                          3277mmm     ENDC
00001578                          3278mmm 
00001578                 FALSE    3279mmm     IFNE DEBUG
00001578                          3280mmm     ENDC
00001578                          3281mmm 
00001578                          3282mmm     ENDM
00001578  60E4                    3283mm     BRA LOOP_228
0000157A                          3284mm EXIT_228
0000157A                          3285mm     ENDM
0000157A  7A07                    3286m     MOVE.L #7,D5                                    ; LOOP ROUND ALL 8 HEX CHARACTERS OF 4 BITS EACH
0000157C                          3287m LOOP_227
0000157C                          3288mm     BIN2HEX D0,D4,A2
0000157C  45FA 05A2               3289mm     LEA BIN2HEX_LUT(PC),A2                          ; LOAD THE LOOKUP TABLE
00001580  E998                    3290mm     ROL.L #4,D0                                     ; SHIFT THE TOP 4 BITS DOWN TO BOTTOM OF THE REGISTER THE AND MASK OFF EVERYTHING ELSE
00001582  1800                    3291mm     MOVE.B D0,D4
00001584  0284 0000000F           3292mm     ANDI.L #$F,D4
0000158A  1832 4000               3293mm     MOVE.B 0(A2,D4),D4                              ; USE THAT AS AN INDEX INTO THE LUT
0000158E                          3294mm     ENDM
0000158E                          3295mm     PRINT_CHAR D4,D3
0000158E                          3296mm WAIT_FOR_READY_231                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
0000158E                 TRUE     3297mm     IFEQ DEBUG
0000158E  1639 00C00003           3298mm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
00001594  0803 0002               3299mm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
00001598  67F4                    3300mm         BEQ WAIT_FOR_READY_231                      ; NO SPACE, CHECK AGAIN
0000159A  13C4 00C00007           3301mm         MOVE.B D4,DUART_TXA                         ; SEND THE NEXT CHARACTER
000015A0                          3302mm     ENDC
000015A0                          3303mm 
000015A0                 FALSE    3304mm     IFNE DEBUG
000015A0                          3305mm     ENDC
000015A0                          3306mm 
000015A0                          3307mm     ENDM
000015A0  57CD FFDA               3308m     DBEQ D5,LOOP_227
000015A4                          3309m     ENDM
000015A4                          3310  
000015A4  45FA 0601               3311      LEA TO(PC),A2
000015A8                          3312m     PRINT_STR A2,D3
000015A8                          3313m LOOP_232
000015A8  0C12 0000               3314m     CMP.B #NULL,(A2)                                ; 0 -> DONE
000015AC  6700 0016               3315m     BEQ EXIT_232
000015B0                          3316mm     PRINT_CHAR (A2)+,D3
000015B0                          3317mm WAIT_FOR_READY_233                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
000015B0                 TRUE     3318mm     IFEQ DEBUG
000015B0  1639 00C00003           3319mm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
000015B6  0803 0002               3320mm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
000015BA  67F4                    3321mm         BEQ WAIT_FOR_READY_233                      ; NO SPACE, CHECK AGAIN
000015BC  13DA 00C00007           3322mm         MOVE.B (A2)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
000015C2                          3323mm     ENDC
000015C2                          3324mm 
000015C2                 FALSE    3325mm     IFNE DEBUG
000015C2                          3326mm     ENDC
000015C2                          3327mm 
000015C2                          3328mm     ENDM
000015C2  60E4                    3329m     BRA LOOP_232
000015C4                          3330m EXIT_232
000015C4                          3331m     ENDM
000015C4                          3332  
000015C4  2408                    3333      MOVE.L A0,D2
000015C6                          3334m     PRINT_REG D2,D3,D4,D5,A2
000015C6  45FA 05DC               3335m     LEA OX(PC),A2
000015CA                          3336mm     PRINT_STR A2,D3
000015CA                          3337mm LOOP_235
000015CA  0C12 0000               3338mm     CMP.B #NULL,(A2)                                ; 0 -> DONE
000015CE  6700 0016               3339mm     BEQ EXIT_235
000015D2                          3340mmm     PRINT_CHAR (A2)+,D3
000015D2                          3341mmm WAIT_FOR_READY_236                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
000015D2                 TRUE     3342mmm     IFEQ DEBUG
000015D2  1639 00C00003           3343mmm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
000015D8  0803 0002               3344mmm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
000015DC  67F4                    3345mmm         BEQ WAIT_FOR_READY_236                      ; NO SPACE, CHECK AGAIN
000015DE  13DA 00C00007           3346mmm         MOVE.B (A2)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
000015E4                          3347mmm     ENDC
000015E4                          3348mmm 
000015E4                 FALSE    3349mmm     IFNE DEBUG
000015E4                          3350mmm     ENDC
000015E4                          3351mmm 
000015E4                          3352mmm     ENDM
000015E4  60E4                    3353mm     BRA LOOP_235
000015E6                          3354mm EXIT_235
000015E6                          3355mm     ENDM
000015E6  7A07                    3356m     MOVE.L #7,D5                                    ; LOOP ROUND ALL 8 HEX CHARACTERS OF 4 BITS EACH
000015E8                          3357m LOOP_234
000015E8                          3358mm     BIN2HEX D2,D4,A2
000015E8  45FA 0536               3359mm     LEA BIN2HEX_LUT(PC),A2                          ; LOAD THE LOOKUP TABLE
000015EC  E99A                    3360mm     ROL.L #4,D2                                     ; SHIFT THE TOP 4 BITS DOWN TO BOTTOM OF THE REGISTER THE AND MASK OFF EVERYTHING ELSE
000015EE  1802                    3361mm     MOVE.B D2,D4
000015F0  0284 0000000F           3362mm     ANDI.L #$F,D4
000015F6  1832 4000               3363mm     MOVE.B 0(A2,D4),D4                              ; USE THAT AS AN INDEX INTO THE LUT
000015FA                          3364mm     ENDM
000015FA                          3365mm     PRINT_CHAR D4,D3
000015FA                          3366mm WAIT_FOR_READY_238                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
000015FA                 TRUE     3367mm     IFEQ DEBUG
000015FA  1639 00C00003           3368mm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
00001600  0803 0002               3369mm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
00001604  67F4                    3370mm         BEQ WAIT_FOR_READY_238                      ; NO SPACE, CHECK AGAIN
00001606  13C4 00C00007           3371mm         MOVE.B D4,DUART_TXA                         ; SEND THE NEXT CHARACTER
0000160C                          3372mm     ENDC
0000160C                          3373mm 
0000160C                 FALSE    3374mm     IFNE DEBUG
0000160C                          3375mm     ENDC
0000160C                          3376mm 
0000160C                          3377mm     ENDM
0000160C  57CD FFDA               3378m     DBEQ D5,LOOP_234
00001610                          3379m     ENDM
00001610                          3380  
00001610                          3381m     PRINT_CRLF D3,A2
00001610  45FA 058C               3382m     LEA CRLF(PC),A2
00001614                          3383mm     PRINT_STR A2,D3
00001614                          3384mm LOOP_240
00001614  0C12 0000               3385mm     CMP.B #NULL,(A2)                                ; 0 -> DONE
00001618  6700 0016               3386mm     BEQ EXIT_240
0000161C                          3387mmm     PRINT_CHAR (A2)+,D3
0000161C                          3388mmm WAIT_FOR_READY_241                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
0000161C                 TRUE     3389mmm     IFEQ DEBUG
0000161C  1639 00C00003           3390mmm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
00001622  0803 0002               3391mmm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
00001626  67F4                    3392mmm         BEQ WAIT_FOR_READY_241                      ; NO SPACE, CHECK AGAIN
00001628  13DA 00C00007           3393mmm         MOVE.B (A2)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
0000162E                          3394mmm     ENDC
0000162E                          3395mmm 
0000162E                 FALSE    3396mmm     IFNE DEBUG
0000162E                          3397mmm     ENDC
0000162E                          3398mmm 
0000162E                          3399mmm     ENDM
0000162E  60E4                    3400mm     BRA LOOP_240
00001630                          3401mm EXIT_240
00001630                          3402mm     ENDM
00001630                          3403m     ENDM
00001630                          3404  
00001630                          3405m     PROGRAM D0,(A0),D2
00001630  3080                    3406m   MOVE.W D0,(A0)                                        ; WRITE THE DATA
00001632                          3407m 
00001632                          3408m WAIT_FOR_COMPLETE_242
00001632  3410                    3409m         MOVE.W (A0),D2
00001634                          3410m 
00001634                          3411m         IF.W D2 <NE> D0 THEN
00001634  B440                    3412ms     CMP.W   D0,D2
00001636  6700 0004               3413ms     BEQ _00000012
0000163A  60F6                    3414m             BRA WAIT_FOR_COMPLETE_242
0000163C                          3415m         ENDI
0000163C                          3416ms _00000012
0000163C                          3417m         ENDM
0000163C                          3418  
0000163C                          3419m     PROTECT
0000163C  31FC AAAA 2AAA          3420m     MOVE.W #$AAAA,$2AAA                             ; AND WRITE PROTECT
00001642  31FC 5555 1554          3421m     MOVE.W #$5555,$1554
00001648  31FC A0A0 2AAA          3422m     MOVE.W #$A0A0,$2AAA
0000164E                          3423m     ENDM
0000164E                          3424  
0000164E  6000 EF9A               3425      BRA MAIN_LOOP
00001652                          3426      
00001652                          3427  M
00001652  7000                    3428      MOVE.L #0,D0                                        ; D0 will be the length to read            
00001654  7200                    3429      MOVE.L #0,D1                                        ; D1 will be the address to read 
00001656                          3430  
00001656                          3431      FOR D2 = #0 TO #7 DO                                ; read 4 bytes, we'll split into 2 byte address (MS) and 2 byte length (LS)
00001656  343C 0000               3432s     MOVE.W  #0,D2
0000165A  6000 0046               3433s     BRA _20000011
0000165E                          3434s _20000010
0000165E  E989                    3435          LSL.L #4,D1                                     ; make what we have so far more significant
00001660                          3436m         WAIT_CHAR D3,D4                                 ; next character -> D2
00001660                          3437m WAIT_FOR_READY_244                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00001660                 TRUE     3438m     IFEQ DEBUG
00001660  1839 00C00003           3439m         MOVE.B DUART_SRA,D4                         ; READ STATUS REGISTER
00001666  0804 0000               3440m         BTST #0,D4                                  ; CHECK FOR CHARACTER
0000166A  67F4                    3441m         BEQ WAIT_FOR_READY_244                      ; NOTHING, CHECK AGAIN
0000166C                          3442m     ENDC
0000166C                          3443m 
0000166C                          3444mm     READ_CHAR D3
0000166C                 TRUE     3445mm     IFEQ DEBUG
0000166C  1639 00C00007           3446mm         MOVE.B DUART_RXA,D3                         ; GOT A CHARACTER, READ IT
00001672                          3447mm     ENDC
00001672                 FALSE    3448mm     IFNE DEBUG
00001672                          3449mm     ENDC
00001672                          3450mm 
00001672  B63C 001B               3451mm     CMP.B #$1B,D3                                   ; CHECK FOR ESCAPE AND GO TO START
00001676  6700 ED88               3452mm     BEQ START
0000167A                          3453mm     ENDM
0000167A                          3454m 
0000167A                 TRUE     3455m     IFEQ DEBUG
0000167A                          3456mm         PRINT_CHAR D3,D4                            ; ECHO IT BACK
0000167A                          3457mm WAIT_FOR_READY_246                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
0000167A                 TRUE     3458mm     IFEQ DEBUG
0000167A  1839 00C00003           3459mm         MOVE.B DUART_SRA,D4                         ; READ STATUS REGISTER
00001680  0804 0002               3460mm         BTST #2,D4                                  ; CHECK FOR SPACE TO SEND
00001684  67F4                    3461mm         BEQ WAIT_FOR_READY_246                      ; NO SPACE, CHECK AGAIN
00001686  13C3 00C00007           3462mm         MOVE.B D3,DUART_TXA                         ; SEND THE NEXT CHARACTER
0000168C                          3463mm     ENDC
0000168C                          3464mm 
0000168C                 FALSE    3465mm     IFNE DEBUG
0000168C                          3466mm     ENDC
0000168C                          3467mm 
0000168C                          3468mm     ENDM
0000168C                          3469m     ENDC
0000168C                          3470m     ENDM
0000168C                          3471m         HEX2BIN D3,D3,A0                                ; convert to binary -> D2
0000168C  41FA 04A2               3472m     LEA HEX2BIN_LUT(PC),A0                          ; LOAD THE LOOKUP TABLE
00001690  0403 0030               3473m     SUB.B #'0',D3                                   ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
00001694  C6BC 000000FF           3474m     AND.L #$FF,D3                                   ; IGNORE THE TOP 3 BYTES
0000169A  1630 3000               3475m     MOVE.B 0(A0,D3),D3                              ; USE THAT AS AN INDEX INTO THE LUT   
0000169E                          3476m     ENDM
0000169E  8203                    3477          OR.B D3,D1
000016A0                          3478      ENDF
000016A0  5242                    3479s     ADD.W   #1,D2
000016A2                          3480s _20000011
000016A2  B47C 0007               3481s     CMP.W   #7,D2
000016A6  6FB6                    3482s     BLE _20000010
000016A8                          3483m     PRINT_CRLF D2,A1
000016A8  43FA 04F4               3484m     LEA CRLF(PC),A1
000016AC                          3485mm     PRINT_STR A1,D2
000016AC                          3486mm LOOP_249
000016AC  0C11 0000               3487mm     CMP.B #NULL,(A1)                                ; 0 -> DONE
000016B0  6700 0016               3488mm     BEQ EXIT_249
000016B4                          3489mmm     PRINT_CHAR (A1)+,D2
000016B4                          3490mmm WAIT_FOR_READY_250                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
000016B4                 TRUE     3491mmm     IFEQ DEBUG
000016B4  1439 00C00003           3492mmm         MOVE.B DUART_SRA,D2                         ; READ STATUS REGISTER
000016BA  0802 0002               3493mmm         BTST #2,D2                                  ; CHECK FOR SPACE TO SEND
000016BE  67F4                    3494mmm         BEQ WAIT_FOR_READY_250                      ; NO SPACE, CHECK AGAIN
000016C0  13D9 00C00007           3495mmm         MOVE.B (A1)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
000016C6                          3496mmm     ENDC
000016C6                          3497mmm 
000016C6                 FALSE    3498mmm     IFNE DEBUG
000016C6                          3499mmm     ENDC
000016C6                          3500mmm 
000016C6                          3501mmm     ENDM
000016C6  60E4                    3502mm     BRA LOOP_249
000016C8                          3503mm EXIT_249
000016C8                          3504mm     ENDM
000016C8                          3505m     ENDM
000016C8                          3506  
000016C8  3001                    3507      MOVE.W D1,D0                                        ; extract the LSword for the length
000016CA  E089                    3508      LSR.L #8,D1                                         ; extract the MSword for the address
000016CC  E089                    3509      LSR.L #8,D1
000016CE                          3510  
000016CE  2241                    3511      MOVE.L D1,A1
000016D0                          3512      
000016D0  2047                    3513      MOVE.L D7,A0                                        ; address accumulator -> target address register
000016D2                          3514      ;MOVE.L #0,D7                                       ; we're not going to clear it, so we can do go
000016D2                          3515  
000016D2                          3516      WHILE D0 <GT> #0 DO
000016D2                          3517s _10000016
000016D2  B07C 0000               3518s     CMP.W   #0,D0
000016D6  6F00 000E               3519s     BLE _10000017
000016DA  5580                    3520          SUB.L #2,D0
000016DC                          3521  
000016DC  13D1 00E00001           3522          MOVE.B (A1),DISPLAY
000016E2  30D9                    3523          MOVE.W (A1)+,(A0)+
000016E4                          3524      ENDW
000016E4  60EC                    3525s     BRA _10000016
000016E6                          3526s _10000017
000016E6                          3527      
000016E6  6000 EF02               3528      BRA MAIN_LOOP
000016EA                          3529  
000016EA                          3530  X
000016EA  45FA 04C5               3531      LEA STATUS_REGISTER(PC),A2
000016EE                          3532m     PRINT_STR A2,D3
000016EE                          3533m LOOP_251
000016EE  0C12 0000               3534m     CMP.B #NULL,(A2)                                ; 0 -> DONE
000016F2  6700 0016               3535m     BEQ EXIT_251
000016F6                          3536mm     PRINT_CHAR (A2)+,D3
000016F6                          3537mm WAIT_FOR_READY_252                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
000016F6                 TRUE     3538mm     IFEQ DEBUG
000016F6  1639 00C00003           3539mm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
000016FC  0803 0002               3540mm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
00001700  67F4                    3541mm         BEQ WAIT_FOR_READY_252                      ; NO SPACE, CHECK AGAIN
00001702  13DA 00C00007           3542mm         MOVE.B (A2)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00001708                          3543mm     ENDC
00001708                          3544mm 
00001708                 FALSE    3545mm     IFNE DEBUG
00001708                          3546mm     ENDC
00001708                          3547mm 
00001708                          3548mm     ENDM
00001708  60E4                    3549m     BRA LOOP_251
0000170A                          3550m EXIT_251
0000170A                          3551m     ENDM
0000170A                          3552  
0000170A  40C0                    3553      MOVE SR,D0
0000170C                          3554m     PRINT_REG D0,D3,D4,D5,A2
0000170C  45FA 0496               3555m     LEA OX(PC),A2
00001710                          3556mm     PRINT_STR A2,D3
00001710                          3557mm LOOP_254
00001710  0C12 0000               3558mm     CMP.B #NULL,(A2)                                ; 0 -> DONE
00001714  6700 0016               3559mm     BEQ EXIT_254
00001718                          3560mmm     PRINT_CHAR (A2)+,D3
00001718                          3561mmm WAIT_FOR_READY_255                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00001718                 TRUE     3562mmm     IFEQ DEBUG
00001718  1639 00C00003           3563mmm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
0000171E  0803 0002               3564mmm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
00001722  67F4                    3565mmm         BEQ WAIT_FOR_READY_255                      ; NO SPACE, CHECK AGAIN
00001724  13DA 00C00007           3566mmm         MOVE.B (A2)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
0000172A                          3567mmm     ENDC
0000172A                          3568mmm 
0000172A                 FALSE    3569mmm     IFNE DEBUG
0000172A                          3570mmm     ENDC
0000172A                          3571mmm 
0000172A                          3572mmm     ENDM
0000172A  60E4                    3573mm     BRA LOOP_254
0000172C                          3574mm EXIT_254
0000172C                          3575mm     ENDM
0000172C  7A07                    3576m     MOVE.L #7,D5                                    ; LOOP ROUND ALL 8 HEX CHARACTERS OF 4 BITS EACH
0000172E                          3577m LOOP_253
0000172E                          3578mm     BIN2HEX D0,D4,A2
0000172E  45FA 03F0               3579mm     LEA BIN2HEX_LUT(PC),A2                          ; LOAD THE LOOKUP TABLE
00001732  E998                    3580mm     ROL.L #4,D0                                     ; SHIFT THE TOP 4 BITS DOWN TO BOTTOM OF THE REGISTER THE AND MASK OFF EVERYTHING ELSE
00001734  1800                    3581mm     MOVE.B D0,D4
00001736  0284 0000000F           3582mm     ANDI.L #$F,D4
0000173C  1832 4000               3583mm     MOVE.B 0(A2,D4),D4                              ; USE THAT AS AN INDEX INTO THE LUT
00001740                          3584mm     ENDM
00001740                          3585mm     PRINT_CHAR D4,D3
00001740                          3586mm WAIT_FOR_READY_257                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00001740                 TRUE     3587mm     IFEQ DEBUG
00001740  1639 00C00003           3588mm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
00001746  0803 0002               3589mm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
0000174A  67F4                    3590mm         BEQ WAIT_FOR_READY_257                      ; NO SPACE, CHECK AGAIN
0000174C  13C4 00C00007           3591mm         MOVE.B D4,DUART_TXA                         ; SEND THE NEXT CHARACTER
00001752                          3592mm     ENDC
00001752                          3593mm 
00001752                 FALSE    3594mm     IFNE DEBUG
00001752                          3595mm     ENDC
00001752                          3596mm 
00001752                          3597mm     ENDM
00001752  57CD FFDA               3598m     DBEQ D5,LOOP_253
00001756                          3599m     ENDM
00001756                          3600m     PRINT_CRLF D3,A2
00001756  45FA 0446               3601m     LEA CRLF(PC),A2
0000175A                          3602mm     PRINT_STR A2,D3
0000175A                          3603mm LOOP_259
0000175A  0C12 0000               3604mm     CMP.B #NULL,(A2)                                ; 0 -> DONE
0000175E  6700 0016               3605mm     BEQ EXIT_259
00001762                          3606mmm     PRINT_CHAR (A2)+,D3
00001762                          3607mmm WAIT_FOR_READY_260                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00001762                 TRUE     3608mmm     IFEQ DEBUG
00001762  1639 00C00003           3609mmm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
00001768  0803 0002               3610mmm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
0000176C  67F4                    3611mmm         BEQ WAIT_FOR_READY_260                      ; NO SPACE, CHECK AGAIN
0000176E  13DA 00C00007           3612mmm         MOVE.B (A2)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00001774                          3613mmm     ENDC
00001774                          3614mmm 
00001774                 FALSE    3615mmm     IFNE DEBUG
00001774                          3616mmm     ENDC
00001774                          3617mmm 
00001774                          3618mmm     ENDM
00001774  60E4                    3619mm     BRA LOOP_259
00001776                          3620mm EXIT_259
00001776                          3621mm     ENDM
00001776                          3622m     ENDM
00001776                          3623  
00001776  45FA 0434               3624      LEA STACK_POINTER(PC),A2
0000177A                          3625m     PRINT_STR A2,D3
0000177A                          3626m LOOP_261
0000177A  0C12 0000               3627m     CMP.B #NULL,(A2)                                ; 0 -> DONE
0000177E  6700 0016               3628m     BEQ EXIT_261
00001782                          3629mm     PRINT_CHAR (A2)+,D3
00001782                          3630mm WAIT_FOR_READY_262                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00001782                 TRUE     3631mm     IFEQ DEBUG
00001782  1639 00C00003           3632mm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
00001788  0803 0002               3633mm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
0000178C  67F4                    3634mm         BEQ WAIT_FOR_READY_262                      ; NO SPACE, CHECK AGAIN
0000178E  13DA 00C00007           3635mm         MOVE.B (A2)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00001794                          3636mm     ENDC
00001794                          3637mm 
00001794                 FALSE    3638mm     IFNE DEBUG
00001794                          3639mm     ENDC
00001794                          3640mm 
00001794                          3641mm     ENDM
00001794  60E4                    3642m     BRA LOOP_261
00001796                          3643m EXIT_261
00001796                          3644m     ENDM
00001796                          3645  
00001796  200F                    3646      MOVE.L SP,D0
00001798                          3647m     PRINT_REG D0,D3,D4,D5,A2
00001798  45FA 040A               3648m     LEA OX(PC),A2
0000179C                          3649mm     PRINT_STR A2,D3
0000179C                          3650mm LOOP_264
0000179C  0C12 0000               3651mm     CMP.B #NULL,(A2)                                ; 0 -> DONE
000017A0  6700 0016               3652mm     BEQ EXIT_264
000017A4                          3653mmm     PRINT_CHAR (A2)+,D3
000017A4                          3654mmm WAIT_FOR_READY_265                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
000017A4                 TRUE     3655mmm     IFEQ DEBUG
000017A4  1639 00C00003           3656mmm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
000017AA  0803 0002               3657mmm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
000017AE  67F4                    3658mmm         BEQ WAIT_FOR_READY_265                      ; NO SPACE, CHECK AGAIN
000017B0  13DA 00C00007           3659mmm         MOVE.B (A2)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
000017B6                          3660mmm     ENDC
000017B6                          3661mmm 
000017B6                 FALSE    3662mmm     IFNE DEBUG
000017B6                          3663mmm     ENDC
000017B6                          3664mmm 
000017B6                          3665mmm     ENDM
000017B6  60E4                    3666mm     BRA LOOP_264
000017B8                          3667mm EXIT_264
000017B8                          3668mm     ENDM
000017B8  7A07                    3669m     MOVE.L #7,D5                                    ; LOOP ROUND ALL 8 HEX CHARACTERS OF 4 BITS EACH
000017BA                          3670m LOOP_263
000017BA                          3671mm     BIN2HEX D0,D4,A2
000017BA  45FA 0364               3672mm     LEA BIN2HEX_LUT(PC),A2                          ; LOAD THE LOOKUP TABLE
000017BE  E998                    3673mm     ROL.L #4,D0                                     ; SHIFT THE TOP 4 BITS DOWN TO BOTTOM OF THE REGISTER THE AND MASK OFF EVERYTHING ELSE
000017C0  1800                    3674mm     MOVE.B D0,D4
000017C2  0284 0000000F           3675mm     ANDI.L #$F,D4
000017C8  1832 4000               3676mm     MOVE.B 0(A2,D4),D4                              ; USE THAT AS AN INDEX INTO THE LUT
000017CC                          3677mm     ENDM
000017CC                          3678mm     PRINT_CHAR D4,D3
000017CC                          3679mm WAIT_FOR_READY_267                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
000017CC                 TRUE     3680mm     IFEQ DEBUG
000017CC  1639 00C00003           3681mm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
000017D2  0803 0002               3682mm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
000017D6  67F4                    3683mm         BEQ WAIT_FOR_READY_267                      ; NO SPACE, CHECK AGAIN
000017D8  13C4 00C00007           3684mm         MOVE.B D4,DUART_TXA                         ; SEND THE NEXT CHARACTER
000017DE                          3685mm     ENDC
000017DE                          3686mm 
000017DE                 FALSE    3687mm     IFNE DEBUG
000017DE                          3688mm     ENDC
000017DE                          3689mm 
000017DE                          3690mm     ENDM
000017DE  57CD FFDA               3691m     DBEQ D5,LOOP_263
000017E2                          3692m     ENDM
000017E2                          3693m     PRINT_CRLF D3,A2
000017E2  45FA 03BA               3694m     LEA CRLF(PC),A2
000017E6                          3695mm     PRINT_STR A2,D3
000017E6                          3696mm LOOP_269
000017E6  0C12 0000               3697mm     CMP.B #NULL,(A2)                                ; 0 -> DONE
000017EA  6700 0016               3698mm     BEQ EXIT_269
000017EE                          3699mmm     PRINT_CHAR (A2)+,D3
000017EE                          3700mmm WAIT_FOR_READY_270                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
000017EE                 TRUE     3701mmm     IFEQ DEBUG
000017EE  1639 00C00003           3702mmm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
000017F4  0803 0002               3703mmm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
000017F8  67F4                    3704mmm         BEQ WAIT_FOR_READY_270                      ; NO SPACE, CHECK AGAIN
000017FA  13DA 00C00007           3705mmm         MOVE.B (A2)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00001800                          3706mmm     ENDC
00001800                          3707mmm 
00001800                 FALSE    3708mmm     IFNE DEBUG
00001800                          3709mmm     ENDC
00001800                          3710mmm 
00001800                          3711mmm     ENDM
00001800  60E4                    3712mm     BRA LOOP_269
00001802                          3713mm EXIT_269
00001802                          3714mm     ENDM
00001802                          3715m     ENDM
00001802                          3716  
00001802  6000 EDE6               3717      BRA MAIN_LOOP
00001806                          3718  
00001806                          3719          
00001806                          3720  HEX_DIGIT
00001806  E98F                    3721      LSL.L #4,D7                                         ; add the next digit in the next 4 bits
00001808                          3722m     HEX2BIN D2,D2,A0
00001808  41FA 0326               3723m     LEA HEX2BIN_LUT(PC),A0                          ; LOAD THE LOOKUP TABLE
0000180C  0402 0030               3724m     SUB.B #'0',D2                                   ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
00001810  C4BC 000000FF           3725m     AND.L #$FF,D2                                   ; IGNORE THE TOP 3 BYTES
00001816  1430 2000               3726m     MOVE.B 0(A0,D2),D2                              ; USE THAT AS AN INDEX INTO THE LUT   
0000181A                          3727m     ENDM
0000181A  8E02                    3728      OR.B D2,D7  
0000181C  6000 EDEC               3729      BRA GET_INPUT
00001820                          3730  
00001820  FFFF FFFF               3731      SIMHALT                                             ; halt simulator
00001824                          3732  
00001824                          3733  ; exceptions
00001824                          3734  BUS_ERROR_HANDLER
00001824                          3735  
00001824  41FA 0390               3736      LEA BUS_ERROR(PC),A0
00001828                          3737m     PRINT_STR A0,D1
00001828                          3738m LOOP_272
00001828  0C10 0000               3739m     CMP.B #NULL,(A0)                                ; 0 -> DONE
0000182C  6700 0016               3740m     BEQ EXIT_272
00001830                          3741mm     PRINT_CHAR (A0)+,D1
00001830                          3742mm WAIT_FOR_READY_273                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00001830                 TRUE     3743mm     IFEQ DEBUG
00001830  1239 00C00003           3744mm         MOVE.B DUART_SRA,D1                         ; READ STATUS REGISTER
00001836  0801 0002               3745mm         BTST #2,D1                                  ; CHECK FOR SPACE TO SEND
0000183A  67F4                    3746mm         BEQ WAIT_FOR_READY_273                      ; NO SPACE, CHECK AGAIN
0000183C  13D8 00C00007           3747mm         MOVE.B (A0)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00001842                          3748mm     ENDC
00001842                          3749mm 
00001842                 FALSE    3750mm     IFNE DEBUG
00001842                          3751mm     ENDC
00001842                          3752mm 
00001842                          3753mm     ENDM
00001842  60E4                    3754m     BRA LOOP_272
00001844                          3755m EXIT_272
00001844                          3756m     ENDM
00001844                          3757  
00001844  7000                    3758      MOVE.L #0,D0
00001846  3017                    3759      MOVE.W (SP),D0
00001848                          3760  
00001848  0800 0004               3761      BTST #4,D0
0000184C  6700 0026               3762      BEQ WRITE
00001850                          3763      
00001850  41FA 0379               3764      LEA READING(PC),A0
00001854                          3765m     PRINT_STR A0,D1
00001854                          3766m LOOP_274
00001854  0C10 0000               3767m     CMP.B #NULL,(A0)                                ; 0 -> DONE
00001858  6700 0016               3768m     BEQ EXIT_274
0000185C                          3769mm     PRINT_CHAR (A0)+,D1
0000185C                          3770mm WAIT_FOR_READY_275                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
0000185C                 TRUE     3771mm     IFEQ DEBUG
0000185C  1239 00C00003           3772mm         MOVE.B DUART_SRA,D1                         ; READ STATUS REGISTER
00001862  0801 0002               3773mm         BTST #2,D1                                  ; CHECK FOR SPACE TO SEND
00001866  67F4                    3774mm         BEQ WAIT_FOR_READY_275                      ; NO SPACE, CHECK AGAIN
00001868  13D8 00C00007           3775mm         MOVE.B (A0)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
0000186E                          3776mm     ENDC
0000186E                          3777mm 
0000186E                 FALSE    3778mm     IFNE DEBUG
0000186E                          3779mm     ENDC
0000186E                          3780mm 
0000186E                          3781mm     ENDM
0000186E  60E4                    3782m     BRA LOOP_274
00001870                          3783m EXIT_274
00001870                          3784m     ENDM
00001870                          3785  
00001870  6000 0022               3786      BRA CONTINUE    
00001874                          3787  WRITE
00001874  41FA 035E               3788      LEA WRITING(PC),A0
00001878                          3789m     PRINT_STR A0,D1
00001878                          3790m LOOP_276
00001878  0C10 0000               3791m     CMP.B #NULL,(A0)                                ; 0 -> DONE
0000187C  6700 0016               3792m     BEQ EXIT_276
00001880                          3793mm     PRINT_CHAR (A0)+,D1
00001880                          3794mm WAIT_FOR_READY_277                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00001880                 TRUE     3795mm     IFEQ DEBUG
00001880  1239 00C00003           3796mm         MOVE.B DUART_SRA,D1                         ; READ STATUS REGISTER
00001886  0801 0002               3797mm         BTST #2,D1                                  ; CHECK FOR SPACE TO SEND
0000188A  67F4                    3798mm         BEQ WAIT_FOR_READY_277                      ; NO SPACE, CHECK AGAIN
0000188C  13D8 00C00007           3799mm         MOVE.B (A0)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00001892                          3800mm     ENDC
00001892                          3801mm 
00001892                 FALSE    3802mm     IFNE DEBUG
00001892                          3803mm     ENDC
00001892                          3804mm 
00001892                          3805mm     ENDM
00001892  60E4                    3806m     BRA LOOP_276
00001894                          3807m EXIT_276
00001894                          3808m     ENDM
00001894                          3809  
00001894                          3810  CONTINUE
00001894  222F 0002               3811      MOVE.L 2(SP),D1
00001898                          3812m     PRINT_REG D1,D2,D3,D4,A0
00001898  41FA 030A               3813m     LEA OX(PC),A0
0000189C                          3814mm     PRINT_STR A0,D2
0000189C                          3815mm LOOP_279
0000189C  0C10 0000               3816mm     CMP.B #NULL,(A0)                                ; 0 -> DONE
000018A0  6700 0016               3817mm     BEQ EXIT_279
000018A4                          3818mmm     PRINT_CHAR (A0)+,D2
000018A4                          3819mmm WAIT_FOR_READY_280                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
000018A4                 TRUE     3820mmm     IFEQ DEBUG
000018A4  1439 00C00003           3821mmm         MOVE.B DUART_SRA,D2                         ; READ STATUS REGISTER
000018AA  0802 0002               3822mmm         BTST #2,D2                                  ; CHECK FOR SPACE TO SEND
000018AE  67F4                    3823mmm         BEQ WAIT_FOR_READY_280                      ; NO SPACE, CHECK AGAIN
000018B0  13D8 00C00007           3824mmm         MOVE.B (A0)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
000018B6                          3825mmm     ENDC
000018B6                          3826mmm 
000018B6                 FALSE    3827mmm     IFNE DEBUG
000018B6                          3828mmm     ENDC
000018B6                          3829mmm 
000018B6                          3830mmm     ENDM
000018B6  60E4                    3831mm     BRA LOOP_279
000018B8                          3832mm EXIT_279
000018B8                          3833mm     ENDM
000018B8  7807                    3834m     MOVE.L #7,D4                                    ; LOOP ROUND ALL 8 HEX CHARACTERS OF 4 BITS EACH
000018BA                          3835m LOOP_278
000018BA                          3836mm     BIN2HEX D1,D3,A0
000018BA  41FA 0264               3837mm     LEA BIN2HEX_LUT(PC),A0                          ; LOAD THE LOOKUP TABLE
000018BE  E999                    3838mm     ROL.L #4,D1                                     ; SHIFT THE TOP 4 BITS DOWN TO BOTTOM OF THE REGISTER THE AND MASK OFF EVERYTHING ELSE
000018C0  1601                    3839mm     MOVE.B D1,D3
000018C2  0283 0000000F           3840mm     ANDI.L #$F,D3
000018C8  1630 3000               3841mm     MOVE.B 0(A0,D3),D3                              ; USE THAT AS AN INDEX INTO THE LUT
000018CC                          3842mm     ENDM
000018CC                          3843mm     PRINT_CHAR D3,D2
000018CC                          3844mm WAIT_FOR_READY_282                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
000018CC                 TRUE     3845mm     IFEQ DEBUG
000018CC  1439 00C00003           3846mm         MOVE.B DUART_SRA,D2                         ; READ STATUS REGISTER
000018D2  0802 0002               3847mm         BTST #2,D2                                  ; CHECK FOR SPACE TO SEND
000018D6  67F4                    3848mm         BEQ WAIT_FOR_READY_282                      ; NO SPACE, CHECK AGAIN
000018D8  13C3 00C00007           3849mm         MOVE.B D3,DUART_TXA                         ; SEND THE NEXT CHARACTER
000018DE                          3850mm     ENDC
000018DE                          3851mm 
000018DE                 FALSE    3852mm     IFNE DEBUG
000018DE                          3853mm     ENDC
000018DE                          3854mm 
000018DE                          3855mm     ENDM
000018DE  57CC FFDA               3856m     DBEQ D4,LOOP_278
000018E2                          3857m     ENDM
000018E2                          3858  
000018E2  41FA 02F9               3859      LEA FROM(PC),A0
000018E6                          3860m     PRINT_STR A0,D0
000018E6                          3861m LOOP_283
000018E6  0C10 0000               3862m     CMP.B #NULL,(A0)                                ; 0 -> DONE
000018EA  6700 0016               3863m     BEQ EXIT_283
000018EE                          3864mm     PRINT_CHAR (A0)+,D0
000018EE                          3865mm WAIT_FOR_READY_284                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
000018EE                 TRUE     3866mm     IFEQ DEBUG
000018EE  1039 00C00003           3867mm         MOVE.B DUART_SRA,D0                         ; READ STATUS REGISTER
000018F4  0800 0002               3868mm         BTST #2,D0                                  ; CHECK FOR SPACE TO SEND
000018F8  67F4                    3869mm         BEQ WAIT_FOR_READY_284                      ; NO SPACE, CHECK AGAIN
000018FA  13D8 00C00007           3870mm         MOVE.B (A0)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00001900                          3871mm     ENDC
00001900                          3872mm 
00001900                 FALSE    3873mm     IFNE DEBUG
00001900                          3874mm     ENDC
00001900                          3875mm 
00001900                          3876mm     ENDM
00001900  60E4                    3877m     BRA LOOP_283
00001902                          3878m EXIT_283
00001902                          3879m     ENDM
00001902                          3880  
00001902  222F 000A               3881      MOVE.L 10(SP),D1
00001906                          3882m     PRINT_REG D1,D2,D3,D4,A0
00001906  41FA 029C               3883m     LEA OX(PC),A0
0000190A                          3884mm     PRINT_STR A0,D2
0000190A                          3885mm LOOP_286
0000190A  0C10 0000               3886mm     CMP.B #NULL,(A0)                                ; 0 -> DONE
0000190E  6700 0016               3887mm     BEQ EXIT_286
00001912                          3888mmm     PRINT_CHAR (A0)+,D2
00001912                          3889mmm WAIT_FOR_READY_287                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00001912                 TRUE     3890mmm     IFEQ DEBUG
00001912  1439 00C00003           3891mmm         MOVE.B DUART_SRA,D2                         ; READ STATUS REGISTER
00001918  0802 0002               3892mmm         BTST #2,D2                                  ; CHECK FOR SPACE TO SEND
0000191C  67F4                    3893mmm         BEQ WAIT_FOR_READY_287                      ; NO SPACE, CHECK AGAIN
0000191E  13D8 00C00007           3894mmm         MOVE.B (A0)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00001924                          3895mmm     ENDC
00001924                          3896mmm 
00001924                 FALSE    3897mmm     IFNE DEBUG
00001924                          3898mmm     ENDC
00001924                          3899mmm 
00001924                          3900mmm     ENDM
00001924  60E4                    3901mm     BRA LOOP_286
00001926                          3902mm EXIT_286
00001926                          3903mm     ENDM
00001926  7807                    3904m     MOVE.L #7,D4                                    ; LOOP ROUND ALL 8 HEX CHARACTERS OF 4 BITS EACH
00001928                          3905m LOOP_285
00001928                          3906mm     BIN2HEX D1,D3,A0
00001928  41FA 01F6               3907mm     LEA BIN2HEX_LUT(PC),A0                          ; LOAD THE LOOKUP TABLE
0000192C  E999                    3908mm     ROL.L #4,D1                                     ; SHIFT THE TOP 4 BITS DOWN TO BOTTOM OF THE REGISTER THE AND MASK OFF EVERYTHING ELSE
0000192E  1601                    3909mm     MOVE.B D1,D3
00001930  0283 0000000F           3910mm     ANDI.L #$F,D3
00001936  1630 3000               3911mm     MOVE.B 0(A0,D3),D3                              ; USE THAT AS AN INDEX INTO THE LUT
0000193A                          3912mm     ENDM
0000193A                          3913mm     PRINT_CHAR D3,D2
0000193A                          3914mm WAIT_FOR_READY_289                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
0000193A                 TRUE     3915mm     IFEQ DEBUG
0000193A  1439 00C00003           3916mm         MOVE.B DUART_SRA,D2                         ; READ STATUS REGISTER
00001940  0802 0002               3917mm         BTST #2,D2                                  ; CHECK FOR SPACE TO SEND
00001944  67F4                    3918mm         BEQ WAIT_FOR_READY_289                      ; NO SPACE, CHECK AGAIN
00001946  13C3 00C00007           3919mm         MOVE.B D3,DUART_TXA                         ; SEND THE NEXT CHARACTER
0000194C                          3920mm     ENDC
0000194C                          3921mm 
0000194C                 FALSE    3922mm     IFNE DEBUG
0000194C                          3923mm     ENDC
0000194C                          3924mm 
0000194C                          3925mm     ENDM
0000194C  57CC FFDA               3926m     DBEQ D4,LOOP_285
00001950                          3927m     ENDM
00001950                          3928m     PRINT_CRLF D0,A0
00001950  41FA 024C               3929m     LEA CRLF(PC),A0
00001954                          3930mm     PRINT_STR A0,D0
00001954                          3931mm LOOP_291
00001954  0C10 0000               3932mm     CMP.B #NULL,(A0)                                ; 0 -> DONE
00001958  6700 0016               3933mm     BEQ EXIT_291
0000195C                          3934mmm     PRINT_CHAR (A0)+,D0
0000195C                          3935mmm WAIT_FOR_READY_292                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
0000195C                 TRUE     3936mmm     IFEQ DEBUG
0000195C  1039 00C00003           3937mmm         MOVE.B DUART_SRA,D0                         ; READ STATUS REGISTER
00001962  0800 0002               3938mmm         BTST #2,D0                                  ; CHECK FOR SPACE TO SEND
00001966  67F4                    3939mmm         BEQ WAIT_FOR_READY_292                      ; NO SPACE, CHECK AGAIN
00001968  13D8 00C00007           3940mmm         MOVE.B (A0)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
0000196E                          3941mmm     ENDC
0000196E                          3942mmm 
0000196E                 FALSE    3943mmm     IFNE DEBUG
0000196E                          3944mmm     ENDC
0000196E                          3945mmm 
0000196E                          3946mmm     ENDM
0000196E  60E4                    3947mm     BRA LOOP_291
00001970                          3948mm EXIT_291
00001970                          3949mm     ENDM
00001970                          3950m     ENDM
00001970                          3951      
00001970  207C 00000004           3952      MOVE.L #4,A0
00001976  4ED0                    3953      JMP (A0)
00001978                          3954          
00001978                          3955  ILLEGAL_HANDLER
00001978  13FC 0007 00E00001      3956      MOVE.B #7,DISPLAY   
00001980  207C 00000004           3957      MOVE.L #4,A0
00001986  4ED0                    3958      JMP (A0)
00001988                          3959          
00001988                          3960  UNHANDLED_HANDLER
00001988  13FC 0008 00E00001      3961      MOVE.B #8,DISPLAY   
00001990  207C 00000004           3962      MOVE.L #4,A0
00001996  4ED0                    3963      JMP (A0)
00001998                          3964  
00001998                          3965  ; strings
00001998= 50 72 65 73 73 20 ...   3966  HELPPROMPT DC.B 'Press ? for help',CR,LF,NULL
000019AB= 5B 3F 5D 09 09 09 ...   3967  HELP    DC.B '[?]',TAB,TAB,TAB,'help',CR,LF
000019B7= 5B 76 5D 09 09 09 ...   3968          DC.B '[v]',TAB,TAB,TAB,'version',CR,LF
000019C6= 78 78 78 78 78 78 ...   3969          DC.B 'xxxxxxxx[r]',TAB,TAB,'read long',CR,LF
000019DE= 78 78 78 78 78 78 ...   3970          DC.B 'xxxxxxxx[w]xxxxxxxx',TAB,'write long',CR,LF
000019FE= 78 78 78 78 78 78 ...   3971          DC.B 'xxxxxxxx[s]',TAB,TAB,'download S records',CR,LF
00001A1F= 78 78 78 78 78 78 ...   3972          DC.B 'xxxxxxxx[g]',TAB,TAB,'go',CR,LF
00001A30= 5B 7A 5D 09 09 09 ...   3973          DC.B '[z]',TAB,TAB,TAB,'zap memory',CR,LF
00001A42= 78 78 78 78 78 78 ...   3974          DC.B 'xxxxxxxx[l]xxxx',TAB,TAB,'load to EEPROM',CR,LF
00001A63= 78 78 78 78 78 78 ...   3975          DC.B 'xxxxxxxx[p]xxxx',TAB,TAB,'patch EEPROM',CR,LF
00001A82= 78 78 78 78 78 78 ...   3976          DC.B 'xxxxxxxx[m]xxxxxxxx',TAB,'monitor to RAM',CR,LF
00001AA6= 5B 78 5D 09 09 09 ...   3977          DC.B '[x]',TAB,TAB,TAB,'print registers',CR,LF,NULL
00001ABE= 48 75 68 3F 0D 0A 00    3978  HUH  DC.B 'Huh?',CR,LF,NULL
00001AC5= 20 53 20 72 65 63 ...   3979  READ    DC.B ' S records read, start address = ',NULL
00001AE7= 57 3A 20 55 6E 6B ...   3980  UNREC   DC.B 'W: Unknown Srec type: ',NULL
00001AFE= 21 20 43 53 20 66 ...   3981  CS_FAILURE  DC.B '! CS failure at ',NULL
00001B0F= 21 20 52 41 4D 20 ...   3982  RAM_ERROR   DC.B '! RAM error at: ',NULL
00001B20= 30 31 32 33 34 35 ...   3983  BIN2HEX_LUT DC.B '0123456789ABCDEF'
00001B30= 00 01 02 03 04 05 ...   3984  HEX2BIN_LUT DC.B 0,1,2,3,4,5,6,7,8,9,0,0,0,0,0,0,0,$A,$B,$C,$D,$E,$F
00001B47= 4C 6F 61 64 69 6E ...   3985  LOADING DC.B 'Loading EEPROM...',CR,LF,NULL
00001B5B= 57 72 69 74 69 6E ...   3986  CODE        DC.B 'Writing code: ',NULL
00001B6A= 53 65 74 74 69 6E ...   3987  SP      DC.B 'Setting initial stack pointer to ',NULL
00001B8C= 57 72 69 74 69 6E ...   3988  VECTORS DC.B 'Writing vectors',CR,LF,NULL
00001B9E= 0D 0A 00                3989  CRLF    DC.B CR,LF,NULL
00001BA1= 3E 20 00                3990  PROMPT  DC.B '> ',NULL
00001BA4= 30 78 00                3991  ox      DC.B '0x',NULL
00001BA7= 20 2D 3E 20 00          3992  to      DC.B ' -> ',NULL
00001BAC= 53 50 3A 20 00          3993  STACK_POINTER DC.B 'SP: ',NULL
00001BB1= 53 52 3A 20 00          3994  STATUS_REGISTER DC.B 'SR: ',NULL
00001BB6= 2A 20 42 75 73 2F ...   3995  BUS_ERROR DC.B '* Bus/address error ',NULL
00001BCB= 72 65 61 64 69 6E ...   3996  READING DC.B 'reading ',NULL
00001BD4= 77 72 69 74 69 6E ...   3997  WRITING DC.B 'writing ',NULL
00001BDD= 20 66 72 6F 6D 20 00    3998  FROM DC.B ' from ',NULL
00001BE4= 2A 20 55 6E 68 61 ...   3999  UNHANDLED DC.B '* Unhandled exception at ',NULL
00001BFE= 4D 44 46 2D 6D 6F ...   4000  VERSION DC.B 'MDF-mon V1.112 (25/04/2021)',CR,LF,NULL       ; this is the last line on purpose, so if it prints, we can be sure we got it all
00001C1C= 00                      4001  END     DC.B 0
00001C1D                          4002      END START                                           ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
BIN2HEX             0
BIN2HEX_LUT         1B20
BUS_ERROR           1BB6
BUS_ERROR_HANDLER   1824
CODE                1B5B
CONTINUE            1894
CONTINUE_113        DC2
CONTINUE_54         89E
CONTINUE_57         8EE
CONTINUE_61         944
CONTINUE_69         9F8
CONTINUE_74         A6A
CONTINUE_79         AE6
CONTINUE_84         B64
CONTINUE_89         BEC
CONTINUE_94         C5E
CONTINUE_99         CD0
CR                  D
CRLF                1B9E
CS_FAILURE          1AFE
DEBUG               0
DISPLAY             E00001
DISPLAY_            0
DISPLAY_BASE        E00000
DOWNLOAD            734
DOWNLOAD_BYTE       AA4
DOWNLOAD_DONE       ECC
DUART_ACR           C00009
DUART_ACR_          4
DUART_BASE          C00000
DUART_CRA           C00005
DUART_CRA_          2
DUART_CRB           C00015
DUART_CRB_          A
DUART_CSRA          C00003
DUART_CSRA_         1
DUART_CSRB          C00013
DUART_CSRB_         9
DUART_IMR           C0000B
DUART_IMR_          5
DUART_IVR           C00019
DUART_IVR_          C
DUART_MRA           C00001
DUART_MRA_          0
DUART_MRB           C00011
DUART_MRB_          8
DUART_OPCR          C0001B
DUART_OPCR_         D
DUART_RESET_OPR     C0001F
DUART_RESET_OPR_    F
DUART_RXA           C00007
DUART_RXA_          3
DUART_RXB           C00017
DUART_RXB_          B
DUART_SET_OPR       C0001D
DUART_SET_OPR_      E
DUART_SRA           C00003
DUART_SRA_          1
DUART_SRB           C00013
DUART_SRB_          9
DUART_TXA           C00007
DUART_TXA_          3
DUART_TXB           C00017
DUART_TXB_          B
END                 1C1C
EXIT_10             556
EXIT_104            D42
EXIT_106            D62
EXIT_110            D94
EXIT_118            E2A
EXIT_120            E52
EXIT_123            E72
EXIT_128            EBC
EXIT_131            EEC
EXIT_135            F36
EXIT_138            F58
EXIT_143            FA2
EXIT_145            101E
EXIT_148            1042
EXIT_15             5A0
EXIT_153            108C
EXIT_160            1118
EXIT_163            1176
EXIT_165            1196
EXIT_168            11B8
EXIT_17             5C0
EXIT_172            1202
EXIT_175            1224
EXIT_180            126E
EXIT_183            12B0
EXIT_186            12D8
EXIT_191            1322
EXIT_196            1368
EXIT_199            139E
EXIT_20             5E0
EXIT_203            13E8
EXIT_206            140A
EXIT_211            1454
EXIT_22             60A
EXIT_222            1508
EXIT_225            155A
EXIT_228            157A
EXIT_232            15C4
EXIT_235            15E6
EXIT_240            1630
EXIT_249            16C8
EXIT_251            170A
EXIT_254            172C
EXIT_259            1776
EXIT_261            1796
EXIT_264            17B8
EXIT_269            1802
EXIT_272            1844
EXIT_274            1870
EXIT_276            1894
EXIT_279            18B8
EXIT_28             69E
EXIT_283            1902
EXIT_286            1926
EXIT_291            1970
EXIT_30             6F6
EXIT_32             722
EXIT_35             74C
EXIT_45             7FA
EXIT_5              50E
EXIT_52             870
EXIT_66             9B4
EXIT_7              52E
FROM                1BDD
G                   FA6
GET_INPUT           60A
H                   6FA
HELP                19AB
HELPPROMPT          1998
HEX2BIN             10B
HEX2BIN_LUT         1B30
HEX_DIGIT           1806
HUH                 1ABE
ILLEGAL_HANDLER     1978
L                   109C
LF                  A
LOADING             1B47
LOOP_10             53A
LOOP_104            D26
LOOP_106            D46
LOOP_110            D78
LOOP_118            E0E
LOOP_120            E36
LOOP_122            E74
LOOP_123            E56
LOOP_128            EA0
LOOP_130            EEE
LOOP_131            ED0
LOOP_135            F1A
LOOP_137            F5A
LOOP_138            F3C
LOOP_143            F86
LOOP_145            1002
LOOP_147            1044
LOOP_148            1026
LOOP_15             584
LOOP_153            1070
LOOP_160            10FC
LOOP_163            115A
LOOP_165            117A
LOOP_167            11BA
LOOP_168            119C
LOOP_17             5A4
LOOP_172            11E6
LOOP_174            1226
LOOP_175            1208
LOOP_180            1252
LOOP_183            1294
LOOP_185            12DA
LOOP_186            12BC
LOOP_191            1306
LOOP_196            134C
LOOP_198            13A0
LOOP_199            1382
LOOP_20             5C4
LOOP_203            13CC
LOOP_205            140C
LOOP_206            13EE
LOOP_211            1438
LOOP_22             5EE
LOOP_222            14EC
LOOP_225            153E
LOOP_227            157C
LOOP_228            155E
LOOP_232            15A8
LOOP_234            15E8
LOOP_235            15CA
LOOP_240            1614
LOOP_249            16AC
LOOP_251            16EE
LOOP_253            172E
LOOP_254            1710
LOOP_259            175A
LOOP_261            177A
LOOP_263            17BA
LOOP_264            179C
LOOP_269            17E6
LOOP_272            1828
LOOP_274            1854
LOOP_276            1878
LOOP_278            18BA
LOOP_279            189C
LOOP_28             682
LOOP_283            18E6
LOOP_285            1928
LOOP_286            190A
LOOP_291            1954
LOOP_30             6DA
LOOP_32             706
LOOP_34             74E
LOOP_35             730
LOOP_45             7DE
LOOP_5              4F2
LOOP_52             854
LOOP_66             998
LOOP_7              512
LOOP_9              558
M                   1652
MAIN_LOOP           5EA
NULL                0
OX                  1BA4
P                   1494
PRINTSTR            706
PRINT_CHAR          203
PRINT_CRLF          3A0
PRINT_REG           438
PRINT_STR           3CB
PROGRAM             C4D
PROGRAM_VECTOR      CE4
PROMPT              1BA1
PROTECT             A40
R                   726
RAM                 200000
RAM_ERROR           1B0F
READ                1AC5
READING             1BCB
READ_CHAR           62D
RESET               4
ROM                 0
S                   87A
SP                  1B6A
STACK               0
STACK_ADDRESS       2E0000
STACK_POINTER       1BAC
START               400
STATUS_REGISTER     1BB1
TAB                 9
TO                  1BA7
UNHANDLED           1BE4
UNHANDLED_HANDLER   1988
UNPROTECT           979
UNREC               1AE7
USER                100
V                   702
VECS                8
VECTORS             1B8C
VERSION             1BFE
W                   7FE
WAIT_CHAR           4E9
WAIT_FOR_COMPLETE_182  1280
WAIT_FOR_COMPLETE_194  132C
WAIT_FOR_COMPLETE_195  133E
WAIT_FOR_COMPLETE_214  1458
WAIT_FOR_COMPLETE_215  146A
WAIT_FOR_COMPLETE_242  1632
WAIT_FOR_READY_1    4AA
WAIT_FOR_READY_101  CE8
WAIT_FOR_READY_105  D2E
WAIT_FOR_READY_107  D4E
WAIT_FOR_READY_108  D62
WAIT_FOR_READY_11   542
WAIT_FOR_READY_111  D80
WAIT_FOR_READY_113  DA6
WAIT_FOR_READY_115  DDA
WAIT_FOR_READY_119  E16
WAIT_FOR_READY_121  E3E
WAIT_FOR_READY_124  E5E
WAIT_FOR_READY_126  E86
WAIT_FOR_READY_129  EA8
WAIT_FOR_READY_13   56A
WAIT_FOR_READY_132  ED8
WAIT_FOR_READY_134  F00
WAIT_FOR_READY_136  F22
WAIT_FOR_READY_139  F44
WAIT_FOR_READY_141  F6C
WAIT_FOR_READY_144  F8E
WAIT_FOR_READY_146  100A
WAIT_FOR_READY_149  102E
WAIT_FOR_READY_151  1056
WAIT_FOR_READY_154  1078
WAIT_FOR_READY_155  10AA
WAIT_FOR_READY_157  10C4
WAIT_FOR_READY_16   58C
WAIT_FOR_READY_161  1104
WAIT_FOR_READY_164  1162
WAIT_FOR_READY_166  1182
WAIT_FOR_READY_169  11A4
WAIT_FOR_READY_171  11CC
WAIT_FOR_READY_173  11EE
WAIT_FOR_READY_176  1210
WAIT_FOR_READY_178  1238
WAIT_FOR_READY_18   5AC
WAIT_FOR_READY_181  125A
WAIT_FOR_READY_184  129C
WAIT_FOR_READY_187  12C4
WAIT_FOR_READY_189  12EC
WAIT_FOR_READY_192  130E
WAIT_FOR_READY_197  1354
WAIT_FOR_READY_2    4BE
WAIT_FOR_READY_200  138A
WAIT_FOR_READY_202  13B2
WAIT_FOR_READY_204  13D4
WAIT_FOR_READY_207  13F6
WAIT_FOR_READY_209  141E
WAIT_FOR_READY_21   5CC
WAIT_FOR_READY_212  1440
WAIT_FOR_READY_217  14A0
WAIT_FOR_READY_219  14BA
WAIT_FOR_READY_223  14F4
WAIT_FOR_READY_226  1546
WAIT_FOR_READY_229  1566
WAIT_FOR_READY_23   5F6
WAIT_FOR_READY_231  158E
WAIT_FOR_READY_233  15B0
WAIT_FOR_READY_236  15D2
WAIT_FOR_READY_238  15FA
WAIT_FOR_READY_24   60A
WAIT_FOR_READY_241  161C
WAIT_FOR_READY_244  1660
WAIT_FOR_READY_246  167A
WAIT_FOR_READY_250  16B4
WAIT_FOR_READY_252  16F6
WAIT_FOR_READY_255  1718
WAIT_FOR_READY_257  1740
WAIT_FOR_READY_26   624
WAIT_FOR_READY_260  1762
WAIT_FOR_READY_262  1782
WAIT_FOR_READY_265  17A4
WAIT_FOR_READY_267  17CC
WAIT_FOR_READY_270  17EE
WAIT_FOR_READY_273  1830
WAIT_FOR_READY_275  185C
WAIT_FOR_READY_277  1880
WAIT_FOR_READY_280  18A4
WAIT_FOR_READY_282  18CC
WAIT_FOR_READY_284  18EE
WAIT_FOR_READY_287  1912
WAIT_FOR_READY_289  193A
WAIT_FOR_READY_29   68A
WAIT_FOR_READY_292  195C
WAIT_FOR_READY_3    4D2
WAIT_FOR_READY_31   6E2
WAIT_FOR_READY_33   70E
WAIT_FOR_READY_36   738
WAIT_FOR_READY_38   760
WAIT_FOR_READY_39   776
WAIT_FOR_READY_40   78C
WAIT_FOR_READY_41   7A0
WAIT_FOR_READY_42   7B4
WAIT_FOR_READY_43   7C8
WAIT_FOR_READY_46   7E6
WAIT_FOR_READY_47   808
WAIT_FOR_READY_49   822
WAIT_FOR_READY_53   85C
WAIT_FOR_READY_54   882
WAIT_FOR_READY_56   8BC
WAIT_FOR_READY_57   8D2
WAIT_FOR_READY_59   906
WAIT_FOR_READY_6    4FA
WAIT_FOR_READY_61   928
WAIT_FOR_READY_63   95C
WAIT_FOR_READY_67   9A0
WAIT_FOR_READY_69   9DC
WAIT_FOR_READY_71   A10
WAIT_FOR_READY_74   A4E
WAIT_FOR_READY_76   A82
WAIT_FOR_READY_79   ACA
WAIT_FOR_READY_8    51A
WAIT_FOR_READY_81   AFE
WAIT_FOR_READY_84   B48
WAIT_FOR_READY_86   B7C
WAIT_FOR_READY_89   BD0
WAIT_FOR_READY_91   C04
WAIT_FOR_READY_94   C42
WAIT_FOR_READY_96   C76
WAIT_FOR_READY_99   CB4
WAIT_FOR_SRECORD    882
WRITE               1874
WRITING             1BD4
X                   16EA
Z                   FAC
_00000000           64A
_00000001           65E
_00000002           9BC
_00000003           D98
_00000004           9CA
_00000005           BB8
_00000006           B2E
_00000007           D98
_00000008           D22
_00000009           D98
_0000000A           EC0
_0000000B           ECC
_0000000C           108C
_0000000D           128A
_0000000E           1336
_0000000F           1348
_00000010           1462
_00000011           1474
_00000012           163C
_10000000           91E
_10000001           986
_10000002           9D2
_10000003           A3A
_10000004           A44
_10000005           AAC
_10000006           AC0
_10000007           B28
_10000008           B32
_10000009           BB2
_1000000A           B3E
_1000000B           BA6
_1000000C           BC6
_1000000D           C2E
_1000000E           C38
_1000000F           CA0
_10000010           CAA
_10000011           D12
_10000012           D9C
_10000013           E04
_10000014           126E
_10000015           1290
_10000016           16D2
_10000017           16E6
_20000000           426
_20000001           432
_20000002           440
_20000003           44C
_20000004           806
_20000005           84A
_20000006           FBE
_20000007           FCE
_20000008           FE8
_20000009           108E
_2000000A           10A8
_2000000B           10EC
_2000000C           1370
_2000000D           1476
_2000000E           149E
_2000000F           14E2
_20000010           165E
_20000011           16A2
