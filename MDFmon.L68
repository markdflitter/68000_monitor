00000400 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 27/04/2021 17:41:27

00000000                             1  *------------------------------------------------------------
00000000                             2  * Title         MDFmon 
00000000                             3  * Written by    Mark Flitter
00000000                             4  * Date          March 2021
00000000                             5  * Description:  68000 monitor program
00000000                             6  *-----------------------------------------------------------
00000000                             7  ; to do
00000000                             8  
00000000                             9  ; other ideas
00000000                            10  ;------------
00000000                            11  ; use DBLoop?
00000000                            12  ; keep track of highest address hit during srec download
00000000                            13  ; implement backspace
00000000                            14  ; fix being able to enter random chars when W'ing
00000000                            15  ; ram check at startup?  Not sure if this is a good idea!
00000000                            16  ; check for escape during Z and L?  Not sure if W is a good idea either
00000000                            17  
00000000                            18      ORG  $0
00000000                            19  
00000000  =00000000                 20  DEBUG               EQU 0
00000000                            21  
00000000                            22  ; constants
00000000  =00000000                 23  NULL                EQU 0
00000000  =00000009                 24  TAB                 EQU 9
00000000  =0000000D                 25  CR                  EQU 13
00000000  =0000000A                 26  LF                  EQU 10
00000000                            27  
00000000  =00000000                 28  ROM                 EQU $0
00000000  =00200000                 29  RAM                 EQU $200000
00000000  =002E0000                 30  STACK_ADDRESS       EQU $2E0000
00000000                            31  
00000000  =00C00000                 32  DUART_BASE          EQU $C00000
00000000  =00000000                 33  DUART_MRA_          EQU $0
00000000  =00000001                 34  DUART_CSRA_         EQU $1
00000000  =00000001                 35  DUART_SRA_          EQU $1
00000000  =00000002                 36  DUART_CRA_          EQU $2
00000000  =00000003                 37  DUART_TXA_          EQU $3
00000000  =00000003                 38  DUART_RXA_          EQU $3
00000000  =00000004                 39  DUART_ACR_          EQU $4
00000000  =00000005                 40  DUART_IMR_          EQU $5
00000000  =00000006                 41  DUART_CTUR_         EQU $6
00000000  =00000007                 42  DUART_CTLR_         EQU $7
00000000  =00000008                 43  DUART_MRB_          EQU $8
00000000  =00000009                 44  DUART_CSRB_         EQU $9
00000000  =00000009                 45  DUART_SRB_          EQU $9
00000000  =0000000A                 46  DUART_CRB_          EQU $A
00000000  =0000000B                 47  DUART_TXB_          EQU $B
00000000  =0000000B                 48  DUART_RXB_          EQU $B
00000000  =0000000C                 49  DUART_IVR_          EQU $C
00000000  =0000000D                 50  DUART_OPCR_         EQU $D
00000000  =0000000E                 51  DUART_SET_OPR_      EQU $E
00000000  =0000000F                 52  DUART_RESET_OPR_    EQU $F
00000000                            53  
00000000  =00C00001                 54  DUART_MRA           EQU DUART_BASE+2*DUART_MRA_+1
00000000  =00C00003                 55  DUART_SRA           EQU DUART_BASE+2*DUART_SRA_+1
00000000  =00C00003                 56  DUART_CSRA          EQU DUART_BASE+2*DUART_CSRA_+1
00000000  =00C00005                 57  DUART_CRA           EQU DUART_BASE+2*DUART_CRA_+1
00000000  =00C00007                 58  DUART_TXA           EQU DUART_BASE+2*DUART_TXA_+1
00000000  =00C00007                 59  DUART_RXA           EQU DUART_BASE+2*DUART_RXA_+1
00000000                            60  
00000000  =00C00011                 61  DUART_MRB           EQU DUART_BASE+2*DUART_MRB_+1
00000000  =00C00013                 62  DUART_SRB           EQU DUART_BASE+2*DUART_SRB_+1
00000000  =00C00013                 63  DUART_CSRB          EQU DUART_BASE+2*DUART_CSRB_+1
00000000  =00C00015                 64  DUART_CRB           EQU DUART_BASE+2*DUART_CRB_+1
00000000  =00C00017                 65  DUART_TXB           EQU DUART_BASE+2*DUART_TXB_+1
00000000  =00C00017                 66  DUART_RXB           EQU DUART_BASE+2*DUART_RXB_+1
00000000                            67  
00000000  =00C00009                 68  DUART_ACR           EQU DUART_BASE+2*DUART_ACR_+1
00000000  =00C0000B                 69  DUART_IMR           EQU DUART_BASE+2*DUART_IMR_+1
00000000  =00C0000D                 70  DUART_CTUR          EQU DUART_BASE+2*DUART_CTUR_+1
00000000  =00C0000F                 71  DUART_CTLR          EQU DUART_BASE+2*DUART_CTLR_+1
00000000  =00C00019                 72  DUART_IVR           EQU DUART_BASE+2*DUART_IVR_+1
00000000  =00C0001B                 73  DUART_OPCR          EQU DUART_BASE+2*DUART_OPCR_+1
00000000  =00C0001D                 74  DUART_SET_OPR       EQU DUART_BASE+2*DUART_SET_OPR_+1
00000000  =00C0001F                 75  DUART_RESET_OPR     EQU DUART_BASE+2*DUART_RESET_OPR_+1
00000000                            76  
00000000  =00E00000                 77  DISPLAY_BASE        EQU $E00000
00000000  =00000000                 78  DISPLAY_            EQU $0
00000000  =00E00001                 79  DISPLAY             EQU DISPLAY_BASE+2*DISPLAY_+1
00000000                            80  
00000000                            81  ; macros
00000000                            82  ; convert top 4 bits of input register from binary to a single hex digit
00000000                            83  ; the input register is changed during the process
00000000                            84  ; \1 input data register containing binary number, \2 data register for return value, \3 working address register
00000000                            85  BIN2HEX MACRO
00000000                            86      LEA BIN2HEX_LUT(PC),\3                          ; load the lookup table
00000000                            87      ROL.L #4,\1                                     ; shift the top 4 bits down to bottom of the register the and mask off everything else
00000000                            88      MOVE.B \1,\2
00000000                            89      ANDI.L #$F,\2
00000000                            90      MOVE.B 0(\3,\2),\2                              ; use that as an index into the LUT
00000000                            91      ENDM
00000000                            92  
00000000                            93  ; convert single hex digit to 4 bit binary number in LSbits
00000000                            94  ; the input register is changed during the process
00000000                            95  ; \1 data register containing hex character, \2 data register for return value, \3 working address register
00000000                            96  HEX2BIN MACRO
00000000                            97      LEA HEX2BIN_LUT(PC),\3                          ; load the lookup table
00000000                            98      SUB.B #'0',\1                                   ; work out offset and mask off anything rogue
00000000                            99      AND.L #$FF,\1                                   ; ignore the top 3 bytes
00000000                           100      MOVE.B 0(\3,\1),\2                              ; use that as an index into the LUT   
00000000                           101      ENDM
00000000                           102  
00000000                           103  ; send a single char to the serial port
00000000                           104  ; \1 = char to send, \2 = data register to use for status poll
00000000                           105  ; will stamp on D0 and D1 in debug mode
00000000                           106  PRINT_CHAR MACRO
00000000                           107  WAIT_FOR_READY\@                                    ; wait until the there is space to send
00000000                           108      IFEQ DEBUG
00000000                           109          MOVE.B DUART_SRA,\2                         ; read status register
00000000                           110          BTST #2,\2                                  ; check for space to send
00000000                           111          BEQ WAIT_FOR_READY\@                        ; no space, check again
00000000                           112          MOVE.B \1,DUART_TXA                         ; send the next character
00000000                           113      ENDC
00000000                           114  
00000000                           115      IFNE DEBUG
00000000                           116          MOVE.B \1,D1
00000000                           117          MOVE.L #6,D0   
00000000                           118          TRAP #15                                    ; write to terminal in simulator
00000000                           119      ENDC
00000000                           120  
00000000                           121      ENDM
00000000                           122  
00000000                           123  ; send CR,LF to the serial port
00000000                           124  ; \1 = data register to use for status poll, /2 = working address register
00000000                           125  PRINT_CRLF MACRO
00000000                           126      LEA CRLF(PC),\2
00000000                           127      PRINT_STR \2,\1
00000000                           128      ENDM
00000000                           129  
00000000                           130  ; send C-style, zero terminated string to the serial port
00000000                           131  ; \1 = address register containing address of zero terminated string, \2 = data register to use for status poll, 
00000000                           132  PRINT_STR MACRO
00000000                           133  LOOP\@
00000000                           134      CMP.B #NULL,(\1)                                ; 0 -> done
00000000                           135      BEQ EXIT\@
00000000                           136      PRINT_CHAR (\1)+,\2
00000000                           137      BRA LOOP\@
00000000                           138  EXIT\@
00000000                           139      ENDM
00000000                           140    
00000000                           141  ; send the contents of a data register to the serial port as a 8 digit hex number
00000000                           142  ; \1 = data register containing binary number, \2 = data register to use for status poll, \3 working data register, \4 counter register, \5 working address register
00000000                           143  PRINT_REG MACRO
00000000                           144      LEA ox(PC),\5
00000000                           145      PRINT_STR \5,\2
00000000                           146      MOVE.L #7,\4                                    ; loop round all 8 hex characters of 4 bits each
00000000                           147  LOOP\@
00000000                           148      BIN2HEX \1,\3,\5
00000000                           149      PRINT_CHAR \3,\2
00000000                           150      DBEQ \4,LOOP\@
00000000                           151      ENDM
00000000                           152  
00000000                           153  ; wait for a char from the serial port
00000000                           154  ; \ 1= data register for read char, \2 = register to use for status poll
00000000                           155  ; will stamp on D0 and D1 in debug mode
00000000                           156  WAIT_CHAR MACRO
00000000                           157  WAIT_FOR_READY\@                                    ; wait until the there is space to send
00000000                           158      IFEQ DEBUG
00000000                           159          MOVE.B DUART_SRA,\2                         ; read status register
00000000                           160          BTST #0,\2                                  ; check for character
00000000                           161          BEQ WAIT_FOR_READY\@                        ; nothing, check again
00000000                           162      ENDC
00000000                           163  
00000000                           164      READ_CHAR \1
00000000                           165  
00000000                           166      IFEQ DEBUG
00000000                           167          PRINT_CHAR \1,\2                            ; echo it back
00000000                           168      ENDC
00000000                           169      ENDM
00000000                           170  
00000000                           171  ; read a char from the serial port - assumes that there is one!
00000000                           172  ; \ 1= data register for read char
00000000                           173  ; will stamp on D0 and D1 in debug mode
00000000                           174  READ_CHAR MACRO
00000000                           175      IFEQ DEBUG
00000000                           176          MOVE.B DUART_RXA,\1                         ; got a character, read it
00000000                           177      ENDC
00000000                           178      IFNE DEBUG
00000000                           179          MOVE.L #5,D0    
00000000                           180          TRAP #15                                    ; read from keyboard in simulator
00000000                           181          MOVE.L D1,\1
00000000                           182      ENDC
00000000                           183  
00000000                           184      CMP.B #$1B,\1                                   ; check for escape and go to start
00000000                           185      BEQ START
00000000                           186      ENDM
00000000                           187  
00000000                           188  
00000000                           189  ; read data from the download serial port
00000000                           190  ; \ 1= data register for read char
00000000                           191  DOWNLOAD MACRO
00000000                           192  WAIT_FOR_READY\@                                    ; wait until the there is space to send
00000000                           193  
00000000                           194      MOVE.B DUART_SRA,\1                             ; check for command
00000000                           195      BTST #0,\1                                      ; check for character
00000000                           196      BEQ CONTINUE\@                                  ; nothing, continue
00000000                           197  
00000000                           198      READ_CHAR \1                                    ; we're not going to do anything with it, just check for escape
00000000                           199  CONTINUE\@
00000000                           200      MOVE.B DUART_SRB,\1                             ; read download status register
00000000                           201      BTST #0,\1                                      ; check for character
00000000                           202      BEQ WAIT_FOR_READY\@                            ; nothing, check again
00000000                           203      
00000000                           204      MOVE.B DUART_RXB,\1                             ; got a character, read it
00000000                           205      MOVE.B \1,DISPLAY                               ; echo to the display
00000000                           206  
00000000                           207      ENDM
00000000                           208  
00000000                           209  ; unprotect the EEPROM
00000000                           210  UNPROTECT MACRO
00000000                           211      MOVE.W #$AAAA,$2AAA                             ; remove write protect
00000000                           212      NOP
00000000                           213      MOVE.W #$5555,$1554
00000000                           214      NOP
00000000                           215      MOVE.W #$8080,$2AAA
00000000                           216      NOP
00000000                           217      MOVE.W #$AAAA,$2AAA
00000000                           218      NOP
00000000                           219      MOVE.W #$5555,$1554
00000000                           220      NOP
00000000                           221      MOVE.W #$2020,$2AAA
00000000                           222      ENDM
00000000                           223      
00000000                           224  ; protect the EEPROM
00000000                           225  PROTECT MACRO
00000000                           226      MOVE.W #$AAAA,$2AAA                             ; and write protect
00000000                           227      MOVE.W #$5555,$1554
00000000                           228      MOVE.W #$A0A0,$2AAA
00000000                           229      ENDM
00000000                           230  
00000000                           231  
00000000                           232  ; read two hex digits from the download serial port and convert to a byte
00000000                           233  ; \1 result register, \2 = data register for read char, \3 = register to use for status poll, \4 = working data register, \5 = checksum register, \6 = working address register
00000000                           234  DOWNLOAD_BYTE MACRO
00000000                           235      MOVE.B #2,\4
00000000                           236      WHILE.B \4 <GT> 0 DO
00000000                           237          LSL.L #4,\1                                 ; it's OK to do this first, because we are either starting from 0, 
00000000                           238          DOWNLOAD \2                                 ; or we are reading the next byte along, so need to shift up the previous one
00000000                           239          PRINT_CHAR \2,\3
00000000                           240          HEX2BIN \2,\2,\6
00000000                           241          OR.B \2,\1
00000000                           242          SUB.B #1,\4
00000000                           243      ENDW
00000000                           244  
00000000                           245      MOVE.L #0,\2                                    ; rextract latest byte of address and add into checksum
00000000                           246      MOVE.B \1,\2
00000000                           247      ADD.L \1,\5
00000000                           248  
00000000                           249      ENDM
00000000                           250  
00000000                           251  ; write word to EEPROM
00000000                           252  ; \1 word to write, \2 = target address, \3 = working data register
00000000                           253  PROGRAM MACRO
00000000                           254    MOVE.W \1,\2                                      ; write the data
00000000                           255  
00000000                           256  WAIT_FOR_COMPLETE\@
00000000                           257          MOVE.W \2,\3
00000000                           258  
00000000                           259          IF.W \3 <NE> \1 THEN
00000000                           260              BRA WAIT_FOR_COMPLETE\@
00000000                           261          ENDI
00000000                           262          ENDM
00000000                           263          
00000000                           264  ; program vector to EEPROM
00000000                           265  ; \1 handler address, \2 = target address, \3 = working data register
00000000                           266  PROGRAM_VECTOR MACRO
00000000                           267      ADD.L #2,\2
00000000                           268      PROGRAM \1, (\2), \3                                ; write it
00000000                           269      LSR.L #8,\1
00000000                           270      LSR.L #8,\1
00000000                           271      SUB.L #2,\2
00000000                           272      PROGRAM \1, (\2), \3
00000000                           273      ENDM
00000000                           274  
00000000                           275  
00000000                           276  ; register catalogue
00000000                           277  ; D0 - used for simulator I/O
00000000                           278  ; D1 - used for simulator I/O
00000000                           279  ; D2 - read character
00000000                           280  ; D3 - serial port status poll / task for TRAP in simulator
00000000                           281  ; D6 - working register used in R/W
00000000                           282  ; D7 - address accumulator, reset by download
00000000                           283  ; A0 - address of string to print 
00000000                           284  
00000000                           285  ; start vector
00000000= 002E0000                 286  STACK   DC.L STACK_ADDRESS                      ; STACK
00000004= 00000400                 287  RESET   DC.L START                              ; RESET
00000008= 0000184C                 288  VECS    DC.L BUS_ERROR_HANDLER                      ; BUS ERROR
0000000C= 0000184C                 289          DC.L BUS_ERROR_HANDLER                  ; ADDRESS ERROR
00000010= 000019A0                 290          DC.L ILLEGAL_HANDLER                        ; ILLEGAL INSTRUCTION
00000014= 000019B0                 291          DC.L UNHANDLED_HANDLER
00000018= 000019B0                 292          DC.L UNHANDLED_HANDLER
0000001C= 000019B0                 293          DC.L UNHANDLED_HANDLER
00000020= 000019B0                 294          DC.L UNHANDLED_HANDLER
00000024= 000019B0                 295          DC.L UNHANDLED_HANDLER
00000028= 000019B0                 296          DC.L UNHANDLED_HANDLER
0000002C= 000019B0                 297          DC.L UNHANDLED_HANDLER
00000030= 000019B0                 298          DC.L UNHANDLED_HANDLER
00000034= 000019B0                 299          DC.L UNHANDLED_HANDLER
00000038= 000019B0                 300          DC.L UNHANDLED_HANDLER
0000003C= 000019B0                 301          DC.L UNHANDLED_HANDLER
00000040= 000019B0                 302          DC.L UNHANDLED_HANDLER
00000044= 000019B0                 303          DC.L UNHANDLED_HANDLER
00000048= 000019B0                 304          DC.L UNHANDLED_HANDLER
0000004C= 000019B0                 305          DC.L UNHANDLED_HANDLER
00000050= 000019B0                 306          DC.L UNHANDLED_HANDLER
00000054= 000019B0                 307          DC.L UNHANDLED_HANDLER
00000058= 000019B0                 308          DC.L UNHANDLED_HANDLER
0000005C= 000019B0                 309          DC.L UNHANDLED_HANDLER
00000060= 000019F4                 310          DC.L SPURIOUS_HANDLER
00000064= 000019B0                 311          DC.L UNHANDLED_HANDLER
00000068= 000019B0                 312          DC.L UNHANDLED_HANDLER
0000006C= 000019B0                 313          DC.L UNHANDLED_HANDLER
00000070= 000019B0                 314          DC.L UNHANDLED_HANDLER
00000074= 000019B0                 315          DC.L UNHANDLED_HANDLER
00000078= 000019B0                 316          DC.L UNHANDLED_HANDLER
0000007C= 000019B0                 317          DC.L UNHANDLED_HANDLER
00000080= 000019B0                 318          DC.L UNHANDLED_HANDLER
00000084= 000019B0                 319          DC.L UNHANDLED_HANDLER
00000088= 000019B0                 320          DC.L UNHANDLED_HANDLER
0000008C= 000019B0                 321          DC.L UNHANDLED_HANDLER
00000090= 000019B0                 322          DC.L UNHANDLED_HANDLER
00000094= 000019B0                 323          DC.L UNHANDLED_HANDLER
00000098= 000019B0                 324          DC.L UNHANDLED_HANDLER
0000009C= 000019B0                 325          DC.L UNHANDLED_HANDLER
000000A0= 000019B0                 326          DC.L UNHANDLED_HANDLER
000000A4= 000019B0                 327          DC.L UNHANDLED_HANDLER
000000A8= 000019B0                 328          DC.L UNHANDLED_HANDLER
000000AC= 000019B0                 329          DC.L UNHANDLED_HANDLER
000000B0= 000019B0                 330          DC.L UNHANDLED_HANDLER
000000B4= 000019B0                 331          DC.L UNHANDLED_HANDLER
000000B8= 000019B0                 332          DC.L UNHANDLED_HANDLER
000000BC= 000019B0                 333          DC.L UNHANDLED_HANDLER
000000C0= 000019B0                 334          DC.L UNHANDLED_HANDLER
000000C4= 000019B0                 335          DC.L UNHANDLED_HANDLER
000000C8= 000019B0                 336          DC.L UNHANDLED_HANDLER
000000CC= 000019B0                 337          DC.L UNHANDLED_HANDLER
000000D0= 000019B0                 338          DC.L UNHANDLED_HANDLER
000000D4= 000019B0                 339          DC.L UNHANDLED_HANDLER
000000D8= 000019B0                 340          DC.L UNHANDLED_HANDLER 
000000DC= 000019B0                 341          DC.L UNHANDLED_HANDLER
000000E0= 000019B0                 342          DC.L UNHANDLED_HANDLER
000000E4= 000019B0                 343          DC.L UNHANDLED_HANDLER 
000000E8= 000019B0                 344          DC.L UNHANDLED_HANDLER 
000000EC= 000019B0                 345          DC.L UNHANDLED_HANDLER
000000F0= 000019B0                 346          DC.L UNHANDLED_HANDLER 
000000F4= 000019B0                 347          DC.L UNHANDLED_HANDLER 
000000F8= 000019B0                 348          DC.L UNHANDLED_HANDLER 
000000FC= 000019B0                 349          DC.L UNHANDLED_HANDLER
00000100= 00001A16                 350  USER    DC.L TICK_HANDLER
00000104= 000019B0                 351          DC.L UNHANDLED_HANDLER 
00000108= 000019B0                 352          DC.L UNHANDLED_HANDLER 
0000010C= 000019B0                 353          DC.L UNHANDLED_HANDLER 
00000110= 000019B0                 354          DC.L UNHANDLED_HANDLER 
00000114= 000019B0                 355          DC.L UNHANDLED_HANDLER 
00000118= 000019B0                 356          DC.L UNHANDLED_HANDLER 
0000011C= 000019B0                 357          DC.L UNHANDLED_HANDLER
00000120= 000019B0                 358          DC.L UNHANDLED_HANDLER
00000124= 000019B0                 359          DC.L UNHANDLED_HANDLER
00000128= 000019B0                 360          DC.L UNHANDLED_HANDLER
0000012C= 000019B0                 361          DC.L UNHANDLED_HANDLER
00000130= 000019B0                 362          DC.L UNHANDLED_HANDLER
00000134= 000019B0                 363          DC.L UNHANDLED_HANDLER
00000138= 000019B0                 364          DC.L UNHANDLED_HANDLER
0000013C= 000019B0                 365          DC.L UNHANDLED_HANDLER
00000140= 000019B0                 366          DC.L UNHANDLED_HANDLER
00000144= 000019B0                 367          DC.L UNHANDLED_HANDLER
00000148= 000019B0                 368          DC.L UNHANDLED_HANDLER
0000014C= 000019B0                 369          DC.L UNHANDLED_HANDLER
00000150= 000019B0                 370          DC.L UNHANDLED_HANDLER
00000154= 000019B0                 371          DC.L UNHANDLED_HANDLER
00000158= 000019B0                 372          DC.L UNHANDLED_HANDLER
0000015C= 000019B0                 373          DC.L UNHANDLED_HANDLER
00000160= 000019B0                 374          DC.L UNHANDLED_HANDLER
00000164= 000019B0                 375          DC.L UNHANDLED_HANDLER
00000168= 000019B0                 376          DC.L UNHANDLED_HANDLER
0000016C= 000019B0                 377          DC.L UNHANDLED_HANDLER
00000170= 000019B0                 378          DC.L UNHANDLED_HANDLER
00000174= 000019B0                 379          DC.L UNHANDLED_HANDLER
00000178= 000019B0                 380          DC.L UNHANDLED_HANDLER
0000017C= 000019B0                 381          DC.L UNHANDLED_HANDLER
00000180= 000019B0                 382          DC.L UNHANDLED_HANDLER
00000184= 000019B0                 383          DC.L UNHANDLED_HANDLER
00000188= 000019B0                 384          DC.L UNHANDLED_HANDLER
0000018C= 000019B0                 385          DC.L UNHANDLED_HANDLER
00000190= 000019B0                 386          DC.L UNHANDLED_HANDLER
00000194= 000019B0                 387          DC.L UNHANDLED_HANDLER
00000198= 000019B0                 388          DC.L UNHANDLED_HANDLER
0000019C= 000019B0                 389          DC.L UNHANDLED_HANDLER
000001A0= 000019B0                 390          DC.L UNHANDLED_HANDLER
000001A4= 000019B0                 391          DC.L UNHANDLED_HANDLER
000001A8= 000019B0                 392          DC.L UNHANDLED_HANDLER
000001AC= 000019B0                 393          DC.L UNHANDLED_HANDLER
000001B0= 000019B0                 394          DC.L UNHANDLED_HANDLER
000001B4= 000019B0                 395          DC.L UNHANDLED_HANDLER
000001B8= 000019B0                 396          DC.L UNHANDLED_HANDLER
000001BC= 000019B0                 397          DC.L UNHANDLED_HANDLER
000001C0= 000019B0                 398          DC.L UNHANDLED_HANDLER
000001C4= 000019B0                 399          DC.L UNHANDLED_HANDLER
000001C8= 000019B0                 400          DC.L UNHANDLED_HANDLER
000001CC= 000019B0                 401          DC.L UNHANDLED_HANDLER
000001D0= 000019B0                 402          DC.L UNHANDLED_HANDLER
000001D4= 000019B0                 403          DC.L UNHANDLED_HANDLER
000001D8= 000019B0                 404          DC.L UNHANDLED_HANDLER
000001DC= 000019B0                 405          DC.L UNHANDLED_HANDLER
000001E0= 000019B0                 406          DC.L UNHANDLED_HANDLER
000001E4= 000019B0                 407          DC.L UNHANDLED_HANDLER
000001E8= 000019B0                 408          DC.L UNHANDLED_HANDLER
000001EC= 000019B0                 409          DC.L UNHANDLED_HANDLER
000001F0= 000019B0                 410          DC.L UNHANDLED_HANDLER
000001F4= 000019B0                 411          DC.L UNHANDLED_HANDLER
000001F8= 000019B0                 412          DC.L UNHANDLED_HANDLER
000001FC= 000019B0                 413          DC.L UNHANDLED_HANDLER
00000200= 000019B0                 414          DC.L UNHANDLED_HANDLER
00000204= 000019B0                 415          DC.L UNHANDLED_HANDLER
00000208= 000019B0                 416          DC.L UNHANDLED_HANDLER
0000020C= 000019B0                 417          DC.L UNHANDLED_HANDLER
00000210= 000019B0                 418          DC.L UNHANDLED_HANDLER
00000214= 000019B0                 419          DC.L UNHANDLED_HANDLER
00000218= 000019B0                 420          DC.L UNHANDLED_HANDLER
0000021C= 000019B0                 421          DC.L UNHANDLED_HANDLER
00000220= 000019B0                 422          DC.L UNHANDLED_HANDLER
00000224= 000019B0                 423          DC.L UNHANDLED_HANDLER
00000228= 000019B0                 424          DC.L UNHANDLED_HANDLER
0000022C= 000019B0                 425          DC.L UNHANDLED_HANDLER
00000230= 000019B0                 426          DC.L UNHANDLED_HANDLER
00000234= 000019B0                 427          DC.L UNHANDLED_HANDLER
00000238= 000019B0                 428          DC.L UNHANDLED_HANDLER
0000023C= 000019B0                 429          DC.L UNHANDLED_HANDLER
00000240= 000019B0                 430          DC.L UNHANDLED_HANDLER
00000244= 000019B0                 431          DC.L UNHANDLED_HANDLER
00000248= 000019B0                 432          DC.L UNHANDLED_HANDLER
0000024C= 000019B0                 433          DC.L UNHANDLED_HANDLER
00000250= 000019B0                 434          DC.L UNHANDLED_HANDLER
00000254= 000019B0                 435          DC.L UNHANDLED_HANDLER
00000258= 000019B0                 436          DC.L UNHANDLED_HANDLER
0000025C= 000019B0                 437          DC.L UNHANDLED_HANDLER
00000260= 000019B0                 438          DC.L UNHANDLED_HANDLER
00000264= 000019B0                 439          DC.L UNHANDLED_HANDLER
00000268= 000019B0                 440          DC.L UNHANDLED_HANDLER
0000026C= 000019B0                 441          DC.L UNHANDLED_HANDLER
00000270= 000019B0                 442          DC.L UNHANDLED_HANDLER
00000274= 000019B0                 443          DC.L UNHANDLED_HANDLER
00000278= 000019B0                 444          DC.L UNHANDLED_HANDLER
0000027C= 000019B0                 445          DC.L UNHANDLED_HANDLER
00000280= 000019B0                 446          DC.L UNHANDLED_HANDLER
00000284= 000019B0                 447          DC.L UNHANDLED_HANDLER
00000288= 000019B0                 448          DC.L UNHANDLED_HANDLER
0000028C= 000019B0                 449          DC.L UNHANDLED_HANDLER
00000290= 000019B0                 450          DC.L UNHANDLED_HANDLER
00000294= 000019B0                 451          DC.L UNHANDLED_HANDLER
00000298= 000019B0                 452          DC.L UNHANDLED_HANDLER
0000029C= 000019B0                 453          DC.L UNHANDLED_HANDLER
000002A0= 000019B0                 454          DC.L UNHANDLED_HANDLER
000002A4= 000019B0                 455          DC.L UNHANDLED_HANDLER
000002A8= 000019B0                 456          DC.L UNHANDLED_HANDLER
000002AC= 000019B0                 457          DC.L UNHANDLED_HANDLER
000002B0= 000019B0                 458          DC.L UNHANDLED_HANDLER
000002B4= 000019B0                 459          DC.L UNHANDLED_HANDLER
000002B8= 000019B0                 460          DC.L UNHANDLED_HANDLER
000002BC= 000019B0                 461          DC.L UNHANDLED_HANDLER
000002C0= 000019B0                 462          DC.L UNHANDLED_HANDLER
000002C4= 000019B0                 463          DC.L UNHANDLED_HANDLER
000002C8= 000019B0                 464          DC.L UNHANDLED_HANDLER
000002CC= 000019B0                 465          DC.L UNHANDLED_HANDLER
000002D0= 000019B0                 466          DC.L UNHANDLED_HANDLER
000002D4= 000019B0                 467          DC.L UNHANDLED_HANDLER
000002D8= 000019B0                 468          DC.L UNHANDLED_HANDLER
000002DC= 000019B0                 469          DC.L UNHANDLED_HANDLER
000002E0= 000019B0                 470          DC.L UNHANDLED_HANDLER
000002E4= 000019B0                 471          DC.L UNHANDLED_HANDLER
000002E8= 000019B0                 472          DC.L UNHANDLED_HANDLER
000002EC= 000019B0                 473          DC.L UNHANDLED_HANDLER
000002F0= 000019B0                 474          DC.L UNHANDLED_HANDLER
000002F4= 000019B0                 475          DC.L UNHANDLED_HANDLER
000002F8= 000019B0                 476          DC.L UNHANDLED_HANDLER
000002FC= 000019B0                 477          DC.L UNHANDLED_HANDLER
00000300= 000019B0                 478          DC.L UNHANDLED_HANDLER
00000304= 000019B0                 479          DC.L UNHANDLED_HANDLER
00000308= 000019B0                 480          DC.L UNHANDLED_HANDLER
0000030C= 000019B0                 481          DC.L UNHANDLED_HANDLER
00000310= 000019B0                 482          DC.L UNHANDLED_HANDLER
00000314= 000019B0                 483          DC.L UNHANDLED_HANDLER
00000318= 000019B0                 484          DC.L UNHANDLED_HANDLER
0000031C= 000019B0                 485          DC.L UNHANDLED_HANDLER
00000320= 000019B0                 486          DC.L UNHANDLED_HANDLER
00000324= 000019B0                 487          DC.L UNHANDLED_HANDLER
00000328= 000019B0                 488          DC.L UNHANDLED_HANDLER
0000032C= 000019B0                 489          DC.L UNHANDLED_HANDLER
00000330= 000019B0                 490          DC.L UNHANDLED_HANDLER
00000334= 000019B0                 491          DC.L UNHANDLED_HANDLER
00000338= 000019B0                 492          DC.L UNHANDLED_HANDLER
0000033C= 000019B0                 493          DC.L UNHANDLED_HANDLER
00000340= 000019B0                 494          DC.L UNHANDLED_HANDLER
00000344= 000019B0                 495          DC.L UNHANDLED_HANDLER
00000348= 000019B0                 496          DC.L UNHANDLED_HANDLER
0000034C= 000019B0                 497          DC.L UNHANDLED_HANDLER
00000350= 000019B0                 498          DC.L UNHANDLED_HANDLER
00000354= 000019B0                 499          DC.L UNHANDLED_HANDLER
00000358= 000019B0                 500          DC.L UNHANDLED_HANDLER
0000035C= 000019B0                 501          DC.L UNHANDLED_HANDLER
00000360= 000019B0                 502          DC.L UNHANDLED_HANDLER
00000364= 000019B0                 503          DC.L UNHANDLED_HANDLER
00000368= 000019B0                 504          DC.L UNHANDLED_HANDLER
0000036C= 000019B0                 505          DC.L UNHANDLED_HANDLER
00000370= 000019B0                 506          DC.L UNHANDLED_HANDLER
00000374= 000019B0                 507          DC.L UNHANDLED_HANDLER
00000378= 000019B0                 508          DC.L UNHANDLED_HANDLER
0000037C= 000019B0                 509          DC.L UNHANDLED_HANDLER
00000380= 000019B0                 510          DC.L UNHANDLED_HANDLER
00000384= 000019B0                 511          DC.L UNHANDLED_HANDLER
00000388= 000019B0                 512          DC.L UNHANDLED_HANDLER
0000038C= 000019B0                 513          DC.L UNHANDLED_HANDLER
00000390= 000019B0                 514          DC.L UNHANDLED_HANDLER
00000394= 000019B0                 515          DC.L UNHANDLED_HANDLER
00000398= 000019B0                 516          DC.L UNHANDLED_HANDLER
0000039C= 000019B0                 517          DC.L UNHANDLED_HANDLER
000003A0= 000019B0                 518          DC.L UNHANDLED_HANDLER
000003A4= 000019B0                 519          DC.L UNHANDLED_HANDLER
000003A8= 000019B0                 520          DC.L UNHANDLED_HANDLER
000003AC= 000019B0                 521          DC.L UNHANDLED_HANDLER
000003B0= 000019B0                 522          DC.L UNHANDLED_HANDLER
000003B4= 000019B0                 523          DC.L UNHANDLED_HANDLER
000003B8= 000019B0                 524          DC.L UNHANDLED_HANDLER
000003BC= 000019B0                 525          DC.L UNHANDLED_HANDLER
000003C0= 000019B0                 526          DC.L UNHANDLED_HANDLER
000003C4= 000019B0                 527          DC.L UNHANDLED_HANDLER
000003C8= 000019B0                 528          DC.L UNHANDLED_HANDLER
000003CC= 000019B0                 529          DC.L UNHANDLED_HANDLER
000003D0= 000019B0                 530          DC.L UNHANDLED_HANDLER
000003D4= 000019B0                 531          DC.L UNHANDLED_HANDLER
000003D8= 000019B0                 532          DC.L UNHANDLED_HANDLER
000003DC= 000019B0                 533          DC.L UNHANDLED_HANDLER
000003E0= 000019B0                 534          DC.L UNHANDLED_HANDLER
000003E4= 000019B0                 535          DC.L UNHANDLED_HANDLER
000003E8= 000019B0                 536          DC.L UNHANDLED_HANDLER
000003EC= 000019B0                 537          DC.L UNHANDLED_HANDLER
000003F0= 000019B0                 538          DC.L UNHANDLED_HANDLER
000003F4= 000019B0                 539          DC.L UNHANDLED_HANDLER
000003F8= 000019B0                 540          DC.L UNHANDLED_HANDLER
000003FC= 000019B0                 541          DC.L UNHANDLED_HANDLER
00000400                           542  ; start of program  
00000400                           543  START
00000400  13FC 0000 00E00001       544      MOVE.B #0,DISPLAY
00000408                           545  
00000408  2E7C 002E0000            546      MOVE.L #STACK_ADDRESS,A7
0000040E                           547  
0000040E                           548  ; reset the UART in case of warm start
0000040E  13FC 000A 00C00005       549      MOVE.B #$A,DUART_CRA                                ; disable rx & tx
00000416  13FC 000A 00C00015       550      MOVE.B #$A,DUART_CRB                                ; disable rx & tx
0000041E                           551      
0000041E                           552      FOR D1 = #$50 DOWNTO #$10 BY #$10 DO
0000041E  323C 0050                553s     MOVE.W  #$50,D1
00000422  6000 000E                554s     BRA _20000001
00000426                           555s _20000000
00000426  13C1 00C00005            556          MOVE.B D1,DUART_CRA                         ; reset everyting
0000042C  4E71                     557          NOP
0000042E                           558      ENDF
0000042E  0441 0010                559s     SUB.W   #$10,D1
00000432                           560s _20000001
00000432  B27C 0010                561s     CMP.W   #$10,D1
00000436  6CEE                     562s     BGE _20000000
00000438                           563  
00000438                           564      FOR D1 = #$50 DOWNTO #$10 BY #$10 DO
00000438  323C 0050                565s     MOVE.W  #$50,D1
0000043C  6000 000E                566s     BRA _20000003
00000440                           567s _20000002
00000440  13C1 00C00015            568          MOVE.B D1,DUART_CRB                         ; reset everyting
00000446  4E71                     569          NOP
00000448                           570      ENDF
00000448  0441 0010                571s     SUB.W   #$10,D1
0000044C                           572s _20000003
0000044C  B27C 0010                573s     CMP.W   #$10,D1
00000450  6CEE                     574s     BGE _20000002
00000452                           575      
00000452                           576  ;initialise UART
00000452                           577  ;   MOVE.B #$0,DUART_IMR                            ; no interrupts, please
00000452  13FC 00FF 00C0000D       578      MOVE.B #$FF,DUART_CTUR
0000045A  13FC 00FF 00C0000F       579      MOVE.B #$FF,DUART_CTLR
00000462  13FC 0070 00C00009       580      MOVE.B #$70,DUART_ACR
0000046A  13FC 0004 00C0001B       581      MOVE.B #$4,DUART_OPCR                           ; enable counter
00000472                           582  
00000472                           583  ; channel A
00000472  13FC 0013 00C00001       584      MOVE.B #$13,DUART_MRA                           ; no flow control, no parity, 8 data bits
0000047A  13FC 0007 00C00001       585      MOVE.B #$07,DUART_MRA                           ; 1 stop bit
00000482  13FC 00CC 00C00003       586      MOVE.B #$CC,DUART_CSRA                          ; 38400 baud
0000048A  13FC 0005 00C00005       587      MOVE.B #$5,DUART_CRA                            ; enable rx & tx
00000492                           588  
00000492                           589  ; channel B
00000492  13FC 0013 00C00011       590      MOVE.B #$13,DUART_MRB                           ; no flow control, no parity, 8 data bits
0000049A  13FC 0007 00C00011       591      MOVE.B #$07,DUART_MRB                           ; 1 stop bit
000004A2  13FC 00CC 00C00013       592      MOVE.B #$CC,DUART_CSRB                          ; 38400 baud
000004AA  13FC 0005 00C00015       593      MOVE.B #$5,DUART_CRB                            ; enable rx & tx
000004B2  13FC 0040 00C00019       594      MOVE.B #64,DUART_IVR
000004BA  13FC 0008 00C0000B       595      MOVE.B #8,DUART_IMR
000004C2                           596  
000004C2                           597m     PRINT_CHAR #0,D1                                ; some non-printing char to flush out the serial port
000004C2                           598m WAIT_FOR_READY_1                                    ; WAIT UNTIL THE THERE IS SPACE TO SEND
000004C2                 TRUE      599m     IFEQ DEBUG
000004C2  1239 00C00003            600m         MOVE.B DUART_SRA,D1                         ; READ STATUS REGISTER
000004C8  0801 0002                601m         BTST #2,D1                                  ; CHECK FOR SPACE TO SEND
000004CC  67F4                     602m         BEQ WAIT_FOR_READY_1                        ; NO SPACE, CHECK AGAIN
000004CE  13FC 0000 00C00007       603m         MOVE.B #0,DUART_TXA                         ; SEND THE NEXT CHARACTER
000004D6                           604m     ENDC
000004D6                           605m 
000004D6                 FALSE     606m     IFNE DEBUG
000004D6                           607m     ENDC
000004D6                           608m 
000004D6                           609m     ENDM
000004D6                           610m     PRINT_CHAR #0,D1
000004D6                           611m WAIT_FOR_READY_2                                    ; WAIT UNTIL THE THERE IS SPACE TO SEND
000004D6                 TRUE      612m     IFEQ DEBUG
000004D6  1239 00C00003            613m         MOVE.B DUART_SRA,D1                         ; READ STATUS REGISTER
000004DC  0801 0002                614m         BTST #2,D1                                  ; CHECK FOR SPACE TO SEND
000004E0  67F4                     615m         BEQ WAIT_FOR_READY_2                        ; NO SPACE, CHECK AGAIN
000004E2  13FC 0000 00C00007       616m         MOVE.B #0,DUART_TXA                         ; SEND THE NEXT CHARACTER
000004EA                           617m     ENDC
000004EA                           618m 
000004EA                 FALSE     619m     IFNE DEBUG
000004EA                           620m     ENDC
000004EA                           621m 
000004EA                           622m     ENDM
000004EA                           623m     PRINT_CHAR #0,D1
000004EA                           624m WAIT_FOR_READY_3                                    ; WAIT UNTIL THE THERE IS SPACE TO SEND
000004EA                 TRUE      625m     IFEQ DEBUG
000004EA  1239 00C00003            626m         MOVE.B DUART_SRA,D1                         ; READ STATUS REGISTER
000004F0  0801 0002                627m         BTST #2,D1                                  ; CHECK FOR SPACE TO SEND
000004F4  67F4                     628m         BEQ WAIT_FOR_READY_3                        ; NO SPACE, CHECK AGAIN
000004F6  13FC 0000 00C00007       629m         MOVE.B #0,DUART_TXA                         ; SEND THE NEXT CHARACTER
000004FE                           630m     ENDC
000004FE                           631m 
000004FE                 FALSE     632m     IFNE DEBUG
000004FE                           633m     ENDC
000004FE                           634m 
000004FE                           635m     ENDM
000004FE                           636  
000004FE  13FC 0001 00E00001       637      MOVE.B #1,DISPLAY
00000506                           638      
00000506                           639m     PRINT_CRLF D1,A0
00000506  41FA 173C                640m     LEA CRLF(PC),A0
0000050A                           641mm     PRINT_STR A0,D1
0000050A                           642mm LOOP_5
0000050A  0C10 0000                643mm     CMP.B #NULL,(A0)                                ; 0 -> DONE
0000050E  6700 0016                644mm     BEQ EXIT_5
00000512                           645mmm     PRINT_CHAR (A0)+,D1
00000512                           646mmm WAIT_FOR_READY_6                                    ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000512                 TRUE      647mmm     IFEQ DEBUG
00000512  1239 00C00003            648mmm         MOVE.B DUART_SRA,D1                         ; READ STATUS REGISTER
00000518  0801 0002                649mmm         BTST #2,D1                                  ; CHECK FOR SPACE TO SEND
0000051C  67F4                     650mmm         BEQ WAIT_FOR_READY_6                        ; NO SPACE, CHECK AGAIN
0000051E  13D8 00C00007            651mmm         MOVE.B (A0)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00000524                           652mmm     ENDC
00000524                           653mmm 
00000524                 FALSE     654mmm     IFNE DEBUG
00000524                           655mmm     ENDC
00000524                           656mmm 
00000524                           657mmm     ENDM
00000524  60E4                     658mm     BRA LOOP_5
00000526                           659mm EXIT_5
00000526                           660mm     ENDM
00000526                           661m     ENDM
00000526  41FA 17B4                662      LEA VERSION(PC),A0
0000052A                           663m     PRINT_STR A0,D3
0000052A                           664m LOOP_7
0000052A  0C10 0000                665m     CMP.B #NULL,(A0)                                ; 0 -> DONE
0000052E  6700 0016                666m     BEQ EXIT_7
00000532                           667mm     PRINT_CHAR (A0)+,D3
00000532                           668mm WAIT_FOR_READY_8                                    ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000532                 TRUE      669mm     IFEQ DEBUG
00000532  1639 00C00003            670mm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
00000538  0803 0002                671mm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
0000053C  67F4                     672mm         BEQ WAIT_FOR_READY_8                        ; NO SPACE, CHECK AGAIN
0000053E  13D8 00C00007            673mm         MOVE.B (A0)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00000544                           674mm     ENDC
00000544                           675mm 
00000544                 FALSE     676mm     IFNE DEBUG
00000544                           677mm     ENDC
00000544                           678mm 
00000544                           679mm     ENDM
00000544  60E4                     680m     BRA LOOP_7
00000546                           681m EXIT_7
00000546                           682m     ENDM
00000546                           683  
00000546  41F9 00001CFA            684      LEA END,A0
0000054C  2008                     685      MOVE.L A0,D0
0000054E                           686m     PRINT_REG D0,D1,D2,D3,A0
0000054E  41FA 16FA                687m     LEA OX(PC),A0
00000552                           688mm     PRINT_STR A0,D1
00000552                           689mm LOOP_10
00000552  0C10 0000                690mm     CMP.B #NULL,(A0)                                ; 0 -> DONE
00000556  6700 0016                691mm     BEQ EXIT_10
0000055A                           692mmm     PRINT_CHAR (A0)+,D1
0000055A                           693mmm WAIT_FOR_READY_11                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
0000055A                 TRUE      694mmm     IFEQ DEBUG
0000055A  1239 00C00003            695mmm         MOVE.B DUART_SRA,D1                         ; READ STATUS REGISTER
00000560  0801 0002                696mmm         BTST #2,D1                                  ; CHECK FOR SPACE TO SEND
00000564  67F4                     697mmm         BEQ WAIT_FOR_READY_11                       ; NO SPACE, CHECK AGAIN
00000566  13D8 00C00007            698mmm         MOVE.B (A0)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
0000056C                           699mmm     ENDC
0000056C                           700mmm 
0000056C                 FALSE     701mmm     IFNE DEBUG
0000056C                           702mmm     ENDC
0000056C                           703mmm 
0000056C                           704mmm     ENDM
0000056C  60E4                     705mm     BRA LOOP_10
0000056E                           706mm EXIT_10
0000056E                           707mm     ENDM
0000056E  7607                     708m     MOVE.L #7,D3                                    ; LOOP ROUND ALL 8 HEX CHARACTERS OF 4 BITS EACH
00000570                           709m LOOP_9
00000570                           710mm     BIN2HEX D0,D2,A0
00000570  41FA 1654                711mm     LEA BIN2HEX_LUT(PC),A0                          ; LOAD THE LOOKUP TABLE
00000574  E998                     712mm     ROL.L #4,D0                                     ; SHIFT THE TOP 4 BITS DOWN TO BOTTOM OF THE REGISTER THE AND MASK OFF EVERYTHING ELSE
00000576  1400                     713mm     MOVE.B D0,D2
00000578  0282 0000000F            714mm     ANDI.L #$F,D2
0000057E  1430 2000                715mm     MOVE.B 0(A0,D2),D2                              ; USE THAT AS AN INDEX INTO THE LUT
00000582                           716mm     ENDM
00000582                           717mm     PRINT_CHAR D2,D1
00000582                           718mm WAIT_FOR_READY_13                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000582                 TRUE      719mm     IFEQ DEBUG
00000582  1239 00C00003            720mm         MOVE.B DUART_SRA,D1                         ; READ STATUS REGISTER
00000588  0801 0002                721mm         BTST #2,D1                                  ; CHECK FOR SPACE TO SEND
0000058C  67F4                     722mm         BEQ WAIT_FOR_READY_13                       ; NO SPACE, CHECK AGAIN
0000058E  13C2 00C00007            723mm         MOVE.B D2,DUART_TXA                         ; SEND THE NEXT CHARACTER
00000594                           724mm     ENDC
00000594                           725mm 
00000594                 FALSE     726mm     IFNE DEBUG
00000594                           727mm     ENDC
00000594                           728mm 
00000594                           729mm     ENDM
00000594  57CB FFDA                730m     DBEQ D3,LOOP_9
00000598                           731m     ENDM
00000598                           732m     PRINT_CRLF D1,A0
00000598  41FA 16AA                733m     LEA CRLF(PC),A0
0000059C                           734mm     PRINT_STR A0,D1
0000059C                           735mm LOOP_15
0000059C  0C10 0000                736mm     CMP.B #NULL,(A0)                                ; 0 -> DONE
000005A0  6700 0016                737mm     BEQ EXIT_15
000005A4                           738mmm     PRINT_CHAR (A0)+,D1
000005A4                           739mmm WAIT_FOR_READY_16                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
000005A4                 TRUE      740mmm     IFEQ DEBUG
000005A4  1239 00C00003            741mmm         MOVE.B DUART_SRA,D1                         ; READ STATUS REGISTER
000005AA  0801 0002                742mmm         BTST #2,D1                                  ; CHECK FOR SPACE TO SEND
000005AE  67F4                     743mmm         BEQ WAIT_FOR_READY_16                       ; NO SPACE, CHECK AGAIN
000005B0  13D8 00C00007            744mmm         MOVE.B (A0)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
000005B6                           745mmm     ENDC
000005B6                           746mmm 
000005B6                 FALSE     747mmm     IFNE DEBUG
000005B6                           748mmm     ENDC
000005B6                           749mmm 
000005B6                           750mmm     ENDM
000005B6  60E4                     751mm     BRA LOOP_15
000005B8                           752mm EXIT_15
000005B8                           753mm     ENDM
000005B8                           754m     ENDM
000005B8                           755  
000005B8  41FA 1484                756      LEA HELPPROMPT(PC),A0
000005BC                           757m     PRINT_STR A0,D3
000005BC                           758m LOOP_17
000005BC  0C10 0000                759m     CMP.B #NULL,(A0)                                ; 0 -> DONE
000005C0  6700 0016                760m     BEQ EXIT_17
000005C4                           761mm     PRINT_CHAR (A0)+,D3
000005C4                           762mm WAIT_FOR_READY_18                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
000005C4                 TRUE      763mm     IFEQ DEBUG
000005C4  1639 00C00003            764mm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
000005CA  0803 0002                765mm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
000005CE  67F4                     766mm         BEQ WAIT_FOR_READY_18                       ; NO SPACE, CHECK AGAIN
000005D0  13D8 00C00007            767mm         MOVE.B (A0)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
000005D6                           768mm     ENDC
000005D6                           769mm 
000005D6                 FALSE     770mm     IFNE DEBUG
000005D6                           771mm     ENDC
000005D6                           772mm 
000005D6                           773mm     ENDM
000005D6  60E4                     774m     BRA LOOP_17
000005D8                           775m EXIT_17
000005D8                           776m     ENDM
000005D8                           777  
000005D8                           778m     PRINT_CRLF D3,A0
000005D8  41FA 166A                779m     LEA CRLF(PC),A0
000005DC                           780mm     PRINT_STR A0,D3
000005DC                           781mm LOOP_20
000005DC  0C10 0000                782mm     CMP.B #NULL,(A0)                                ; 0 -> DONE
000005E0  6700 0016                783mm     BEQ EXIT_20
000005E4                           784mmm     PRINT_CHAR (A0)+,D3
000005E4                           785mmm WAIT_FOR_READY_21                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
000005E4                 TRUE      786mmm     IFEQ DEBUG
000005E4  1639 00C00003            787mmm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
000005EA  0803 0002                788mmm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
000005EE  67F4                     789mmm         BEQ WAIT_FOR_READY_21                       ; NO SPACE, CHECK AGAIN
000005F0  13D8 00C00007            790mmm         MOVE.B (A0)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
000005F6                           791mmm     ENDC
000005F6                           792mmm 
000005F6                 FALSE     793mmm     IFNE DEBUG
000005F6                           794mmm     ENDC
000005F6                           795mmm 
000005F6                           796mmm     ENDM
000005F6  60E4                     797mm     BRA LOOP_20
000005F8                           798mm EXIT_20
000005F8                           799mm     ENDM
000005F8                           800m     ENDM
000005F8                           801  
000005F8  7E00                     802      MOVE.L #0,D7                                        ; address accumulator
000005FA                           803  
000005FA  13FC 0002 00E00001       804      MOVE.B #2,DISPLAY
00000602                           805      
00000602                           806      ;AND.W #$F8FF,SR
00000602                           807  MAIN_LOOP
00000602  41FA 1643                808      LEA PROMPT(PC),A0
00000606                           809m     PRINT_STR A0,D3
00000606                           810m LOOP_22
00000606  0C10 0000                811m     CMP.B #NULL,(A0)                                ; 0 -> DONE
0000060A  6700 0016                812m     BEQ EXIT_22
0000060E                           813mm     PRINT_CHAR (A0)+,D3
0000060E                           814mm WAIT_FOR_READY_23                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
0000060E                 TRUE      815mm     IFEQ DEBUG
0000060E  1639 00C00003            816mm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
00000614  0803 0002                817mm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
00000618  67F4                     818mm         BEQ WAIT_FOR_READY_23                       ; NO SPACE, CHECK AGAIN
0000061A  13D8 00C00007            819mm         MOVE.B (A0)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00000620                           820mm     ENDC
00000620                           821mm 
00000620                 FALSE     822mm     IFNE DEBUG
00000620                           823mm     ENDC
00000620                           824mm 
00000620                           825mm     ENDM
00000620  60E4                     826m     BRA LOOP_22
00000622                           827m EXIT_22
00000622                           828m     ENDM
00000622                           829  
00000622                           830  GET_INPUT
00000622                           831m     WAIT_CHAR D2,D3                                 ; fetch character from serial port -> D2
00000622                           832m WAIT_FOR_READY_24                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000622                 TRUE      833m     IFEQ DEBUG
00000622  1639 00C00003            834m         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
00000628  0803 0000                835m         BTST #0,D3                                  ; CHECK FOR CHARACTER
0000062C  67F4                     836m         BEQ WAIT_FOR_READY_24                       ; NOTHING, CHECK AGAIN
0000062E                           837m     ENDC
0000062E                           838m 
0000062E                           839mm     READ_CHAR D2
0000062E                 TRUE      840mm     IFEQ DEBUG
0000062E  1439 00C00007            841mm         MOVE.B DUART_RXA,D2                         ; GOT A CHARACTER, READ IT
00000634                           842mm     ENDC
00000634                 FALSE     843mm     IFNE DEBUG
00000634                           844mm     ENDC
00000634                           845mm 
00000634  B43C 001B                846mm     CMP.B #$1B,D2                                   ; CHECK FOR ESCAPE AND GO TO START
00000638  6700 FDC6                847mm     BEQ START
0000063C                           848mm     ENDM
0000063C                           849m 
0000063C                 TRUE      850m     IFEQ DEBUG
0000063C                           851mm         PRINT_CHAR D2,D3                            ; ECHO IT BACK
0000063C                           852mm WAIT_FOR_READY_26                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
0000063C                 TRUE      853mm     IFEQ DEBUG
0000063C  1639 00C00003            854mm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
00000642  0803 0002                855mm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
00000646  67F4                     856mm         BEQ WAIT_FOR_READY_26                       ; NO SPACE, CHECK AGAIN
00000648  13C2 00C00007            857mm         MOVE.B D2,DUART_TXA                         ; SEND THE NEXT CHARACTER
0000064E                           858mm     ENDC
0000064E                           859mm 
0000064E                 FALSE     860mm     IFNE DEBUG
0000064E                           861mm     ENDC
0000064E                           862mm 
0000064E                           863mm     ENDM
0000064E                           864m     ENDC
0000064E                           865m     ENDM
0000064E                           866  
0000064E                           867      IF.B D2 <GE> #'0' AND.B D2 <LE> #'9' THEN
0000064E  B43C 0030                868s     CMP.B   #'0',D2
00000652  6D00 000E                869s     BLT _00000000
00000656  B43C 0039                870s     CMP.B   #'9',D2
0000065A  6E00 0006                871s     BGT _00000000
0000065E  6000 11CE                872          BRA HEX_DIGIT
00000662                           873      ENDI
00000662                           874s _00000000
00000662                           875      IF.B D2 <GE> #'A' AND.B D2 <LE> #'F' THEN
00000662  B43C 0041                876s     CMP.B   #'A',D2
00000666  6D00 000E                877s     BLT _00000001
0000066A  B43C 0046                878s     CMP.B   #'F',D2
0000066E  6E00 0006                879s     BGT _00000001
00000672  6000 11BA                880          BRA HEX_DIGIT
00000676                           881      ENDI
00000676                           882s _00000001
00000676                           883  
00000676  B43C 0077                884      CMP.B #'w',D2
0000067A  6700 01A2                885      BEQ W
0000067E                           886  
0000067E  B43C 006C                887      CMP.B #'l',D2
00000682  6700 0A38                888      BEQ L 
00000686                           889  
00000686  B43C 0070                890      CMP.B #'p',D2
0000068A  6700 0E28                891      BEQ P
0000068E                           892  
0000068E  B43C 006D                893      CMP.B #'m',D2
00000692  6700 0FDE                894      BEQ M
00000696                           895  
00000696                           896m     PRINT_CRLF D3,A0
00000696  41FA 15AC                897m     LEA CRLF(PC),A0
0000069A                           898mm     PRINT_STR A0,D3
0000069A                           899mm LOOP_28
0000069A  0C10 0000                900mm     CMP.B #NULL,(A0)                                ; 0 -> DONE
0000069E  6700 0016                901mm     BEQ EXIT_28
000006A2                           902mmm     PRINT_CHAR (A0)+,D3
000006A2                           903mmm WAIT_FOR_READY_29                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
000006A2                 TRUE      904mmm     IFEQ DEBUG
000006A2  1639 00C00003            905mmm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
000006A8  0803 0002                906mmm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
000006AC  67F4                     907mmm         BEQ WAIT_FOR_READY_29                       ; NO SPACE, CHECK AGAIN
000006AE  13D8 00C00007            908mmm         MOVE.B (A0)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
000006B4                           909mmm     ENDC
000006B4                           910mmm 
000006B4                 FALSE     911mmm     IFNE DEBUG
000006B4                           912mmm     ENDC
000006B4                           913mmm 
000006B4                           914mmm     ENDM
000006B4  60E4                     915mm     BRA LOOP_28
000006B6                           916mm EXIT_28
000006B6                           917mm     ENDM
000006B6                           918m     ENDM
000006B6                           919   
000006B6  B43C 003F                920      CMP.B #'?',D2
000006BA  6700 005E                921      BEQ H
000006BE                           922   
000006BE  B43C 0076                923      CMP.B #'v',D2
000006C2  6700 005E                924      BEQ V
000006C6                           925      
000006C6  B43C 0072                926      CMP.B #'r',D2
000006CA  6700 007A                927      BEQ R
000006CE                           928  
000006CE  B43C 0073                929      CMP.B #'s',D2
000006D2  6700 01C6                930      BEQ S
000006D6                           931  
000006D6  B43C 0067                932      CMP.B #'g',D2
000006DA  6700 08EA                933      BEQ G   
000006DE                           934  
000006DE  B43C 007A                935      CMP.B #'z',D2
000006E2  6700 08E8                936      BEQ Z   
000006E6                           937  
000006E6  B43C 0078                938      CMP.B #'x',D2
000006EA  6700 101E                939      BEQ X
000006EE                           940  
000006EE  B43C 0069                941      CMP.B #'i',D2
000006F2  6700 1132                942      BEQ I
000006F6                           943  
000006F6  41FA 146C                944      LEA HUH(PC),A0
000006FA                           945m     PRINT_STR A0,D3
000006FA                           946m LOOP_30
000006FA  0C10 0000                947m     CMP.B #NULL,(A0)                                ; 0 -> DONE
000006FE  6700 0016                948m     BEQ EXIT_30
00000702                           949mm     PRINT_CHAR (A0)+,D3
00000702                           950mm WAIT_FOR_READY_31                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000702                 TRUE      951mm     IFEQ DEBUG
00000702  1639 00C00003            952mm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
00000708  0803 0002                953mm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
0000070C  67F4                     954mm         BEQ WAIT_FOR_READY_31                       ; NO SPACE, CHECK AGAIN
0000070E  13D8 00C00007            955mm         MOVE.B (A0)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00000714                           956mm     ENDC
00000714                           957mm 
00000714                 FALSE     958mm     IFNE DEBUG
00000714                           959mm     ENDC
00000714                           960mm 
00000714                           961mm     ENDM
00000714  60E4                     962m     BRA LOOP_30
00000716                           963m EXIT_30
00000716                           964m     ENDM
00000716                           965  
00000716  6000 FEEA                966      BRA MAIN_LOOP
0000071A                           967  
0000071A                           968  ; commands
0000071A                           969  H
0000071A  41FA 1335                970      LEA HELP(PC),A0
0000071E  6000 0006                971      BRA PRINTSTR
00000722                           972  
00000722                           973  V
00000722  41FA 15B8                974      LEA VERSION(PC),A0
00000726                           975  PRINTSTR
00000726                           976m     PRINT_STR A0,D3    
00000726                           977m LOOP_32
00000726  0C10 0000                978m     CMP.B #NULL,(A0)                                ; 0 -> DONE
0000072A  6700 0016                979m     BEQ EXIT_32
0000072E                           980mm     PRINT_CHAR (A0)+,D3
0000072E                           981mm WAIT_FOR_READY_33                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
0000072E                 TRUE      982mm     IFEQ DEBUG
0000072E  1639 00C00003            983mm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
00000734  0803 0002                984mm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
00000738  67F4                     985mm         BEQ WAIT_FOR_READY_33                       ; NO SPACE, CHECK AGAIN
0000073A  13D8 00C00007            986mm         MOVE.B (A0)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00000740                           987mm     ENDC
00000740                           988mm 
00000740                 FALSE     989mm     IFNE DEBUG
00000740                           990mm     ENDC
00000740                           991mm 
00000740                           992mm     ENDM
00000740  60E4                     993m     BRA LOOP_32
00000742                           994m EXIT_32
00000742                           995m     ENDM
00000742  6000 FEBE                996      BRA MAIN_LOOP
00000746                           997  
00000746                           998  R
00000746  2047                     999      MOVE.L D7,A0                                    ; address accumulator -> address register
00000748  7E00                    1000      MOVE.L #0,D7                                    ;clear the now used address accumulator
0000074A  2410                    1001      MOVE.L (A0),D2                                  ; read the memory and print it
0000074C                          1002m     PRINT_REG D2,D3,D4,D5,A0
0000074C  41FA 14FC               1003m     LEA OX(PC),A0
00000750                          1004mm     PRINT_STR A0,D3
00000750                          1005mm LOOP_35
00000750  0C10 0000               1006mm     CMP.B #NULL,(A0)                                ; 0 -> DONE
00000754  6700 0016               1007mm     BEQ EXIT_35
00000758                          1008mmm     PRINT_CHAR (A0)+,D3
00000758                          1009mmm WAIT_FOR_READY_36                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000758                 TRUE     1010mmm     IFEQ DEBUG
00000758  1639 00C00003           1011mmm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
0000075E  0803 0002               1012mmm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
00000762  67F4                    1013mmm         BEQ WAIT_FOR_READY_36                       ; NO SPACE, CHECK AGAIN
00000764  13D8 00C00007           1014mmm         MOVE.B (A0)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
0000076A                          1015mmm     ENDC
0000076A                          1016mmm 
0000076A                 FALSE    1017mmm     IFNE DEBUG
0000076A                          1018mmm     ENDC
0000076A                          1019mmm 
0000076A                          1020mmm     ENDM
0000076A  60E4                    1021mm     BRA LOOP_35
0000076C                          1022mm EXIT_35
0000076C                          1023mm     ENDM
0000076C  7A07                    1024m     MOVE.L #7,D5                                    ; LOOP ROUND ALL 8 HEX CHARACTERS OF 4 BITS EACH
0000076E                          1025m LOOP_34
0000076E                          1026mm     BIN2HEX D2,D4,A0
0000076E  41FA 1456               1027mm     LEA BIN2HEX_LUT(PC),A0                          ; LOAD THE LOOKUP TABLE
00000772  E99A                    1028mm     ROL.L #4,D2                                     ; SHIFT THE TOP 4 BITS DOWN TO BOTTOM OF THE REGISTER THE AND MASK OFF EVERYTHING ELSE
00000774  1802                    1029mm     MOVE.B D2,D4
00000776  0284 0000000F           1030mm     ANDI.L #$F,D4
0000077C  1830 4000               1031mm     MOVE.B 0(A0,D4),D4                              ; USE THAT AS AN INDEX INTO THE LUT
00000780                          1032mm     ENDM
00000780                          1033mm     PRINT_CHAR D4,D3
00000780                          1034mm WAIT_FOR_READY_38                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000780                 TRUE     1035mm     IFEQ DEBUG
00000780  1639 00C00003           1036mm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
00000786  0803 0002               1037mm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
0000078A  67F4                    1038mm         BEQ WAIT_FOR_READY_38                       ; NO SPACE, CHECK AGAIN
0000078C  13C4 00C00007           1039mm         MOVE.B D4,DUART_TXA                         ; SEND THE NEXT CHARACTER
00000792                          1040mm     ENDC
00000792                          1041mm 
00000792                 FALSE    1042mm     IFNE DEBUG
00000792                          1043mm     ENDC
00000792                          1044mm 
00000792                          1045mm     ENDM
00000792  57CD FFDA               1046m     DBEQ D5,LOOP_34
00000796                          1047m     ENDM
00000796                          1048      
00000796                          1049m     PRINT_CHAR #32,D3
00000796                          1050m WAIT_FOR_READY_39                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000796                 TRUE     1051m     IFEQ DEBUG
00000796  1639 00C00003           1052m         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
0000079C  0803 0002               1053m         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
000007A0  67F4                    1054m         BEQ WAIT_FOR_READY_39                       ; NO SPACE, CHECK AGAIN
000007A2  13FC 0020 00C00007      1055m         MOVE.B #32,DUART_TXA                            ; SEND THE NEXT CHARACTER
000007AA                          1056m     ENDC
000007AA                          1057m 
000007AA                 FALSE    1058m     IFNE DEBUG
000007AA                          1059m     ENDC
000007AA                          1060m 
000007AA                          1061m     ENDM
000007AA                          1062  
000007AA  E19A                    1063      ROL.L #8,D2
000007AC                          1064m     PRINT_CHAR D2,D3
000007AC                          1065m WAIT_FOR_READY_40                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
000007AC                 TRUE     1066m     IFEQ DEBUG
000007AC  1639 00C00003           1067m         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
000007B2  0803 0002               1068m         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
000007B6  67F4                    1069m         BEQ WAIT_FOR_READY_40                       ; NO SPACE, CHECK AGAIN
000007B8  13C2 00C00007           1070m         MOVE.B D2,DUART_TXA                         ; SEND THE NEXT CHARACTER
000007BE                          1071m     ENDC
000007BE                          1072m 
000007BE                 FALSE    1073m     IFNE DEBUG
000007BE                          1074m     ENDC
000007BE                          1075m 
000007BE                          1076m     ENDM
000007BE  E19A                    1077      ROL.L #8,D2
000007C0                          1078m     PRINT_CHAR D2,D3
000007C0                          1079m WAIT_FOR_READY_41                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
000007C0                 TRUE     1080m     IFEQ DEBUG
000007C0  1639 00C00003           1081m         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
000007C6  0803 0002               1082m         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
000007CA  67F4                    1083m         BEQ WAIT_FOR_READY_41                       ; NO SPACE, CHECK AGAIN
000007CC  13C2 00C00007           1084m         MOVE.B D2,DUART_TXA                         ; SEND THE NEXT CHARACTER
000007D2                          1085m     ENDC
000007D2                          1086m 
000007D2                 FALSE    1087m     IFNE DEBUG
000007D2                          1088m     ENDC
000007D2                          1089m 
000007D2                          1090m     ENDM
000007D2  E19A                    1091      ROL.L #8,D2
000007D4                          1092m     PRINT_CHAR D2,D3
000007D4                          1093m WAIT_FOR_READY_42                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
000007D4                 TRUE     1094m     IFEQ DEBUG
000007D4  1639 00C00003           1095m         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
000007DA  0803 0002               1096m         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
000007DE  67F4                    1097m         BEQ WAIT_FOR_READY_42                       ; NO SPACE, CHECK AGAIN
000007E0  13C2 00C00007           1098m         MOVE.B D2,DUART_TXA                         ; SEND THE NEXT CHARACTER
000007E6                          1099m     ENDC
000007E6                          1100m 
000007E6                 FALSE    1101m     IFNE DEBUG
000007E6                          1102m     ENDC
000007E6                          1103m 
000007E6                          1104m     ENDM
000007E6  E19A                    1105      ROL.L #8,D2
000007E8                          1106m     PRINT_CHAR D2,D3
000007E8                          1107m WAIT_FOR_READY_43                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
000007E8                 TRUE     1108m     IFEQ DEBUG
000007E8  1639 00C00003           1109m         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
000007EE  0803 0002               1110m         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
000007F2  67F4                    1111m         BEQ WAIT_FOR_READY_43                       ; NO SPACE, CHECK AGAIN
000007F4  13C2 00C00007           1112m         MOVE.B D2,DUART_TXA                         ; SEND THE NEXT CHARACTER
000007FA                          1113m     ENDC
000007FA                          1114m 
000007FA                 FALSE    1115m     IFNE DEBUG
000007FA                          1116m     ENDC
000007FA                          1117m 
000007FA                          1118m     ENDM
000007FA                          1119  
000007FA                          1120m     PRINT_CRLF D3,A0
000007FA  41FA 1448               1121m     LEA CRLF(PC),A0
000007FE                          1122mm     PRINT_STR A0,D3
000007FE                          1123mm LOOP_45
000007FE  0C10 0000               1124mm     CMP.B #NULL,(A0)                                ; 0 -> DONE
00000802  6700 0016               1125mm     BEQ EXIT_45
00000806                          1126mmm     PRINT_CHAR (A0)+,D3
00000806                          1127mmm WAIT_FOR_READY_46                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000806                 TRUE     1128mmm     IFEQ DEBUG
00000806  1639 00C00003           1129mmm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
0000080C  0803 0002               1130mmm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
00000810  67F4                    1131mmm         BEQ WAIT_FOR_READY_46                       ; NO SPACE, CHECK AGAIN
00000812  13D8 00C00007           1132mmm         MOVE.B (A0)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00000818                          1133mmm     ENDC
00000818                          1134mmm 
00000818                 FALSE    1135mmm     IFNE DEBUG
00000818                          1136mmm     ENDC
00000818                          1137mmm 
00000818                          1138mmm     ENDM
00000818  60E4                    1139mm     BRA LOOP_45
0000081A                          1140mm EXIT_45
0000081A                          1141mm     ENDM
0000081A                          1142m     ENDM
0000081A                          1143      
0000081A  6000 FDE6               1144      BRA MAIN_LOOP
0000081E                          1145  
0000081E                          1146  W
0000081E                          1147      FOR D6 = #0 TO #7 DO                                ; read 4 bytes
0000081E  3C3C 0000               1148s     MOVE.W  #0,D6
00000822  6000 0046               1149s     BRA _20000005
00000826                          1150s _20000004
00000826  E98D                    1151          LSL.L #4,D5                                     ; make what we have so far more significant
00000828                          1152m         WAIT_CHAR D2,D3                                 ; next character -> D2
00000828                          1153m WAIT_FOR_READY_47                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000828                 TRUE     1154m     IFEQ DEBUG
00000828  1639 00C00003           1155m         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
0000082E  0803 0000               1156m         BTST #0,D3                                  ; CHECK FOR CHARACTER
00000832  67F4                    1157m         BEQ WAIT_FOR_READY_47                       ; NOTHING, CHECK AGAIN
00000834                          1158m     ENDC
00000834                          1159m 
00000834                          1160mm     READ_CHAR D2
00000834                 TRUE     1161mm     IFEQ DEBUG
00000834  1439 00C00007           1162mm         MOVE.B DUART_RXA,D2                         ; GOT A CHARACTER, READ IT
0000083A                          1163mm     ENDC
0000083A                 FALSE    1164mm     IFNE DEBUG
0000083A                          1165mm     ENDC
0000083A                          1166mm 
0000083A  B43C 001B               1167mm     CMP.B #$1B,D2                                   ; CHECK FOR ESCAPE AND GO TO START
0000083E  6700 FBC0               1168mm     BEQ START
00000842                          1169mm     ENDM
00000842                          1170m 
00000842                 TRUE     1171m     IFEQ DEBUG
00000842                          1172mm         PRINT_CHAR D2,D3                            ; ECHO IT BACK
00000842                          1173mm WAIT_FOR_READY_49                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000842                 TRUE     1174mm     IFEQ DEBUG
00000842  1639 00C00003           1175mm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
00000848  0803 0002               1176mm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
0000084C  67F4                    1177mm         BEQ WAIT_FOR_READY_49                       ; NO SPACE, CHECK AGAIN
0000084E  13C2 00C00007           1178mm         MOVE.B D2,DUART_TXA                         ; SEND THE NEXT CHARACTER
00000854                          1179mm     ENDC
00000854                          1180mm 
00000854                 FALSE    1181mm     IFNE DEBUG
00000854                          1182mm     ENDC
00000854                          1183mm 
00000854                          1184mm     ENDM
00000854                          1185m     ENDC
00000854                          1186m     ENDM
00000854                          1187m         HEX2BIN D2,D2,A0                                ; convert to binary -> D2
00000854  41FA 1380               1188m     LEA HEX2BIN_LUT(PC),A0                          ; LOAD THE LOOKUP TABLE
00000858  0402 0030               1189m     SUB.B #'0',D2                                   ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
0000085C  C4BC 000000FF           1190m     AND.L #$FF,D2                                   ; IGNORE THE TOP 3 BYTES
00000862  1430 2000               1191m     MOVE.B 0(A0,D2),D2                              ; USE THAT AS AN INDEX INTO THE LUT   
00000866                          1192m     ENDM
00000866  8A02                    1193          OR.B D2,D5
00000868                          1194      ENDF
00000868  5246                    1195s     ADD.W   #1,D6
0000086A                          1196s _20000005
0000086A  BC7C 0007               1197s     CMP.W   #7,D6
0000086E  6FB6                    1198s     BLE _20000004
00000870                          1199  
00000870                          1200m     PRINT_CRLF D3,A0
00000870  41FA 13D2               1201m     LEA CRLF(PC),A0
00000874                          1202mm     PRINT_STR A0,D3
00000874                          1203mm LOOP_52
00000874  0C10 0000               1204mm     CMP.B #NULL,(A0)                                ; 0 -> DONE
00000878  6700 0016               1205mm     BEQ EXIT_52
0000087C                          1206mmm     PRINT_CHAR (A0)+,D3
0000087C                          1207mmm WAIT_FOR_READY_53                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
0000087C                 TRUE     1208mmm     IFEQ DEBUG
0000087C  1639 00C00003           1209mmm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
00000882  0803 0002               1210mmm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
00000886  67F4                    1211mmm         BEQ WAIT_FOR_READY_53                       ; NO SPACE, CHECK AGAIN
00000888  13D8 00C00007           1212mmm         MOVE.B (A0)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
0000088E                          1213mmm     ENDC
0000088E                          1214mmm 
0000088E                 FALSE    1215mmm     IFNE DEBUG
0000088E                          1216mmm     ENDC
0000088E                          1217mmm 
0000088E                          1218mmm     ENDM
0000088E  60E4                    1219mm     BRA LOOP_52
00000890                          1220mm EXIT_52
00000890                          1221mm     ENDM
00000890                          1222m     ENDM
00000890                          1223  
00000890  2047                    1224      MOVE.L D7,A0                                    ; address accumulator -> address register
00000892  7E00                    1225      MOVE.L #0,D7                                    ; clear the now used address accumulator
00000894                          1226  
00000894  2085                    1227      MOVE.L D5,(A0)                                  ; write the data
00000896                          1228  
00000896  6000 FD6A               1229      BRA MAIN_LOOP
0000089A                          1230  
0000089A                          1231  ; register map for S
0000089A                          1232  ; A0 - start address
0000089A                          1233  ; A1 - offset
0000089A                          1234  ; A2 - next address to write
0000089A                          1235  ; A3 - next location (jmp)
0000089A                          1236  ; A4 - Working Address Register
0000089A                          1237  ; D0 - record count
0000089A                          1238  ; D1 - 'S', record type, data byte, done flag (0x00000000 = continue, 0xFFFFFFFF = done)
0000089A                          1239  ; D2 - checksum
0000089A                          1240  ; D3 - data byte count
0000089A                          1241  ; D4 - read address, moved into A2
0000089A                          1242  ; D5 - temp
0000089A                          1243  ; D6 - temp
0000089A                          1244  ; D7 - temp
0000089A                          1245  S
0000089A  2078 0000               1246      MOVE.L 0,A0                                     ; start address -> A0
0000089E  2247                    1247      MOVE.L D7,A1                                    ; grab the address accumulator (offset) into A1
000008A0                          1248      
000008A0  7000                    1249      MOVE.L #0,D0                                    ; count of records read -> D0
000008A2                          1250          
000008A2                          1251  WAIT_FOR_SRECORD                                    ; wait for the start of a record, indicated by 'S'
000008A2                          1252m     DOWNLOAD D1
000008A2                          1253m WAIT_FOR_READY_54                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
000008A2                          1254m 
000008A2  1239 00C00003           1255m     MOVE.B DUART_SRA,D1                             ; CHECK FOR COMMAND
000008A8  0801 0000               1256m     BTST #0,D1                                      ; CHECK FOR CHARACTER
000008AC  6700 0010               1257m     BEQ CONTINUE_54                                 ; NOTHING, CONTINUE
000008B0                          1258m 
000008B0                          1259mm     READ_CHAR D1                                    ; WE're not going to do anything with it, just check for escape
000008B0                 TRUE     1260mm     IFEQ DEBUG
000008B0  1239 00C00007           1261mm         MOVE.B DUART_RXA,D1                         ; GOT A CHARACTER, READ IT
000008B6                          1262mm     ENDC
000008B6                 FALSE    1263mm     IFNE DEBUG
000008B6                          1264mm     ENDC
000008B6                          1265mm 
000008B6  B23C 001B               1266mm     CMP.B #$1B,D1                                   ; CHECK FOR ESCAPE AND GO TO START
000008BA  6700 FB44               1267mm     BEQ START
000008BE                          1268mm     ENDM
000008BE                          1269m CONTINUE_54
000008BE  1239 00C00013           1270m     MOVE.B DUART_SRB,D1                             ; READ DOWNLOAD STATUS REGISTER
000008C4  0801 0000               1271m     BTST #0,D1                                      ; CHECK FOR CHARACTER
000008C8  67D8                    1272m     BEQ WAIT_FOR_READY_54                           ; NOTHING, CHECK AGAIN
000008CA                          1273m     
000008CA  1239 00C00017           1274m     MOVE.B DUART_RXB,D1                             ; GOT A CHARACTER, READ IT
000008D0  13C1 00E00001           1275m     MOVE.B D1,DISPLAY                               ; ECHO TO THE DISPLAY
000008D6                          1276m 
000008D6                          1277m     ENDM
000008D6  B23C 0053               1278      CMP.B #'S',D1                                   ; found S?
000008DA  66C6                    1279      BNE WAIT_FOR_SRECORD                            ; nope, keep waiting
000008DC                          1280      
000008DC                          1281m     PRINT_CHAR #'S',D5                              ; print the S
000008DC                          1282m WAIT_FOR_READY_56                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
000008DC                 TRUE     1283m     IFEQ DEBUG
000008DC  1A39 00C00003           1284m         MOVE.B DUART_SRA,D5                         ; READ STATUS REGISTER
000008E2  0805 0002               1285m         BTST #2,D5                                  ; CHECK FOR SPACE TO SEND
000008E6  67F4                    1286m         BEQ WAIT_FOR_READY_56                       ; NO SPACE, CHECK AGAIN
000008E8  13FC 0053 00C00007      1287m         MOVE.B #'S',DUART_TXA                           ; SEND THE NEXT CHARACTER
000008F0                          1288m     ENDC
000008F0                          1289m 
000008F0                 FALSE    1290m     IFNE DEBUG
000008F0                          1291m     ENDC
000008F0                          1292m 
000008F0                          1293m     ENDM
000008F0  5280                    1294      ADD.L #1,D0                                     ; read another S record, increment count
000008F2                          1295      
000008F2                          1296m     DOWNLOAD D1                                     ; read the record identifier and echo it back
000008F2                          1297m WAIT_FOR_READY_57                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
000008F2                          1298m 
000008F2  1239 00C00003           1299m     MOVE.B DUART_SRA,D1                             ; CHECK FOR COMMAND
000008F8  0801 0000               1300m     BTST #0,D1                                      ; CHECK FOR CHARACTER
000008FC  6700 0010               1301m     BEQ CONTINUE_57                                 ; NOTHING, CONTINUE
00000900                          1302m 
00000900                          1303mm     READ_CHAR D1                                    ; WE're not going to do anything with it, just check for escape
00000900                 TRUE     1304mm     IFEQ DEBUG
00000900  1239 00C00007           1305mm         MOVE.B DUART_RXA,D1                         ; GOT A CHARACTER, READ IT
00000906                          1306mm     ENDC
00000906                 FALSE    1307mm     IFNE DEBUG
00000906                          1308mm     ENDC
00000906                          1309mm 
00000906  B23C 001B               1310mm     CMP.B #$1B,D1                                   ; CHECK FOR ESCAPE AND GO TO START
0000090A  6700 FAF4               1311mm     BEQ START
0000090E                          1312mm     ENDM
0000090E                          1313m CONTINUE_57
0000090E  1239 00C00013           1314m     MOVE.B DUART_SRB,D1                             ; READ DOWNLOAD STATUS REGISTER
00000914  0801 0000               1315m     BTST #0,D1                                      ; CHECK FOR CHARACTER
00000918  67D8                    1316m     BEQ WAIT_FOR_READY_57                           ; NOTHING, CHECK AGAIN
0000091A                          1317m     
0000091A  1239 00C00017           1318m     MOVE.B DUART_RXB,D1                             ; GOT A CHARACTER, READ IT
00000920  13C1 00E00001           1319m     MOVE.B D1,DISPLAY                               ; ECHO TO THE DISPLAY
00000926                          1320m 
00000926                          1321m     ENDM
00000926                          1322m     PRINT_CHAR D1,D5
00000926                          1323m WAIT_FOR_READY_59                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000926                 TRUE     1324m     IFEQ DEBUG
00000926  1A39 00C00003           1325m         MOVE.B DUART_SRA,D5                         ; READ STATUS REGISTER
0000092C  0805 0002               1326m         BTST #2,D5                                  ; CHECK FOR SPACE TO SEND
00000930  67F4                    1327m         BEQ WAIT_FOR_READY_59                       ; NO SPACE, CHECK AGAIN
00000932  13C1 00C00007           1328m         MOVE.B D1,DUART_TXA                         ; SEND THE NEXT CHARACTER
00000938                          1329m     ENDC
00000938                          1330m 
00000938                 FALSE    1331m     IFNE DEBUG
00000938                          1332m     ENDC
00000938                          1333m 
00000938                          1334m     ENDM
00000938                          1335  
00000938  7400                    1336      MOVE.L #0,D2                                    ; clear the checksum
0000093A                          1337  
0000093A                          1338m     DOWNLOAD_BYTE D3,D5,D6,D7,D2,A4
0000093A  1E3C 0002               1339m     MOVE.B #2,D7
0000093E                          1340m     WHILE.B D7 <GT> 0 DO
0000093E                          1341ms _10000000
0000093E  BE38 0000               1342ms     CMP.B   0,D7
00000942  6F00 0062               1343ms     BLE _10000001
00000946  E98B                    1344m         LSL.L #4,D3                                 ; IT's OK to do this first, because we are either starting from 0, 
00000948                          1345mm         DOWNLOAD D5                                 ; OR WE ARE READING THE NEXT BYTE ALONG, SO NEED TO SHIFT UP THE PREVIOUS ONE
00000948                          1346mm WAIT_FOR_READY_61                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000948                          1347mm 
00000948  1A39 00C00003           1348mm     MOVE.B DUART_SRA,D5                             ; CHECK FOR COMMAND
0000094E  0805 0000               1349mm     BTST #0,D5                                      ; CHECK FOR CHARACTER
00000952  6700 0010               1350mm     BEQ CONTINUE_61                                 ; NOTHING, CONTINUE
00000956                          1351mm 
00000956                          1352mmm     READ_CHAR D5                                    ; WE're not going to do anything with it, just check for escape
00000956                 TRUE     1353mmm     IFEQ DEBUG
00000956  1A39 00C00007           1354mmm         MOVE.B DUART_RXA,D5                         ; GOT A CHARACTER, READ IT
0000095C                          1355mmm     ENDC
0000095C                 FALSE    1356mmm     IFNE DEBUG
0000095C                          1357mmm     ENDC
0000095C                          1358mmm 
0000095C  BA3C 001B               1359mmm     CMP.B #$1B,D5                                   ; CHECK FOR ESCAPE AND GO TO START
00000960  6700 FA9E               1360mmm     BEQ START
00000964                          1361mmm     ENDM
00000964                          1362mm CONTINUE_61
00000964  1A39 00C00013           1363mm     MOVE.B DUART_SRB,D5                             ; READ DOWNLOAD STATUS REGISTER
0000096A  0805 0000               1364mm     BTST #0,D5                                      ; CHECK FOR CHARACTER
0000096E  67D8                    1365mm     BEQ WAIT_FOR_READY_61                           ; NOTHING, CHECK AGAIN
00000970                          1366mm     
00000970  1A39 00C00017           1367mm     MOVE.B DUART_RXB,D5                             ; GOT A CHARACTER, READ IT
00000976  13C5 00E00001           1368mm     MOVE.B D5,DISPLAY                               ; ECHO TO THE DISPLAY
0000097C                          1369mm 
0000097C                          1370mm     ENDM
0000097C                          1371mm         PRINT_CHAR D5,D6
0000097C                          1372mm WAIT_FOR_READY_63                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
0000097C                 TRUE     1373mm     IFEQ DEBUG
0000097C  1C39 00C00003           1374mm         MOVE.B DUART_SRA,D6                         ; READ STATUS REGISTER
00000982  0806 0002               1375mm         BTST #2,D6                                  ; CHECK FOR SPACE TO SEND
00000986  67F4                    1376mm         BEQ WAIT_FOR_READY_63                       ; NO SPACE, CHECK AGAIN
00000988  13C5 00C00007           1377mm         MOVE.B D5,DUART_TXA                         ; SEND THE NEXT CHARACTER
0000098E                          1378mm     ENDC
0000098E                          1379mm 
0000098E                 FALSE    1380mm     IFNE DEBUG
0000098E                          1381mm     ENDC
0000098E                          1382mm 
0000098E                          1383mm     ENDM
0000098E                          1384mm         HEX2BIN D5,D5,A4
0000098E  49FA 1246               1385mm     LEA HEX2BIN_LUT(PC),A4                          ; LOAD THE LOOKUP TABLE
00000992  0405 0030               1386mm     SUB.B #'0',D5                                   ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
00000996  CABC 000000FF           1387mm     AND.L #$FF,D5                                   ; IGNORE THE TOP 3 BYTES
0000099C  1A34 5000               1388mm     MOVE.B 0(A4,D5),D5                              ; USE THAT AS AN INDEX INTO THE LUT   
000009A0                          1389mm     ENDM
000009A0  8605                    1390m         OR.B D5,D3
000009A2  5307                    1391m         SUB.B #1,D7
000009A4                          1392m     ENDW
000009A4  6098                    1393ms     BRA _10000000
000009A6                          1394ms _10000001
000009A6                          1395m 
000009A6  7A00                    1396m     MOVE.L #0,D5                                    ; REXTRACT LATEST BYTE OF ADDRESS AND ADD INTO CHECKSUM
000009A8  1A03                    1397m     MOVE.B D3,D5
000009AA  D483                    1398m     ADD.L D3,D2
000009AC                          1399m 
000009AC                          1400m     ENDM
000009AC                          1401  
000009AC                          1402      IF.B D1 <EQ> #'0' THEN.L                        ; header, just ignore it
000009AC  B23C 0030               1403s     CMP.B   #'0',D1
000009B0  6600 002A               1404s     BNE.L   _00000002
000009B4                          1405m         PRINT_CRLF D5,A4
000009B4  49FA 128E               1406m     LEA CRLF(PC),A4
000009B8                          1407mm     PRINT_STR A4,D5
000009B8                          1408mm LOOP_66
000009B8  0C14 0000               1409mm     CMP.B #NULL,(A4)                                ; 0 -> DONE
000009BC  6700 0016               1410mm     BEQ EXIT_66
000009C0                          1411mmm     PRINT_CHAR (A4)+,D5
000009C0                          1412mmm WAIT_FOR_READY_67                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
000009C0                 TRUE     1413mmm     IFEQ DEBUG
000009C0  1A39 00C00003           1414mmm         MOVE.B DUART_SRA,D5                         ; READ STATUS REGISTER
000009C6  0805 0002               1415mmm         BTST #2,D5                                  ; CHECK FOR SPACE TO SEND
000009CA  67F4                    1416mmm         BEQ WAIT_FOR_READY_67                       ; NO SPACE, CHECK AGAIN
000009CC  13DC 00C00007           1417mmm         MOVE.B (A4)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
000009D2                          1418mmm     ENDC
000009D2                          1419mmm 
000009D2                 FALSE    1420mmm     IFNE DEBUG
000009D2                          1421mmm     ENDC
000009D2                          1422mmm 
000009D2                          1423mmm     ENDM
000009D2  60E4                    1424mm     BRA LOOP_66
000009D4                          1425mm EXIT_66
000009D4                          1426mm     ENDM
000009D4                          1427m     ENDM
000009D4  6000 FECC               1428          BRA WAIT_FOR_SRECORD
000009D8                          1429      ELSE
000009D8  6000 03DE               1430s     BRA _00000003
000009DC                          1431s _00000002
000009DC                          1432          IF.B D1 <EQ> #'1' OR.B D1 <EQ> #'2' THEN.L  ; 16 or 24 bit address data record
000009DC  B23C 0031               1433s     CMP.B   #'1',D1
000009E0  6708                    1434s     BEQ.S   _00000004
000009E2  B23C 0032               1435s     CMP.B   #'2',D1
000009E6  6600 01F0               1436s     BNE.L   _00000005
000009EA                          1437s _00000004
000009EA  5783                    1438              SUB.L #3,D3                             ; subtract three bytes for 16 bit address and 1 byte checksum
000009EC                          1439  
000009EC  7800                    1440              MOVE.L #0,D4                            ; read two bytes of address
000009EE                          1441m             DOWNLOAD_BYTE D4,D5,D6,D7,D2,A4         ; first byte                                    
000009EE  1E3C 0002               1442m     MOVE.B #2,D7
000009F2                          1443m     WHILE.B D7 <GT> 0 DO
000009F2                          1444ms _10000002
000009F2  BE38 0000               1445ms     CMP.B   0,D7
000009F6  6F00 0062               1446ms     BLE _10000003
000009FA  E98C                    1447m         LSL.L #4,D4                                 ; IT's OK to do this first, because we are either starting from 0, 
000009FC                          1448mm         DOWNLOAD D5                                 ; OR WE ARE READING THE NEXT BYTE ALONG, SO NEED TO SHIFT UP THE PREVIOUS ONE
000009FC                          1449mm WAIT_FOR_READY_69                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
000009FC                          1450mm 
000009FC  1A39 00C00003           1451mm     MOVE.B DUART_SRA,D5                             ; CHECK FOR COMMAND
00000A02  0805 0000               1452mm     BTST #0,D5                                      ; CHECK FOR CHARACTER
00000A06  6700 0010               1453mm     BEQ CONTINUE_69                                 ; NOTHING, CONTINUE
00000A0A                          1454mm 
00000A0A                          1455mmm     READ_CHAR D5                                    ; WE're not going to do anything with it, just check for escape
00000A0A                 TRUE     1456mmm     IFEQ DEBUG
00000A0A  1A39 00C00007           1457mmm         MOVE.B DUART_RXA,D5                         ; GOT A CHARACTER, READ IT
00000A10                          1458mmm     ENDC
00000A10                 FALSE    1459mmm     IFNE DEBUG
00000A10                          1460mmm     ENDC
00000A10                          1461mmm 
00000A10  BA3C 001B               1462mmm     CMP.B #$1B,D5                                   ; CHECK FOR ESCAPE AND GO TO START
00000A14  6700 F9EA               1463mmm     BEQ START
00000A18                          1464mmm     ENDM
00000A18                          1465mm CONTINUE_69
00000A18  1A39 00C00013           1466mm     MOVE.B DUART_SRB,D5                             ; READ DOWNLOAD STATUS REGISTER
00000A1E  0805 0000               1467mm     BTST #0,D5                                      ; CHECK FOR CHARACTER
00000A22  67D8                    1468mm     BEQ WAIT_FOR_READY_69                           ; NOTHING, CHECK AGAIN
00000A24                          1469mm     
00000A24  1A39 00C00017           1470mm     MOVE.B DUART_RXB,D5                             ; GOT A CHARACTER, READ IT
00000A2A  13C5 00E00001           1471mm     MOVE.B D5,DISPLAY                               ; ECHO TO THE DISPLAY
00000A30                          1472mm 
00000A30                          1473mm     ENDM
00000A30                          1474mm         PRINT_CHAR D5,D6
00000A30                          1475mm WAIT_FOR_READY_71                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000A30                 TRUE     1476mm     IFEQ DEBUG
00000A30  1C39 00C00003           1477mm         MOVE.B DUART_SRA,D6                         ; READ STATUS REGISTER
00000A36  0806 0002               1478mm         BTST #2,D6                                  ; CHECK FOR SPACE TO SEND
00000A3A  67F4                    1479mm         BEQ WAIT_FOR_READY_71                       ; NO SPACE, CHECK AGAIN
00000A3C  13C5 00C00007           1480mm         MOVE.B D5,DUART_TXA                         ; SEND THE NEXT CHARACTER
00000A42                          1481mm     ENDC
00000A42                          1482mm 
00000A42                 FALSE    1483mm     IFNE DEBUG
00000A42                          1484mm     ENDC
00000A42                          1485mm 
00000A42                          1486mm     ENDM
00000A42                          1487mm         HEX2BIN D5,D5,A4
00000A42  49FA 1192               1488mm     LEA HEX2BIN_LUT(PC),A4                          ; LOAD THE LOOKUP TABLE
00000A46  0405 0030               1489mm     SUB.B #'0',D5                                   ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
00000A4A  CABC 000000FF           1490mm     AND.L #$FF,D5                                   ; IGNORE THE TOP 3 BYTES
00000A50  1A34 5000               1491mm     MOVE.B 0(A4,D5),D5                              ; USE THAT AS AN INDEX INTO THE LUT   
00000A54                          1492mm     ENDM
00000A54  8805                    1493m         OR.B D5,D4
00000A56  5307                    1494m         SUB.B #1,D7
00000A58                          1495m     ENDW
00000A58  6098                    1496ms     BRA _10000002
00000A5A                          1497ms _10000003
00000A5A                          1498m 
00000A5A  7A00                    1499m     MOVE.L #0,D5                                    ; REXTRACT LATEST BYTE OF ADDRESS AND ADD INTO CHECKSUM
00000A5C  1A04                    1500m     MOVE.B D4,D5
00000A5E  D484                    1501m     ADD.L D4,D2
00000A60                          1502m 
00000A60                          1503m     ENDM
00000A60                          1504m             DOWNLOAD_BYTE D4,D5,D6,D7,D2,A4         ; second one
00000A60  1E3C 0002               1505m     MOVE.B #2,D7
00000A64                          1506m     WHILE.B D7 <GT> 0 DO
00000A64                          1507ms _10000004
00000A64  BE38 0000               1508ms     CMP.B   0,D7
00000A68  6F00 0062               1509ms     BLE _10000005
00000A6C  E98C                    1510m         LSL.L #4,D4                                 ; IT's OK to do this first, because we are either starting from 0, 
00000A6E                          1511mm         DOWNLOAD D5                                 ; OR WE ARE READING THE NEXT BYTE ALONG, SO NEED TO SHIFT UP THE PREVIOUS ONE
00000A6E                          1512mm WAIT_FOR_READY_74                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000A6E                          1513mm 
00000A6E  1A39 00C00003           1514mm     MOVE.B DUART_SRA,D5                             ; CHECK FOR COMMAND
00000A74  0805 0000               1515mm     BTST #0,D5                                      ; CHECK FOR CHARACTER
00000A78  6700 0010               1516mm     BEQ CONTINUE_74                                 ; NOTHING, CONTINUE
00000A7C                          1517mm 
00000A7C                          1518mmm     READ_CHAR D5                                    ; WE're not going to do anything with it, just check for escape
00000A7C                 TRUE     1519mmm     IFEQ DEBUG
00000A7C  1A39 00C00007           1520mmm         MOVE.B DUART_RXA,D5                         ; GOT A CHARACTER, READ IT
00000A82                          1521mmm     ENDC
00000A82                 FALSE    1522mmm     IFNE DEBUG
00000A82                          1523mmm     ENDC
00000A82                          1524mmm 
00000A82  BA3C 001B               1525mmm     CMP.B #$1B,D5                                   ; CHECK FOR ESCAPE AND GO TO START
00000A86  6700 F978               1526mmm     BEQ START
00000A8A                          1527mmm     ENDM
00000A8A                          1528mm CONTINUE_74
00000A8A  1A39 00C00013           1529mm     MOVE.B DUART_SRB,D5                             ; READ DOWNLOAD STATUS REGISTER
00000A90  0805 0000               1530mm     BTST #0,D5                                      ; CHECK FOR CHARACTER
00000A94  67D8                    1531mm     BEQ WAIT_FOR_READY_74                           ; NOTHING, CHECK AGAIN
00000A96                          1532mm     
00000A96  1A39 00C00017           1533mm     MOVE.B DUART_RXB,D5                             ; GOT A CHARACTER, READ IT
00000A9C  13C5 00E00001           1534mm     MOVE.B D5,DISPLAY                               ; ECHO TO THE DISPLAY
00000AA2                          1535mm 
00000AA2                          1536mm     ENDM
00000AA2                          1537mm         PRINT_CHAR D5,D6
00000AA2                          1538mm WAIT_FOR_READY_76                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000AA2                 TRUE     1539mm     IFEQ DEBUG
00000AA2  1C39 00C00003           1540mm         MOVE.B DUART_SRA,D6                         ; READ STATUS REGISTER
00000AA8  0806 0002               1541mm         BTST #2,D6                                  ; CHECK FOR SPACE TO SEND
00000AAC  67F4                    1542mm         BEQ WAIT_FOR_READY_76                       ; NO SPACE, CHECK AGAIN
00000AAE  13C5 00C00007           1543mm         MOVE.B D5,DUART_TXA                         ; SEND THE NEXT CHARACTER
00000AB4                          1544mm     ENDC
00000AB4                          1545mm 
00000AB4                 FALSE    1546mm     IFNE DEBUG
00000AB4                          1547mm     ENDC
00000AB4                          1548mm 
00000AB4                          1549mm     ENDM
00000AB4                          1550mm         HEX2BIN D5,D5,A4
00000AB4  49FA 1120               1551mm     LEA HEX2BIN_LUT(PC),A4                          ; LOAD THE LOOKUP TABLE
00000AB8  0405 0030               1552mm     SUB.B #'0',D5                                   ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
00000ABC  CABC 000000FF           1553mm     AND.L #$FF,D5                                   ; IGNORE THE TOP 3 BYTES
00000AC2  1A34 5000               1554mm     MOVE.B 0(A4,D5),D5                              ; USE THAT AS AN INDEX INTO THE LUT   
00000AC6                          1555mm     ENDM
00000AC6  8805                    1556m         OR.B D5,D4
00000AC8  5307                    1557m         SUB.B #1,D7
00000ACA                          1558m     ENDW
00000ACA  6098                    1559ms     BRA _10000004
00000ACC                          1560ms _10000005
00000ACC                          1561m 
00000ACC  7A00                    1562m     MOVE.L #0,D5                                    ; REXTRACT LATEST BYTE OF ADDRESS AND ADD INTO CHECKSUM
00000ACE  1A04                    1563m     MOVE.B D4,D5
00000AD0  D484                    1564m     ADD.L D4,D2
00000AD2                          1565m 
00000AD2                          1566m     ENDM
00000AD2                          1567  
00000AD2                          1568              IF.B D1 <EQ> #'2'  THEN.L               ; 24 bit address data record, read another byte
00000AD2  B23C 0032               1569s     CMP.B   #'2',D1
00000AD6  6600 0076               1570s     BNE.L   _00000006
00000ADA  5383                    1571                  SUB.L #1,D3                         ; subtract an extra bytes for 24 bit address    
00000ADC                          1572m                 DOWNLOAD_BYTE D4,D5,D6,D7,D2,A4     ; 3rd byte
00000ADC  1E3C 0002               1573m     MOVE.B #2,D7
00000AE0                          1574m     WHILE.B D7 <GT> 0 DO
00000AE0                          1575ms _10000006
00000AE0  BE38 0000               1576ms     CMP.B   0,D7
00000AE4  6F00 0062               1577ms     BLE _10000007
00000AE8  E98C                    1578m         LSL.L #4,D4                                 ; IT's OK to do this first, because we are either starting from 0, 
00000AEA                          1579mm         DOWNLOAD D5                                 ; OR WE ARE READING THE NEXT BYTE ALONG, SO NEED TO SHIFT UP THE PREVIOUS ONE
00000AEA                          1580mm WAIT_FOR_READY_79                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000AEA                          1581mm 
00000AEA  1A39 00C00003           1582mm     MOVE.B DUART_SRA,D5                             ; CHECK FOR COMMAND
00000AF0  0805 0000               1583mm     BTST #0,D5                                      ; CHECK FOR CHARACTER
00000AF4  6700 0010               1584mm     BEQ CONTINUE_79                                 ; NOTHING, CONTINUE
00000AF8                          1585mm 
00000AF8                          1586mmm     READ_CHAR D5                                    ; WE're not going to do anything with it, just check for escape
00000AF8                 TRUE     1587mmm     IFEQ DEBUG
00000AF8  1A39 00C00007           1588mmm         MOVE.B DUART_RXA,D5                         ; GOT A CHARACTER, READ IT
00000AFE                          1589mmm     ENDC
00000AFE                 FALSE    1590mmm     IFNE DEBUG
00000AFE                          1591mmm     ENDC
00000AFE                          1592mmm 
00000AFE  BA3C 001B               1593mmm     CMP.B #$1B,D5                                   ; CHECK FOR ESCAPE AND GO TO START
00000B02  6700 F8FC               1594mmm     BEQ START
00000B06                          1595mmm     ENDM
00000B06                          1596mm CONTINUE_79
00000B06  1A39 00C00013           1597mm     MOVE.B DUART_SRB,D5                             ; READ DOWNLOAD STATUS REGISTER
00000B0C  0805 0000               1598mm     BTST #0,D5                                      ; CHECK FOR CHARACTER
00000B10  67D8                    1599mm     BEQ WAIT_FOR_READY_79                           ; NOTHING, CHECK AGAIN
00000B12                          1600mm     
00000B12  1A39 00C00017           1601mm     MOVE.B DUART_RXB,D5                             ; GOT A CHARACTER, READ IT
00000B18  13C5 00E00001           1602mm     MOVE.B D5,DISPLAY                               ; ECHO TO THE DISPLAY
00000B1E                          1603mm 
00000B1E                          1604mm     ENDM
00000B1E                          1605mm         PRINT_CHAR D5,D6
00000B1E                          1606mm WAIT_FOR_READY_81                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000B1E                 TRUE     1607mm     IFEQ DEBUG
00000B1E  1C39 00C00003           1608mm         MOVE.B DUART_SRA,D6                         ; READ STATUS REGISTER
00000B24  0806 0002               1609mm         BTST #2,D6                                  ; CHECK FOR SPACE TO SEND
00000B28  67F4                    1610mm         BEQ WAIT_FOR_READY_81                       ; NO SPACE, CHECK AGAIN
00000B2A  13C5 00C00007           1611mm         MOVE.B D5,DUART_TXA                         ; SEND THE NEXT CHARACTER
00000B30                          1612mm     ENDC
00000B30                          1613mm 
00000B30                 FALSE    1614mm     IFNE DEBUG
00000B30                          1615mm     ENDC
00000B30                          1616mm 
00000B30                          1617mm     ENDM
00000B30                          1618mm         HEX2BIN D5,D5,A4
00000B30  49FA 10A4               1619mm     LEA HEX2BIN_LUT(PC),A4                          ; LOAD THE LOOKUP TABLE
00000B34  0405 0030               1620mm     SUB.B #'0',D5                                   ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
00000B38  CABC 000000FF           1621mm     AND.L #$FF,D5                                   ; IGNORE THE TOP 3 BYTES
00000B3E  1A34 5000               1622mm     MOVE.B 0(A4,D5),D5                              ; USE THAT AS AN INDEX INTO THE LUT   
00000B42                          1623mm     ENDM
00000B42  8805                    1624m         OR.B D5,D4
00000B44  5307                    1625m         SUB.B #1,D7
00000B46                          1626m     ENDW
00000B46  6098                    1627ms     BRA _10000006
00000B48                          1628ms _10000007
00000B48                          1629m 
00000B48  7A00                    1630m     MOVE.L #0,D5                                    ; REXTRACT LATEST BYTE OF ADDRESS AND ADD INTO CHECKSUM
00000B4A  1A04                    1631m     MOVE.B D4,D5
00000B4C  D484                    1632m     ADD.L D4,D2
00000B4E                          1633m 
00000B4E                          1634m     ENDM
00000B4E                          1635              ENDI
00000B4E                          1636s _00000006
00000B4E                          1637  
00000B4E  2444                    1638              MOVE.L D4,A2                            ; put the address in an address register
00000B50  D5C9                    1639              ADD.L A1,A2                             ; add in the offset
00000B52                          1640  
00000B52                          1641              WHILE.B D3 <GT> #0 DO                   ; read the data bytes
00000B52                          1642s _10000008
00000B52  B63C 0000               1643s     CMP.B   #0,D3
00000B56  6F00 007A               1644s     BLE _10000009
00000B5A                          1645m                 DOWNLOAD_BYTE D1,D5,D6,D7,D2,A4     ; read it
00000B5A  1E3C 0002               1646m     MOVE.B #2,D7
00000B5E                          1647m     WHILE.B D7 <GT> 0 DO
00000B5E                          1648ms _1000000A
00000B5E  BE38 0000               1649ms     CMP.B   0,D7
00000B62  6F00 0062               1650ms     BLE _1000000B
00000B66  E989                    1651m         LSL.L #4,D1                                 ; IT's OK to do this first, because we are either starting from 0, 
00000B68                          1652mm         DOWNLOAD D5                                 ; OR WE ARE READING THE NEXT BYTE ALONG, SO NEED TO SHIFT UP THE PREVIOUS ONE
00000B68                          1653mm WAIT_FOR_READY_84                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000B68                          1654mm 
00000B68  1A39 00C00003           1655mm     MOVE.B DUART_SRA,D5                             ; CHECK FOR COMMAND
00000B6E  0805 0000               1656mm     BTST #0,D5                                      ; CHECK FOR CHARACTER
00000B72  6700 0010               1657mm     BEQ CONTINUE_84                                 ; NOTHING, CONTINUE
00000B76                          1658mm 
00000B76                          1659mmm     READ_CHAR D5                                    ; WE're not going to do anything with it, just check for escape
00000B76                 TRUE     1660mmm     IFEQ DEBUG
00000B76  1A39 00C00007           1661mmm         MOVE.B DUART_RXA,D5                         ; GOT A CHARACTER, READ IT
00000B7C                          1662mmm     ENDC
00000B7C                 FALSE    1663mmm     IFNE DEBUG
00000B7C                          1664mmm     ENDC
00000B7C                          1665mmm 
00000B7C  BA3C 001B               1666mmm     CMP.B #$1B,D5                                   ; CHECK FOR ESCAPE AND GO TO START
00000B80  6700 F87E               1667mmm     BEQ START
00000B84                          1668mmm     ENDM
00000B84                          1669mm CONTINUE_84
00000B84  1A39 00C00013           1670mm     MOVE.B DUART_SRB,D5                             ; READ DOWNLOAD STATUS REGISTER
00000B8A  0805 0000               1671mm     BTST #0,D5                                      ; CHECK FOR CHARACTER
00000B8E  67D8                    1672mm     BEQ WAIT_FOR_READY_84                           ; NOTHING, CHECK AGAIN
00000B90                          1673mm     
00000B90  1A39 00C00017           1674mm     MOVE.B DUART_RXB,D5                             ; GOT A CHARACTER, READ IT
00000B96  13C5 00E00001           1675mm     MOVE.B D5,DISPLAY                               ; ECHO TO THE DISPLAY
00000B9C                          1676mm 
00000B9C                          1677mm     ENDM
00000B9C                          1678mm         PRINT_CHAR D5,D6
00000B9C                          1679mm WAIT_FOR_READY_86                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000B9C                 TRUE     1680mm     IFEQ DEBUG
00000B9C  1C39 00C00003           1681mm         MOVE.B DUART_SRA,D6                         ; READ STATUS REGISTER
00000BA2  0806 0002               1682mm         BTST #2,D6                                  ; CHECK FOR SPACE TO SEND
00000BA6  67F4                    1683mm         BEQ WAIT_FOR_READY_86                       ; NO SPACE, CHECK AGAIN
00000BA8  13C5 00C00007           1684mm         MOVE.B D5,DUART_TXA                         ; SEND THE NEXT CHARACTER
00000BAE                          1685mm     ENDC
00000BAE                          1686mm 
00000BAE                 FALSE    1687mm     IFNE DEBUG
00000BAE                          1688mm     ENDC
00000BAE                          1689mm 
00000BAE                          1690mm     ENDM
00000BAE                          1691mm         HEX2BIN D5,D5,A4
00000BAE  49FA 1026               1692mm     LEA HEX2BIN_LUT(PC),A4                          ; LOAD THE LOOKUP TABLE
00000BB2  0405 0030               1693mm     SUB.B #'0',D5                                   ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
00000BB6  CABC 000000FF           1694mm     AND.L #$FF,D5                                   ; IGNORE THE TOP 3 BYTES
00000BBC  1A34 5000               1695mm     MOVE.B 0(A4,D5),D5                              ; USE THAT AS AN INDEX INTO THE LUT   
00000BC0                          1696mm     ENDM
00000BC0  8205                    1697m         OR.B D5,D1
00000BC2  5307                    1698m         SUB.B #1,D7
00000BC4                          1699m     ENDW
00000BC4  6098                    1700ms     BRA _1000000A
00000BC6                          1701ms _1000000B
00000BC6                          1702m 
00000BC6  7A00                    1703m     MOVE.L #0,D5                                    ; REXTRACT LATEST BYTE OF ADDRESS AND ADD INTO CHECKSUM
00000BC8  1A01                    1704m     MOVE.B D1,D5
00000BCA  D481                    1705m     ADD.L D1,D2
00000BCC                          1706m 
00000BCC                          1707m     ENDM
00000BCC                          1708   
00000BCC  14C1                    1709                  MOVE.B D1,(A2)+                     ; store it!
00000BCE                          1710  
00000BCE  5303                    1711                  SUB.B #1,D3                         ; 1 less byte to go
00000BD0                          1712              ENDW
00000BD0  6080                    1713s     BRA _10000008
00000BD2                          1714s _10000009
00000BD2                          1715  
00000BD2  7200                    1716              MOVE.L #0,D1                            ; not done yet
00000BD4                          1717          ELSE
00000BD4  6000 01E2               1718s     BRA _00000007
00000BD8                          1719s _00000005
00000BD8                          1720              IF.B D1 <EQ> #'8' THEN.L                ; termination record, exit
00000BD8  B23C 0038               1721s     CMP.B   #'8',D1
00000BDC  6600 0164               1722s     BNE.L   _00000008
00000BE0  7800                    1723                  MOVE.L #0,D4                        ; read the 24 bit start address
00000BE2                          1724m                 DOWNLOAD_BYTE D4,D5,D6,D7,D2,A4     ; top byte
00000BE2  1E3C 0002               1725m     MOVE.B #2,D7
00000BE6                          1726m     WHILE.B D7 <GT> 0 DO
00000BE6                          1727ms _1000000C
00000BE6  BE38 0000               1728ms     CMP.B   0,D7
00000BEA  6F00 0062               1729ms     BLE _1000000D
00000BEE  E98C                    1730m         LSL.L #4,D4                                 ; IT's OK to do this first, because we are either starting from 0, 
00000BF0                          1731mm         DOWNLOAD D5                                 ; OR WE ARE READING THE NEXT BYTE ALONG, SO NEED TO SHIFT UP THE PREVIOUS ONE
00000BF0                          1732mm WAIT_FOR_READY_89                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000BF0                          1733mm 
00000BF0  1A39 00C00003           1734mm     MOVE.B DUART_SRA,D5                             ; CHECK FOR COMMAND
00000BF6  0805 0000               1735mm     BTST #0,D5                                      ; CHECK FOR CHARACTER
00000BFA  6700 0010               1736mm     BEQ CONTINUE_89                                 ; NOTHING, CONTINUE
00000BFE                          1737mm 
00000BFE                          1738mmm     READ_CHAR D5                                    ; WE're not going to do anything with it, just check for escape
00000BFE                 TRUE     1739mmm     IFEQ DEBUG
00000BFE  1A39 00C00007           1740mmm         MOVE.B DUART_RXA,D5                         ; GOT A CHARACTER, READ IT
00000C04                          1741mmm     ENDC
00000C04                 FALSE    1742mmm     IFNE DEBUG
00000C04                          1743mmm     ENDC
00000C04                          1744mmm 
00000C04  BA3C 001B               1745mmm     CMP.B #$1B,D5                                   ; CHECK FOR ESCAPE AND GO TO START
00000C08  6700 F7F6               1746mmm     BEQ START
00000C0C                          1747mmm     ENDM
00000C0C                          1748mm CONTINUE_89
00000C0C  1A39 00C00013           1749mm     MOVE.B DUART_SRB,D5                             ; READ DOWNLOAD STATUS REGISTER
00000C12  0805 0000               1750mm     BTST #0,D5                                      ; CHECK FOR CHARACTER
00000C16  67D8                    1751mm     BEQ WAIT_FOR_READY_89                           ; NOTHING, CHECK AGAIN
00000C18                          1752mm     
00000C18  1A39 00C00017           1753mm     MOVE.B DUART_RXB,D5                             ; GOT A CHARACTER, READ IT
00000C1E  13C5 00E00001           1754mm     MOVE.B D5,DISPLAY                               ; ECHO TO THE DISPLAY
00000C24                          1755mm 
00000C24                          1756mm     ENDM
00000C24                          1757mm         PRINT_CHAR D5,D6
00000C24                          1758mm WAIT_FOR_READY_91                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000C24                 TRUE     1759mm     IFEQ DEBUG
00000C24  1C39 00C00003           1760mm         MOVE.B DUART_SRA,D6                         ; READ STATUS REGISTER
00000C2A  0806 0002               1761mm         BTST #2,D6                                  ; CHECK FOR SPACE TO SEND
00000C2E  67F4                    1762mm         BEQ WAIT_FOR_READY_91                       ; NO SPACE, CHECK AGAIN
00000C30  13C5 00C00007           1763mm         MOVE.B D5,DUART_TXA                         ; SEND THE NEXT CHARACTER
00000C36                          1764mm     ENDC
00000C36                          1765mm 
00000C36                 FALSE    1766mm     IFNE DEBUG
00000C36                          1767mm     ENDC
00000C36                          1768mm 
00000C36                          1769mm     ENDM
00000C36                          1770mm         HEX2BIN D5,D5,A4
00000C36  49FA 0F9E               1771mm     LEA HEX2BIN_LUT(PC),A4                          ; LOAD THE LOOKUP TABLE
00000C3A  0405 0030               1772mm     SUB.B #'0',D5                                   ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
00000C3E  CABC 000000FF           1773mm     AND.L #$FF,D5                                   ; IGNORE THE TOP 3 BYTES
00000C44  1A34 5000               1774mm     MOVE.B 0(A4,D5),D5                              ; USE THAT AS AN INDEX INTO THE LUT   
00000C48                          1775mm     ENDM
00000C48  8805                    1776m         OR.B D5,D4
00000C4A  5307                    1777m         SUB.B #1,D7
00000C4C                          1778m     ENDW
00000C4C  6098                    1779ms     BRA _1000000C
00000C4E                          1780ms _1000000D
00000C4E                          1781m 
00000C4E  7A00                    1782m     MOVE.L #0,D5                                    ; REXTRACT LATEST BYTE OF ADDRESS AND ADD INTO CHECKSUM
00000C50  1A04                    1783m     MOVE.B D4,D5
00000C52  D484                    1784m     ADD.L D4,D2
00000C54                          1785m 
00000C54                          1786m     ENDM
00000C54                          1787m                 DOWNLOAD_BYTE D4,D5,D6,D7,D2,A4     ; middle byte
00000C54  1E3C 0002               1788m     MOVE.B #2,D7
00000C58                          1789m     WHILE.B D7 <GT> 0 DO
00000C58                          1790ms _1000000E
00000C58  BE38 0000               1791ms     CMP.B   0,D7
00000C5C  6F00 0062               1792ms     BLE _1000000F
00000C60  E98C                    1793m         LSL.L #4,D4                                 ; IT's OK to do this first, because we are either starting from 0, 
00000C62                          1794mm         DOWNLOAD D5                                 ; OR WE ARE READING THE NEXT BYTE ALONG, SO NEED TO SHIFT UP THE PREVIOUS ONE
00000C62                          1795mm WAIT_FOR_READY_94                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000C62                          1796mm 
00000C62  1A39 00C00003           1797mm     MOVE.B DUART_SRA,D5                             ; CHECK FOR COMMAND
00000C68  0805 0000               1798mm     BTST #0,D5                                      ; CHECK FOR CHARACTER
00000C6C  6700 0010               1799mm     BEQ CONTINUE_94                                 ; NOTHING, CONTINUE
00000C70                          1800mm 
00000C70                          1801mmm     READ_CHAR D5                                    ; WE're not going to do anything with it, just check for escape
00000C70                 TRUE     1802mmm     IFEQ DEBUG
00000C70  1A39 00C00007           1803mmm         MOVE.B DUART_RXA,D5                         ; GOT A CHARACTER, READ IT
00000C76                          1804mmm     ENDC
00000C76                 FALSE    1805mmm     IFNE DEBUG
00000C76                          1806mmm     ENDC
00000C76                          1807mmm 
00000C76  BA3C 001B               1808mmm     CMP.B #$1B,D5                                   ; CHECK FOR ESCAPE AND GO TO START
00000C7A  6700 F784               1809mmm     BEQ START
00000C7E                          1810mmm     ENDM
00000C7E                          1811mm CONTINUE_94
00000C7E  1A39 00C00013           1812mm     MOVE.B DUART_SRB,D5                             ; READ DOWNLOAD STATUS REGISTER
00000C84  0805 0000               1813mm     BTST #0,D5                                      ; CHECK FOR CHARACTER
00000C88  67D8                    1814mm     BEQ WAIT_FOR_READY_94                           ; NOTHING, CHECK AGAIN
00000C8A                          1815mm     
00000C8A  1A39 00C00017           1816mm     MOVE.B DUART_RXB,D5                             ; GOT A CHARACTER, READ IT
00000C90  13C5 00E00001           1817mm     MOVE.B D5,DISPLAY                               ; ECHO TO THE DISPLAY
00000C96                          1818mm 
00000C96                          1819mm     ENDM
00000C96                          1820mm         PRINT_CHAR D5,D6
00000C96                          1821mm WAIT_FOR_READY_96                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000C96                 TRUE     1822mm     IFEQ DEBUG
00000C96  1C39 00C00003           1823mm         MOVE.B DUART_SRA,D6                         ; READ STATUS REGISTER
00000C9C  0806 0002               1824mm         BTST #2,D6                                  ; CHECK FOR SPACE TO SEND
00000CA0  67F4                    1825mm         BEQ WAIT_FOR_READY_96                       ; NO SPACE, CHECK AGAIN
00000CA2  13C5 00C00007           1826mm         MOVE.B D5,DUART_TXA                         ; SEND THE NEXT CHARACTER
00000CA8                          1827mm     ENDC
00000CA8                          1828mm 
00000CA8                 FALSE    1829mm     IFNE DEBUG
00000CA8                          1830mm     ENDC
00000CA8                          1831mm 
00000CA8                          1832mm     ENDM
00000CA8                          1833mm         HEX2BIN D5,D5,A4
00000CA8  49FA 0F2C               1834mm     LEA HEX2BIN_LUT(PC),A4                          ; LOAD THE LOOKUP TABLE
00000CAC  0405 0030               1835mm     SUB.B #'0',D5                                   ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
00000CB0  CABC 000000FF           1836mm     AND.L #$FF,D5                                   ; IGNORE THE TOP 3 BYTES
00000CB6  1A34 5000               1837mm     MOVE.B 0(A4,D5),D5                              ; USE THAT AS AN INDEX INTO THE LUT   
00000CBA                          1838mm     ENDM
00000CBA  8805                    1839m         OR.B D5,D4
00000CBC  5307                    1840m         SUB.B #1,D7
00000CBE                          1841m     ENDW
00000CBE  6098                    1842ms     BRA _1000000E
00000CC0                          1843ms _1000000F
00000CC0                          1844m 
00000CC0  7A00                    1845m     MOVE.L #0,D5                                    ; REXTRACT LATEST BYTE OF ADDRESS AND ADD INTO CHECKSUM
00000CC2  1A04                    1846m     MOVE.B D4,D5
00000CC4  D484                    1847m     ADD.L D4,D2
00000CC6                          1848m 
00000CC6                          1849m     ENDM
00000CC6                          1850m                 DOWNLOAD_BYTE D4,D5,D6,D7,D2,A4     ; bottom byte
00000CC6  1E3C 0002               1851m     MOVE.B #2,D7
00000CCA                          1852m     WHILE.B D7 <GT> 0 DO
00000CCA                          1853ms _10000010
00000CCA  BE38 0000               1854ms     CMP.B   0,D7
00000CCE  6F00 0062               1855ms     BLE _10000011
00000CD2  E98C                    1856m         LSL.L #4,D4                                 ; IT's OK to do this first, because we are either starting from 0, 
00000CD4                          1857mm         DOWNLOAD D5                                 ; OR WE ARE READING THE NEXT BYTE ALONG, SO NEED TO SHIFT UP THE PREVIOUS ONE
00000CD4                          1858mm WAIT_FOR_READY_99                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000CD4                          1859mm 
00000CD4  1A39 00C00003           1860mm     MOVE.B DUART_SRA,D5                             ; CHECK FOR COMMAND
00000CDA  0805 0000               1861mm     BTST #0,D5                                      ; CHECK FOR CHARACTER
00000CDE  6700 0010               1862mm     BEQ CONTINUE_99                                 ; NOTHING, CONTINUE
00000CE2                          1863mm 
00000CE2                          1864mmm     READ_CHAR D5                                    ; WE're not going to do anything with it, just check for escape
00000CE2                 TRUE     1865mmm     IFEQ DEBUG
00000CE2  1A39 00C00007           1866mmm         MOVE.B DUART_RXA,D5                         ; GOT A CHARACTER, READ IT
00000CE8                          1867mmm     ENDC
00000CE8                 FALSE    1868mmm     IFNE DEBUG
00000CE8                          1869mmm     ENDC
00000CE8                          1870mmm 
00000CE8  BA3C 001B               1871mmm     CMP.B #$1B,D5                                   ; CHECK FOR ESCAPE AND GO TO START
00000CEC  6700 F712               1872mmm     BEQ START
00000CF0                          1873mmm     ENDM
00000CF0                          1874mm CONTINUE_99
00000CF0  1A39 00C00013           1875mm     MOVE.B DUART_SRB,D5                             ; READ DOWNLOAD STATUS REGISTER
00000CF6  0805 0000               1876mm     BTST #0,D5                                      ; CHECK FOR CHARACTER
00000CFA  67D8                    1877mm     BEQ WAIT_FOR_READY_99                           ; NOTHING, CHECK AGAIN
00000CFC                          1878mm     
00000CFC  1A39 00C00017           1879mm     MOVE.B DUART_RXB,D5                             ; GOT A CHARACTER, READ IT
00000D02  13C5 00E00001           1880mm     MOVE.B D5,DISPLAY                               ; ECHO TO THE DISPLAY
00000D08                          1881mm 
00000D08                          1882mm     ENDM
00000D08                          1883mm         PRINT_CHAR D5,D6
00000D08                          1884mm WAIT_FOR_READY_101                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000D08                 TRUE     1885mm     IFEQ DEBUG
00000D08  1C39 00C00003           1886mm         MOVE.B DUART_SRA,D6                         ; READ STATUS REGISTER
00000D0E  0806 0002               1887mm         BTST #2,D6                                  ; CHECK FOR SPACE TO SEND
00000D12  67F4                    1888mm         BEQ WAIT_FOR_READY_101                      ; NO SPACE, CHECK AGAIN
00000D14  13C5 00C00007           1889mm         MOVE.B D5,DUART_TXA                         ; SEND THE NEXT CHARACTER
00000D1A                          1890mm     ENDC
00000D1A                          1891mm 
00000D1A                 FALSE    1892mm     IFNE DEBUG
00000D1A                          1893mm     ENDC
00000D1A                          1894mm 
00000D1A                          1895mm     ENDM
00000D1A                          1896mm         HEX2BIN D5,D5,A4
00000D1A  49FA 0EBA               1897mm     LEA HEX2BIN_LUT(PC),A4                          ; LOAD THE LOOKUP TABLE
00000D1E  0405 0030               1898mm     SUB.B #'0',D5                                   ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
00000D22  CABC 000000FF           1899mm     AND.L #$FF,D5                                   ; IGNORE THE TOP 3 BYTES
00000D28  1A34 5000               1900mm     MOVE.B 0(A4,D5),D5                              ; USE THAT AS AN INDEX INTO THE LUT   
00000D2C                          1901mm     ENDM
00000D2C  8805                    1902m         OR.B D5,D4
00000D2E  5307                    1903m         SUB.B #1,D7
00000D30                          1904m     ENDW
00000D30  6098                    1905ms     BRA _10000010
00000D32                          1906ms _10000011
00000D32                          1907m 
00000D32  7A00                    1908m     MOVE.L #0,D5                                    ; REXTRACT LATEST BYTE OF ADDRESS AND ADD INTO CHECKSUM
00000D34  1A04                    1909m     MOVE.B D4,D5
00000D36  D484                    1910m     ADD.L D4,D2
00000D38                          1911m 
00000D38                          1912m     ENDM
00000D38                          1913  
00000D38  2044                    1914                  MOVE.L D4,A0                        ; start address -> A0
00000D3A  D1C9                    1915                  ADD.L A1,A0                         ; add in the offset
00000D3C                          1916  
00000D3C  72FF                    1917                  MOVE.L #$FFFFFFFF,D1                ; done
00000D3E                          1918              ELSE
00000D3E  6000 0078               1919s     BRA _00000009
00000D42                          1920s _00000008
00000D42                          1921m                 PRINT_CRLF D5,A4
00000D42  49FA 0F00               1922m     LEA CRLF(PC),A4
00000D46                          1923mm     PRINT_STR A4,D5
00000D46                          1924mm LOOP_104
00000D46  0C14 0000               1925mm     CMP.B #NULL,(A4)                                ; 0 -> DONE
00000D4A  6700 0016               1926mm     BEQ EXIT_104
00000D4E                          1927mmm     PRINT_CHAR (A4)+,D5
00000D4E                          1928mmm WAIT_FOR_READY_105                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000D4E                 TRUE     1929mmm     IFEQ DEBUG
00000D4E  1A39 00C00003           1930mmm         MOVE.B DUART_SRA,D5                         ; READ STATUS REGISTER
00000D54  0805 0002               1931mmm         BTST #2,D5                                  ; CHECK FOR SPACE TO SEND
00000D58  67F4                    1932mmm         BEQ WAIT_FOR_READY_105                      ; NO SPACE, CHECK AGAIN
00000D5A  13DC 00C00007           1933mmm         MOVE.B (A4)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00000D60                          1934mmm     ENDC
00000D60                          1935mmm 
00000D60                 FALSE    1936mmm     IFNE DEBUG
00000D60                          1937mmm     ENDC
00000D60                          1938mmm 
00000D60                          1939mmm     ENDM
00000D60  60E4                    1940mm     BRA LOOP_104
00000D62                          1941mm EXIT_104
00000D62                          1942mm     ENDM
00000D62                          1943m     ENDM
00000D62                          1944  
00000D62  49FA 0E29               1945                  LEA UNREC(PC),A4                    ; warn for unrecognised type
00000D66                          1946m                 PRINT_STR A4,D5
00000D66                          1947m LOOP_106
00000D66  0C14 0000               1948m     CMP.B #NULL,(A4)                                ; 0 -> DONE
00000D6A  6700 0016               1949m     BEQ EXIT_106
00000D6E                          1950mm     PRINT_CHAR (A4)+,D5
00000D6E                          1951mm WAIT_FOR_READY_107                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000D6E                 TRUE     1952mm     IFEQ DEBUG
00000D6E  1A39 00C00003           1953mm         MOVE.B DUART_SRA,D5                         ; READ STATUS REGISTER
00000D74  0805 0002               1954mm         BTST #2,D5                                  ; CHECK FOR SPACE TO SEND
00000D78  67F4                    1955mm         BEQ WAIT_FOR_READY_107                      ; NO SPACE, CHECK AGAIN
00000D7A  13DC 00C00007           1956mm         MOVE.B (A4)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00000D80                          1957mm     ENDC
00000D80                          1958mm 
00000D80                 FALSE    1959mm     IFNE DEBUG
00000D80                          1960mm     ENDC
00000D80                          1961mm 
00000D80                          1962mm     ENDM
00000D80  60E4                    1963m     BRA LOOP_106
00000D82                          1964m EXIT_106
00000D82                          1965m     ENDM
00000D82                          1966m                 PRINT_CHAR D1,D5
00000D82                          1967m WAIT_FOR_READY_108                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000D82                 TRUE     1968m     IFEQ DEBUG
00000D82  1A39 00C00003           1969m         MOVE.B DUART_SRA,D5                         ; READ STATUS REGISTER
00000D88  0805 0002               1970m         BTST #2,D5                                  ; CHECK FOR SPACE TO SEND
00000D8C  67F4                    1971m         BEQ WAIT_FOR_READY_108                      ; NO SPACE, CHECK AGAIN
00000D8E  13C1 00C00007           1972m         MOVE.B D1,DUART_TXA                         ; SEND THE NEXT CHARACTER
00000D94                          1973m     ENDC
00000D94                          1974m 
00000D94                 FALSE    1975m     IFNE DEBUG
00000D94                          1976m     ENDC
00000D94                          1977m 
00000D94                          1978m     ENDM
00000D94                          1979m                 PRINT_CRLF D5,A4
00000D94  49FA 0EAE               1980m     LEA CRLF(PC),A4
00000D98                          1981mm     PRINT_STR A4,D5
00000D98                          1982mm LOOP_110
00000D98  0C14 0000               1983mm     CMP.B #NULL,(A4)                                ; 0 -> DONE
00000D9C  6700 0016               1984mm     BEQ EXIT_110
00000DA0                          1985mmm     PRINT_CHAR (A4)+,D5
00000DA0                          1986mmm WAIT_FOR_READY_111                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000DA0                 TRUE     1987mmm     IFEQ DEBUG
00000DA0  1A39 00C00003           1988mmm         MOVE.B DUART_SRA,D5                         ; READ STATUS REGISTER
00000DA6  0805 0002               1989mmm         BTST #2,D5                                  ; CHECK FOR SPACE TO SEND
00000DAA  67F4                    1990mmm         BEQ WAIT_FOR_READY_111                      ; NO SPACE, CHECK AGAIN
00000DAC  13DC 00C00007           1991mmm         MOVE.B (A4)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00000DB2                          1992mmm     ENDC
00000DB2                          1993mmm 
00000DB2                 FALSE    1994mmm     IFNE DEBUG
00000DB2                          1995mmm     ENDC
00000DB2                          1996mmm 
00000DB2                          1997mmm     ENDM
00000DB2  60E4                    1998mm     BRA LOOP_110
00000DB4                          1999mm EXIT_110
00000DB4                          2000mm     ENDM
00000DB4                          2001m     ENDM
00000DB4                          2002  
00000DB4  6000 FAEC               2003                  BRA WAIT_FOR_SRECORD                ; ignore any other type 
00000DB8                          2004              ENDI
00000DB8                          2005s _00000009
00000DB8                          2006          ENDI
00000DB8                          2007s _00000007
00000DB8                          2008      ENDI
00000DB8                          2009s _00000003
00000DB8                          2010  
00000DB8                          2011m     DOWNLOAD_BYTE D4,D5,D6,D7,D2,A4
00000DB8  1E3C 0002               2012m     MOVE.B #2,D7
00000DBC                          2013m     WHILE.B D7 <GT> 0 DO
00000DBC                          2014ms _10000012
00000DBC  BE38 0000               2015ms     CMP.B   0,D7
00000DC0  6F00 0062               2016ms     BLE _10000013
00000DC4  E98C                    2017m         LSL.L #4,D4                                 ; IT's OK to do this first, because we are either starting from 0, 
00000DC6                          2018mm         DOWNLOAD D5                                 ; OR WE ARE READING THE NEXT BYTE ALONG, SO NEED TO SHIFT UP THE PREVIOUS ONE
00000DC6                          2019mm WAIT_FOR_READY_113                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000DC6                          2020mm 
00000DC6  1A39 00C00003           2021mm     MOVE.B DUART_SRA,D5                             ; CHECK FOR COMMAND
00000DCC  0805 0000               2022mm     BTST #0,D5                                      ; CHECK FOR CHARACTER
00000DD0  6700 0010               2023mm     BEQ CONTINUE_113                                    ; NOTHING, CONTINUE
00000DD4                          2024mm 
00000DD4                          2025mmm     READ_CHAR D5                                    ; WE're not going to do anything with it, just check for escape
00000DD4                 TRUE     2026mmm     IFEQ DEBUG
00000DD4  1A39 00C00007           2027mmm         MOVE.B DUART_RXA,D5                         ; GOT A CHARACTER, READ IT
00000DDA                          2028mmm     ENDC
00000DDA                 FALSE    2029mmm     IFNE DEBUG
00000DDA                          2030mmm     ENDC
00000DDA                          2031mmm 
00000DDA  BA3C 001B               2032mmm     CMP.B #$1B,D5                                   ; CHECK FOR ESCAPE AND GO TO START
00000DDE  6700 F620               2033mmm     BEQ START
00000DE2                          2034mmm     ENDM
00000DE2                          2035mm CONTINUE_113
00000DE2  1A39 00C00013           2036mm     MOVE.B DUART_SRB,D5                             ; READ DOWNLOAD STATUS REGISTER
00000DE8  0805 0000               2037mm     BTST #0,D5                                      ; CHECK FOR CHARACTER
00000DEC  67D8                    2038mm     BEQ WAIT_FOR_READY_113                          ; NOTHING, CHECK AGAIN
00000DEE                          2039mm     
00000DEE  1A39 00C00017           2040mm     MOVE.B DUART_RXB,D5                             ; GOT A CHARACTER, READ IT
00000DF4  13C5 00E00001           2041mm     MOVE.B D5,DISPLAY                               ; ECHO TO THE DISPLAY
00000DFA                          2042mm 
00000DFA                          2043mm     ENDM
00000DFA                          2044mm         PRINT_CHAR D5,D6
00000DFA                          2045mm WAIT_FOR_READY_115                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000DFA                 TRUE     2046mm     IFEQ DEBUG
00000DFA  1C39 00C00003           2047mm         MOVE.B DUART_SRA,D6                         ; READ STATUS REGISTER
00000E00  0806 0002               2048mm         BTST #2,D6                                  ; CHECK FOR SPACE TO SEND
00000E04  67F4                    2049mm         BEQ WAIT_FOR_READY_115                      ; NO SPACE, CHECK AGAIN
00000E06  13C5 00C00007           2050mm         MOVE.B D5,DUART_TXA                         ; SEND THE NEXT CHARACTER
00000E0C                          2051mm     ENDC
00000E0C                          2052mm 
00000E0C                 FALSE    2053mm     IFNE DEBUG
00000E0C                          2054mm     ENDC
00000E0C                          2055mm 
00000E0C                          2056mm     ENDM
00000E0C                          2057mm         HEX2BIN D5,D5,A4
00000E0C  49FA 0DC8               2058mm     LEA HEX2BIN_LUT(PC),A4                          ; LOAD THE LOOKUP TABLE
00000E10  0405 0030               2059mm     SUB.B #'0',D5                                   ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
00000E14  CABC 000000FF           2060mm     AND.L #$FF,D5                                   ; IGNORE THE TOP 3 BYTES
00000E1A  1A34 5000               2061mm     MOVE.B 0(A4,D5),D5                              ; USE THAT AS AN INDEX INTO THE LUT   
00000E1E                          2062mm     ENDM
00000E1E  8805                    2063m         OR.B D5,D4
00000E20  5307                    2064m         SUB.B #1,D7
00000E22                          2065m     ENDW
00000E22  6098                    2066ms     BRA _10000012
00000E24                          2067ms _10000013
00000E24                          2068m 
00000E24  7A00                    2069m     MOVE.L #0,D5                                    ; REXTRACT LATEST BYTE OF ADDRESS AND ADD INTO CHECKSUM
00000E26  1A04                    2070m     MOVE.B D4,D5
00000E28  D484                    2071m     ADD.L D4,D2
00000E2A                          2072m 
00000E2A                          2073m     ENDM
00000E2A                          2074m     PRINT_CRLF D5,A4
00000E2A  49FA 0E18               2075m     LEA CRLF(PC),A4
00000E2E                          2076mm     PRINT_STR A4,D5
00000E2E                          2077mm LOOP_118
00000E2E  0C14 0000               2078mm     CMP.B #NULL,(A4)                                ; 0 -> DONE
00000E32  6700 0016               2079mm     BEQ EXIT_118
00000E36                          2080mmm     PRINT_CHAR (A4)+,D5
00000E36                          2081mmm WAIT_FOR_READY_119                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000E36                 TRUE     2082mmm     IFEQ DEBUG
00000E36  1A39 00C00003           2083mmm         MOVE.B DUART_SRA,D5                         ; READ STATUS REGISTER
00000E3C  0805 0002               2084mmm         BTST #2,D5                                  ; CHECK FOR SPACE TO SEND
00000E40  67F4                    2085mmm         BEQ WAIT_FOR_READY_119                      ; NO SPACE, CHECK AGAIN
00000E42  13DC 00C00007           2086mmm         MOVE.B (A4)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00000E48                          2087mmm     ENDC
00000E48                          2088mmm 
00000E48                 FALSE    2089mmm     IFNE DEBUG
00000E48                          2090mmm     ENDC
00000E48                          2091mmm 
00000E48                          2092mmm     ENDM
00000E48  60E4                    2093mm     BRA LOOP_118
00000E4A                          2094mm EXIT_118
00000E4A                          2095mm     ENDM
00000E4A                          2096m     ENDM
00000E4A                          2097  
00000E4A                          2098      IF.B D2 <NE> #$FF THEN.L
00000E4A  B43C 00FF               2099s     CMP.B   #$FF,D2
00000E4E  6700 0090               2100s     BEQ.L   _0000000A
00000E52  49FA 0D50               2101          LEA CS_FAILURE(PC),A4                       ; warn for mismatched checksum
00000E56                          2102m         PRINT_STR A4,D5
00000E56                          2103m LOOP_120
00000E56  0C14 0000               2104m     CMP.B #NULL,(A4)                                ; 0 -> DONE
00000E5A  6700 0016               2105m     BEQ EXIT_120
00000E5E                          2106mm     PRINT_CHAR (A4)+,D5
00000E5E                          2107mm WAIT_FOR_READY_121                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000E5E                 TRUE     2108mm     IFEQ DEBUG
00000E5E  1A39 00C00003           2109mm         MOVE.B DUART_SRA,D5                         ; READ STATUS REGISTER
00000E64  0805 0002               2110mm         BTST #2,D5                                  ; CHECK FOR SPACE TO SEND
00000E68  67F4                    2111mm         BEQ WAIT_FOR_READY_121                      ; NO SPACE, CHECK AGAIN
00000E6A  13DC 00C00007           2112mm         MOVE.B (A4)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00000E70                          2113mm     ENDC
00000E70                          2114mm 
00000E70                 FALSE    2115mm     IFNE DEBUG
00000E70                          2116mm     ENDC
00000E70                          2117mm 
00000E70                          2118mm     ENDM
00000E70  60E4                    2119m     BRA LOOP_120
00000E72                          2120m EXIT_120
00000E72                          2121m     ENDM
00000E72                          2122m         PRINT_REG D0,D5,D3,D6,A4
00000E72  49FA 0DD6               2123m     LEA OX(PC),A4
00000E76                          2124mm     PRINT_STR A4,D5
00000E76                          2125mm LOOP_123
00000E76  0C14 0000               2126mm     CMP.B #NULL,(A4)                                ; 0 -> DONE
00000E7A  6700 0016               2127mm     BEQ EXIT_123
00000E7E                          2128mmm     PRINT_CHAR (A4)+,D5
00000E7E                          2129mmm WAIT_FOR_READY_124                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000E7E                 TRUE     2130mmm     IFEQ DEBUG
00000E7E  1A39 00C00003           2131mmm         MOVE.B DUART_SRA,D5                         ; READ STATUS REGISTER
00000E84  0805 0002               2132mmm         BTST #2,D5                                  ; CHECK FOR SPACE TO SEND
00000E88  67F4                    2133mmm         BEQ WAIT_FOR_READY_124                      ; NO SPACE, CHECK AGAIN
00000E8A  13DC 00C00007           2134mmm         MOVE.B (A4)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00000E90                          2135mmm     ENDC
00000E90                          2136mmm 
00000E90                 FALSE    2137mmm     IFNE DEBUG
00000E90                          2138mmm     ENDC
00000E90                          2139mmm 
00000E90                          2140mmm     ENDM
00000E90  60E4                    2141mm     BRA LOOP_123
00000E92                          2142mm EXIT_123
00000E92                          2143mm     ENDM
00000E92  7C07                    2144m     MOVE.L #7,D6                                    ; LOOP ROUND ALL 8 HEX CHARACTERS OF 4 BITS EACH
00000E94                          2145m LOOP_122
00000E94                          2146mm     BIN2HEX D0,D3,A4
00000E94  49FA 0D30               2147mm     LEA BIN2HEX_LUT(PC),A4                          ; LOAD THE LOOKUP TABLE
00000E98  E998                    2148mm     ROL.L #4,D0                                     ; SHIFT THE TOP 4 BITS DOWN TO BOTTOM OF THE REGISTER THE AND MASK OFF EVERYTHING ELSE
00000E9A  1600                    2149mm     MOVE.B D0,D3
00000E9C  0283 0000000F           2150mm     ANDI.L #$F,D3
00000EA2  1634 3000               2151mm     MOVE.B 0(A4,D3),D3                              ; USE THAT AS AN INDEX INTO THE LUT
00000EA6                          2152mm     ENDM
00000EA6                          2153mm     PRINT_CHAR D3,D5
00000EA6                          2154mm WAIT_FOR_READY_126                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000EA6                 TRUE     2155mm     IFEQ DEBUG
00000EA6  1A39 00C00003           2156mm         MOVE.B DUART_SRA,D5                         ; READ STATUS REGISTER
00000EAC  0805 0002               2157mm         BTST #2,D5                                  ; CHECK FOR SPACE TO SEND
00000EB0  67F4                    2158mm         BEQ WAIT_FOR_READY_126                      ; NO SPACE, CHECK AGAIN
00000EB2  13C3 00C00007           2159mm         MOVE.B D3,DUART_TXA                         ; SEND THE NEXT CHARACTER
00000EB8                          2160mm     ENDC
00000EB8                          2161mm 
00000EB8                 FALSE    2162mm     IFNE DEBUG
00000EB8                          2163mm     ENDC
00000EB8                          2164mm 
00000EB8                          2165mm     ENDM
00000EB8  57CE FFDA               2166m     DBEQ D6,LOOP_122
00000EBC                          2167m     ENDM
00000EBC                          2168m         PRINT_CRLF D5,A4
00000EBC  49FA 0D86               2169m     LEA CRLF(PC),A4
00000EC0                          2170mm     PRINT_STR A4,D5
00000EC0                          2171mm LOOP_128
00000EC0  0C14 0000               2172mm     CMP.B #NULL,(A4)                                ; 0 -> DONE
00000EC4  6700 0016               2173mm     BEQ EXIT_128
00000EC8                          2174mmm     PRINT_CHAR (A4)+,D5
00000EC8                          2175mmm WAIT_FOR_READY_129                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000EC8                 TRUE     2176mmm     IFEQ DEBUG
00000EC8  1A39 00C00003           2177mmm         MOVE.B DUART_SRA,D5                         ; READ STATUS REGISTER
00000ECE  0805 0002               2178mmm         BTST #2,D5                                  ; CHECK FOR SPACE TO SEND
00000ED2  67F4                    2179mmm         BEQ WAIT_FOR_READY_129                      ; NO SPACE, CHECK AGAIN
00000ED4  13DC 00C00007           2180mmm         MOVE.B (A4)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00000EDA                          2181mmm     ENDC
00000EDA                          2182mmm 
00000EDA                 FALSE    2183mmm     IFNE DEBUG
00000EDA                          2184mmm     ENDC
00000EDA                          2185mmm 
00000EDA                          2186mmm     ENDM
00000EDA  60E4                    2187mm     BRA LOOP_128
00000EDC                          2188mm EXIT_128
00000EDC                          2189mm     ENDM
00000EDC                          2190m     ENDM
00000EDC                          2191          
00000EDC  6000 F724               2192          BRA MAIN_LOOP
00000EE0                          2193      ENDI
00000EE0                          2194s _0000000A
00000EE0                          2195  
00000EE0                          2196      IF D1 <EQ> #0 THEN
00000EE0  B27C 0000               2197s     CMP.W   #0,D1
00000EE4  6600 0006               2198s     BNE _0000000B
00000EE8  6000 F9B8               2199        BRA WAIT_FOR_SRECORD
00000EEC                          2200      ENDI
00000EEC                          2201s _0000000B
00000EEC                          2202  DOWNLOAD_DONE
00000EEC                          2203m     PRINT_REG D0,D5,D6,D2,A1                        ; print out number of Srecords read
00000EEC  43FA 0D5C               2204m     LEA OX(PC),A1
00000EF0                          2205mm     PRINT_STR A1,D5
00000EF0                          2206mm LOOP_131
00000EF0  0C11 0000               2207mm     CMP.B #NULL,(A1)                                ; 0 -> DONE
00000EF4  6700 0016               2208mm     BEQ EXIT_131
00000EF8                          2209mmm     PRINT_CHAR (A1)+,D5
00000EF8                          2210mmm WAIT_FOR_READY_132                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000EF8                 TRUE     2211mmm     IFEQ DEBUG
00000EF8  1A39 00C00003           2212mmm         MOVE.B DUART_SRA,D5                         ; READ STATUS REGISTER
00000EFE  0805 0002               2213mmm         BTST #2,D5                                  ; CHECK FOR SPACE TO SEND
00000F02  67F4                    2214mmm         BEQ WAIT_FOR_READY_132                      ; NO SPACE, CHECK AGAIN
00000F04  13D9 00C00007           2215mmm         MOVE.B (A1)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00000F0A                          2216mmm     ENDC
00000F0A                          2217mmm 
00000F0A                 FALSE    2218mmm     IFNE DEBUG
00000F0A                          2219mmm     ENDC
00000F0A                          2220mmm 
00000F0A                          2221mmm     ENDM
00000F0A  60E4                    2222mm     BRA LOOP_131
00000F0C                          2223mm EXIT_131
00000F0C                          2224mm     ENDM
00000F0C  7407                    2225m     MOVE.L #7,D2                                    ; LOOP ROUND ALL 8 HEX CHARACTERS OF 4 BITS EACH
00000F0E                          2226m LOOP_130
00000F0E                          2227mm     BIN2HEX D0,D6,A1
00000F0E  43FA 0CB6               2228mm     LEA BIN2HEX_LUT(PC),A1                          ; LOAD THE LOOKUP TABLE
00000F12  E998                    2229mm     ROL.L #4,D0                                     ; SHIFT THE TOP 4 BITS DOWN TO BOTTOM OF THE REGISTER THE AND MASK OFF EVERYTHING ELSE
00000F14  1C00                    2230mm     MOVE.B D0,D6
00000F16  0286 0000000F           2231mm     ANDI.L #$F,D6
00000F1C  1C31 6000               2232mm     MOVE.B 0(A1,D6),D6                              ; USE THAT AS AN INDEX INTO THE LUT
00000F20                          2233mm     ENDM
00000F20                          2234mm     PRINT_CHAR D6,D5
00000F20                          2235mm WAIT_FOR_READY_134                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000F20                 TRUE     2236mm     IFEQ DEBUG
00000F20  1A39 00C00003           2237mm         MOVE.B DUART_SRA,D5                         ; READ STATUS REGISTER
00000F26  0805 0002               2238mm         BTST #2,D5                                  ; CHECK FOR SPACE TO SEND
00000F2A  67F4                    2239mm         BEQ WAIT_FOR_READY_134                      ; NO SPACE, CHECK AGAIN
00000F2C  13C6 00C00007           2240mm         MOVE.B D6,DUART_TXA                         ; SEND THE NEXT CHARACTER
00000F32                          2241mm     ENDC
00000F32                          2242mm 
00000F32                 FALSE    2243mm     IFNE DEBUG
00000F32                          2244mm     ENDC
00000F32                          2245mm 
00000F32                          2246mm     ENDM
00000F32  57CA FFDA               2247m     DBEQ D2,LOOP_130
00000F36                          2248m     ENDM
00000F36  43FA 0C33               2249      LEA READ(PC),A1
00000F3A                          2250m     PRINT_STR A1,D5
00000F3A                          2251m LOOP_135
00000F3A  0C11 0000               2252m     CMP.B #NULL,(A1)                                ; 0 -> DONE
00000F3E  6700 0016               2253m     BEQ EXIT_135
00000F42                          2254mm     PRINT_CHAR (A1)+,D5
00000F42                          2255mm WAIT_FOR_READY_136                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000F42                 TRUE     2256mm     IFEQ DEBUG
00000F42  1A39 00C00003           2257mm         MOVE.B DUART_SRA,D5                         ; READ STATUS REGISTER
00000F48  0805 0002               2258mm         BTST #2,D5                                  ; CHECK FOR SPACE TO SEND
00000F4C  67F4                    2259mm         BEQ WAIT_FOR_READY_136                      ; NO SPACE, CHECK AGAIN
00000F4E  13D9 00C00007           2260mm         MOVE.B (A1)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00000F54                          2261mm     ENDC
00000F54                          2262mm 
00000F54                 FALSE    2263mm     IFNE DEBUG
00000F54                          2264mm     ENDC
00000F54                          2265mm 
00000F54                          2266mm     ENDM
00000F54  60E4                    2267m     BRA LOOP_135
00000F56                          2268m EXIT_135
00000F56                          2269m     ENDM
00000F56  2E08                    2270      MOVE.L A0,D7                                    ; set address accumulator to start address
00000F58                          2271m     PRINT_REG D7,D5,D6,D2,A1                        ; print out start address
00000F58  43FA 0CF0               2272m     LEA OX(PC),A1
00000F5C                          2273mm     PRINT_STR A1,D5
00000F5C                          2274mm LOOP_138
00000F5C  0C11 0000               2275mm     CMP.B #NULL,(A1)                                ; 0 -> DONE
00000F60  6700 0016               2276mm     BEQ EXIT_138
00000F64                          2277mmm     PRINT_CHAR (A1)+,D5
00000F64                          2278mmm WAIT_FOR_READY_139                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000F64                 TRUE     2279mmm     IFEQ DEBUG
00000F64  1A39 00C00003           2280mmm         MOVE.B DUART_SRA,D5                         ; READ STATUS REGISTER
00000F6A  0805 0002               2281mmm         BTST #2,D5                                  ; CHECK FOR SPACE TO SEND
00000F6E  67F4                    2282mmm         BEQ WAIT_FOR_READY_139                      ; NO SPACE, CHECK AGAIN
00000F70  13D9 00C00007           2283mmm         MOVE.B (A1)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00000F76                          2284mmm     ENDC
00000F76                          2285mmm 
00000F76                 FALSE    2286mmm     IFNE DEBUG
00000F76                          2287mmm     ENDC
00000F76                          2288mmm 
00000F76                          2289mmm     ENDM
00000F76  60E4                    2290mm     BRA LOOP_138
00000F78                          2291mm EXIT_138
00000F78                          2292mm     ENDM
00000F78  7407                    2293m     MOVE.L #7,D2                                    ; LOOP ROUND ALL 8 HEX CHARACTERS OF 4 BITS EACH
00000F7A                          2294m LOOP_137
00000F7A                          2295mm     BIN2HEX D7,D6,A1
00000F7A  43FA 0C4A               2296mm     LEA BIN2HEX_LUT(PC),A1                          ; LOAD THE LOOKUP TABLE
00000F7E  E99F                    2297mm     ROL.L #4,D7                                     ; SHIFT THE TOP 4 BITS DOWN TO BOTTOM OF THE REGISTER THE AND MASK OFF EVERYTHING ELSE
00000F80  1C07                    2298mm     MOVE.B D7,D6
00000F82  0286 0000000F           2299mm     ANDI.L #$F,D6
00000F88  1C31 6000               2300mm     MOVE.B 0(A1,D6),D6                              ; USE THAT AS AN INDEX INTO THE LUT
00000F8C                          2301mm     ENDM
00000F8C                          2302mm     PRINT_CHAR D6,D5
00000F8C                          2303mm WAIT_FOR_READY_141                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000F8C                 TRUE     2304mm     IFEQ DEBUG
00000F8C  1A39 00C00003           2305mm         MOVE.B DUART_SRA,D5                         ; READ STATUS REGISTER
00000F92  0805 0002               2306mm         BTST #2,D5                                  ; CHECK FOR SPACE TO SEND
00000F96  67F4                    2307mm         BEQ WAIT_FOR_READY_141                      ; NO SPACE, CHECK AGAIN
00000F98  13C6 00C00007           2308mm         MOVE.B D6,DUART_TXA                         ; SEND THE NEXT CHARACTER
00000F9E                          2309mm     ENDC
00000F9E                          2310mm 
00000F9E                 FALSE    2311mm     IFNE DEBUG
00000F9E                          2312mm     ENDC
00000F9E                          2313mm 
00000F9E                          2314mm     ENDM
00000F9E  57CA FFDA               2315m     DBEQ D2,LOOP_137
00000FA2                          2316m     ENDM
00000FA2                          2317m     PRINT_CRLF D5,A4
00000FA2  49FA 0CA0               2318m     LEA CRLF(PC),A4
00000FA6                          2319mm     PRINT_STR A4,D5
00000FA6                          2320mm LOOP_143
00000FA6  0C14 0000               2321mm     CMP.B #NULL,(A4)                                ; 0 -> DONE
00000FAA  6700 0016               2322mm     BEQ EXIT_143
00000FAE                          2323mmm     PRINT_CHAR (A4)+,D5
00000FAE                          2324mmm WAIT_FOR_READY_144                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000FAE                 TRUE     2325mmm     IFEQ DEBUG
00000FAE  1A39 00C00003           2326mmm         MOVE.B DUART_SRA,D5                         ; READ STATUS REGISTER
00000FB4  0805 0002               2327mmm         BTST #2,D5                                  ; CHECK FOR SPACE TO SEND
00000FB8  67F4                    2328mmm         BEQ WAIT_FOR_READY_144                      ; NO SPACE, CHECK AGAIN
00000FBA  13DC 00C00007           2329mmm         MOVE.B (A4)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00000FC0                          2330mmm     ENDC
00000FC0                          2331mmm 
00000FC0                 FALSE    2332mmm     IFNE DEBUG
00000FC0                          2333mmm     ENDC
00000FC0                          2334mmm 
00000FC0                          2335mmm     ENDM
00000FC0  60E4                    2336mm     BRA LOOP_143
00000FC2                          2337mm EXIT_143
00000FC2                          2338mm     ENDM
00000FC2                          2339m     ENDM
00000FC2                          2340  
00000FC2  6000 F63E               2341      BRA MAIN_LOOP
00000FC6                          2342  
00000FC6                          2343  G
00000FC6  2047                    2344      MOVE.L D7,A0                                        ; grab the address accumulator and then clear it
00000FC8  7E00                    2345      MOVE.L #0,D7
00000FCA                          2346  
00000FCA  4ED0                    2347      JMP (A0)
00000FCC                          2348          
00000FCC                          2349  Z
00000FCC  207C 00200000           2350      MOVE.L #RAM,A0                                  ; address of RAM
00000FD2  D1FC 00100000           2351      ADD.L #$100000,A0
00000FD8                          2352  
00000FD8                          2353      FOR.L D0 = #0 TO #$FFFFC BY #4 DO               ; write
00000FD8  7000                    2354s     MOVE.L  #0,D0
00000FDA  6000 0012               2355s     BRA _20000007
00000FDE                          2356s _20000006
00000FDE  2200                    2357          MOVE.L D0,D1                                ; progress update
00000FE0  E089                    2358          LSR.L #8,D1 
00000FE2  E089                    2359          LSR.L #8,D1
00000FE4  13C1 00E00001           2360          MOVE.B D1,DISPLAY
00000FEA                          2361          
00000FEA  2108                    2362          MOVE.L A0,-(A0)
00000FEC                          2363      ENDF
00000FEC  5880                    2364s     ADD.L   #4,D0
00000FEE                          2365s _20000007
00000FEE  B0BC 000FFFFC           2366s     CMP.L   #$FFFFC,D0
00000FF4  6FE8                    2367s     BLE _20000006
00000FF6                          2368  
00000FF6  207C 00200000           2369      MOVE.L #RAM,A0                                  ; address of RAM
00000FFC  D1FC 00100000           2370      ADD.L #$100000,A0
00001002                          2371  
00001002                          2372      FOR.L D0 = #0 TO #$FFFFC BY #4 DO               ; read back and check 
00001002  7000                    2373s     MOVE.L  #0,D0
00001004  6000 00A8               2374s     BRA _20000009
00001008                          2375s _20000008
00001008  2200                    2376          MOVE.L D0,D1                                ; progress update
0000100A  E089                    2377          LSR.L #8,D1
0000100C  E089                    2378          LSR.L #8,D1
0000100E  13C1 00E00001           2379          MOVE.B D1,DISPLAY
00001014                          2380  
00001014  2408                    2381          MOVE.L A0,D2
00001016  2220                    2382          MOVE.L -(A0),D1
00001018                          2383  
00001018                          2384          IF.L D2 <NE> D1 THEN
00001018  B481                    2385s     CMP.L   D1,D2
0000101A  6700 0090               2386s     BEQ _0000000C
0000101E  43FA 0B95               2387              LEA RAM_ERROR(PC),A1
00001022                          2388m             PRINT_STR A1,D1
00001022                          2389m LOOP_145
00001022  0C11 0000               2390m     CMP.B #NULL,(A1)                                ; 0 -> DONE
00001026  6700 0016               2391m     BEQ EXIT_145
0000102A                          2392mm     PRINT_CHAR (A1)+,D1
0000102A                          2393mm WAIT_FOR_READY_146                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
0000102A                 TRUE     2394mm     IFEQ DEBUG
0000102A  1239 00C00003           2395mm         MOVE.B DUART_SRA,D1                         ; READ STATUS REGISTER
00001030  0801 0002               2396mm         BTST #2,D1                                  ; CHECK FOR SPACE TO SEND
00001034  67F4                    2397mm         BEQ WAIT_FOR_READY_146                      ; NO SPACE, CHECK AGAIN
00001036  13D9 00C00007           2398mm         MOVE.B (A1)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
0000103C                          2399mm     ENDC
0000103C                          2400mm 
0000103C                 FALSE    2401mm     IFNE DEBUG
0000103C                          2402mm     ENDC
0000103C                          2403mm 
0000103C                          2404mm     ENDM
0000103C  60E4                    2405m     BRA LOOP_145
0000103E                          2406m EXIT_145
0000103E                          2407m     ENDM
0000103E  2208                    2408              MOVE.L A0,D1
00001040  5981                    2409              SUB.L #4,D1
00001042                          2410m             PRINT_REG D1,D3,D2,D6,A1                ; print out failure address
00001042  43FA 0C06               2411m     LEA OX(PC),A1
00001046                          2412mm     PRINT_STR A1,D3
00001046                          2413mm LOOP_148
00001046  0C11 0000               2414mm     CMP.B #NULL,(A1)                                ; 0 -> DONE
0000104A  6700 0016               2415mm     BEQ EXIT_148
0000104E                          2416mmm     PRINT_CHAR (A1)+,D3
0000104E                          2417mmm WAIT_FOR_READY_149                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
0000104E                 TRUE     2418mmm     IFEQ DEBUG
0000104E  1639 00C00003           2419mmm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
00001054  0803 0002               2420mmm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
00001058  67F4                    2421mmm         BEQ WAIT_FOR_READY_149                      ; NO SPACE, CHECK AGAIN
0000105A  13D9 00C00007           2422mmm         MOVE.B (A1)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00001060                          2423mmm     ENDC
00001060                          2424mmm 
00001060                 FALSE    2425mmm     IFNE DEBUG
00001060                          2426mmm     ENDC
00001060                          2427mmm 
00001060                          2428mmm     ENDM
00001060  60E4                    2429mm     BRA LOOP_148
00001062                          2430mm EXIT_148
00001062                          2431mm     ENDM
00001062  7C07                    2432m     MOVE.L #7,D6                                    ; LOOP ROUND ALL 8 HEX CHARACTERS OF 4 BITS EACH
00001064                          2433m LOOP_147
00001064                          2434mm     BIN2HEX D1,D2,A1
00001064  43FA 0B60               2435mm     LEA BIN2HEX_LUT(PC),A1                          ; LOAD THE LOOKUP TABLE
00001068  E999                    2436mm     ROL.L #4,D1                                     ; SHIFT THE TOP 4 BITS DOWN TO BOTTOM OF THE REGISTER THE AND MASK OFF EVERYTHING ELSE
0000106A  1401                    2437mm     MOVE.B D1,D2
0000106C  0282 0000000F           2438mm     ANDI.L #$F,D2
00001072  1431 2000               2439mm     MOVE.B 0(A1,D2),D2                              ; USE THAT AS AN INDEX INTO THE LUT
00001076                          2440mm     ENDM
00001076                          2441mm     PRINT_CHAR D2,D3
00001076                          2442mm WAIT_FOR_READY_151                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00001076                 TRUE     2443mm     IFEQ DEBUG
00001076  1639 00C00003           2444mm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
0000107C  0803 0002               2445mm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
00001080  67F4                    2446mm         BEQ WAIT_FOR_READY_151                      ; NO SPACE, CHECK AGAIN
00001082  13C2 00C00007           2447mm         MOVE.B D2,DUART_TXA                         ; SEND THE NEXT CHARACTER
00001088                          2448mm     ENDC
00001088                          2449mm 
00001088                 FALSE    2450mm     IFNE DEBUG
00001088                          2451mm     ENDC
00001088                          2452mm 
00001088                          2453mm     ENDM
00001088  57CE FFDA               2454m     DBEQ D6,LOOP_147
0000108C                          2455m     ENDM
0000108C                          2456m             PRINT_CRLF D3,A1
0000108C  43FA 0BB6               2457m     LEA CRLF(PC),A1
00001090                          2458mm     PRINT_STR A1,D3
00001090                          2459mm LOOP_153
00001090  0C11 0000               2460mm     CMP.B #NULL,(A1)                                ; 0 -> DONE
00001094  6700 0016               2461mm     BEQ EXIT_153
00001098                          2462mmm     PRINT_CHAR (A1)+,D3
00001098                          2463mmm WAIT_FOR_READY_154                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00001098                 TRUE     2464mmm     IFEQ DEBUG
00001098  1639 00C00003           2465mmm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
0000109E  0803 0002               2466mmm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
000010A2  67F4                    2467mmm         BEQ WAIT_FOR_READY_154                      ; NO SPACE, CHECK AGAIN
000010A4  13D9 00C00007           2468mmm         MOVE.B (A1)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
000010AA                          2469mmm     ENDC
000010AA                          2470mmm 
000010AA                 FALSE    2471mmm     IFNE DEBUG
000010AA                          2472mmm     ENDC
000010AA                          2473mmm 
000010AA                          2474mmm     ENDM
000010AA  60E4                    2475mm     BRA LOOP_153
000010AC                          2476mm EXIT_153
000010AC                          2477mm     ENDM
000010AC                          2478m     ENDM
000010AC                          2479          ENDI 
000010AC                          2480s _0000000C
000010AC                          2481      ENDF
000010AC  5880                    2482s     ADD.L   #4,D0
000010AE                          2483s _20000009
000010AE  B0BC 000FFFFC           2484s     CMP.L   #$FFFFC,D0
000010B4  6F00 FF52               2485s     BLE _20000008
000010B8                          2486  
000010B8  6000 F548               2487      BRA MAIN_LOOP
000010BC                          2488  
000010BC                          2489  L
000010BC  7000                    2490      MOVE.L #0,D0                                    ; D0 will be the length to write               
000010BE  7200                    2491      MOVE.L #0,D1                                    ; D1 will be the address to write 
000010C0                          2492  
000010C0                          2493      FOR D2 = #0 TO #7 DO                            ; read 4 bytes, we'll split into 2 byte address (MS) and 2 byte length (LS)
000010C0  343C 0000               2494s     MOVE.W  #0,D2
000010C4  6000 0046               2495s     BRA _2000000B
000010C8                          2496s _2000000A
000010C8  E989                    2497          LSL.L #4,D1                                 ; make what we have so far more significant
000010CA                          2498m         WAIT_CHAR D3,D4                             ; next character -> D2
000010CA                          2499m WAIT_FOR_READY_155                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
000010CA                 TRUE     2500m     IFEQ DEBUG
000010CA  1839 00C00003           2501m         MOVE.B DUART_SRA,D4                         ; READ STATUS REGISTER
000010D0  0804 0000               2502m         BTST #0,D4                                  ; CHECK FOR CHARACTER
000010D4  67F4                    2503m         BEQ WAIT_FOR_READY_155                      ; NOTHING, CHECK AGAIN
000010D6                          2504m     ENDC
000010D6                          2505m 
000010D6                          2506mm     READ_CHAR D3
000010D6                 TRUE     2507mm     IFEQ DEBUG
000010D6  1639 00C00007           2508mm         MOVE.B DUART_RXA,D3                         ; GOT A CHARACTER, READ IT
000010DC                          2509mm     ENDC
000010DC                 FALSE    2510mm     IFNE DEBUG
000010DC                          2511mm     ENDC
000010DC                          2512mm 
000010DC  B63C 001B               2513mm     CMP.B #$1B,D3                                   ; CHECK FOR ESCAPE AND GO TO START
000010E0  6700 F31E               2514mm     BEQ START
000010E4                          2515mm     ENDM
000010E4                          2516m 
000010E4                 TRUE     2517m     IFEQ DEBUG
000010E4                          2518mm         PRINT_CHAR D3,D4                            ; ECHO IT BACK
000010E4                          2519mm WAIT_FOR_READY_157                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
000010E4                 TRUE     2520mm     IFEQ DEBUG
000010E4  1839 00C00003           2521mm         MOVE.B DUART_SRA,D4                         ; READ STATUS REGISTER
000010EA  0804 0002               2522mm         BTST #2,D4                                  ; CHECK FOR SPACE TO SEND
000010EE  67F4                    2523mm         BEQ WAIT_FOR_READY_157                      ; NO SPACE, CHECK AGAIN
000010F0  13C3 00C00007           2524mm         MOVE.B D3,DUART_TXA                         ; SEND THE NEXT CHARACTER
000010F6                          2525mm     ENDC
000010F6                          2526mm 
000010F6                 FALSE    2527mm     IFNE DEBUG
000010F6                          2528mm     ENDC
000010F6                          2529mm 
000010F6                          2530mm     ENDM
000010F6                          2531m     ENDC
000010F6                          2532m     ENDM
000010F6                          2533m         HEX2BIN D3,D3,A0                            ; convert to binary -> D2
000010F6  41FA 0ADE               2534m     LEA HEX2BIN_LUT(PC),A0                          ; LOAD THE LOOKUP TABLE
000010FA  0403 0030               2535m     SUB.B #'0',D3                                   ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
000010FE  C6BC 000000FF           2536m     AND.L #$FF,D3                                   ; IGNORE THE TOP 3 BYTES
00001104  1630 3000               2537m     MOVE.B 0(A0,D3),D3                              ; USE THAT AS AN INDEX INTO THE LUT   
00001108                          2538m     ENDM
00001108  8203                    2539          OR.B D3,D1
0000110A                          2540      ENDF
0000110A  5242                    2541s     ADD.W   #1,D2
0000110C                          2542s _2000000B
0000110C  B47C 0007               2543s     CMP.W   #7,D2
00001110  6FB6                    2544s     BLE _2000000A
00001112                          2545  
00001112  3001                    2546      MOVE.W D1,D0                                    ; extract the LSword for the length
00001114  E089                    2547      LSR.L #8,D1                                     ; extract the MSword for the address
00001116  E089                    2548      LSR.L #8,D1
00001118                          2549  
00001118                          2550m     PRINT_CRLF D2,A1
00001118  43FA 0B2A               2551m     LEA CRLF(PC),A1
0000111C                          2552mm     PRINT_STR A1,D2
0000111C                          2553mm LOOP_160
0000111C  0C11 0000               2554mm     CMP.B #NULL,(A1)                                ; 0 -> DONE
00001120  6700 0016               2555mm     BEQ EXIT_160
00001124                          2556mmm     PRINT_CHAR (A1)+,D2
00001124                          2557mmm WAIT_FOR_READY_161                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00001124                 TRUE     2558mmm     IFEQ DEBUG
00001124  1439 00C00003           2559mmm         MOVE.B DUART_SRA,D2                         ; READ STATUS REGISTER
0000112A  0802 0002               2560mmm         BTST #2,D2                                  ; CHECK FOR SPACE TO SEND
0000112E  67F4                    2561mmm         BEQ WAIT_FOR_READY_161                      ; NO SPACE, CHECK AGAIN
00001130  13D9 00C00007           2562mmm         MOVE.B (A1)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00001136                          2563mmm     ENDC
00001136                          2564mmm 
00001136                 FALSE    2565mmm     IFNE DEBUG
00001136                          2566mmm     ENDC
00001136                          2567mmm 
00001136                          2568mmm     ENDM
00001136  60E4                    2569mm     BRA LOOP_160
00001138                          2570mm EXIT_160
00001138                          2571mm     ENDM
00001138                          2572m     ENDM
00001138                          2573  
00001138  2041                    2574      MOVE.L D1,A0                                    ; target address
0000113A  2641                    2575      MOVE.L D1,A3                                    ; keep a copy for later
0000113C                          2576  
0000113C  2247                    2577      MOVE.L D7,A1                                    ; address accumulator -> address register
0000113E  D3FC 00000400           2578      ADD.L #START,A1                             ; skip the vectors
00001144  2847                    2579      MOVE.L D7,A4                                    ; keep a clean copy for later
00001146  7E00                    2580      MOVE.L #0,D7                                    ; clear the now used address accumulator
00001148                          2581  
00001148                          2582m     UNPROTECT
00001148  31FC AAAA 2AAA          2583m     MOVE.W #$AAAA,$2AAA                             ; REMOVE WRITE PROTECT
0000114E  4E71                    2584m     NOP
00001150  31FC 5555 1554          2585m     MOVE.W #$5555,$1554
00001156  4E71                    2586m     NOP
00001158  31FC 8080 2AAA          2587m     MOVE.W #$8080,$2AAA
0000115E  4E71                    2588m     NOP
00001160  31FC AAAA 2AAA          2589m     MOVE.W #$AAAA,$2AAA
00001166  4E71                    2590m     NOP
00001168  31FC 5555 1554          2591m     MOVE.W #$5555,$1554
0000116E  4E71                    2592m     NOP
00001170  31FC 2020 2AAA          2593m     MOVE.W #$2020,$2AAA
00001176                          2594m     ENDM
00001176                          2595  
00001176  45FA 0A75               2596      LEA LOADING(PC),A2                              ; the prints seem to be important for timing to unprotect the EEPROM
0000117A                          2597m     PRINT_STR A2,D2
0000117A                          2598m LOOP_163
0000117A  0C12 0000               2599m     CMP.B #NULL,(A2)                                ; 0 -> DONE
0000117E  6700 0016               2600m     BEQ EXIT_163
00001182                          2601mm     PRINT_CHAR (A2)+,D2
00001182                          2602mm WAIT_FOR_READY_164                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00001182                 TRUE     2603mm     IFEQ DEBUG
00001182  1439 00C00003           2604mm         MOVE.B DUART_SRA,D2                         ; READ STATUS REGISTER
00001188  0802 0002               2605mm         BTST #2,D2                                  ; CHECK FOR SPACE TO SEND
0000118C  67F4                    2606mm         BEQ WAIT_FOR_READY_164                      ; NO SPACE, CHECK AGAIN
0000118E  13DA 00C00007           2607mm         MOVE.B (A2)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00001194                          2608mm     ENDC
00001194                          2609mm 
00001194                 FALSE    2610mm     IFNE DEBUG
00001194                          2611mm     ENDC
00001194                          2612mm 
00001194                          2613mm     ENDM
00001194  60E4                    2614m     BRA LOOP_163
00001196                          2615m EXIT_163
00001196                          2616m     ENDM
00001196                          2617  
00001196  45FA 0A69               2618      LEA CODE(PC),A2
0000119A                          2619m     PRINT_STR A2,D2
0000119A                          2620m LOOP_165
0000119A  0C12 0000               2621m     CMP.B #NULL,(A2)                                ; 0 -> DONE
0000119E  6700 0016               2622m     BEQ EXIT_165
000011A2                          2623mm     PRINT_CHAR (A2)+,D2
000011A2                          2624mm WAIT_FOR_READY_166                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
000011A2                 TRUE     2625mm     IFEQ DEBUG
000011A2  1439 00C00003           2626mm         MOVE.B DUART_SRA,D2                         ; READ STATUS REGISTER
000011A8  0802 0002               2627mm         BTST #2,D2                                  ; CHECK FOR SPACE TO SEND
000011AC  67F4                    2628mm         BEQ WAIT_FOR_READY_166                      ; NO SPACE, CHECK AGAIN
000011AE  13DA 00C00007           2629mm         MOVE.B (A2)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
000011B4                          2630mm     ENDC
000011B4                          2631mm 
000011B4                 FALSE    2632mm     IFNE DEBUG
000011B4                          2633mm     ENDC
000011B4                          2634mm 
000011B4                          2635mm     ENDM
000011B4  60E4                    2636m     BRA LOOP_165
000011B6                          2637m EXIT_165
000011B6                          2638m     ENDM
000011B6                          2639      
000011B6  2409                    2640      MOVE.L A1,D2
000011B8                          2641m     PRINT_REG D2,D3,D4,D5,A2
000011B8  45FA 0A90               2642m     LEA OX(PC),A2
000011BC                          2643mm     PRINT_STR A2,D3
000011BC                          2644mm LOOP_168
000011BC  0C12 0000               2645mm     CMP.B #NULL,(A2)                                ; 0 -> DONE
000011C0  6700 0016               2646mm     BEQ EXIT_168
000011C4                          2647mmm     PRINT_CHAR (A2)+,D3
000011C4                          2648mmm WAIT_FOR_READY_169                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
000011C4                 TRUE     2649mmm     IFEQ DEBUG
000011C4  1639 00C00003           2650mmm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
000011CA  0803 0002               2651mmm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
000011CE  67F4                    2652mmm         BEQ WAIT_FOR_READY_169                      ; NO SPACE, CHECK AGAIN
000011D0  13DA 00C00007           2653mmm         MOVE.B (A2)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
000011D6                          2654mmm     ENDC
000011D6                          2655mmm 
000011D6                 FALSE    2656mmm     IFNE DEBUG
000011D6                          2657mmm     ENDC
000011D6                          2658mmm 
000011D6                          2659mmm     ENDM
000011D6  60E4                    2660mm     BRA LOOP_168
000011D8                          2661mm EXIT_168
000011D8                          2662mm     ENDM
000011D8  7A07                    2663m     MOVE.L #7,D5                                    ; LOOP ROUND ALL 8 HEX CHARACTERS OF 4 BITS EACH
000011DA                          2664m LOOP_167
000011DA                          2665mm     BIN2HEX D2,D4,A2
000011DA  45FA 09EA               2666mm     LEA BIN2HEX_LUT(PC),A2                          ; LOAD THE LOOKUP TABLE
000011DE  E99A                    2667mm     ROL.L #4,D2                                     ; SHIFT THE TOP 4 BITS DOWN TO BOTTOM OF THE REGISTER THE AND MASK OFF EVERYTHING ELSE
000011E0  1802                    2668mm     MOVE.B D2,D4
000011E2  0284 0000000F           2669mm     ANDI.L #$F,D4
000011E8  1832 4000               2670mm     MOVE.B 0(A2,D4),D4                              ; USE THAT AS AN INDEX INTO THE LUT
000011EC                          2671mm     ENDM
000011EC                          2672mm     PRINT_CHAR D4,D3
000011EC                          2673mm WAIT_FOR_READY_171                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
000011EC                 TRUE     2674mm     IFEQ DEBUG
000011EC  1639 00C00003           2675mm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
000011F2  0803 0002               2676mm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
000011F6  67F4                    2677mm         BEQ WAIT_FOR_READY_171                      ; NO SPACE, CHECK AGAIN
000011F8  13C4 00C00007           2678mm         MOVE.B D4,DUART_TXA                         ; SEND THE NEXT CHARACTER
000011FE                          2679mm     ENDC
000011FE                          2680mm 
000011FE                 FALSE    2681mm     IFNE DEBUG
000011FE                          2682mm     ENDC
000011FE                          2683mm 
000011FE                          2684mm     ENDM
000011FE  57CD FFDA               2685m     DBEQ D5,LOOP_167
00001202                          2686m     ENDM
00001202                          2687  
00001202  45FA 0A49               2688      LEA TO(PC),A2
00001206                          2689m     PRINT_STR A2,D3
00001206                          2690m LOOP_172
00001206  0C12 0000               2691m     CMP.B #NULL,(A2)                                ; 0 -> DONE
0000120A  6700 0016               2692m     BEQ EXIT_172
0000120E                          2693mm     PRINT_CHAR (A2)+,D3
0000120E                          2694mm WAIT_FOR_READY_173                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
0000120E                 TRUE     2695mm     IFEQ DEBUG
0000120E  1639 00C00003           2696mm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
00001214  0803 0002               2697mm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
00001218  67F4                    2698mm         BEQ WAIT_FOR_READY_173                      ; NO SPACE, CHECK AGAIN
0000121A  13DA 00C00007           2699mm         MOVE.B (A2)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00001220                          2700mm     ENDC
00001220                          2701mm 
00001220                 FALSE    2702mm     IFNE DEBUG
00001220                          2703mm     ENDC
00001220                          2704mm 
00001220                          2705mm     ENDM
00001220  60E4                    2706m     BRA LOOP_172
00001222                          2707m EXIT_172
00001222                          2708m     ENDM
00001222                          2709  
00001222  2408                    2710      MOVE.L A0,D2
00001224                          2711m     PRINT_REG D2,D3,D4,D5,A2
00001224  45FA 0A24               2712m     LEA OX(PC),A2
00001228                          2713mm     PRINT_STR A2,D3
00001228                          2714mm LOOP_175
00001228  0C12 0000               2715mm     CMP.B #NULL,(A2)                                ; 0 -> DONE
0000122C  6700 0016               2716mm     BEQ EXIT_175
00001230                          2717mmm     PRINT_CHAR (A2)+,D3
00001230                          2718mmm WAIT_FOR_READY_176                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00001230                 TRUE     2719mmm     IFEQ DEBUG
00001230  1639 00C00003           2720mmm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
00001236  0803 0002               2721mmm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
0000123A  67F4                    2722mmm         BEQ WAIT_FOR_READY_176                      ; NO SPACE, CHECK AGAIN
0000123C  13DA 00C00007           2723mmm         MOVE.B (A2)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00001242                          2724mmm     ENDC
00001242                          2725mmm 
00001242                 FALSE    2726mmm     IFNE DEBUG
00001242                          2727mmm     ENDC
00001242                          2728mmm 
00001242                          2729mmm     ENDM
00001242  60E4                    2730mm     BRA LOOP_175
00001244                          2731mm EXIT_175
00001244                          2732mm     ENDM
00001244  7A07                    2733m     MOVE.L #7,D5                                    ; LOOP ROUND ALL 8 HEX CHARACTERS OF 4 BITS EACH
00001246                          2734m LOOP_174
00001246                          2735mm     BIN2HEX D2,D4,A2
00001246  45FA 097E               2736mm     LEA BIN2HEX_LUT(PC),A2                          ; LOAD THE LOOKUP TABLE
0000124A  E99A                    2737mm     ROL.L #4,D2                                     ; SHIFT THE TOP 4 BITS DOWN TO BOTTOM OF THE REGISTER THE AND MASK OFF EVERYTHING ELSE
0000124C  1802                    2738mm     MOVE.B D2,D4
0000124E  0284 0000000F           2739mm     ANDI.L #$F,D4
00001254  1832 4000               2740mm     MOVE.B 0(A2,D4),D4                              ; USE THAT AS AN INDEX INTO THE LUT
00001258                          2741mm     ENDM
00001258                          2742mm     PRINT_CHAR D4,D3
00001258                          2743mm WAIT_FOR_READY_178                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00001258                 TRUE     2744mm     IFEQ DEBUG
00001258  1639 00C00003           2745mm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
0000125E  0803 0002               2746mm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
00001262  67F4                    2747mm         BEQ WAIT_FOR_READY_178                      ; NO SPACE, CHECK AGAIN
00001264  13C4 00C00007           2748mm         MOVE.B D4,DUART_TXA                         ; SEND THE NEXT CHARACTER
0000126A                          2749mm     ENDC
0000126A                          2750mm 
0000126A                 FALSE    2751mm     IFNE DEBUG
0000126A                          2752mm     ENDC
0000126A                          2753mm 
0000126A                          2754mm     ENDM
0000126A  57CD FFDA               2755m     DBEQ D5,LOOP_174
0000126E                          2756m     ENDM
0000126E                          2757  
0000126E                          2758m     PRINT_CRLF D3,A2
0000126E  45FA 09D4               2759m     LEA CRLF(PC),A2
00001272                          2760mm     PRINT_STR A2,D3
00001272                          2761mm LOOP_180
00001272  0C12 0000               2762mm     CMP.B #NULL,(A2)                                ; 0 -> DONE
00001276  6700 0016               2763mm     BEQ EXIT_180
0000127A                          2764mmm     PRINT_CHAR (A2)+,D3
0000127A                          2765mmm WAIT_FOR_READY_181                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
0000127A                 TRUE     2766mmm     IFEQ DEBUG
0000127A  1639 00C00003           2767mmm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
00001280  0803 0002               2768mmm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
00001284  67F4                    2769mmm         BEQ WAIT_FOR_READY_181                      ; NO SPACE, CHECK AGAIN
00001286  13DA 00C00007           2770mmm         MOVE.B (A2)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
0000128C                          2771mmm     ENDC
0000128C                          2772mmm 
0000128C                 FALSE    2773mmm     IFNE DEBUG
0000128C                          2774mmm     ENDC
0000128C                          2775mmm 
0000128C                          2776mmm     ENDM
0000128C  60E4                    2777mm     BRA LOOP_180
0000128E                          2778mm EXIT_180
0000128E                          2779mm     ENDM
0000128E                          2780m     ENDM
0000128E                          2781  
0000128E                          2782      WHILE D0 <GT> #0 DO
0000128E                          2783s _10000014
0000128E  B07C 0000               2784s     CMP.W   #0,D0
00001292  6F00 001C               2785s     BLE _10000015
00001296  5580                    2786          SUB.L #2,D0
00001298                          2787  
00001298  13D1 00E00001           2788          MOVE.B (A1),DISPLAY
0000129E                          2789m         PROGRAM (A1),(A0),D2
0000129E  3091                    2790m   MOVE.W (A1),(A0)                                      ; WRITE THE DATA
000012A0                          2791m 
000012A0                          2792m WAIT_FOR_COMPLETE_182
000012A0  3410                    2793m         MOVE.W (A0),D2
000012A2                          2794m 
000012A2                          2795m         IF.W D2 <NE> (A1) THEN
000012A2  B451                    2796ms     CMP.W   (A1),D2
000012A4  6700 0004               2797ms     BEQ _0000000D
000012A8  60F6                    2798m             BRA WAIT_FOR_COMPLETE_182
000012AA                          2799m         ENDI
000012AA                          2800ms _0000000D
000012AA                          2801m         ENDM
000012AA                          2802  
000012AA  5488                    2803          ADD.L #2,A0
000012AC  5489                    2804          ADD.L #2,A1
000012AE                          2805      ENDW
000012AE  60DE                    2806s     BRA _10000014
000012B0                          2807s _10000015
000012B0                          2808  
000012B0  45FA 095E               2809      LEA SP(PC),A2
000012B4                          2810m     PRINT_STR A2,D2
000012B4                          2811m LOOP_183
000012B4  0C12 0000               2812m     CMP.B #NULL,(A2)                                ; 0 -> DONE
000012B8  6700 0016               2813m     BEQ EXIT_183
000012BC                          2814mm     PRINT_CHAR (A2)+,D2
000012BC                          2815mm WAIT_FOR_READY_184                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
000012BC                 TRUE     2816mm     IFEQ DEBUG
000012BC  1439 00C00003           2817mm         MOVE.B DUART_SRA,D2                         ; READ STATUS REGISTER
000012C2  0802 0002               2818mm         BTST #2,D2                                  ; CHECK FOR SPACE TO SEND
000012C6  67F4                    2819mm         BEQ WAIT_FOR_READY_184                      ; NO SPACE, CHECK AGAIN
000012C8  13DA 00C00007           2820mm         MOVE.B (A2)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
000012CE                          2821mm     ENDC
000012CE                          2822mm 
000012CE                 FALSE    2823mm     IFNE DEBUG
000012CE                          2824mm     ENDC
000012CE                          2825mm 
000012CE                          2826mm     ENDM
000012CE  60E4                    2827m     BRA LOOP_183
000012D0                          2828m EXIT_183
000012D0                          2829m     ENDM
000012D0                          2830      
000012D0  41F8 0000               2831      LEA STACK,A0
000012D4  D1CC                    2832      ADD.L A4,A0
000012D6  2010                    2833      MOVE.L (A0),D0
000012D8                          2834m     PRINT_REG D0,D2,D3,D4,A3
000012D8  47FA 0970               2835m     LEA OX(PC),A3
000012DC                          2836mm     PRINT_STR A3,D2
000012DC                          2837mm LOOP_186
000012DC  0C13 0000               2838mm     CMP.B #NULL,(A3)                                ; 0 -> DONE
000012E0  6700 0016               2839mm     BEQ EXIT_186
000012E4                          2840mmm     PRINT_CHAR (A3)+,D2
000012E4                          2841mmm WAIT_FOR_READY_187                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
000012E4                 TRUE     2842mmm     IFEQ DEBUG
000012E4  1439 00C00003           2843mmm         MOVE.B DUART_SRA,D2                         ; READ STATUS REGISTER
000012EA  0802 0002               2844mmm         BTST #2,D2                                  ; CHECK FOR SPACE TO SEND
000012EE  67F4                    2845mmm         BEQ WAIT_FOR_READY_187                      ; NO SPACE, CHECK AGAIN
000012F0  13DB 00C00007           2846mmm         MOVE.B (A3)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
000012F6                          2847mmm     ENDC
000012F6                          2848mmm 
000012F6                 FALSE    2849mmm     IFNE DEBUG
000012F6                          2850mmm     ENDC
000012F6                          2851mmm 
000012F6                          2852mmm     ENDM
000012F6  60E4                    2853mm     BRA LOOP_186
000012F8                          2854mm EXIT_186
000012F8                          2855mm     ENDM
000012F8  7807                    2856m     MOVE.L #7,D4                                    ; LOOP ROUND ALL 8 HEX CHARACTERS OF 4 BITS EACH
000012FA                          2857m LOOP_185
000012FA                          2858mm     BIN2HEX D0,D3,A3
000012FA  47FA 08CA               2859mm     LEA BIN2HEX_LUT(PC),A3                          ; LOAD THE LOOKUP TABLE
000012FE  E998                    2860mm     ROL.L #4,D0                                     ; SHIFT THE TOP 4 BITS DOWN TO BOTTOM OF THE REGISTER THE AND MASK OFF EVERYTHING ELSE
00001300  1600                    2861mm     MOVE.B D0,D3
00001302  0283 0000000F           2862mm     ANDI.L #$F,D3
00001308  1633 3000               2863mm     MOVE.B 0(A3,D3),D3                              ; USE THAT AS AN INDEX INTO THE LUT
0000130C                          2864mm     ENDM
0000130C                          2865mm     PRINT_CHAR D3,D2
0000130C                          2866mm WAIT_FOR_READY_189                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
0000130C                 TRUE     2867mm     IFEQ DEBUG
0000130C  1439 00C00003           2868mm         MOVE.B DUART_SRA,D2                         ; READ STATUS REGISTER
00001312  0802 0002               2869mm         BTST #2,D2                                  ; CHECK FOR SPACE TO SEND
00001316  67F4                    2870mm         BEQ WAIT_FOR_READY_189                      ; NO SPACE, CHECK AGAIN
00001318  13C3 00C00007           2871mm         MOVE.B D3,DUART_TXA                         ; SEND THE NEXT CHARACTER
0000131E                          2872mm     ENDC
0000131E                          2873mm 
0000131E                 FALSE    2874mm     IFNE DEBUG
0000131E                          2875mm     ENDC
0000131E                          2876mm 
0000131E                          2877mm     ENDM
0000131E  57CC FFDA               2878m     DBEQ D4,LOOP_185
00001322                          2879m     ENDM
00001322                          2880m     PRINT_CRLF D2,A2
00001322  45FA 0920               2881m     LEA CRLF(PC),A2
00001326                          2882mm     PRINT_STR A2,D2
00001326                          2883mm LOOP_191
00001326  0C12 0000               2884mm     CMP.B #NULL,(A2)                                ; 0 -> DONE
0000132A  6700 0016               2885mm     BEQ EXIT_191
0000132E                          2886mmm     PRINT_CHAR (A2)+,D2
0000132E                          2887mmm WAIT_FOR_READY_192                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
0000132E                 TRUE     2888mmm     IFEQ DEBUG
0000132E  1439 00C00003           2889mmm         MOVE.B DUART_SRA,D2                         ; READ STATUS REGISTER
00001334  0802 0002               2890mmm         BTST #2,D2                                  ; CHECK FOR SPACE TO SEND
00001338  67F4                    2891mmm         BEQ WAIT_FOR_READY_192                      ; NO SPACE, CHECK AGAIN
0000133A  13DA 00C00007           2892mmm         MOVE.B (A2)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00001340                          2893mmm     ENDC
00001340                          2894mmm 
00001340                 FALSE    2895mmm     IFNE DEBUG
00001340                          2896mmm     ENDC
00001340                          2897mmm 
00001340                          2898mmm     ENDM
00001340  60E4                    2899mm     BRA LOOP_191
00001342                          2900mm EXIT_191
00001342                          2901mm     ENDM
00001342                          2902m     ENDM
00001342                          2903      
00001342  207C 00000000           2904      MOVE.L #0,A0
00001348                          2905m     PROGRAM_VECTOR D0,A0,D2
00001348  5488                    2906m     ADD.L #2,A0
0000134A                          2907mm     PROGRAM D0, (A0), D2                                ; WRITE IT
0000134A  3080                    2908mm   MOVE.W D0,(A0)                                        ; WRITE THE DATA
0000134C                          2909mm 
0000134C                          2910mm WAIT_FOR_COMPLETE_194
0000134C  3410                    2911mm         MOVE.W (A0),D2
0000134E                          2912mm 
0000134E                          2913mm         IF.W D2 <NE> D0 THEN
0000134E  B440                    2914mms     CMP.W   D0,D2
00001350  6700 0004               2915mms     BEQ _0000000E
00001354  60F6                    2916mm             BRA WAIT_FOR_COMPLETE_194
00001356                          2917mm         ENDI
00001356                          2918mms _0000000E
00001356                          2919mm         ENDM
00001356  E088                    2920m     LSR.L #8,D0
00001358  E088                    2921m     LSR.L #8,D0
0000135A  5588                    2922m     SUB.L #2,A0
0000135C                          2923mm     PROGRAM D0, (A0), D2
0000135C  3080                    2924mm   MOVE.W D0,(A0)                                        ; WRITE THE DATA
0000135E                          2925mm 
0000135E                          2926mm WAIT_FOR_COMPLETE_195
0000135E  3410                    2927mm         MOVE.W (A0),D2
00001360                          2928mm 
00001360                          2929mm         IF.W D2 <NE> D0 THEN
00001360  B440                    2930mms     CMP.W   D0,D2
00001362  6700 0004               2931mms     BEQ _0000000F
00001366  60F6                    2932mm             BRA WAIT_FOR_COMPLETE_195
00001368                          2933mm         ENDI
00001368                          2934mms _0000000F
00001368                          2935mm         ENDM
00001368                          2936m     ENDM
00001368                          2937      
00001368  45FA 08C8               2938      LEA VECTORS(PC),A2
0000136C                          2939m     PRINT_STR A2,D2
0000136C                          2940m LOOP_196
0000136C  0C12 0000               2941m     CMP.B #NULL,(A2)                                ; 0 -> DONE
00001370  6700 0016               2942m     BEQ EXIT_196
00001374                          2943mm     PRINT_CHAR (A2)+,D2
00001374                          2944mm WAIT_FOR_READY_197                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00001374                 TRUE     2945mm     IFEQ DEBUG
00001374  1439 00C00003           2946mm         MOVE.B DUART_SRA,D2                         ; READ STATUS REGISTER
0000137A  0802 0002               2947mm         BTST #2,D2                                  ; CHECK FOR SPACE TO SEND
0000137E  67F4                    2948mm         BEQ WAIT_FOR_READY_197                      ; NO SPACE, CHECK AGAIN
00001380  13DA 00C00007           2949mm         MOVE.B (A2)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00001386                          2950mm     ENDC
00001386                          2951mm 
00001386                 FALSE    2952mm     IFNE DEBUG
00001386                          2953mm     ENDC
00001386                          2954mm 
00001386                          2955mm     ENDM
00001386  60E4                    2956m     BRA LOOP_196
00001388                          2957m EXIT_196
00001388                          2958m     ENDM
00001388                          2959  
00001388                          2960      FOR A0 = #RESET TO #START-4 BY #4 DO
00001388  307C 0004               2961s     MOVE.W  #RESET,A0
0000138C  6000 0108               2962s     BRA _2000000D
00001390                          2963s _2000000C
00001390                          2964  
00001390  2248                    2965          MOVE.L A0,A1
00001392  D3CC                    2966          ADD.L A4,A1
00001394                          2967              
00001394  2011                    2968          MOVE.L (A1),D0  
00001396  D081                    2969          ADD.L D1,D0
00001398  0480 00000400           2970          SUB.L #START,D0
0000139E                          2971m         PRINT_REG D0,D2,D3,D4,A3
0000139E  47FA 08AA               2972m     LEA OX(PC),A3
000013A2                          2973mm     PRINT_STR A3,D2
000013A2                          2974mm LOOP_199
000013A2  0C13 0000               2975mm     CMP.B #NULL,(A3)                                ; 0 -> DONE
000013A6  6700 0016               2976mm     BEQ EXIT_199
000013AA                          2977mmm     PRINT_CHAR (A3)+,D2
000013AA                          2978mmm WAIT_FOR_READY_200                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
000013AA                 TRUE     2979mmm     IFEQ DEBUG
000013AA  1439 00C00003           2980mmm         MOVE.B DUART_SRA,D2                         ; READ STATUS REGISTER
000013B0  0802 0002               2981mmm         BTST #2,D2                                  ; CHECK FOR SPACE TO SEND
000013B4  67F4                    2982mmm         BEQ WAIT_FOR_READY_200                      ; NO SPACE, CHECK AGAIN
000013B6  13DB 00C00007           2983mmm         MOVE.B (A3)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
000013BC                          2984mmm     ENDC
000013BC                          2985mmm 
000013BC                 FALSE    2986mmm     IFNE DEBUG
000013BC                          2987mmm     ENDC
000013BC                          2988mmm 
000013BC                          2989mmm     ENDM
000013BC  60E4                    2990mm     BRA LOOP_199
000013BE                          2991mm EXIT_199
000013BE                          2992mm     ENDM
000013BE  7807                    2993m     MOVE.L #7,D4                                    ; LOOP ROUND ALL 8 HEX CHARACTERS OF 4 BITS EACH
000013C0                          2994m LOOP_198
000013C0                          2995mm     BIN2HEX D0,D3,A3
000013C0  47FA 0804               2996mm     LEA BIN2HEX_LUT(PC),A3                          ; LOAD THE LOOKUP TABLE
000013C4  E998                    2997mm     ROL.L #4,D0                                     ; SHIFT THE TOP 4 BITS DOWN TO BOTTOM OF THE REGISTER THE AND MASK OFF EVERYTHING ELSE
000013C6  1600                    2998mm     MOVE.B D0,D3
000013C8  0283 0000000F           2999mm     ANDI.L #$F,D3
000013CE  1633 3000               3000mm     MOVE.B 0(A3,D3),D3                              ; USE THAT AS AN INDEX INTO THE LUT
000013D2                          3001mm     ENDM
000013D2                          3002mm     PRINT_CHAR D3,D2
000013D2                          3003mm WAIT_FOR_READY_202                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
000013D2                 TRUE     3004mm     IFEQ DEBUG
000013D2  1439 00C00003           3005mm         MOVE.B DUART_SRA,D2                         ; READ STATUS REGISTER
000013D8  0802 0002               3006mm         BTST #2,D2                                  ; CHECK FOR SPACE TO SEND
000013DC  67F4                    3007mm         BEQ WAIT_FOR_READY_202                      ; NO SPACE, CHECK AGAIN
000013DE  13C3 00C00007           3008mm         MOVE.B D3,DUART_TXA                         ; SEND THE NEXT CHARACTER
000013E4                          3009mm     ENDC
000013E4                          3010mm 
000013E4                 FALSE    3011mm     IFNE DEBUG
000013E4                          3012mm     ENDC
000013E4                          3013mm 
000013E4                          3014mm     ENDM
000013E4  57CC FFDA               3015m     DBEQ D4,LOOP_198
000013E8                          3016m     ENDM
000013E8                          3017  
000013E8  47FA 0863               3018          LEA TO(PC),A3
000013EC                          3019m         PRINT_STR A3,D3
000013EC                          3020m LOOP_203
000013EC  0C13 0000               3021m     CMP.B #NULL,(A3)                                ; 0 -> DONE
000013F0  6700 0016               3022m     BEQ EXIT_203
000013F4                          3023mm     PRINT_CHAR (A3)+,D3
000013F4                          3024mm WAIT_FOR_READY_204                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
000013F4                 TRUE     3025mm     IFEQ DEBUG
000013F4  1639 00C00003           3026mm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
000013FA  0803 0002               3027mm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
000013FE  67F4                    3028mm         BEQ WAIT_FOR_READY_204                      ; NO SPACE, CHECK AGAIN
00001400  13DB 00C00007           3029mm         MOVE.B (A3)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00001406                          3030mm     ENDC
00001406                          3031mm 
00001406                 FALSE    3032mm     IFNE DEBUG
00001406                          3033mm     ENDC
00001406                          3034mm 
00001406                          3035mm     ENDM
00001406  60E4                    3036m     BRA LOOP_203
00001408                          3037m EXIT_203
00001408                          3038m     ENDM
00001408                          3039  
00001408  2408                    3040          MOVE.L A0,D2
0000140A                          3041m         PRINT_REG D2,D3,D4,D5,A3
0000140A  47FA 083E               3042m     LEA OX(PC),A3
0000140E                          3043mm     PRINT_STR A3,D3
0000140E                          3044mm LOOP_206
0000140E  0C13 0000               3045mm     CMP.B #NULL,(A3)                                ; 0 -> DONE
00001412  6700 0016               3046mm     BEQ EXIT_206
00001416                          3047mmm     PRINT_CHAR (A3)+,D3
00001416                          3048mmm WAIT_FOR_READY_207                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00001416                 TRUE     3049mmm     IFEQ DEBUG
00001416  1639 00C00003           3050mmm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
0000141C  0803 0002               3051mmm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
00001420  67F4                    3052mmm         BEQ WAIT_FOR_READY_207                      ; NO SPACE, CHECK AGAIN
00001422  13DB 00C00007           3053mmm         MOVE.B (A3)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00001428                          3054mmm     ENDC
00001428                          3055mmm 
00001428                 FALSE    3056mmm     IFNE DEBUG
00001428                          3057mmm     ENDC
00001428                          3058mmm 
00001428                          3059mmm     ENDM
00001428  60E4                    3060mm     BRA LOOP_206
0000142A                          3061mm EXIT_206
0000142A                          3062mm     ENDM
0000142A  7A07                    3063m     MOVE.L #7,D5                                    ; LOOP ROUND ALL 8 HEX CHARACTERS OF 4 BITS EACH
0000142C                          3064m LOOP_205
0000142C                          3065mm     BIN2HEX D2,D4,A3
0000142C  47FA 0798               3066mm     LEA BIN2HEX_LUT(PC),A3                          ; LOAD THE LOOKUP TABLE
00001430  E99A                    3067mm     ROL.L #4,D2                                     ; SHIFT THE TOP 4 BITS DOWN TO BOTTOM OF THE REGISTER THE AND MASK OFF EVERYTHING ELSE
00001432  1802                    3068mm     MOVE.B D2,D4
00001434  0284 0000000F           3069mm     ANDI.L #$F,D4
0000143A  1833 4000               3070mm     MOVE.B 0(A3,D4),D4                              ; USE THAT AS AN INDEX INTO THE LUT
0000143E                          3071mm     ENDM
0000143E                          3072mm     PRINT_CHAR D4,D3
0000143E                          3073mm WAIT_FOR_READY_209                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
0000143E                 TRUE     3074mm     IFEQ DEBUG
0000143E  1639 00C00003           3075mm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
00001444  0803 0002               3076mm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
00001448  67F4                    3077mm         BEQ WAIT_FOR_READY_209                      ; NO SPACE, CHECK AGAIN
0000144A  13C4 00C00007           3078mm         MOVE.B D4,DUART_TXA                         ; SEND THE NEXT CHARACTER
00001450                          3079mm     ENDC
00001450                          3080mm 
00001450                 FALSE    3081mm     IFNE DEBUG
00001450                          3082mm     ENDC
00001450                          3083mm 
00001450                          3084mm     ENDM
00001450  57CD FFDA               3085m     DBEQ D5,LOOP_205
00001454                          3086m     ENDM
00001454                          3087          
00001454                          3088m         PRINT_CRLF D2,A3
00001454  47FA 07EE               3089m     LEA CRLF(PC),A3
00001458                          3090mm     PRINT_STR A3,D2
00001458                          3091mm LOOP_211
00001458  0C13 0000               3092mm     CMP.B #NULL,(A3)                                ; 0 -> DONE
0000145C  6700 0016               3093mm     BEQ EXIT_211
00001460                          3094mmm     PRINT_CHAR (A3)+,D2
00001460                          3095mmm WAIT_FOR_READY_212                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00001460                 TRUE     3096mmm     IFEQ DEBUG
00001460  1439 00C00003           3097mmm         MOVE.B DUART_SRA,D2                         ; READ STATUS REGISTER
00001466  0802 0002               3098mmm         BTST #2,D2                                  ; CHECK FOR SPACE TO SEND
0000146A  67F4                    3099mmm         BEQ WAIT_FOR_READY_212                      ; NO SPACE, CHECK AGAIN
0000146C  13DB 00C00007           3100mmm         MOVE.B (A3)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00001472                          3101mmm     ENDC
00001472                          3102mmm 
00001472                 FALSE    3103mmm     IFNE DEBUG
00001472                          3104mmm     ENDC
00001472                          3105mmm 
00001472                          3106mmm     ENDM
00001472  60E4                    3107mm     BRA LOOP_211
00001474                          3108mm EXIT_211
00001474                          3109mm     ENDM
00001474                          3110m     ENDM
00001474                          3111          
00001474                          3112m         PROGRAM_VECTOR D0,A0,D2
00001474  5488                    3113m     ADD.L #2,A0
00001476                          3114mm     PROGRAM D0, (A0), D2                                ; WRITE IT
00001476  3080                    3115mm   MOVE.W D0,(A0)                                        ; WRITE THE DATA
00001478                          3116mm 
00001478                          3117mm WAIT_FOR_COMPLETE_214
00001478  3410                    3118mm         MOVE.W (A0),D2
0000147A                          3119mm 
0000147A                          3120mm         IF.W D2 <NE> D0 THEN
0000147A  B440                    3121mms     CMP.W   D0,D2
0000147C  6700 0004               3122mms     BEQ _00000010
00001480  60F6                    3123mm             BRA WAIT_FOR_COMPLETE_214
00001482                          3124mm         ENDI
00001482                          3125mms _00000010
00001482                          3126mm         ENDM
00001482  E088                    3127m     LSR.L #8,D0
00001484  E088                    3128m     LSR.L #8,D0
00001486  5588                    3129m     SUB.L #2,A0
00001488                          3130mm     PROGRAM D0, (A0), D2
00001488  3080                    3131mm   MOVE.W D0,(A0)                                        ; WRITE THE DATA
0000148A                          3132mm 
0000148A                          3133mm WAIT_FOR_COMPLETE_215
0000148A  3410                    3134mm         MOVE.W (A0),D2
0000148C                          3135mm 
0000148C                          3136mm         IF.W D2 <NE> D0 THEN
0000148C  B440                    3137mms     CMP.W   D0,D2
0000148E  6700 0004               3138mms     BEQ _00000011
00001492  60F6                    3139mm             BRA WAIT_FOR_COMPLETE_215
00001494                          3140mm         ENDI
00001494                          3141mms _00000011
00001494                          3142mm         ENDM
00001494                          3143m     ENDM
00001494                          3144      ENDF
00001494  5848                    3145s     ADD.W   #4,A0
00001496                          3146s _2000000D
00001496  B0FC 03FC               3147s     CMP.W   #START-4,A0
0000149A  6F00 FEF4               3148s     BLE _2000000C
0000149E                          3149                                          
0000149E                          3150m     PROTECT
0000149E  31FC AAAA 2AAA          3151m     MOVE.W #$AAAA,$2AAA                             ; AND WRITE PROTECT
000014A4  31FC 5555 1554          3152m     MOVE.W #$5555,$1554
000014AA  31FC A0A0 2AAA          3153m     MOVE.W #$A0A0,$2AAA
000014B0                          3154m     ENDM
000014B0                          3155  
000014B0  6000 F150               3156      BRA MAIN_LOOP
000014B4                          3157      
000014B4                          3158  P
000014B4  7000                    3159      MOVE.L #0,D0                                    ; D0 will be the data to write
000014B6                          3160  
000014B6                          3161      FOR D1 = #0 TO #3 DO                            ; read 2 bytes
000014B6  323C 0000               3162s     MOVE.W  #0,D1
000014BA  6000 0046               3163s     BRA _2000000F
000014BE                          3164s _2000000E
000014BE  E988                    3165          LSL.L #4,D0                                 ; make what we have so far more significant
000014C0                          3166m         WAIT_CHAR D2,D3                             ; next character -> D2
000014C0                          3167m WAIT_FOR_READY_217                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
000014C0                 TRUE     3168m     IFEQ DEBUG
000014C0  1639 00C00003           3169m         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
000014C6  0803 0000               3170m         BTST #0,D3                                  ; CHECK FOR CHARACTER
000014CA  67F4                    3171m         BEQ WAIT_FOR_READY_217                      ; NOTHING, CHECK AGAIN
000014CC                          3172m     ENDC
000014CC                          3173m 
000014CC                          3174mm     READ_CHAR D2
000014CC                 TRUE     3175mm     IFEQ DEBUG
000014CC  1439 00C00007           3176mm         MOVE.B DUART_RXA,D2                         ; GOT A CHARACTER, READ IT
000014D2                          3177mm     ENDC
000014D2                 FALSE    3178mm     IFNE DEBUG
000014D2                          3179mm     ENDC
000014D2                          3180mm 
000014D2  B43C 001B               3181mm     CMP.B #$1B,D2                                   ; CHECK FOR ESCAPE AND GO TO START
000014D6  6700 EF28               3182mm     BEQ START
000014DA                          3183mm     ENDM
000014DA                          3184m 
000014DA                 TRUE     3185m     IFEQ DEBUG
000014DA                          3186mm         PRINT_CHAR D2,D3                            ; ECHO IT BACK
000014DA                          3187mm WAIT_FOR_READY_219                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
000014DA                 TRUE     3188mm     IFEQ DEBUG
000014DA  1639 00C00003           3189mm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
000014E0  0803 0002               3190mm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
000014E4  67F4                    3191mm         BEQ WAIT_FOR_READY_219                      ; NO SPACE, CHECK AGAIN
000014E6  13C2 00C00007           3192mm         MOVE.B D2,DUART_TXA                         ; SEND THE NEXT CHARACTER
000014EC                          3193mm     ENDC
000014EC                          3194mm 
000014EC                 FALSE    3195mm     IFNE DEBUG
000014EC                          3196mm     ENDC
000014EC                          3197mm 
000014EC                          3198mm     ENDM
000014EC                          3199m     ENDC
000014EC                          3200m     ENDM
000014EC                          3201m         HEX2BIN D2,D2,A0                            ; convert to binary -> D2
000014EC  41FA 06E8               3202m     LEA HEX2BIN_LUT(PC),A0                          ; LOAD THE LOOKUP TABLE
000014F0  0402 0030               3203m     SUB.B #'0',D2                                   ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
000014F4  C4BC 000000FF           3204m     AND.L #$FF,D2                                   ; IGNORE THE TOP 3 BYTES
000014FA  1430 2000               3205m     MOVE.B 0(A0,D2),D2                              ; USE THAT AS AN INDEX INTO THE LUT   
000014FE                          3206m     ENDM
000014FE  8002                    3207          OR.B D2,D0
00001500                          3208      ENDF
00001500  5241                    3209s     ADD.W   #1,D1
00001502                          3210s _2000000F
00001502  B27C 0003               3211s     CMP.W   #3,D1
00001506  6FB6                    3212s     BLE _2000000E
00001508                          3213  
00001508                          3214m     PRINT_CRLF D2,A1
00001508  43FA 073A               3215m     LEA CRLF(PC),A1
0000150C                          3216mm     PRINT_STR A1,D2
0000150C                          3217mm LOOP_222
0000150C  0C11 0000               3218mm     CMP.B #NULL,(A1)                                ; 0 -> DONE
00001510  6700 0016               3219mm     BEQ EXIT_222
00001514                          3220mmm     PRINT_CHAR (A1)+,D2
00001514                          3221mmm WAIT_FOR_READY_223                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00001514                 TRUE     3222mmm     IFEQ DEBUG
00001514  1439 00C00003           3223mmm         MOVE.B DUART_SRA,D2                         ; READ STATUS REGISTER
0000151A  0802 0002               3224mmm         BTST #2,D2                                  ; CHECK FOR SPACE TO SEND
0000151E  67F4                    3225mmm         BEQ WAIT_FOR_READY_223                      ; NO SPACE, CHECK AGAIN
00001520  13D9 00C00007           3226mmm         MOVE.B (A1)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00001526                          3227mmm     ENDC
00001526                          3228mmm 
00001526                 FALSE    3229mmm     IFNE DEBUG
00001526                          3230mmm     ENDC
00001526                          3231mmm 
00001526                          3232mmm     ENDM
00001526  60E4                    3233mm     BRA LOOP_222
00001528                          3234mm EXIT_222
00001528                          3235mm     ENDM
00001528                          3236m     ENDM
00001528                          3237  
00001528  2047                    3238      MOVE.L D7,A0                                    ; address accumulator -> target address register
0000152A  7E00                    3239      MOVE.L #0,D7                                    ; clear the now used address accumulator
0000152C                          3240  
0000152C                          3241m     UNPROTECT
0000152C  31FC AAAA 2AAA          3242m     MOVE.W #$AAAA,$2AAA                             ; REMOVE WRITE PROTECT
00001532  4E71                    3243m     NOP
00001534  31FC 5555 1554          3244m     MOVE.W #$5555,$1554
0000153A  4E71                    3245m     NOP
0000153C  31FC 8080 2AAA          3246m     MOVE.W #$8080,$2AAA
00001542  4E71                    3247m     NOP
00001544  31FC AAAA 2AAA          3248m     MOVE.W #$AAAA,$2AAA
0000154A  4E71                    3249m     NOP
0000154C  31FC 5555 1554          3250m     MOVE.W #$5555,$1554
00001552  4E71                    3251m     NOP
00001554  31FC 2020 2AAA          3252m     MOVE.W #$2020,$2AAA
0000155A                          3253m     ENDM
0000155A                          3254               
0000155A  45FA 0691               3255      LEA LOADING(PC),A2                              ; the prints seem to be important for timing to unprotect the EEPROM
0000155E                          3256m     PRINT_STR A2,D2
0000155E                          3257m LOOP_225
0000155E  0C12 0000               3258m     CMP.B #NULL,(A2)                                ; 0 -> DONE
00001562  6700 0016               3259m     BEQ EXIT_225
00001566                          3260mm     PRINT_CHAR (A2)+,D2
00001566                          3261mm WAIT_FOR_READY_226                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00001566                 TRUE     3262mm     IFEQ DEBUG
00001566  1439 00C00003           3263mm         MOVE.B DUART_SRA,D2                         ; READ STATUS REGISTER
0000156C  0802 0002               3264mm         BTST #2,D2                                  ; CHECK FOR SPACE TO SEND
00001570  67F4                    3265mm         BEQ WAIT_FOR_READY_226                      ; NO SPACE, CHECK AGAIN
00001572  13DA 00C00007           3266mm         MOVE.B (A2)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00001578                          3267mm     ENDC
00001578                          3268mm 
00001578                 FALSE    3269mm     IFNE DEBUG
00001578                          3270mm     ENDC
00001578                          3271mm 
00001578                          3272mm     ENDM
00001578  60E4                    3273m     BRA LOOP_225
0000157A                          3274m EXIT_225
0000157A                          3275m     ENDM
0000157A                          3276  
0000157A                          3277m     PRINT_REG D0,D3,D4,D5,A2
0000157A  45FA 06CE               3278m     LEA OX(PC),A2
0000157E                          3279mm     PRINT_STR A2,D3
0000157E                          3280mm LOOP_228
0000157E  0C12 0000               3281mm     CMP.B #NULL,(A2)                                ; 0 -> DONE
00001582  6700 0016               3282mm     BEQ EXIT_228
00001586                          3283mmm     PRINT_CHAR (A2)+,D3
00001586                          3284mmm WAIT_FOR_READY_229                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00001586                 TRUE     3285mmm     IFEQ DEBUG
00001586  1639 00C00003           3286mmm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
0000158C  0803 0002               3287mmm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
00001590  67F4                    3288mmm         BEQ WAIT_FOR_READY_229                      ; NO SPACE, CHECK AGAIN
00001592  13DA 00C00007           3289mmm         MOVE.B (A2)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00001598                          3290mmm     ENDC
00001598                          3291mmm 
00001598                 FALSE    3292mmm     IFNE DEBUG
00001598                          3293mmm     ENDC
00001598                          3294mmm 
00001598                          3295mmm     ENDM
00001598  60E4                    3296mm     BRA LOOP_228
0000159A                          3297mm EXIT_228
0000159A                          3298mm     ENDM
0000159A  7A07                    3299m     MOVE.L #7,D5                                    ; LOOP ROUND ALL 8 HEX CHARACTERS OF 4 BITS EACH
0000159C                          3300m LOOP_227
0000159C                          3301mm     BIN2HEX D0,D4,A2
0000159C  45FA 0628               3302mm     LEA BIN2HEX_LUT(PC),A2                          ; LOAD THE LOOKUP TABLE
000015A0  E998                    3303mm     ROL.L #4,D0                                     ; SHIFT THE TOP 4 BITS DOWN TO BOTTOM OF THE REGISTER THE AND MASK OFF EVERYTHING ELSE
000015A2  1800                    3304mm     MOVE.B D0,D4
000015A4  0284 0000000F           3305mm     ANDI.L #$F,D4
000015AA  1832 4000               3306mm     MOVE.B 0(A2,D4),D4                              ; USE THAT AS AN INDEX INTO THE LUT
000015AE                          3307mm     ENDM
000015AE                          3308mm     PRINT_CHAR D4,D3
000015AE                          3309mm WAIT_FOR_READY_231                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
000015AE                 TRUE     3310mm     IFEQ DEBUG
000015AE  1639 00C00003           3311mm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
000015B4  0803 0002               3312mm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
000015B8  67F4                    3313mm         BEQ WAIT_FOR_READY_231                      ; NO SPACE, CHECK AGAIN
000015BA  13C4 00C00007           3314mm         MOVE.B D4,DUART_TXA                         ; SEND THE NEXT CHARACTER
000015C0                          3315mm     ENDC
000015C0                          3316mm 
000015C0                 FALSE    3317mm     IFNE DEBUG
000015C0                          3318mm     ENDC
000015C0                          3319mm 
000015C0                          3320mm     ENDM
000015C0  57CD FFDA               3321m     DBEQ D5,LOOP_227
000015C4                          3322m     ENDM
000015C4                          3323  
000015C4  45FA 0687               3324      LEA TO(PC),A2
000015C8                          3325m     PRINT_STR A2,D3
000015C8                          3326m LOOP_232
000015C8  0C12 0000               3327m     CMP.B #NULL,(A2)                                ; 0 -> DONE
000015CC  6700 0016               3328m     BEQ EXIT_232
000015D0                          3329mm     PRINT_CHAR (A2)+,D3
000015D0                          3330mm WAIT_FOR_READY_233                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
000015D0                 TRUE     3331mm     IFEQ DEBUG
000015D0  1639 00C00003           3332mm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
000015D6  0803 0002               3333mm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
000015DA  67F4                    3334mm         BEQ WAIT_FOR_READY_233                      ; NO SPACE, CHECK AGAIN
000015DC  13DA 00C00007           3335mm         MOVE.B (A2)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
000015E2                          3336mm     ENDC
000015E2                          3337mm 
000015E2                 FALSE    3338mm     IFNE DEBUG
000015E2                          3339mm     ENDC
000015E2                          3340mm 
000015E2                          3341mm     ENDM
000015E2  60E4                    3342m     BRA LOOP_232
000015E4                          3343m EXIT_232
000015E4                          3344m     ENDM
000015E4                          3345  
000015E4  2408                    3346      MOVE.L A0,D2
000015E6                          3347m     PRINT_REG D2,D3,D4,D5,A2
000015E6  45FA 0662               3348m     LEA OX(PC),A2
000015EA                          3349mm     PRINT_STR A2,D3
000015EA                          3350mm LOOP_235
000015EA  0C12 0000               3351mm     CMP.B #NULL,(A2)                                ; 0 -> DONE
000015EE  6700 0016               3352mm     BEQ EXIT_235
000015F2                          3353mmm     PRINT_CHAR (A2)+,D3
000015F2                          3354mmm WAIT_FOR_READY_236                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
000015F2                 TRUE     3355mmm     IFEQ DEBUG
000015F2  1639 00C00003           3356mmm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
000015F8  0803 0002               3357mmm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
000015FC  67F4                    3358mmm         BEQ WAIT_FOR_READY_236                      ; NO SPACE, CHECK AGAIN
000015FE  13DA 00C00007           3359mmm         MOVE.B (A2)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00001604                          3360mmm     ENDC
00001604                          3361mmm 
00001604                 FALSE    3362mmm     IFNE DEBUG
00001604                          3363mmm     ENDC
00001604                          3364mmm 
00001604                          3365mmm     ENDM
00001604  60E4                    3366mm     BRA LOOP_235
00001606                          3367mm EXIT_235
00001606                          3368mm     ENDM
00001606  7A07                    3369m     MOVE.L #7,D5                                    ; LOOP ROUND ALL 8 HEX CHARACTERS OF 4 BITS EACH
00001608                          3370m LOOP_234
00001608                          3371mm     BIN2HEX D2,D4,A2
00001608  45FA 05BC               3372mm     LEA BIN2HEX_LUT(PC),A2                          ; LOAD THE LOOKUP TABLE
0000160C  E99A                    3373mm     ROL.L #4,D2                                     ; SHIFT THE TOP 4 BITS DOWN TO BOTTOM OF THE REGISTER THE AND MASK OFF EVERYTHING ELSE
0000160E  1802                    3374mm     MOVE.B D2,D4
00001610  0284 0000000F           3375mm     ANDI.L #$F,D4
00001616  1832 4000               3376mm     MOVE.B 0(A2,D4),D4                              ; USE THAT AS AN INDEX INTO THE LUT
0000161A                          3377mm     ENDM
0000161A                          3378mm     PRINT_CHAR D4,D3
0000161A                          3379mm WAIT_FOR_READY_238                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
0000161A                 TRUE     3380mm     IFEQ DEBUG
0000161A  1639 00C00003           3381mm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
00001620  0803 0002               3382mm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
00001624  67F4                    3383mm         BEQ WAIT_FOR_READY_238                      ; NO SPACE, CHECK AGAIN
00001626  13C4 00C00007           3384mm         MOVE.B D4,DUART_TXA                         ; SEND THE NEXT CHARACTER
0000162C                          3385mm     ENDC
0000162C                          3386mm 
0000162C                 FALSE    3387mm     IFNE DEBUG
0000162C                          3388mm     ENDC
0000162C                          3389mm 
0000162C                          3390mm     ENDM
0000162C  57CD FFDA               3391m     DBEQ D5,LOOP_234
00001630                          3392m     ENDM
00001630                          3393  
00001630                          3394m     PRINT_CRLF D3,A2
00001630  45FA 0612               3395m     LEA CRLF(PC),A2
00001634                          3396mm     PRINT_STR A2,D3
00001634                          3397mm LOOP_240
00001634  0C12 0000               3398mm     CMP.B #NULL,(A2)                                ; 0 -> DONE
00001638  6700 0016               3399mm     BEQ EXIT_240
0000163C                          3400mmm     PRINT_CHAR (A2)+,D3
0000163C                          3401mmm WAIT_FOR_READY_241                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
0000163C                 TRUE     3402mmm     IFEQ DEBUG
0000163C  1639 00C00003           3403mmm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
00001642  0803 0002               3404mmm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
00001646  67F4                    3405mmm         BEQ WAIT_FOR_READY_241                      ; NO SPACE, CHECK AGAIN
00001648  13DA 00C00007           3406mmm         MOVE.B (A2)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
0000164E                          3407mmm     ENDC
0000164E                          3408mmm 
0000164E                 FALSE    3409mmm     IFNE DEBUG
0000164E                          3410mmm     ENDC
0000164E                          3411mmm 
0000164E                          3412mmm     ENDM
0000164E  60E4                    3413mm     BRA LOOP_240
00001650                          3414mm EXIT_240
00001650                          3415mm     ENDM
00001650                          3416m     ENDM
00001650                          3417  
00001650                          3418m     PROGRAM D0,(A0),D2
00001650  3080                    3419m   MOVE.W D0,(A0)                                        ; WRITE THE DATA
00001652                          3420m 
00001652                          3421m WAIT_FOR_COMPLETE_242
00001652  3410                    3422m         MOVE.W (A0),D2
00001654                          3423m 
00001654                          3424m         IF.W D2 <NE> D0 THEN
00001654  B440                    3425ms     CMP.W   D0,D2
00001656  6700 0004               3426ms     BEQ _00000012
0000165A  60F6                    3427m             BRA WAIT_FOR_COMPLETE_242
0000165C                          3428m         ENDI
0000165C                          3429ms _00000012
0000165C                          3430m         ENDM
0000165C                          3431  
0000165C                          3432m     PROTECT
0000165C  31FC AAAA 2AAA          3433m     MOVE.W #$AAAA,$2AAA                             ; AND WRITE PROTECT
00001662  31FC 5555 1554          3434m     MOVE.W #$5555,$1554
00001668  31FC A0A0 2AAA          3435m     MOVE.W #$A0A0,$2AAA
0000166E                          3436m     ENDM
0000166E                          3437  
0000166E  6000 EF92               3438      BRA MAIN_LOOP
00001672                          3439      
00001672                          3440  M
00001672  7000                    3441      MOVE.L #0,D0                                        ; D0 will be the length to read            
00001674  7200                    3442      MOVE.L #0,D1                                        ; D1 will be the address to read 
00001676                          3443  
00001676                          3444      FOR D2 = #0 TO #7 DO                                ; read 4 bytes, we'll split into 2 byte address (MS) and 2 byte length (LS)
00001676  343C 0000               3445s     MOVE.W  #0,D2
0000167A  6000 0046               3446s     BRA _20000011
0000167E                          3447s _20000010
0000167E  E989                    3448          LSL.L #4,D1                                     ; make what we have so far more significant
00001680                          3449m         WAIT_CHAR D3,D4                                 ; next character -> D2
00001680                          3450m WAIT_FOR_READY_244                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00001680                 TRUE     3451m     IFEQ DEBUG
00001680  1839 00C00003           3452m         MOVE.B DUART_SRA,D4                         ; READ STATUS REGISTER
00001686  0804 0000               3453m         BTST #0,D4                                  ; CHECK FOR CHARACTER
0000168A  67F4                    3454m         BEQ WAIT_FOR_READY_244                      ; NOTHING, CHECK AGAIN
0000168C                          3455m     ENDC
0000168C                          3456m 
0000168C                          3457mm     READ_CHAR D3
0000168C                 TRUE     3458mm     IFEQ DEBUG
0000168C  1639 00C00007           3459mm         MOVE.B DUART_RXA,D3                         ; GOT A CHARACTER, READ IT
00001692                          3460mm     ENDC
00001692                 FALSE    3461mm     IFNE DEBUG
00001692                          3462mm     ENDC
00001692                          3463mm 
00001692  B63C 001B               3464mm     CMP.B #$1B,D3                                   ; CHECK FOR ESCAPE AND GO TO START
00001696  6700 ED68               3465mm     BEQ START
0000169A                          3466mm     ENDM
0000169A                          3467m 
0000169A                 TRUE     3468m     IFEQ DEBUG
0000169A                          3469mm         PRINT_CHAR D3,D4                            ; ECHO IT BACK
0000169A                          3470mm WAIT_FOR_READY_246                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
0000169A                 TRUE     3471mm     IFEQ DEBUG
0000169A  1839 00C00003           3472mm         MOVE.B DUART_SRA,D4                         ; READ STATUS REGISTER
000016A0  0804 0002               3473mm         BTST #2,D4                                  ; CHECK FOR SPACE TO SEND
000016A4  67F4                    3474mm         BEQ WAIT_FOR_READY_246                      ; NO SPACE, CHECK AGAIN
000016A6  13C3 00C00007           3475mm         MOVE.B D3,DUART_TXA                         ; SEND THE NEXT CHARACTER
000016AC                          3476mm     ENDC
000016AC                          3477mm 
000016AC                 FALSE    3478mm     IFNE DEBUG
000016AC                          3479mm     ENDC
000016AC                          3480mm 
000016AC                          3481mm     ENDM
000016AC                          3482m     ENDC
000016AC                          3483m     ENDM
000016AC                          3484m         HEX2BIN D3,D3,A0                                ; convert to binary -> D2
000016AC  41FA 0528               3485m     LEA HEX2BIN_LUT(PC),A0                          ; LOAD THE LOOKUP TABLE
000016B0  0403 0030               3486m     SUB.B #'0',D3                                   ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
000016B4  C6BC 000000FF           3487m     AND.L #$FF,D3                                   ; IGNORE THE TOP 3 BYTES
000016BA  1630 3000               3488m     MOVE.B 0(A0,D3),D3                              ; USE THAT AS AN INDEX INTO THE LUT   
000016BE                          3489m     ENDM
000016BE  8203                    3490          OR.B D3,D1
000016C0                          3491      ENDF
000016C0  5242                    3492s     ADD.W   #1,D2
000016C2                          3493s _20000011
000016C2  B47C 0007               3494s     CMP.W   #7,D2
000016C6  6FB6                    3495s     BLE _20000010
000016C8                          3496m     PRINT_CRLF D2,A1
000016C8  43FA 057A               3497m     LEA CRLF(PC),A1
000016CC                          3498mm     PRINT_STR A1,D2
000016CC                          3499mm LOOP_249
000016CC  0C11 0000               3500mm     CMP.B #NULL,(A1)                                ; 0 -> DONE
000016D0  6700 0016               3501mm     BEQ EXIT_249
000016D4                          3502mmm     PRINT_CHAR (A1)+,D2
000016D4                          3503mmm WAIT_FOR_READY_250                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
000016D4                 TRUE     3504mmm     IFEQ DEBUG
000016D4  1439 00C00003           3505mmm         MOVE.B DUART_SRA,D2                         ; READ STATUS REGISTER
000016DA  0802 0002               3506mmm         BTST #2,D2                                  ; CHECK FOR SPACE TO SEND
000016DE  67F4                    3507mmm         BEQ WAIT_FOR_READY_250                      ; NO SPACE, CHECK AGAIN
000016E0  13D9 00C00007           3508mmm         MOVE.B (A1)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
000016E6                          3509mmm     ENDC
000016E6                          3510mmm 
000016E6                 FALSE    3511mmm     IFNE DEBUG
000016E6                          3512mmm     ENDC
000016E6                          3513mmm 
000016E6                          3514mmm     ENDM
000016E6  60E4                    3515mm     BRA LOOP_249
000016E8                          3516mm EXIT_249
000016E8                          3517mm     ENDM
000016E8                          3518m     ENDM
000016E8                          3519  
000016E8  3001                    3520      MOVE.W D1,D0                                        ; extract the LSword for the length
000016EA  E089                    3521      LSR.L #8,D1                                         ; extract the MSword for the address
000016EC  E089                    3522      LSR.L #8,D1
000016EE                          3523  
000016EE  2241                    3524      MOVE.L D1,A1
000016F0                          3525      
000016F0  2047                    3526      MOVE.L D7,A0                                        ; address accumulator -> target address register
000016F2                          3527      ;MOVE.L #0,D7                                       ; we're not going to clear it, so we can do go
000016F2                          3528  
000016F2                          3529      WHILE D0 <GT> #0 DO
000016F2                          3530s _10000016
000016F2  B07C 0000               3531s     CMP.W   #0,D0
000016F6  6F00 000E               3532s     BLE _10000017
000016FA  5580                    3533          SUB.L #2,D0
000016FC                          3534  
000016FC  13D1 00E00001           3535          MOVE.B (A1),DISPLAY
00001702  30D9                    3536          MOVE.W (A1)+,(A0)+
00001704                          3537      ENDW
00001704  60EC                    3538s     BRA _10000016
00001706                          3539s _10000017
00001706                          3540      
00001706  6000 EEFA               3541      BRA MAIN_LOOP
0000170A                          3542  
0000170A                          3543  X
0000170A  45FA 054B               3544      LEA STATUS_REGISTER(PC),A2
0000170E                          3545m     PRINT_STR A2,D3
0000170E                          3546m LOOP_251
0000170E  0C12 0000               3547m     CMP.B #NULL,(A2)                                ; 0 -> DONE
00001712  6700 0016               3548m     BEQ EXIT_251
00001716                          3549mm     PRINT_CHAR (A2)+,D3
00001716                          3550mm WAIT_FOR_READY_252                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00001716                 TRUE     3551mm     IFEQ DEBUG
00001716  1639 00C00003           3552mm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
0000171C  0803 0002               3553mm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
00001720  67F4                    3554mm         BEQ WAIT_FOR_READY_252                      ; NO SPACE, CHECK AGAIN
00001722  13DA 00C00007           3555mm         MOVE.B (A2)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00001728                          3556mm     ENDC
00001728                          3557mm 
00001728                 FALSE    3558mm     IFNE DEBUG
00001728                          3559mm     ENDC
00001728                          3560mm 
00001728                          3561mm     ENDM
00001728  60E4                    3562m     BRA LOOP_251
0000172A                          3563m EXIT_251
0000172A                          3564m     ENDM
0000172A                          3565  
0000172A  40C0                    3566      MOVE SR,D0
0000172C                          3567m     PRINT_REG D0,D3,D4,D5,A2
0000172C  45FA 051C               3568m     LEA OX(PC),A2
00001730                          3569mm     PRINT_STR A2,D3
00001730                          3570mm LOOP_254
00001730  0C12 0000               3571mm     CMP.B #NULL,(A2)                                ; 0 -> DONE
00001734  6700 0016               3572mm     BEQ EXIT_254
00001738                          3573mmm     PRINT_CHAR (A2)+,D3
00001738                          3574mmm WAIT_FOR_READY_255                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00001738                 TRUE     3575mmm     IFEQ DEBUG
00001738  1639 00C00003           3576mmm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
0000173E  0803 0002               3577mmm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
00001742  67F4                    3578mmm         BEQ WAIT_FOR_READY_255                      ; NO SPACE, CHECK AGAIN
00001744  13DA 00C00007           3579mmm         MOVE.B (A2)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
0000174A                          3580mmm     ENDC
0000174A                          3581mmm 
0000174A                 FALSE    3582mmm     IFNE DEBUG
0000174A                          3583mmm     ENDC
0000174A                          3584mmm 
0000174A                          3585mmm     ENDM
0000174A  60E4                    3586mm     BRA LOOP_254
0000174C                          3587mm EXIT_254
0000174C                          3588mm     ENDM
0000174C  7A07                    3589m     MOVE.L #7,D5                                    ; LOOP ROUND ALL 8 HEX CHARACTERS OF 4 BITS EACH
0000174E                          3590m LOOP_253
0000174E                          3591mm     BIN2HEX D0,D4,A2
0000174E  45FA 0476               3592mm     LEA BIN2HEX_LUT(PC),A2                          ; LOAD THE LOOKUP TABLE
00001752  E998                    3593mm     ROL.L #4,D0                                     ; SHIFT THE TOP 4 BITS DOWN TO BOTTOM OF THE REGISTER THE AND MASK OFF EVERYTHING ELSE
00001754  1800                    3594mm     MOVE.B D0,D4
00001756  0284 0000000F           3595mm     ANDI.L #$F,D4
0000175C  1832 4000               3596mm     MOVE.B 0(A2,D4),D4                              ; USE THAT AS AN INDEX INTO THE LUT
00001760                          3597mm     ENDM
00001760                          3598mm     PRINT_CHAR D4,D3
00001760                          3599mm WAIT_FOR_READY_257                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00001760                 TRUE     3600mm     IFEQ DEBUG
00001760  1639 00C00003           3601mm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
00001766  0803 0002               3602mm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
0000176A  67F4                    3603mm         BEQ WAIT_FOR_READY_257                      ; NO SPACE, CHECK AGAIN
0000176C  13C4 00C00007           3604mm         MOVE.B D4,DUART_TXA                         ; SEND THE NEXT CHARACTER
00001772                          3605mm     ENDC
00001772                          3606mm 
00001772                 FALSE    3607mm     IFNE DEBUG
00001772                          3608mm     ENDC
00001772                          3609mm 
00001772                          3610mm     ENDM
00001772  57CD FFDA               3611m     DBEQ D5,LOOP_253
00001776                          3612m     ENDM
00001776                          3613m     PRINT_CRLF D3,A2
00001776  45FA 04CC               3614m     LEA CRLF(PC),A2
0000177A                          3615mm     PRINT_STR A2,D3
0000177A                          3616mm LOOP_259
0000177A  0C12 0000               3617mm     CMP.B #NULL,(A2)                                ; 0 -> DONE
0000177E  6700 0016               3618mm     BEQ EXIT_259
00001782                          3619mmm     PRINT_CHAR (A2)+,D3
00001782                          3620mmm WAIT_FOR_READY_260                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00001782                 TRUE     3621mmm     IFEQ DEBUG
00001782  1639 00C00003           3622mmm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
00001788  0803 0002               3623mmm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
0000178C  67F4                    3624mmm         BEQ WAIT_FOR_READY_260                      ; NO SPACE, CHECK AGAIN
0000178E  13DA 00C00007           3625mmm         MOVE.B (A2)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00001794                          3626mmm     ENDC
00001794                          3627mmm 
00001794                 FALSE    3628mmm     IFNE DEBUG
00001794                          3629mmm     ENDC
00001794                          3630mmm 
00001794                          3631mmm     ENDM
00001794  60E4                    3632mm     BRA LOOP_259
00001796                          3633mm EXIT_259
00001796                          3634mm     ENDM
00001796                          3635m     ENDM
00001796                          3636  
00001796  45FA 04BA               3637      LEA STACK_POINTER(PC),A2
0000179A                          3638m     PRINT_STR A2,D3
0000179A                          3639m LOOP_261
0000179A  0C12 0000               3640m     CMP.B #NULL,(A2)                                ; 0 -> DONE
0000179E  6700 0016               3641m     BEQ EXIT_261
000017A2                          3642mm     PRINT_CHAR (A2)+,D3
000017A2                          3643mm WAIT_FOR_READY_262                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
000017A2                 TRUE     3644mm     IFEQ DEBUG
000017A2  1639 00C00003           3645mm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
000017A8  0803 0002               3646mm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
000017AC  67F4                    3647mm         BEQ WAIT_FOR_READY_262                      ; NO SPACE, CHECK AGAIN
000017AE  13DA 00C00007           3648mm         MOVE.B (A2)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
000017B4                          3649mm     ENDC
000017B4                          3650mm 
000017B4                 FALSE    3651mm     IFNE DEBUG
000017B4                          3652mm     ENDC
000017B4                          3653mm 
000017B4                          3654mm     ENDM
000017B4  60E4                    3655m     BRA LOOP_261
000017B6                          3656m EXIT_261
000017B6                          3657m     ENDM
000017B6                          3658  
000017B6  200F                    3659      MOVE.L SP,D0
000017B8                          3660m     PRINT_REG D0,D3,D4,D5,A2
000017B8  45FA 0490               3661m     LEA OX(PC),A2
000017BC                          3662mm     PRINT_STR A2,D3
000017BC                          3663mm LOOP_264
000017BC  0C12 0000               3664mm     CMP.B #NULL,(A2)                                ; 0 -> DONE
000017C0  6700 0016               3665mm     BEQ EXIT_264
000017C4                          3666mmm     PRINT_CHAR (A2)+,D3
000017C4                          3667mmm WAIT_FOR_READY_265                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
000017C4                 TRUE     3668mmm     IFEQ DEBUG
000017C4  1639 00C00003           3669mmm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
000017CA  0803 0002               3670mmm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
000017CE  67F4                    3671mmm         BEQ WAIT_FOR_READY_265                      ; NO SPACE, CHECK AGAIN
000017D0  13DA 00C00007           3672mmm         MOVE.B (A2)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
000017D6                          3673mmm     ENDC
000017D6                          3674mmm 
000017D6                 FALSE    3675mmm     IFNE DEBUG
000017D6                          3676mmm     ENDC
000017D6                          3677mmm 
000017D6                          3678mmm     ENDM
000017D6  60E4                    3679mm     BRA LOOP_264
000017D8                          3680mm EXIT_264
000017D8                          3681mm     ENDM
000017D8  7A07                    3682m     MOVE.L #7,D5                                    ; LOOP ROUND ALL 8 HEX CHARACTERS OF 4 BITS EACH
000017DA                          3683m LOOP_263
000017DA                          3684mm     BIN2HEX D0,D4,A2
000017DA  45FA 03EA               3685mm     LEA BIN2HEX_LUT(PC),A2                          ; LOAD THE LOOKUP TABLE
000017DE  E998                    3686mm     ROL.L #4,D0                                     ; SHIFT THE TOP 4 BITS DOWN TO BOTTOM OF THE REGISTER THE AND MASK OFF EVERYTHING ELSE
000017E0  1800                    3687mm     MOVE.B D0,D4
000017E2  0284 0000000F           3688mm     ANDI.L #$F,D4
000017E8  1832 4000               3689mm     MOVE.B 0(A2,D4),D4                              ; USE THAT AS AN INDEX INTO THE LUT
000017EC                          3690mm     ENDM
000017EC                          3691mm     PRINT_CHAR D4,D3
000017EC                          3692mm WAIT_FOR_READY_267                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
000017EC                 TRUE     3693mm     IFEQ DEBUG
000017EC  1639 00C00003           3694mm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
000017F2  0803 0002               3695mm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
000017F6  67F4                    3696mm         BEQ WAIT_FOR_READY_267                      ; NO SPACE, CHECK AGAIN
000017F8  13C4 00C00007           3697mm         MOVE.B D4,DUART_TXA                         ; SEND THE NEXT CHARACTER
000017FE                          3698mm     ENDC
000017FE                          3699mm 
000017FE                 FALSE    3700mm     IFNE DEBUG
000017FE                          3701mm     ENDC
000017FE                          3702mm 
000017FE                          3703mm     ENDM
000017FE  57CD FFDA               3704m     DBEQ D5,LOOP_263
00001802                          3705m     ENDM
00001802                          3706m     PRINT_CRLF D3,A2
00001802  45FA 0440               3707m     LEA CRLF(PC),A2
00001806                          3708mm     PRINT_STR A2,D3
00001806                          3709mm LOOP_269
00001806  0C12 0000               3710mm     CMP.B #NULL,(A2)                                ; 0 -> DONE
0000180A  6700 0016               3711mm     BEQ EXIT_269
0000180E                          3712mmm     PRINT_CHAR (A2)+,D3
0000180E                          3713mmm WAIT_FOR_READY_270                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
0000180E                 TRUE     3714mmm     IFEQ DEBUG
0000180E  1639 00C00003           3715mmm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
00001814  0803 0002               3716mmm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
00001818  67F4                    3717mmm         BEQ WAIT_FOR_READY_270                      ; NO SPACE, CHECK AGAIN
0000181A  13DA 00C00007           3718mmm         MOVE.B (A2)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00001820                          3719mmm     ENDC
00001820                          3720mmm 
00001820                 FALSE    3721mmm     IFNE DEBUG
00001820                          3722mmm     ENDC
00001820                          3723mmm 
00001820                          3724mmm     ENDM
00001820  60E4                    3725mm     BRA LOOP_269
00001822                          3726mm EXIT_269
00001822                          3727mm     ENDM
00001822                          3728m     ENDM
00001822                          3729  
00001822  6000 EDDE               3730      BRA MAIN_LOOP
00001826                          3731  
00001826                          3732          
00001826                          3733  I
00001826  027C F8FF               3734      AND.W #$F8FF,SR
0000182A  6000 EDD6               3735      BRA MAIN_LOOP
0000182E                          3736  
0000182E                          3737  
0000182E                          3738  HEX_DIGIT
0000182E  E98F                    3739      LSL.L #4,D7                                         ; add the next digit in the next 4 bits
00001830                          3740m     HEX2BIN D2,D2,A0
00001830  41FA 03A4               3741m     LEA HEX2BIN_LUT(PC),A0                          ; LOAD THE LOOKUP TABLE
00001834  0402 0030               3742m     SUB.B #'0',D2                                   ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
00001838  C4BC 000000FF           3743m     AND.L #$FF,D2                                   ; IGNORE THE TOP 3 BYTES
0000183E  1430 2000               3744m     MOVE.B 0(A0,D2),D2                              ; USE THAT AS AN INDEX INTO THE LUT   
00001842                          3745m     ENDM
00001842  8E02                    3746      OR.B D2,D7  
00001844  6000 EDDC               3747      BRA GET_INPUT
00001848                          3748  
00001848  FFFF FFFF               3749      SIMHALT                                             ; halt simulator
0000184C                          3750  
0000184C                          3751  ; exceptions    
0000184C                          3752  BUS_ERROR_HANDLER
0000184C                          3753  
0000184C  41FA 0415               3754      LEA BUS_ERROR(PC),A0
00001850                          3755m     PRINT_STR A0,D1
00001850                          3756m LOOP_272
00001850  0C10 0000               3757m     CMP.B #NULL,(A0)                                ; 0 -> DONE
00001854  6700 0016               3758m     BEQ EXIT_272
00001858                          3759mm     PRINT_CHAR (A0)+,D1
00001858                          3760mm WAIT_FOR_READY_273                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00001858                 TRUE     3761mm     IFEQ DEBUG
00001858  1239 00C00003           3762mm         MOVE.B DUART_SRA,D1                         ; READ STATUS REGISTER
0000185E  0801 0002               3763mm         BTST #2,D1                                  ; CHECK FOR SPACE TO SEND
00001862  67F4                    3764mm         BEQ WAIT_FOR_READY_273                      ; NO SPACE, CHECK AGAIN
00001864  13D8 00C00007           3765mm         MOVE.B (A0)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
0000186A                          3766mm     ENDC
0000186A                          3767mm 
0000186A                 FALSE    3768mm     IFNE DEBUG
0000186A                          3769mm     ENDC
0000186A                          3770mm 
0000186A                          3771mm     ENDM
0000186A  60E4                    3772m     BRA LOOP_272
0000186C                          3773m EXIT_272
0000186C                          3774m     ENDM
0000186C                          3775  
0000186C  7000                    3776      MOVE.L #0,D0
0000186E  3017                    3777      MOVE.W (SP),D0
00001870                          3778  
00001870  0800 0004               3779      BTST #4,D0
00001874  6700 0026               3780      BEQ WRITE
00001878                          3781      
00001878  41FA 03FE               3782      LEA READING(PC),A0
0000187C                          3783m     PRINT_STR A0,D1
0000187C                          3784m LOOP_274
0000187C  0C10 0000               3785m     CMP.B #NULL,(A0)                                ; 0 -> DONE
00001880  6700 0016               3786m     BEQ EXIT_274
00001884                          3787mm     PRINT_CHAR (A0)+,D1
00001884                          3788mm WAIT_FOR_READY_275                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00001884                 TRUE     3789mm     IFEQ DEBUG
00001884  1239 00C00003           3790mm         MOVE.B DUART_SRA,D1                         ; READ STATUS REGISTER
0000188A  0801 0002               3791mm         BTST #2,D1                                  ; CHECK FOR SPACE TO SEND
0000188E  67F4                    3792mm         BEQ WAIT_FOR_READY_275                      ; NO SPACE, CHECK AGAIN
00001890  13D8 00C00007           3793mm         MOVE.B (A0)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00001896                          3794mm     ENDC
00001896                          3795mm 
00001896                 FALSE    3796mm     IFNE DEBUG
00001896                          3797mm     ENDC
00001896                          3798mm 
00001896                          3799mm     ENDM
00001896  60E4                    3800m     BRA LOOP_274
00001898                          3801m EXIT_274
00001898                          3802m     ENDM
00001898                          3803  
00001898  6000 0022               3804      BRA CONTINUE    
0000189C                          3805  WRITE
0000189C  41FA 03E3               3806      LEA WRITING(PC),A0
000018A0                          3807m     PRINT_STR A0,D1
000018A0                          3808m LOOP_276
000018A0  0C10 0000               3809m     CMP.B #NULL,(A0)                                ; 0 -> DONE
000018A4  6700 0016               3810m     BEQ EXIT_276
000018A8                          3811mm     PRINT_CHAR (A0)+,D1
000018A8                          3812mm WAIT_FOR_READY_277                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
000018A8                 TRUE     3813mm     IFEQ DEBUG
000018A8  1239 00C00003           3814mm         MOVE.B DUART_SRA,D1                         ; READ STATUS REGISTER
000018AE  0801 0002               3815mm         BTST #2,D1                                  ; CHECK FOR SPACE TO SEND
000018B2  67F4                    3816mm         BEQ WAIT_FOR_READY_277                      ; NO SPACE, CHECK AGAIN
000018B4  13D8 00C00007           3817mm         MOVE.B (A0)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
000018BA                          3818mm     ENDC
000018BA                          3819mm 
000018BA                 FALSE    3820mm     IFNE DEBUG
000018BA                          3821mm     ENDC
000018BA                          3822mm 
000018BA                          3823mm     ENDM
000018BA  60E4                    3824m     BRA LOOP_276
000018BC                          3825m EXIT_276
000018BC                          3826m     ENDM
000018BC                          3827  
000018BC                          3828  CONTINUE
000018BC  222F 0002               3829      MOVE.L 2(SP),D1
000018C0                          3830m     PRINT_REG D1,D2,D3,D4,A0
000018C0  41FA 0388               3831m     LEA OX(PC),A0
000018C4                          3832mm     PRINT_STR A0,D2
000018C4                          3833mm LOOP_279
000018C4  0C10 0000               3834mm     CMP.B #NULL,(A0)                                ; 0 -> DONE
000018C8  6700 0016               3835mm     BEQ EXIT_279
000018CC                          3836mmm     PRINT_CHAR (A0)+,D2
000018CC                          3837mmm WAIT_FOR_READY_280                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
000018CC                 TRUE     3838mmm     IFEQ DEBUG
000018CC  1439 00C00003           3839mmm         MOVE.B DUART_SRA,D2                         ; READ STATUS REGISTER
000018D2  0802 0002               3840mmm         BTST #2,D2                                  ; CHECK FOR SPACE TO SEND
000018D6  67F4                    3841mmm         BEQ WAIT_FOR_READY_280                      ; NO SPACE, CHECK AGAIN
000018D8  13D8 00C00007           3842mmm         MOVE.B (A0)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
000018DE                          3843mmm     ENDC
000018DE                          3844mmm 
000018DE                 FALSE    3845mmm     IFNE DEBUG
000018DE                          3846mmm     ENDC
000018DE                          3847mmm 
000018DE                          3848mmm     ENDM
000018DE  60E4                    3849mm     BRA LOOP_279
000018E0                          3850mm EXIT_279
000018E0                          3851mm     ENDM
000018E0  7807                    3852m     MOVE.L #7,D4                                    ; LOOP ROUND ALL 8 HEX CHARACTERS OF 4 BITS EACH
000018E2                          3853m LOOP_278
000018E2                          3854mm     BIN2HEX D1,D3,A0
000018E2  41FA 02E2               3855mm     LEA BIN2HEX_LUT(PC),A0                          ; LOAD THE LOOKUP TABLE
000018E6  E999                    3856mm     ROL.L #4,D1                                     ; SHIFT THE TOP 4 BITS DOWN TO BOTTOM OF THE REGISTER THE AND MASK OFF EVERYTHING ELSE
000018E8  1601                    3857mm     MOVE.B D1,D3
000018EA  0283 0000000F           3858mm     ANDI.L #$F,D3
000018F0  1630 3000               3859mm     MOVE.B 0(A0,D3),D3                              ; USE THAT AS AN INDEX INTO THE LUT
000018F4                          3860mm     ENDM
000018F4                          3861mm     PRINT_CHAR D3,D2
000018F4                          3862mm WAIT_FOR_READY_282                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
000018F4                 TRUE     3863mm     IFEQ DEBUG
000018F4  1439 00C00003           3864mm         MOVE.B DUART_SRA,D2                         ; READ STATUS REGISTER
000018FA  0802 0002               3865mm         BTST #2,D2                                  ; CHECK FOR SPACE TO SEND
000018FE  67F4                    3866mm         BEQ WAIT_FOR_READY_282                      ; NO SPACE, CHECK AGAIN
00001900  13C3 00C00007           3867mm         MOVE.B D3,DUART_TXA                         ; SEND THE NEXT CHARACTER
00001906                          3868mm     ENDC
00001906                          3869mm 
00001906                 FALSE    3870mm     IFNE DEBUG
00001906                          3871mm     ENDC
00001906                          3872mm 
00001906                          3873mm     ENDM
00001906  57CC FFDA               3874m     DBEQ D4,LOOP_278
0000190A                          3875m     ENDM
0000190A                          3876  
0000190A  41FA 037E               3877      LEA FROM(PC),A0
0000190E                          3878m     PRINT_STR A0,D0
0000190E                          3879m LOOP_283
0000190E  0C10 0000               3880m     CMP.B #NULL,(A0)                                ; 0 -> DONE
00001912  6700 0016               3881m     BEQ EXIT_283
00001916                          3882mm     PRINT_CHAR (A0)+,D0
00001916                          3883mm WAIT_FOR_READY_284                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00001916                 TRUE     3884mm     IFEQ DEBUG
00001916  1039 00C00003           3885mm         MOVE.B DUART_SRA,D0                         ; READ STATUS REGISTER
0000191C  0800 0002               3886mm         BTST #2,D0                                  ; CHECK FOR SPACE TO SEND
00001920  67F4                    3887mm         BEQ WAIT_FOR_READY_284                      ; NO SPACE, CHECK AGAIN
00001922  13D8 00C00007           3888mm         MOVE.B (A0)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00001928                          3889mm     ENDC
00001928                          3890mm 
00001928                 FALSE    3891mm     IFNE DEBUG
00001928                          3892mm     ENDC
00001928                          3893mm 
00001928                          3894mm     ENDM
00001928  60E4                    3895m     BRA LOOP_283
0000192A                          3896m EXIT_283
0000192A                          3897m     ENDM
0000192A                          3898  
0000192A  222F 000A               3899      MOVE.L 10(SP),D1
0000192E                          3900m     PRINT_REG D1,D2,D3,D4,A0
0000192E  41FA 031A               3901m     LEA OX(PC),A0
00001932                          3902mm     PRINT_STR A0,D2
00001932                          3903mm LOOP_286
00001932  0C10 0000               3904mm     CMP.B #NULL,(A0)                                ; 0 -> DONE
00001936  6700 0016               3905mm     BEQ EXIT_286
0000193A                          3906mmm     PRINT_CHAR (A0)+,D2
0000193A                          3907mmm WAIT_FOR_READY_287                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
0000193A                 TRUE     3908mmm     IFEQ DEBUG
0000193A  1439 00C00003           3909mmm         MOVE.B DUART_SRA,D2                         ; READ STATUS REGISTER
00001940  0802 0002               3910mmm         BTST #2,D2                                  ; CHECK FOR SPACE TO SEND
00001944  67F4                    3911mmm         BEQ WAIT_FOR_READY_287                      ; NO SPACE, CHECK AGAIN
00001946  13D8 00C00007           3912mmm         MOVE.B (A0)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
0000194C                          3913mmm     ENDC
0000194C                          3914mmm 
0000194C                 FALSE    3915mmm     IFNE DEBUG
0000194C                          3916mmm     ENDC
0000194C                          3917mmm 
0000194C                          3918mmm     ENDM
0000194C  60E4                    3919mm     BRA LOOP_286
0000194E                          3920mm EXIT_286
0000194E                          3921mm     ENDM
0000194E  7807                    3922m     MOVE.L #7,D4                                    ; LOOP ROUND ALL 8 HEX CHARACTERS OF 4 BITS EACH
00001950                          3923m LOOP_285
00001950                          3924mm     BIN2HEX D1,D3,A0
00001950  41FA 0274               3925mm     LEA BIN2HEX_LUT(PC),A0                          ; LOAD THE LOOKUP TABLE
00001954  E999                    3926mm     ROL.L #4,D1                                     ; SHIFT THE TOP 4 BITS DOWN TO BOTTOM OF THE REGISTER THE AND MASK OFF EVERYTHING ELSE
00001956  1601                    3927mm     MOVE.B D1,D3
00001958  0283 0000000F           3928mm     ANDI.L #$F,D3
0000195E  1630 3000               3929mm     MOVE.B 0(A0,D3),D3                              ; USE THAT AS AN INDEX INTO THE LUT
00001962                          3930mm     ENDM
00001962                          3931mm     PRINT_CHAR D3,D2
00001962                          3932mm WAIT_FOR_READY_289                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00001962                 TRUE     3933mm     IFEQ DEBUG
00001962  1439 00C00003           3934mm         MOVE.B DUART_SRA,D2                         ; READ STATUS REGISTER
00001968  0802 0002               3935mm         BTST #2,D2                                  ; CHECK FOR SPACE TO SEND
0000196C  67F4                    3936mm         BEQ WAIT_FOR_READY_289                      ; NO SPACE, CHECK AGAIN
0000196E  13C3 00C00007           3937mm         MOVE.B D3,DUART_TXA                         ; SEND THE NEXT CHARACTER
00001974                          3938mm     ENDC
00001974                          3939mm 
00001974                 FALSE    3940mm     IFNE DEBUG
00001974                          3941mm     ENDC
00001974                          3942mm 
00001974                          3943mm     ENDM
00001974  57CC FFDA               3944m     DBEQ D4,LOOP_285
00001978                          3945m     ENDM
00001978                          3946m     PRINT_CRLF D0,A0
00001978  41FA 02CA               3947m     LEA CRLF(PC),A0
0000197C                          3948mm     PRINT_STR A0,D0
0000197C                          3949mm LOOP_291
0000197C  0C10 0000               3950mm     CMP.B #NULL,(A0)                                ; 0 -> DONE
00001980  6700 0016               3951mm     BEQ EXIT_291
00001984                          3952mmm     PRINT_CHAR (A0)+,D0
00001984                          3953mmm WAIT_FOR_READY_292                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00001984                 TRUE     3954mmm     IFEQ DEBUG
00001984  1039 00C00003           3955mmm         MOVE.B DUART_SRA,D0                         ; READ STATUS REGISTER
0000198A  0800 0002               3956mmm         BTST #2,D0                                  ; CHECK FOR SPACE TO SEND
0000198E  67F4                    3957mmm         BEQ WAIT_FOR_READY_292                      ; NO SPACE, CHECK AGAIN
00001990  13D8 00C00007           3958mmm         MOVE.B (A0)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00001996                          3959mmm     ENDC
00001996                          3960mmm 
00001996                 FALSE    3961mmm     IFNE DEBUG
00001996                          3962mmm     ENDC
00001996                          3963mmm 
00001996                          3964mmm     ENDM
00001996  60E4                    3965mm     BRA LOOP_291
00001998                          3966mm EXIT_291
00001998                          3967mm     ENDM
00001998                          3968m     ENDM
00001998                          3969      
00001998  207C 00000004           3970      MOVE.L #4,A0
0000199E  4ED0                    3971      JMP (A0)
000019A0                          3972          
000019A0                          3973  ILLEGAL_HANDLER
000019A0  13FC 0007 00E00001      3974      MOVE.B #7,DISPLAY   
000019A8                          3975      
000019A8  207C 00000004           3976      MOVE.L #4,A0
000019AE  4ED0                    3977      JMP (A0)
000019B0                          3978          
000019B0                          3979  UNHANDLED_HANDLER
000019B0  41FA 02DF               3980      LEA UNHANDLED(PC),A0
000019B4                          3981m     PRINT_STR A0,D1
000019B4                          3982m LOOP_293
000019B4  0C10 0000               3983m     CMP.B #NULL,(A0)                                ; 0 -> DONE
000019B8  6700 0016               3984m     BEQ EXIT_293
000019BC                          3985mm     PRINT_CHAR (A0)+,D1
000019BC                          3986mm WAIT_FOR_READY_294                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
000019BC                 TRUE     3987mm     IFEQ DEBUG
000019BC  1239 00C00003           3988mm         MOVE.B DUART_SRA,D1                         ; READ STATUS REGISTER
000019C2  0801 0002               3989mm         BTST #2,D1                                  ; CHECK FOR SPACE TO SEND
000019C6  67F4                    3990mm         BEQ WAIT_FOR_READY_294                      ; NO SPACE, CHECK AGAIN
000019C8  13D8 00C00007           3991mm         MOVE.B (A0)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
000019CE                          3992mm     ENDC
000019CE                          3993mm 
000019CE                 FALSE    3994mm     IFNE DEBUG
000019CE                          3995mm     ENDC
000019CE                          3996mm 
000019CE                          3997mm     ENDM
000019CE  60E4                    3998m     BRA LOOP_293
000019D0                          3999m EXIT_293
000019D0                          4000m     ENDM
000019D0                          4001  
000019D0  4E73                    4002      RTE 
000019D2                          4003      
000019D2                          4004  UNINITIALISED_HANDLER
000019D2  41FA 02D3               4005      LEA UNINITIALISED(PC),A0
000019D6                          4006m     PRINT_STR A0,D1
000019D6                          4007m LOOP_295
000019D6  0C10 0000               4008m     CMP.B #NULL,(A0)                                ; 0 -> DONE
000019DA  6700 0016               4009m     BEQ EXIT_295
000019DE                          4010mm     PRINT_CHAR (A0)+,D1
000019DE                          4011mm WAIT_FOR_READY_296                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
000019DE                 TRUE     4012mm     IFEQ DEBUG
000019DE  1239 00C00003           4013mm         MOVE.B DUART_SRA,D1                         ; READ STATUS REGISTER
000019E4  0801 0002               4014mm         BTST #2,D1                                  ; CHECK FOR SPACE TO SEND
000019E8  67F4                    4015mm         BEQ WAIT_FOR_READY_296                      ; NO SPACE, CHECK AGAIN
000019EA  13D8 00C00007           4016mm         MOVE.B (A0)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
000019F0                          4017mm     ENDC
000019F0                          4018mm 
000019F0                 FALSE    4019mm     IFNE DEBUG
000019F0                          4020mm     ENDC
000019F0                          4021mm 
000019F0                          4022mm     ENDM
000019F0  60E4                    4023m     BRA LOOP_295
000019F2                          4024m EXIT_295
000019F2                          4025m     ENDM
000019F2                          4026  
000019F2  4E73                    4027      RTE 
000019F4                          4028  
000019F4                          4029  SPURIOUS_HANDLER
000019F4  41FA 02D1               4030      LEA SPURIOUS(PC),A0
000019F8                          4031m     PRINT_STR A0,D1
000019F8                          4032m LOOP_297
000019F8  0C10 0000               4033m     CMP.B #NULL,(A0)                                ; 0 -> DONE
000019FC  6700 0016               4034m     BEQ EXIT_297
00001A00                          4035mm     PRINT_CHAR (A0)+,D1
00001A00                          4036mm WAIT_FOR_READY_298                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00001A00                 TRUE     4037mm     IFEQ DEBUG
00001A00  1239 00C00003           4038mm         MOVE.B DUART_SRA,D1                         ; READ STATUS REGISTER
00001A06  0801 0002               4039mm         BTST #2,D1                                  ; CHECK FOR SPACE TO SEND
00001A0A  67F4                    4040mm         BEQ WAIT_FOR_READY_298                      ; NO SPACE, CHECK AGAIN
00001A0C  13D8 00C00007           4041mm         MOVE.B (A0)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00001A12                          4042mm     ENDC
00001A12                          4043mm 
00001A12                 FALSE    4044mm     IFNE DEBUG
00001A12                          4045mm     ENDC
00001A12                          4046mm 
00001A12                          4047mm     ENDM
00001A12  60E4                    4048m     BRA LOOP_297
00001A14                          4049m EXIT_297
00001A14                          4050m     ENDM
00001A14                          4051  
00001A14  4E73                    4052      RTE 
00001A16                          4053      
00001A16                          4054  TICK_HANDLER
00001A16  41FA 0244               4055      LEA TICK(PC),A0
00001A1A                          4056m     PRINT_STR A0,D1
00001A1A                          4057m LOOP_299
00001A1A  0C10 0000               4058m     CMP.B #NULL,(A0)                                ; 0 -> DONE
00001A1E  6700 0016               4059m     BEQ EXIT_299
00001A22                          4060mm     PRINT_CHAR (A0)+,D1
00001A22                          4061mm WAIT_FOR_READY_300                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00001A22                 TRUE     4062mm     IFEQ DEBUG
00001A22  1239 00C00003           4063mm         MOVE.B DUART_SRA,D1                         ; READ STATUS REGISTER
00001A28  0801 0002               4064mm         BTST #2,D1                                  ; CHECK FOR SPACE TO SEND
00001A2C  67F4                    4065mm         BEQ WAIT_FOR_READY_300                      ; NO SPACE, CHECK AGAIN
00001A2E  13D8 00C00007           4066mm         MOVE.B (A0)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00001A34                          4067mm     ENDC
00001A34                          4068mm 
00001A34                 FALSE    4069mm     IFNE DEBUG
00001A34                          4070mm     ENDC
00001A34                          4071mm 
00001A34                          4072mm     ENDM
00001A34  60E4                    4073m     BRA LOOP_299
00001A36                          4074m EXIT_299
00001A36                          4075m     ENDM
00001A36                          4076      
00001A36  1039 00C0001F           4077      MOVE.B DUART_RESET_OPR,D0
00001A3C  4E73                    4078      RTE 
00001A3E                          4079  
00001A3E                          4080  ; strings
00001A3E= 50 72 65 73 73 20 ...   4081  HELPPROMPT DC.B 'Press ? for help',CR,LF,NULL
00001A51= 5B 3F 5D 09 09 09 ...   4082  HELP    DC.B '[?]',TAB,TAB,TAB,'help',CR,LF
00001A5D= 5B 76 5D 09 09 09 ...   4083          DC.B '[v]',TAB,TAB,TAB,'version',CR,LF
00001A6C= 78 78 78 78 78 78 ...   4084          DC.B 'xxxxxxxx[r]',TAB,TAB,'read long',CR,LF
00001A84= 78 78 78 78 78 78 ...   4085          DC.B 'xxxxxxxx[w]xxxxxxxx',TAB,'write long',CR,LF
00001AA4= 78 78 78 78 78 78 ...   4086          DC.B 'xxxxxxxx[s]',TAB,TAB,'download S records',CR,LF
00001AC5= 78 78 78 78 78 78 ...   4087          DC.B 'xxxxxxxx[g]',TAB,TAB,'go',CR,LF
00001AD6= 5B 7A 5D 09 09 09 ...   4088          DC.B '[z]',TAB,TAB,TAB,'zap memory',CR,LF
00001AE8= 78 78 78 78 78 78 ...   4089          DC.B 'xxxxxxxx[l]xxxx',TAB,TAB,'load to EEPROM',CR,LF
00001B09= 78 78 78 78 78 78 ...   4090          DC.B 'xxxxxxxx[p]xxxx',TAB,TAB,'patch EEPROM',CR,LF
00001B28= 78 78 78 78 78 78 ...   4091          DC.B 'xxxxxxxx[m]xxxxxxxx',TAB,'monitor to RAM',CR,LF
00001B4C= 5B 78 5D 09 09 09 ...   4092          DC.B '[x]',TAB,TAB,TAB,'print registers',CR,LF,NULL
00001B64= 48 75 68 3F 0D 0A 00    4093  HUH  DC.B 'Huh?',CR,LF,NULL
00001B6B= 20 53 20 72 65 63 ...   4094  READ    DC.B ' S records read, start address = ',NULL
00001B8D= 57 3A 20 55 6E 6B ...   4095  UNREC   DC.B 'W: Unknown Srec type: ',NULL
00001BA4= 21 20 43 53 20 66 ...   4096  CS_FAILURE  DC.B '! CS failure at ',NULL
00001BB5= 21 20 52 41 4D 20 ...   4097  RAM_ERROR   DC.B '! RAM error at: ',NULL
00001BC6= 30 31 32 33 34 35 ...   4098  BIN2HEX_LUT DC.B '0123456789ABCDEF'
00001BD6= 00 01 02 03 04 05 ...   4099  HEX2BIN_LUT DC.B 0,1,2,3,4,5,6,7,8,9,0,0,0,0,0,0,0,$A,$B,$C,$D,$E,$F
00001BED= 4C 6F 61 64 69 6E ...   4100  LOADING DC.B 'Loading EEPROM...',CR,LF,NULL
00001C01= 57 72 69 74 69 6E ...   4101  CODE        DC.B 'Writing code: ',NULL
00001C10= 53 65 74 74 69 6E ...   4102  SP      DC.B 'Setting initial stack pointer to ',NULL
00001C32= 57 72 69 74 69 6E ...   4103  VECTORS DC.B 'Writing vectors',CR,LF,NULL
00001C44= 0D 0A 00                4104  CRLF    DC.B CR,LF,NULL
00001C47= 3E 20 00                4105  PROMPT  DC.B '> ',NULL
00001C4A= 30 78 00                4106  ox      DC.B '0x',NULL
00001C4D= 20 2D 3E 20 00          4107  to      DC.B ' -> ',NULL
00001C52= 53 50 3A 20 00          4108  STACK_POINTER DC.B 'SP: ',NULL
00001C57= 53 52 3A 20 00          4109  STATUS_REGISTER DC.B 'SR: ',NULL
00001C5C= 74 69 63 6B 0D 0A 00    4110  TICK DC.B 'tick',CR,LF,NULL
00001C63= 2A 20 42 75 73 2F ...   4111  BUS_ERROR DC.B '* Bus/address error ',NULL
00001C78= 72 65 61 64 69 6E ...   4112  READING DC.B 'reading ',NULL
00001C81= 77 72 69 74 69 6E ...   4113  WRITING DC.B 'writing ',NULL
00001C8A= 20 66 72 6F 6D 20 00    4114  FROM DC.B ' from ',NULL
00001C91= 2A 20 55 6E 68 61 ...   4115  UNHANDLED DC.B '* Unhandled interrupt',NULL
00001CA7= 2A 20 20 55 6E 69 ...   4116  UNINITIALISED DC.B '*  Unitialised interrupt vector',NULL
00001CC7= 2A 20 53 70 75 72 ...   4117  SPURIOUS DC.B '* Spurious interrupt',NULL
00001CDC= 4D 44 46 2D 6D 6F ...   4118  VERSION DC.B 'MDF-mon V1.118 (27/04/2021)',CR,LF,NULL       ; this is the last line on purpose, so if it prints, we can be sure we got it all
00001CFA= 00                      4119  END     DC.B 0
00001CFB                          4120      END START                                           ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
BIN2HEX             0
BIN2HEX_LUT         1BC6
BUS_ERROR           1C63
BUS_ERROR_HANDLER   184C
CODE                1C01
CONTINUE            18BC
CONTINUE_113        DE2
CONTINUE_54         8BE
CONTINUE_57         90E
CONTINUE_61         964
CONTINUE_69         A18
CONTINUE_74         A8A
CONTINUE_79         B06
CONTINUE_84         B84
CONTINUE_89         C0C
CONTINUE_94         C7E
CONTINUE_99         CF0
CR                  D
CRLF                1C44
CS_FAILURE          1BA4
DEBUG               0
DISPLAY             E00001
DISPLAY_            0
DISPLAY_BASE        E00000
DOWNLOAD            734
DOWNLOAD_BYTE       AA4
DOWNLOAD_DONE       EEC
DUART_ACR           C00009
DUART_ACR_          4
DUART_BASE          C00000
DUART_CRA           C00005
DUART_CRA_          2
DUART_CRB           C00015
DUART_CRB_          A
DUART_CSRA          C00003
DUART_CSRA_         1
DUART_CSRB          C00013
DUART_CSRB_         9
DUART_CTLR          C0000F
DUART_CTLR_         7
DUART_CTUR          C0000D
DUART_CTUR_         6
DUART_IMR           C0000B
DUART_IMR_          5
DUART_IVR           C00019
DUART_IVR_          C
DUART_MRA           C00001
DUART_MRA_          0
DUART_MRB           C00011
DUART_MRB_          8
DUART_OPCR          C0001B
DUART_OPCR_         D
DUART_RESET_OPR     C0001F
DUART_RESET_OPR_    F
DUART_RXA           C00007
DUART_RXA_          3
DUART_RXB           C00017
DUART_RXB_          B
DUART_SET_OPR       C0001D
DUART_SET_OPR_      E
DUART_SRA           C00003
DUART_SRA_          1
DUART_SRB           C00013
DUART_SRB_          9
DUART_TXA           C00007
DUART_TXA_          3
DUART_TXB           C00017
DUART_TXB_          B
END                 1CFA
EXIT_10             56E
EXIT_104            D62
EXIT_106            D82
EXIT_110            DB4
EXIT_118            E4A
EXIT_120            E72
EXIT_123            E92
EXIT_128            EDC
EXIT_131            F0C
EXIT_135            F56
EXIT_138            F78
EXIT_143            FC2
EXIT_145            103E
EXIT_148            1062
EXIT_15             5B8
EXIT_153            10AC
EXIT_160            1138
EXIT_163            1196
EXIT_165            11B6
EXIT_168            11D8
EXIT_17             5D8
EXIT_172            1222
EXIT_175            1244
EXIT_180            128E
EXIT_183            12D0
EXIT_186            12F8
EXIT_191            1342
EXIT_196            1388
EXIT_199            13BE
EXIT_20             5F8
EXIT_203            1408
EXIT_206            142A
EXIT_211            1474
EXIT_22             622
EXIT_222            1528
EXIT_225            157A
EXIT_228            159A
EXIT_232            15E4
EXIT_235            1606
EXIT_240            1650
EXIT_249            16E8
EXIT_251            172A
EXIT_254            174C
EXIT_259            1796
EXIT_261            17B6
EXIT_264            17D8
EXIT_269            1822
EXIT_272            186C
EXIT_274            1898
EXIT_276            18BC
EXIT_279            18E0
EXIT_28             6B6
EXIT_283            192A
EXIT_286            194E
EXIT_291            1998
EXIT_293            19D0
EXIT_295            19F2
EXIT_297            1A14
EXIT_299            1A36
EXIT_30             716
EXIT_32             742
EXIT_35             76C
EXIT_45             81A
EXIT_5              526
EXIT_52             890
EXIT_66             9D4
EXIT_7              546
FROM                1C8A
G                   FC6
GET_INPUT           622
H                   71A
HELP                1A51
HELPPROMPT          1A3E
HEX2BIN             10B
HEX2BIN_LUT         1BD6
HEX_DIGIT           182E
HUH                 1B64
I                   1826
ILLEGAL_HANDLER     19A0
L                   10BC
LF                  A
LOADING             1BED
LOOP_10             552
LOOP_104            D46
LOOP_106            D66
LOOP_110            D98
LOOP_118            E2E
LOOP_120            E56
LOOP_122            E94
LOOP_123            E76
LOOP_128            EC0
LOOP_130            F0E
LOOP_131            EF0
LOOP_135            F3A
LOOP_137            F7A
LOOP_138            F5C
LOOP_143            FA6
LOOP_145            1022
LOOP_147            1064
LOOP_148            1046
LOOP_15             59C
LOOP_153            1090
LOOP_160            111C
LOOP_163            117A
LOOP_165            119A
LOOP_167            11DA
LOOP_168            11BC
LOOP_17             5BC
LOOP_172            1206
LOOP_174            1246
LOOP_175            1228
LOOP_180            1272
LOOP_183            12B4
LOOP_185            12FA
LOOP_186            12DC
LOOP_191            1326
LOOP_196            136C
LOOP_198            13C0
LOOP_199            13A2
LOOP_20             5DC
LOOP_203            13EC
LOOP_205            142C
LOOP_206            140E
LOOP_211            1458
LOOP_22             606
LOOP_222            150C
LOOP_225            155E
LOOP_227            159C
LOOP_228            157E
LOOP_232            15C8
LOOP_234            1608
LOOP_235            15EA
LOOP_240            1634
LOOP_249            16CC
LOOP_251            170E
LOOP_253            174E
LOOP_254            1730
LOOP_259            177A
LOOP_261            179A
LOOP_263            17DA
LOOP_264            17BC
LOOP_269            1806
LOOP_272            1850
LOOP_274            187C
LOOP_276            18A0
LOOP_278            18E2
LOOP_279            18C4
LOOP_28             69A
LOOP_283            190E
LOOP_285            1950
LOOP_286            1932
LOOP_291            197C
LOOP_293            19B4
LOOP_295            19D6
LOOP_297            19F8
LOOP_299            1A1A
LOOP_30             6FA
LOOP_32             726
LOOP_34             76E
LOOP_35             750
LOOP_45             7FE
LOOP_5              50A
LOOP_52             874
LOOP_66             9B8
LOOP_7              52A
LOOP_9              570
M                   1672
MAIN_LOOP           602
NULL                0
OX                  1C4A
P                   14B4
PRINTSTR            726
PRINT_CHAR          203
PRINT_CRLF          3A0
PRINT_REG           438
PRINT_STR           3CB
PROGRAM             C4D
PROGRAM_VECTOR      CE4
PROMPT              1C47
PROTECT             A40
R                   746
RAM                 200000
RAM_ERROR           1BB5
READ                1B6B
READING             1C78
READ_CHAR           62D
RESET               4
ROM                 0
S                   89A
SP                  1C10
SPURIOUS            1CC7
SPURIOUS_HANDLER    19F4
STACK               0
STACK_ADDRESS       2E0000
STACK_POINTER       1C52
START               400
STATUS_REGISTER     1C57
TAB                 9
TICK                1C5C
TICK_HANDLER        1A16
TO                  1C4D
UNHANDLED           1C91
UNHANDLED_HANDLER   19B0
UNINITIALISED       1CA7
UNINITIALISED_HANDLER  19D2
UNPROTECT           979
UNREC               1B8D
USER                100
V                   722
VECS                8
VECTORS             1C32
VERSION             1CDC
W                   81E
WAIT_CHAR           4E9
WAIT_FOR_COMPLETE_182  12A0
WAIT_FOR_COMPLETE_194  134C
WAIT_FOR_COMPLETE_195  135E
WAIT_FOR_COMPLETE_214  1478
WAIT_FOR_COMPLETE_215  148A
WAIT_FOR_COMPLETE_242  1652
WAIT_FOR_READY_1    4C2
WAIT_FOR_READY_101  D08
WAIT_FOR_READY_105  D4E
WAIT_FOR_READY_107  D6E
WAIT_FOR_READY_108  D82
WAIT_FOR_READY_11   55A
WAIT_FOR_READY_111  DA0
WAIT_FOR_READY_113  DC6
WAIT_FOR_READY_115  DFA
WAIT_FOR_READY_119  E36
WAIT_FOR_READY_121  E5E
WAIT_FOR_READY_124  E7E
WAIT_FOR_READY_126  EA6
WAIT_FOR_READY_129  EC8
WAIT_FOR_READY_13   582
WAIT_FOR_READY_132  EF8
WAIT_FOR_READY_134  F20
WAIT_FOR_READY_136  F42
WAIT_FOR_READY_139  F64
WAIT_FOR_READY_141  F8C
WAIT_FOR_READY_144  FAE
WAIT_FOR_READY_146  102A
WAIT_FOR_READY_149  104E
WAIT_FOR_READY_151  1076
WAIT_FOR_READY_154  1098
WAIT_FOR_READY_155  10CA
WAIT_FOR_READY_157  10E4
WAIT_FOR_READY_16   5A4
WAIT_FOR_READY_161  1124
WAIT_FOR_READY_164  1182
WAIT_FOR_READY_166  11A2
WAIT_FOR_READY_169  11C4
WAIT_FOR_READY_171  11EC
WAIT_FOR_READY_173  120E
WAIT_FOR_READY_176  1230
WAIT_FOR_READY_178  1258
WAIT_FOR_READY_18   5C4
WAIT_FOR_READY_181  127A
WAIT_FOR_READY_184  12BC
WAIT_FOR_READY_187  12E4
WAIT_FOR_READY_189  130C
WAIT_FOR_READY_192  132E
WAIT_FOR_READY_197  1374
WAIT_FOR_READY_2    4D6
WAIT_FOR_READY_200  13AA
WAIT_FOR_READY_202  13D2
WAIT_FOR_READY_204  13F4
WAIT_FOR_READY_207  1416
WAIT_FOR_READY_209  143E
WAIT_FOR_READY_21   5E4
WAIT_FOR_READY_212  1460
WAIT_FOR_READY_217  14C0
WAIT_FOR_READY_219  14DA
WAIT_FOR_READY_223  1514
WAIT_FOR_READY_226  1566
WAIT_FOR_READY_229  1586
WAIT_FOR_READY_23   60E
WAIT_FOR_READY_231  15AE
WAIT_FOR_READY_233  15D0
WAIT_FOR_READY_236  15F2
WAIT_FOR_READY_238  161A
WAIT_FOR_READY_24   622
WAIT_FOR_READY_241  163C
WAIT_FOR_READY_244  1680
WAIT_FOR_READY_246  169A
WAIT_FOR_READY_250  16D4
WAIT_FOR_READY_252  1716
WAIT_FOR_READY_255  1738
WAIT_FOR_READY_257  1760
WAIT_FOR_READY_26   63C
WAIT_FOR_READY_260  1782
WAIT_FOR_READY_262  17A2
WAIT_FOR_READY_265  17C4
WAIT_FOR_READY_267  17EC
WAIT_FOR_READY_270  180E
WAIT_FOR_READY_273  1858
WAIT_FOR_READY_275  1884
WAIT_FOR_READY_277  18A8
WAIT_FOR_READY_280  18CC
WAIT_FOR_READY_282  18F4
WAIT_FOR_READY_284  1916
WAIT_FOR_READY_287  193A
WAIT_FOR_READY_289  1962
WAIT_FOR_READY_29   6A2
WAIT_FOR_READY_292  1984
WAIT_FOR_READY_294  19BC
WAIT_FOR_READY_296  19DE
WAIT_FOR_READY_298  1A00
WAIT_FOR_READY_3    4EA
WAIT_FOR_READY_300  1A22
WAIT_FOR_READY_31   702
WAIT_FOR_READY_33   72E
WAIT_FOR_READY_36   758
WAIT_FOR_READY_38   780
WAIT_FOR_READY_39   796
WAIT_FOR_READY_40   7AC
WAIT_FOR_READY_41   7C0
WAIT_FOR_READY_42   7D4
WAIT_FOR_READY_43   7E8
WAIT_FOR_READY_46   806
WAIT_FOR_READY_47   828
WAIT_FOR_READY_49   842
WAIT_FOR_READY_53   87C
WAIT_FOR_READY_54   8A2
WAIT_FOR_READY_56   8DC
WAIT_FOR_READY_57   8F2
WAIT_FOR_READY_59   926
WAIT_FOR_READY_6    512
WAIT_FOR_READY_61   948
WAIT_FOR_READY_63   97C
WAIT_FOR_READY_67   9C0
WAIT_FOR_READY_69   9FC
WAIT_FOR_READY_71   A30
WAIT_FOR_READY_74   A6E
WAIT_FOR_READY_76   AA2
WAIT_FOR_READY_79   AEA
WAIT_FOR_READY_8    532
WAIT_FOR_READY_81   B1E
WAIT_FOR_READY_84   B68
WAIT_FOR_READY_86   B9C
WAIT_FOR_READY_89   BF0
WAIT_FOR_READY_91   C24
WAIT_FOR_READY_94   C62
WAIT_FOR_READY_96   C96
WAIT_FOR_READY_99   CD4
WAIT_FOR_SRECORD    8A2
WRITE               189C
WRITING             1C81
X                   170A
Z                   FCC
_00000000           662
_00000001           676
_00000002           9DC
_00000003           DB8
_00000004           9EA
_00000005           BD8
_00000006           B4E
_00000007           DB8
_00000008           D42
_00000009           DB8
_0000000A           EE0
_0000000B           EEC
_0000000C           10AC
_0000000D           12AA
_0000000E           1356
_0000000F           1368
_00000010           1482
_00000011           1494
_00000012           165C
_10000000           93E
_10000001           9A6
_10000002           9F2
_10000003           A5A
_10000004           A64
_10000005           ACC
_10000006           AE0
_10000007           B48
_10000008           B52
_10000009           BD2
_1000000A           B5E
_1000000B           BC6
_1000000C           BE6
_1000000D           C4E
_1000000E           C58
_1000000F           CC0
_10000010           CCA
_10000011           D32
_10000012           DBC
_10000013           E24
_10000014           128E
_10000015           12B0
_10000016           16F2
_10000017           1706
_20000000           426
_20000001           432
_20000002           440
_20000003           44C
_20000004           826
_20000005           86A
_20000006           FDE
_20000007           FEE
_20000008           1008
_20000009           10AE
_2000000A           10C8
_2000000B           110C
_2000000C           1390
_2000000D           1496
_2000000E           14BE
_2000000F           1502
_20000010           167E
_20000011           16C2
