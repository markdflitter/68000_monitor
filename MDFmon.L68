00000104 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 28/05/2021 18:34:00

00000000                             1  *------------------------------------------------------------
00000000                             2  * Title         MDFmon 
00000000                             3  * Written by    Mark Flitter
00000000                             4  * Date          March 2021
00000000                             5  * Description:  68000 monitor program
00000000                             6  *-----------------------------------------------------------
00000000                             7  
00000000                             8      ORG  $0
00000000                             9  
00000000  =00000000                 10  DEBUG               EQU 0
00000000                            11  
00000000                            12  ; constants
00000000  =00000000                 13  NULL                EQU 0
00000000  =00000009                 14  TAB                 EQU 9
00000000  =0000000D                 15  CR                  EQU 13
00000000  =0000000A                 16  LF                  EQU 10
00000000                            17  
00000000  =00000000                 18  ROM                 EQU $0
00000000  =00200000                 19  RAM                 EQU $200000
00000000  =002E0000                 20  STACK_ADDRESS       EQU $2E0000
00000000                            21  
00000000  =00A00000                 22  MC68230_BASE        EQU $A00000
00000000  =00000000                 23  MC68230_GENERAL_CONTROL_    EQU $0
00000000  =00000001                 24  MC68230_SERVICE_REQUEST_    EQU $1
00000000  =00000002                 25  MC68230_PORT_A_DIRECTION_   EQU $2
00000000  =00000003                 26  MC68230_PORT_B_DIRECTION_   EQU $3
00000000  =00000004                 27  MC68230_PORT_C_DIRECTION_   EQU $4
00000000  =00000005                 28  MC68230_INTERRUPT_VECTOR_   EQU $5
00000000  =00000006                 29  MC68230_PORT_A_CONTROL_     EQU $6
00000000  =00000007                 30  MC68230_PORT_B_CONTROL_     EQU $7
00000000  =00000008                 31  MC68230_PORT_A_DATA_        EQU $8
00000000  =00000009                 32  MC68230_PORT_B_DATA_        EQU $9
00000000  =0000000A                 33  MC68230_PORT_A_ALTERNATE_   EQU $A
00000000  =0000000B                 34  MC68230_PORT_B_ALTERNATE_   EQU $B
00000000  =0000000C                 35  MC68230_PORT_C_DATA_        EQU $C
00000000  =0000000D                 36  MC68230_STATUS_             EQU $D
00000000                            37  
00000000  =00A00001                 38  MC68230_GENERAL_CONTROL     EQU MC68230_BASE+2*MC68230_GENERAL_CONTROL_+1
00000000  =00A00003                 39  MC68230_SERVICE_REQUEST     EQU MC68230_BASE+2*MC68230_SERVICE_REQUEST_+1
00000000  =00A00005                 40  MC68230_PORT_A_DIRECTION    EQU MC68230_BASE+2*MC68230_PORT_A_DIRECTION_+1
00000000  =00A00007                 41  MC68230_PORT_B_DIRECTION    EQU MC68230_BASE+2*MC68230_PORT_B_DIRECTION_+1
00000000  =00A00009                 42  MC68230_PORT_C_DIRECTION    EQU MC68230_BASE+2*MC68230_PORT_C_DIRECTION_+1
00000000  =00000000                 43  MC68230_PORT_DIRECTION_READ EQU 0
00000000  =000000FF                 44  MC68230_PORT_DIRECTION_WRITE EQU $FF
00000000                            45  
00000000  =00A0000B                 46  MC68230_INTERRUPT_VECTOR    EQU MC68230_BASE+2*MC68230_INTERRUPT_VECTOR_+1
00000000  =00A0000D                 47  MC68230_PORT_A_CONTROL      EQU MC68230_BASE+2*MC68230_PORT_A_CONTROL_+1
00000000  =00A0000F                 48  MC68230_PORT_B_CONTROL      EQU MC68230_BASE+2*MC68230_PORT_B_CONTROL_+1
00000000  =00A00011                 49  MC68230_PORT_A_DATA         EQU MC68230_BASE+2*MC68230_PORT_A_DATA_+1
00000000  =00A00013                 50  MC68230_PORT_B_DATA         EQU MC68230_BASE+2*MC68230_PORT_B_DATA_+1
00000000  =00A00015                 51  MC68230_PORT_A_ALTERNATE    EQU MC68230_BASE+2*MC68230_PORT_A_ALTERNATE_+1
00000000  =00A00017                 52  MC68230_PORT_B_ALTERNATE    EQU MC68230_BASE+2*MC68230_PORT_B_ALTERNATE_+1
00000000  =00A00019                 53  MC68230_PORT_C_DATA         EQU MC68230_BASE+2*MC68230_PORT_C_DATA_+1
00000000  =00000020                 54  MC68230_PORT_C_READ         EQU $20
00000000  =00000010                 55  MC68230_PORT_C_WRITE        EQU $10
00000000  =00000008                 56  MC68230_PORT_C_CS           EQU $08
00000000  =00A0001B                 57  MC68230_STATUS              EQU MC68230_BASE+2*MC68230_STATUS_+1
00000000                            58  
00000000  =00000020                 59  MC68230_PORT_C_READ         EQU $20
00000000  =00000010                 60  MC68230_PORT_C_WRITE        EQU $10
00000000  =00000008                 61  MC68230_PORT_C_CS           EQU $08
00000000                            62  
00000000  =00000000                 63  IDE_DATA_REGISTER           EQU 0
00000000  =00000002                 64  IDE_SECTOR_COUNT_REGISTER   EQU 2
00000000  =00000003                 65  IDE_LBA_0_7_REGISTER        EQU 3
00000000  =00000004                 66  IDE_LBA_8_15_REGISTER       EQU 4
00000000  =00000005                 67  IDE_LBA_16_23_REGISTER      EQU 5
00000000  =00000006                 68  IDE_DRIVESEL_REGISTER       EQU 6
00000000  =000000E0                 69  IDE_DRIVESEL_MASTER         EQU $E0
00000000                            70  
00000000  =00000007                 71  IDE_COMMAND_REGISTER        EQU 7
00000000  =00000020                 72  IDE_COMMAND_READ_WITH_RETRY         EQU $20
00000000                            73  
00000000  =00000007                 74  IDE_STATUS_REGISTER         EQU 7
00000000  =00000007                 75  IDE_STATUS_BUSY             EQU 7
00000000  =00000006                 76  IDE_STATUS_READY            EQU 6
00000000  =00000003                 77  IDE_STATUS_DRQ              EQU 3
00000000                            78  
00000000  =00C00000                 79  DUART_BASE          EQU $C00000
00000000  =00000000                 80  DUART_MRA_          EQU $0
00000000  =00000001                 81  DUART_CSRA_         EQU $1
00000000  =00000001                 82  DUART_SRA_          EQU $1
00000000  =00000002                 83  DUART_CRA_          EQU $2
00000000  =00000003                 84  DUART_TXA_          EQU $3
00000000  =00000003                 85  DUART_RXA_          EQU $3
00000000  =00000004                 86  DUART_ACR_          EQU $4
00000000  =00000005                 87  DUART_IMR_          EQU $5
00000000  =00000006                 88  DUART_CTUR_         EQU $6
00000000  =00000007                 89  DUART_CTLR_         EQU $7
00000000  =00000008                 90  DUART_MRB_          EQU $8
00000000  =00000009                 91  DUART_CSRB_         EQU $9
00000000  =00000009                 92  DUART_SRB_          EQU $9
00000000  =0000000A                 93  DUART_CRB_          EQU $A
00000000  =0000000B                 94  DUART_TXB_          EQU $B
00000000  =0000000B                 95  DUART_RXB_          EQU $B
00000000  =0000000C                 96  DUART_IVR_          EQU $C
00000000  =0000000D                 97  DUART_OPCR_         EQU $D
00000000  =0000000E                 98  DUART_SET_OPR_      EQU $E
00000000  =0000000F                 99  DUART_RESET_OPR_    EQU $F
00000000                           100  
00000000  =00C00001                101  DUART_MRA           EQU DUART_BASE+2*DUART_MRA_+1
00000000  =00C00003                102  DUART_SRA           EQU DUART_BASE+2*DUART_SRA_+1
00000000  =00C00003                103  DUART_CSRA          EQU DUART_BASE+2*DUART_CSRA_+1
00000000  =00C00005                104  DUART_CRA           EQU DUART_BASE+2*DUART_CRA_+1
00000000  =00C00007                105  DUART_TXA           EQU DUART_BASE+2*DUART_TXA_+1
00000000  =00C00007                106  DUART_RXA           EQU DUART_BASE+2*DUART_RXA_+1
00000000                           107  
00000000  =00C00011                108  DUART_MRB           EQU DUART_BASE+2*DUART_MRB_+1
00000000  =00C00013                109  DUART_SRB           EQU DUART_BASE+2*DUART_SRB_+1
00000000  =00C00013                110  DUART_CSRB          EQU DUART_BASE+2*DUART_CSRB_+1
00000000  =00C00015                111  DUART_CRB           EQU DUART_BASE+2*DUART_CRB_+1
00000000  =00C00017                112  DUART_TXB           EQU DUART_BASE+2*DUART_TXB_+1
00000000  =00C00017                113  DUART_RXB           EQU DUART_BASE+2*DUART_RXB_+1
00000000                           114  
00000000  =00C00009                115  DUART_ACR           EQU DUART_BASE+2*DUART_ACR_+1
00000000  =00C0000B                116  DUART_IMR           EQU DUART_BASE+2*DUART_IMR_+1
00000000  =00C0000D                117  DUART_CTUR          EQU DUART_BASE+2*DUART_CTUR_+1
00000000  =00C0000F                118  DUART_CTLR          EQU DUART_BASE+2*DUART_CTLR_+1
00000000  =00C00019                119  DUART_IVR           EQU DUART_BASE+2*DUART_IVR_+1
00000000  =00C0001B                120  DUART_OPCR          EQU DUART_BASE+2*DUART_OPCR_+1
00000000  =00C0001D                121  DUART_SET_OPR       EQU DUART_BASE+2*DUART_SET_OPR_+1
00000000  =00C0001F                122  DUART_RESET_OPR     EQU DUART_BASE+2*DUART_RESET_OPR_+1
00000000                           123  
00000000  =00E00000                124  DISPLAY_BASE        EQU $E00000
00000000  =00000000                125  DISPLAY_            EQU $0
00000000  =00E00001                126  DISPLAY             EQU DISPLAY_BASE+2*DISPLAY_+1
00000000                           127  
00000000                           128  ; macros
00000000                           129  ; convert top 4 bits of input register from binary to a single hex digit
00000000                           130  ; the input register is changed during the process
00000000                           131  ; \1 input data register containing binary number, \2 data register for return value, \3 working address register
00000000                           132  BIN2HEX MACRO
00000000                           133      LEA BIN2HEX_LUT(PC),\3                          ; load the lookup table
00000000                           134      ROL.L #4,\1                                     ; shift the top 4 bits down to bottom of the register the and mask off everything else
00000000                           135      MOVE.B \1,\2
00000000                           136      ANDI.L #$F,\2
00000000                           137      MOVE.B 0(\3,\2),\2                              ; use that as an index into the LUT
00000000                           138      ENDM
00000000                           139  
00000000                           140  ; convert single hex digit to 4 bit binary number in LSbits
00000000                           141  ; the input register is changed during the process
00000000                           142  ; \1 data register containing hex character, \2 data register for return value, \3 working address register
00000000                           143  HEX2BIN MACRO
00000000                           144      LEA HEX2BIN_LUT(PC),\3                          ; load the lookup table
00000000                           145      SUB.B #'0',\1                                   ; work out offset and mask off anything rogue
00000000                           146      AND.L #$FF,\1                                   ; ignore the top 3 bytes
00000000                           147      MOVE.B 0(\3,\1),\2                              ; use that as an index into the LUT   
00000000                           148      ENDM
00000000                           149  
00000000                           150  ; send a single char to the serial port
00000000                           151  ; \1 = char to send, \2 = data register to use for status poll
00000000                           152  ; will stamp on D0 and D1 in debug mode
00000000                           153  PRINT_CHAR MACRO
00000000                           154  WAIT_FOR_READY\@                                    ; wait until the there is space to send
00000000                           155      IFEQ DEBUG
00000000                           156          MOVE.B DUART_SRA,\2                         ; read status register
00000000                           157          BTST #2,\2                                  ; check for space to send
00000000                           158          BEQ WAIT_FOR_READY\@                        ; no space, check again
00000000                           159          MOVE.B \1,DUART_TXA                         ; send the next character
00000000                           160      ENDC
00000000                           161  
00000000                           162      IFNE DEBUG
00000000                           163          MOVE.B \1,D1
00000000                           164          MOVE.L #6,D0   
00000000                           165          TRAP #15                                    ; write to terminal in simulator
00000000                           166      ENDC
00000000                           167  
00000000                           168      ENDM
00000000                           169  
00000000                           170  ; send CR,LF to the serial port
00000000                           171  ; \1 = data register to use for status poll, /2 = working address register
00000000                           172  PRINT_CRLF MACRO
00000000                           173      LEA CRLF(PC),\2
00000000                           174      PRINT_STR \2,\1
00000000                           175      ENDM
00000000                           176  
00000000                           177  ; send C-style, zero terminated string to the serial port
00000000                           178  ; \1 = address register containing address of zero terminated string, \2 = data register to use for status poll, 
00000000                           179  PRINT_STR MACRO
00000000                           180  LOOP\@
00000000                           181      CMP.B #NULL,(\1)                                ; 0 -> done
00000000                           182      BEQ EXIT\@
00000000                           183      PRINT_CHAR (\1)+,\2
00000000                           184      BRA LOOP\@
00000000                           185  EXIT\@
00000000                           186      ENDM
00000000                           187    
00000000                           188  ; send the contents of a data register to the serial port as a 1 digit hex number
00000000                           189  ; \1 = data register containing binary number, \2 = data register to use for status poll, \3 working data register, \4 working address register
00000000                           190  PRINT_REG_4BIT MACRO
00000000                           191      LEA BIN2HEX_LUT(PC),\4                          ; load the lookup table
00000000                           192      MOVE.B \1,\3
00000000                           193      ANDI.L #$F,\3
00000000                           194      MOVE.B 0(\4,\3),\3                              ; use that as an index into the LUT
00000000                           195      PRINT_CHAR \3,\2
00000000                           196      ENDM
00000000                           197  
00000000                           198  ; send the contents of a data register to the serial port as a 8 digit hex number
00000000                           199  ; \1 = data register containing binary number, \2 = data register to use for status poll, \3 working data register, \4 counter register, \5 working address register
00000000                           200  PRINT_REG MACRO
00000000                           201      LEA ox(PC),\5
00000000                           202      PRINT_STR \5,\2
00000000                           203      MOVE.L #7,\4                                    ; loop round all 8 hex characters of 4 bits each
00000000                           204  LOOP\@
00000000                           205      BIN2HEX \1,\3,\5
00000000                           206      PRINT_CHAR \3,\2
00000000                           207      DBEQ \4,LOOP\@
00000000                           208      ENDM
00000000                           209  
00000000                           210  ; wait for a char from the serial port
00000000                           211  ; \ 1= data register for read char, \2 = register to use for status poll
00000000                           212  ; will stamp on D0 and D1 in debug mode
00000000                           213  WAIT_CHAR MACRO
00000000                           214  WAIT_FOR_READY\@                                    ; wait until the there is space to send
00000000                           215      IFEQ DEBUG
00000000                           216          MOVE.B DUART_SRA,\2                         ; read status register
00000000                           217          BTST #0,\2                                  ; check for character
00000000                           218          BEQ WAIT_FOR_READY\@                        ; nothing, check again
00000000                           219      ENDC
00000000                           220  
00000000                           221      READ_CHAR \1
00000000                           222  
00000000                           223      IFEQ DEBUG
00000000                           224          PRINT_CHAR \1,\2                            ; echo it back
00000000                           225      ENDC
00000000                           226      ENDM
00000000                           227  
00000000                           228  ; read a char from the serial port - assumes that there is one!
00000000                           229  ; \ 1= data register for read char
00000000                           230  ; will stamp on D0 and D1 in debug mode
00000000                           231  READ_CHAR MACRO
00000000                           232      IFEQ DEBUG
00000000                           233          MOVE.B DUART_RXA,\1                         ; got a character, read it
00000000                           234      ENDC
00000000                           235      IFNE DEBUG
00000000                           236          MOVE.L #5,D0    
00000000                           237          TRAP #15                                    ; read from keyboard in simulator
00000000                           238          MOVE.L D1,\1
00000000                           239      ENDC
00000000                           240  
00000000                           241      CMP.B #$1B,\1                                   ; check for escape and go to start
00000000                           242      BEQ START
00000000                           243      ENDM
00000000                           244  
00000000                           245  
00000000                           246  ; read data from the download serial port
00000000                           247  ; \ 1= data register for read char
00000000                           248  DOWNLOAD MACRO
00000000                           249  WAIT_FOR_READY\@                                    ; wait until the there is space to send
00000000                           250  
00000000                           251      MOVE.B DUART_SRA,\1                             ; check for command
00000000                           252      BTST #0,\1                                      ; check for character
00000000                           253      BEQ CONTINUE\@                                  ; nothing, continue
00000000                           254  
00000000                           255      READ_CHAR \1                                    ; we're not going to do anything with it, just check for escape
00000000                           256  CONTINUE\@
00000000                           257      MOVE.B DUART_SRB,\1                             ; read download status register
00000000                           258      BTST #0,\1                                      ; check for character
00000000                           259      BEQ WAIT_FOR_READY\@                            ; nothing, check again
00000000                           260      
00000000                           261      MOVE.B DUART_RXB,\1                             ; got a character, read it
00000000                           262      MOVE.B \1,DISPLAY                               ; echo to the display
00000000                           263  
00000000                           264      ENDM
00000000                           265  
00000000                           266  ; unprotect the EEPROM
00000000                           267  UNPROTECT MACRO
00000000                           268      MOVE.W #$AAAA,$2AAA                             ; remove write protect
00000000                           269      NOP
00000000                           270      MOVE.W #$5555,$1554
00000000                           271      NOP
00000000                           272      MOVE.W #$8080,$2AAA
00000000                           273      NOP
00000000                           274      MOVE.W #$AAAA,$2AAA
00000000                           275      NOP
00000000                           276      MOVE.W #$5555,$1554
00000000                           277      NOP
00000000                           278      MOVE.W #$2020,$2AAA
00000000                           279      ENDM
00000000                           280      
00000000                           281  ; protect the EEPROM
00000000                           282  PROTECT MACRO
00000000                           283      MOVE.W #$AAAA,$2AAA                             ; and write protect
00000000                           284      MOVE.W #$5555,$1554
00000000                           285      MOVE.W #$A0A0,$2AAA
00000000                           286      ENDM
00000000                           287  
00000000                           288  
00000000                           289  ; read two hex digits from the download serial port and convert to a byte
00000000                           290  ; \1 result register, \2 = data register for read char, \3 = register to use for status poll, \4 = working data register, \5 = checksum register, \6 = working address register
00000000                           291  DOWNLOAD_BYTE MACRO
00000000                           292      MOVE.B #2,\4
00000000                           293      WHILE.B \4 <GT> 0 DO
00000000                           294          LSL.L #4,\1                                 ; it's OK to do this first, because we are either starting from 0, 
00000000                           295          DOWNLOAD \2                                 ; or we are reading the next byte along, so need to shift up the previous one
00000000                           296          ;PRINT_CHAR \2,\3
00000000                           297          HEX2BIN \2,\2,\6
00000000                           298          OR.B \2,\1
00000000                           299          SUB.B #1,\4
00000000                           300      ENDW
00000000                           301  
00000000                           302      MOVE.L #0,\2                                    ; rextract latest byte of address and add into checksum
00000000                           303      MOVE.B \1,\2
00000000                           304      ADD.L \1,\5
00000000                           305  
00000000                           306      ENDM
00000000                           307  
00000000                           308  ; write word to EEPROM
00000000                           309  ; \1 word to write, \2 = target address, \3 = working data register
00000000                           310  PROGRAM MACRO
00000000                           311    MOVE.W \1,\2                                      ; write the data
00000000                           312  
00000000                           313  WAIT_FOR_COMPLETE\@
00000000                           314          MOVE.W \2,\3
00000000                           315  
00000000                           316          IF.W \3 <NE> \1 THEN
00000000                           317              BRA WAIT_FOR_COMPLETE\@
00000000                           318          ENDI
00000000                           319          ENDM
00000000                           320          
00000000                           321  ; program vector to EEPROM
00000000                           322  ; \1 handler address, \2 = target address, \3 = working data register
00000000                           323  PROGRAM_VECTOR MACRO
00000000                           324      ADD.L #2,\2
00000000                           325      PROGRAM \1, (\2), \3                            ; write it
00000000                           326      LSR.L #8,\1
00000000                           327      LSR.L #8,\1
00000000                           328      SUB.L #2,\2
00000000                           329      PROGRAM \1, (\2), \3
00000000                           330      ENDM
00000000                           331  
00000000                           332  ; read an ide register
00000000                           333  ; \1 = register to read, \2 = data register for result, \3 = working data register 
00000000                           334  READ_8 MACRO
00000000                           335      MOVE.B #MC68230_PORT_DIRECTION_READ, MC68230_PORT_B_DIRECTION
00000000                           336      MOVE.B #(MC68230_PORT_C_READ | MC68230_PORT_C_WRITE), \3
00000000                           337      ORI.B \1, \3
00000000                           338      MOVE.B \3, MC68230_PORT_C_DATA
00000000                           339      ANDI.B #~MC68230_PORT_C_READ, \3
00000000                           340      MOVE.B \3, MC68230_PORT_C_DATA
00000000                           341      MOVE.B MC68230_PORT_B_DATA, \2
00000000                           342      ORI.B #MC68230_PORT_C_READ, \3
00000000                           343      MOVE.B \3, MC68230_PORT_C_DATA
00000000                           344      MOVE.B #(MC68230_PORT_C_READ | MC68230_PORT_C_WRITE | MC68230_PORT_C_CS), MC68230_PORT_C_DATA
00000000                           345      ENDM
00000000                           346      
00000000                           347  ; write an ide register
00000000                           348  ; \1 = value to write, \2 = register to write, \3 = working data register 
00000000                           349  WRITE_8 MACRO
00000000                           350      MOVE.B #MC68230_PORT_DIRECTION_WRITE, MC68230_PORT_B_DIRECTION
00000000                           351      MOVE.B #(MC68230_PORT_C_READ | MC68230_PORT_C_WRITE), \3
00000000                           352      ORI.B \2, \3
00000000                           353      MOVE.B \3, MC68230_PORT_C_DATA
00000000                           354      ANDI.B #~MC68230_PORT_C_WRITE, \3
00000000                           355      MOVE.B \1, MC68230_PORT_B_DATA
00000000                           356      MOVE.B \3, MC68230_PORT_C_DATA
00000000                           357      ORI.B #MC68230_PORT_C_WRITE, \3
00000000                           358      MOVE.B \3, MC68230_PORT_C_DATA
00000000                           359      MOVE.B #(MC68230_PORT_C_READ | MC68230_PORT_C_WRITE | MC68230_PORT_C_CS), MC68230_PORT_C_DATA
00000000                           360      ENDM
00000000                           361  
00000000                           362  ; read ide data
00000000                           363  ; \1 = register to read, \2 = data register for result, \3 = working data register 
00000000                           364  READ_16 MACRO
00000000                           365      MOVE.B #MC68230_PORT_DIRECTION_READ, MC68230_PORT_B_DIRECTION
00000000                           366      MOVE.B #MC68230_PORT_DIRECTION_READ, MC68230_PORT_A_DIRECTION
00000000                           367      
00000000                           368      MOVE.B #(MC68230_PORT_C_READ | MC68230_PORT_C_WRITE), \3    
00000000                           369      ORI.B \1, \3
00000000                           370      MOVE.B \3, MC68230_PORT_C_DATA
00000000                           371      ANDI.B #~MC68230_PORT_C_READ, \3
00000000                           372      MOVE.B \3, MC68230_PORT_C_DATA
00000000                           373      MOVE.B MC68230_PORT_A_DATA, \2
00000000                           374      LSL.W #8, \2
00000000                           375      MOVE.B MC68230_PORT_B_DATA, \2
00000000                           376      ORI.B #MC68230_PORT_C_READ, \3
00000000                           377      MOVE.B \3, MC68230_PORT_C_DATA
00000000                           378      MOVE.B #(MC68230_PORT_C_READ | MC68230_PORT_C_WRITE | MC68230_PORT_C_CS), MC68230_PORT_C_DATA
00000000                           379      ENDM
00000000                           380      
00000000                           381  ; read ide data
00000000                           382  ; \1 = register to read, \2 = data register for result, \3 = working data register 
00000000                           383  READ_32 MACRO
00000000                           384      READ_16 \1, \2, \3
00000000                           385      LSL.L #8, \2
00000000                           386      LSL.L #8, \2
00000000                           387      READ_16 \1, \2, \3
00000000                           388      ENDM
00000000                           389          
00000000                           390  ; read ide status
00000000                           391  ;\1 = data register for result, \2 = working data register 
00000000                           392  READ_IDE_STATUS MACRO   
00000000                           393      READ_8 #IDE_STATUS_REGISTER, \1, \2
00000000                           394      ENDM
00000000                           395      
00000000                           396  ; wait for ide drive to be ready
00000000                           397  ;\1 = working data register 1, \2 = working data register 2
00000000                           398  WAIT_DRIVE_READY MACRO
00000000                           399  LOOP\@
00000000                           400      READ_IDE_STATUS \1, \2
00000000                           401      BTST #IDE_STATUS_READY, \1
00000000                           402      BEQ LOOP\@
00000000                           403      ENDM
00000000                           404      
00000000                           405  ; wait for ide drive to be not busy
00000000                           406  ;\1 = working data register 1, \2 = working data register 2
00000000                           407  WAIT_DRIVE_NOT_BUSY MACRO
00000000                           408  LOOP\@
00000000                           409      READ_IDE_STATUS \1, \2
00000000                           410      BTST #IDE_STATUS_BUSY, \1
00000000                           411      BNE LOOP\@
00000000                           412      ENDM
00000000                           413      
00000000                           414  ; wait for ide drive to have data for us
00000000                           415  ;\1 = working data register 1, \2 = working data register 2
00000000                           416  WAIT_DRIVE_DRQ MACRO
00000000                           417  LOOP\@
00000000                           418      READ_IDE_STATUS \1, \2
00000000                           419      BTST #IDE_STATUS_DRQ, \1
00000000                           420      BEQ LOOP\@
00000000                           421      ENDM
00000000                           422      
00000000                           423  ; prepare to send a read command
00000000                           424  ; \1 = block number, \2 = working data register 1, /3 = working data register 2, /4 = working data register 3
00000000                           425  SET_READ_ADDRESS MACRO
00000000                           426      WRITE_8 #1, #IDE_SECTOR_COUNT_REGISTER, \2
00000000                           427      MOVE.L \1,\3
00000000                           428      WRITE_8 \3, #IDE_LBA_0_7_REGISTER, \2
00000000                           429      LSR.L #8, \3
00000000                           430      WRITE_8 \3, #IDE_LBA_8_15_REGISTER, \2
00000000                           431      LSR.L #8, \3                                
00000000                           432      WRITE_8 \3, #IDE_LBA_16_23_REGISTER, \2
00000000                           433      LSR.L #8, \3
00000000                           434      READ_8 #IDE_DRIVESEL_REGISTER, \4, \2
00000000                           435      ANDI.B #$0F,\3
00000000                           436      OR.B \3,\4
00000000                           437      WRITE_8 \4, #IDE_DRIVESEL_REGISTER, \2
00000000                           438      ENDM
00000000                           439  
00000000                           440  ; send command
00000000                           441  ; \1 = command, \2 = working data register 1,
00000000                           442  SEND_COMMAND MACRO
00000000                           443      WRITE_8 \1, #IDE_COMMAND_REGISTER, \2
00000000                           444      ENDM
00000000                           445      
00000000                           446  ; send read command and wait
00000000                           447  ; \1 = block to read, \2 = working data register 1, \2 = working data register 2, \2 = working data register 3
00000000                           448  SEND_READ_COMMAND_AND_WAIT MACRO
00000000                           449      WAIT_DRIVE_NOT_BUSY \2, \3
00000000                           450      SET_READ_ADDRESS \1, \2, \3, \4
00000000                           451      SEND_COMMAND #IDE_COMMAND_READ_WITH_RETRY, \2
00000000                           452      WAIT_DRIVE_NOT_BUSY \2, \3
00000000                           453      WAIT_DRIVE_DRQ \2, \3
00000000                           454      ENDM
00000000                           455  
00000000                           456  ; register catalogue
00000000                           457  ; D0 - used for simulator I/O
00000000                           458  ; D1 - used for simulator I/O
00000000                           459  ; D2 - read character
00000000                           460  ; D3 - serial port status poll / task for TRAP in simulator
00000000                           461  ; D6 - working register used in R/W
00000000                           462  ; D7 - address accumulator, reset by download
00000000                           463  ; A0 - address of string to print 
00000000                           464  
00000000                           465  ; start vector
00000000= 002E0000                 466  STACK   DC.L STACK_ADDRESS                      ; STACK
00000004= 00000104                 467  RESET   DC.L START                              ; RESET
00000008= 00002B04                 468  VECS    DC.L BUS_ERROR_HANDLER                  ; BUS ERROR
0000000C= 00002B04                 469          DC.L BUS_ERROR_HANDLER                  ; ADDRESS ERROR
00000010= 00002C58                 470          DC.L ILLEGAL_HANDLER                    ; ILLEGAL INSTRUCTION
00000014= 00002C68                 471          DC.L UNHANDLED_HANDLER
00000018= 00002C68                 472          DC.L UNHANDLED_HANDLER
0000001C= 00002C68                 473          DC.L UNHANDLED_HANDLER
00000020= 00002C68                 474          DC.L UNHANDLED_HANDLER
00000024= 00002C68                 475          DC.L UNHANDLED_HANDLER
00000028= 00002C68                 476          DC.L UNHANDLED_HANDLER
0000002C= 00002C68                 477          DC.L UNHANDLED_HANDLER
00000030= 00002C68                 478          DC.L UNHANDLED_HANDLER
00000034= 00002C68                 479          DC.L UNHANDLED_HANDLER
00000038= 00002C68                 480          DC.L UNHANDLED_HANDLER
0000003C= 00002C68                 481          DC.L UNHANDLED_HANDLER
00000040= 00002C68                 482          DC.L UNHANDLED_HANDLER
00000044= 00002C68                 483          DC.L UNHANDLED_HANDLER
00000048= 00002C68                 484          DC.L UNHANDLED_HANDLER
0000004C= 00002C68                 485          DC.L UNHANDLED_HANDLER
00000050= 00002C68                 486          DC.L UNHANDLED_HANDLER
00000054= 00002C68                 487          DC.L UNHANDLED_HANDLER
00000058= 00002C68                 488          DC.L UNHANDLED_HANDLER
0000005C= 00002C68                 489          DC.L UNHANDLED_HANDLER
00000060= 00002C8C                 490          DC.L SPURIOUS_HANDLER
00000064= 00002C68                 491          DC.L UNHANDLED_HANDLER
00000068= 00002C68                 492          DC.L UNHANDLED_HANDLER
0000006C= 00002C68                 493          DC.L UNHANDLED_HANDLER
00000070= 00002C68                 494          DC.L UNHANDLED_HANDLER
00000074= 00002C68                 495          DC.L UNHANDLED_HANDLER
00000078= 00002C68                 496          DC.L UNHANDLED_HANDLER
0000007C= 00002C68                 497          DC.L UNHANDLED_HANDLER
00000080= 00002C68                 498          DC.L UNHANDLED_HANDLER
00000084= 00002C68                 499          DC.L UNHANDLED_HANDLER
00000088= 00002C68                 500          DC.L UNHANDLED_HANDLER
0000008C= 00002C68                 501          DC.L UNHANDLED_HANDLER
00000090= 00002C68                 502          DC.L UNHANDLED_HANDLER
00000094= 00002C68                 503          DC.L UNHANDLED_HANDLER
00000098= 00002C68                 504          DC.L UNHANDLED_HANDLER
0000009C= 00002C68                 505          DC.L UNHANDLED_HANDLER
000000A0= 00002C68                 506          DC.L UNHANDLED_HANDLER
000000A4= 00002C68                 507          DC.L UNHANDLED_HANDLER
000000A8= 00002C68                 508          DC.L UNHANDLED_HANDLER
000000AC= 00002C68                 509          DC.L UNHANDLED_HANDLER
000000B0= 00002C68                 510          DC.L UNHANDLED_HANDLER
000000B4= 00002C68                 511          DC.L UNHANDLED_HANDLER
000000B8= 00002C68                 512          DC.L UNHANDLED_HANDLER
000000BC= 00002C68                 513          DC.L UNHANDLED_HANDLER
000000C0= 00002C68                 514          DC.L UNHANDLED_HANDLER
000000C4= 00002C68                 515          DC.L UNHANDLED_HANDLER
000000C8= 00002C68                 516          DC.L UNHANDLED_HANDLER
000000CC= 00002C68                 517          DC.L UNHANDLED_HANDLER
000000D0= 00002C68                 518          DC.L UNHANDLED_HANDLER
000000D4= 00002C68                 519          DC.L UNHANDLED_HANDLER
000000D8= 00002C68                 520          DC.L UNHANDLED_HANDLER 
000000DC= 00002C68                 521          DC.L UNHANDLED_HANDLER
000000E0= 00002C68                 522          DC.L UNHANDLED_HANDLER
000000E4= 00002C68                 523          DC.L UNHANDLED_HANDLER 
000000E8= 00002C68                 524          DC.L UNHANDLED_HANDLER 
000000EC= 00002C68                 525          DC.L UNHANDLED_HANDLER
000000F0= 00002C68                 526          DC.L UNHANDLED_HANDLER 
000000F4= 00002C68                 527          DC.L UNHANDLED_HANDLER 
000000F8= 00002C68                 528          DC.L UNHANDLED_HANDLER 
000000FC= 00002C68                 529          DC.L UNHANDLED_HANDLER
00000100= 00002C7C                 530  USER    DC.L TICK_HANDLER
00000104                           531      ; start of program  
00000104                           532  START
00000104  2E7C 002E0000            533      MOVE.L #STACK_ADDRESS,A7
0000010A  13FC 0000 00E00001       534      MOVE.B #0,DISPLAY
00000112                           535  
00000112  7000                     536      MOVE.L #0,D0
00000114  1039 00C00019            537      MOVE.B DUART_IVR,D0                             ; warm start?
0000011A                           538  
0000011A                           539  ; reset the UART in case of warm start
0000011A  13FC 000A 00C00005       540      MOVE.B #$A,DUART_CRA                            ; disable rx & tx
00000122  13FC 000A 00C00015       541      MOVE.B #$A,DUART_CRB                            ; disable rx & tx
0000012A                           542      
0000012A                           543      FOR D1 = #$50 DOWNTO #$10 BY #$10 DO
0000012A  323C 0050                544s     MOVE.W  #$50,D1
0000012E  6000 000E                545s     BRA _20000001
00000132                           546s _20000000
00000132  13C1 00C00005            547          MOVE.B D1,DUART_CRA                         ; reset everyting
00000138  4E71                     548          NOP
0000013A                           549      ENDF
0000013A  0441 0010                550s     SUB.W   #$10,D1
0000013E                           551s _20000001
0000013E  B27C 0010                552s     CMP.W   #$10,D1
00000142  6CEE                     553s     BGE _20000000
00000144                           554  
00000144                           555      FOR D1 = #$50 DOWNTO #$10 BY #$10 DO
00000144  323C 0050                556s     MOVE.W  #$50,D1
00000148  6000 000E                557s     BRA _20000003
0000014C                           558s _20000002
0000014C  13C1 00C00015            559          MOVE.B D1,DUART_CRB                         ; reset everyting
00000152  4E71                     560          NOP
00000154                           561      ENDF
00000154  0441 0010                562s     SUB.W   #$10,D1
00000158                           563s _20000003
00000158  B27C 0010                564s     CMP.W   #$10,D1
0000015C  6CEE                     565s     BGE _20000002
0000015E                           566      
0000015E                           567  ;initialise UART
0000015E  13FC 0000 00C0000B       568      MOVE.B #$0,DUART_IMR                            ; no interrupts, please
00000166  13FC 00FF 00C0000D       569      MOVE.B #$FF,DUART_CTUR
0000016E  13FC 00FF 00C0000F       570      MOVE.B #$FF,DUART_CTLR
00000176  13FC 0070 00C00009       571      MOVE.B #$70,DUART_ACR
0000017E  13FC 0004 00C0001B       572      MOVE.B #$4,DUART_OPCR                           ; enable counter
00000186                           573  
00000186                           574  ; channel A
00000186  13FC 0013 00C00001       575      MOVE.B #$13,DUART_MRA                           ; no flow control, no parity, 8 data bits
0000018E  13FC 0007 00C00001       576      MOVE.B #$07,DUART_MRA                           ; 1 stop bit
00000196  13FC 0066 00C00003       577      MOVE.B #$66,DUART_CSRA                          ; 115K  baud
0000019E  13FC 0005 00C00005       578      MOVE.B #$5,DUART_CRA                            ; enable rx & tx
000001A6                           579  
000001A6                           580  ; channel B
000001A6  13FC 0013 00C00011       581      MOVE.B #$13,DUART_MRB                           ; no flow control, no parity, 8 data bits
000001AE  13FC 0007 00C00011       582      MOVE.B #$07,DUART_MRB                           ; 1 stop bit
000001B6  13FC 0066 00C00013       583      MOVE.B #$66,DUART_CSRB                          ; 115K baud
000001BE  13FC 0005 00C00015       584      MOVE.B #$5,DUART_CRB                            ; enable rx & tx
000001C6  13FC 0040 00C00019       585      MOVE.B #64,DUART_IVR
000001CE                           586  
000001CE                           587m     PRINT_CHAR #0,D1                                ; some non-printing char to flush out the serial port
000001CE                           588m WAIT_FOR_READY_1                                    ; WAIT UNTIL THE THERE IS SPACE TO SEND
000001CE                 TRUE      589m     IFEQ DEBUG
000001CE  1239 00C00003            590m         MOVE.B DUART_SRA,D1                         ; READ STATUS REGISTER
000001D4  0801 0002                591m         BTST #2,D1                                  ; CHECK FOR SPACE TO SEND
000001D8  67F4                     592m         BEQ WAIT_FOR_READY_1                        ; NO SPACE, CHECK AGAIN
000001DA  13FC 0000 00C00007       593m         MOVE.B #0,DUART_TXA                         ; SEND THE NEXT CHARACTER
000001E2                           594m     ENDC
000001E2                           595m 
000001E2                 FALSE     596m     IFNE DEBUG
000001E2                           597m     ENDC
000001E2                           598m 
000001E2                           599m     ENDM
000001E2                           600m     PRINT_CHAR #0,D1
000001E2                           601m WAIT_FOR_READY_2                                    ; WAIT UNTIL THE THERE IS SPACE TO SEND
000001E2                 TRUE      602m     IFEQ DEBUG
000001E2  1239 00C00003            603m         MOVE.B DUART_SRA,D1                         ; READ STATUS REGISTER
000001E8  0801 0002                604m         BTST #2,D1                                  ; CHECK FOR SPACE TO SEND
000001EC  67F4                     605m         BEQ WAIT_FOR_READY_2                        ; NO SPACE, CHECK AGAIN
000001EE  13FC 0000 00C00007       606m         MOVE.B #0,DUART_TXA                         ; SEND THE NEXT CHARACTER
000001F6                           607m     ENDC
000001F6                           608m 
000001F6                 FALSE     609m     IFNE DEBUG
000001F6                           610m     ENDC
000001F6                           611m 
000001F6                           612m     ENDM
000001F6                           613m     PRINT_CHAR #0,D1
000001F6                           614m WAIT_FOR_READY_3                                    ; WAIT UNTIL THE THERE IS SPACE TO SEND
000001F6                 TRUE      615m     IFEQ DEBUG
000001F6  1239 00C00003            616m         MOVE.B DUART_SRA,D1                         ; READ STATUS REGISTER
000001FC  0801 0002                617m         BTST #2,D1                                  ; CHECK FOR SPACE TO SEND
00000200  67F4                     618m         BEQ WAIT_FOR_READY_3                        ; NO SPACE, CHECK AGAIN
00000202  13FC 0000 00C00007       619m         MOVE.B #0,DUART_TXA                         ; SEND THE NEXT CHARACTER
0000020A                           620m     ENDC
0000020A                           621m 
0000020A                 FALSE     622m     IFNE DEBUG
0000020A                           623m     ENDC
0000020A                           624m 
0000020A                           625m     ENDM
0000020A                           626      
0000020A                           627      IF D0 <EQ> #$0F THEN
0000020A  B07C 000F                628s     CMP.W   #$0F,D0
0000020E  6600 0008                629s     BNE _00000000
00000212  1039 00C00005            630          MOVE.B DUART_CRA,D0                         ; BRG test mode
00000218                           631      ENDI
00000218                           632s _00000000
00000218                           633  
00000218  13FC 0001 00E00001       634      MOVE.B #1,DISPLAY
00000220                           635      
00000220                           636m     PRINT_CRLF D1,A0
00000220  41FA 2CB5                637m     LEA CRLF(PC),A0
00000224                           638mm     PRINT_STR A0,D1
00000224                           639mm LOOP_5
00000224  0C10 0000                640mm     CMP.B #NULL,(A0)                                ; 0 -> DONE
00000228  6700 0016                641mm     BEQ EXIT_5
0000022C                           642mmm     PRINT_CHAR (A0)+,D1
0000022C                           643mmm WAIT_FOR_READY_6                                    ; WAIT UNTIL THE THERE IS SPACE TO SEND
0000022C                 TRUE      644mmm     IFEQ DEBUG
0000022C  1239 00C00003            645mmm         MOVE.B DUART_SRA,D1                         ; READ STATUS REGISTER
00000232  0801 0002                646mmm         BTST #2,D1                                  ; CHECK FOR SPACE TO SEND
00000236  67F4                     647mmm         BEQ WAIT_FOR_READY_6                        ; NO SPACE, CHECK AGAIN
00000238  13D8 00C00007            648mmm         MOVE.B (A0)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
0000023E                           649mmm     ENDC
0000023E                           650mmm 
0000023E                 FALSE     651mmm     IFNE DEBUG
0000023E                           652mmm     ENDC
0000023E                           653mmm 
0000023E                           654mmm     ENDM
0000023E  60E4                     655mm     BRA LOOP_5
00000240                           656mm EXIT_5
00000240                           657mm     ENDM
00000240                           658m     ENDM
00000240  41FA 2D4B                659      LEA VERSION(PC),A0
00000244                           660m     PRINT_STR A0,D3
00000244                           661m LOOP_7
00000244  0C10 0000                662m     CMP.B #NULL,(A0)                                ; 0 -> DONE
00000248  6700 0016                663m     BEQ EXIT_7
0000024C                           664mm     PRINT_CHAR (A0)+,D3
0000024C                           665mm WAIT_FOR_READY_8                                    ; WAIT UNTIL THE THERE IS SPACE TO SEND
0000024C                 TRUE      666mm     IFEQ DEBUG
0000024C  1639 00C00003            667mm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
00000252  0803 0002                668mm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
00000256  67F4                     669mm         BEQ WAIT_FOR_READY_8                        ; NO SPACE, CHECK AGAIN
00000258  13D8 00C00007            670mm         MOVE.B (A0)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
0000025E                           671mm     ENDC
0000025E                           672mm 
0000025E                 FALSE     673mm     IFNE DEBUG
0000025E                           674mm     ENDC
0000025E                           675mm 
0000025E                           676mm     ENDM
0000025E  60E4                     677m     BRA LOOP_7
00000260                           678m EXIT_7
00000260                           679m     ENDM
00000260                           680  
00000260  41F9 00002FAB            681      LEA END,A0
00000266  2008                     682      MOVE.L A0,D0
00000268                           683m     PRINT_REG D0,D1,D2,D3,A0
00000268  41FA 2C73                684m     LEA OX(PC),A0
0000026C                           685mm     PRINT_STR A0,D1
0000026C                           686mm LOOP_10
0000026C  0C10 0000                687mm     CMP.B #NULL,(A0)                                ; 0 -> DONE
00000270  6700 0016                688mm     BEQ EXIT_10
00000274                           689mmm     PRINT_CHAR (A0)+,D1
00000274                           690mmm WAIT_FOR_READY_11                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000274                 TRUE      691mmm     IFEQ DEBUG
00000274  1239 00C00003            692mmm         MOVE.B DUART_SRA,D1                         ; READ STATUS REGISTER
0000027A  0801 0002                693mmm         BTST #2,D1                                  ; CHECK FOR SPACE TO SEND
0000027E  67F4                     694mmm         BEQ WAIT_FOR_READY_11                       ; NO SPACE, CHECK AGAIN
00000280  13D8 00C00007            695mmm         MOVE.B (A0)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00000286                           696mmm     ENDC
00000286                           697mmm 
00000286                 FALSE     698mmm     IFNE DEBUG
00000286                           699mmm     ENDC
00000286                           700mmm 
00000286                           701mmm     ENDM
00000286  60E4                     702mm     BRA LOOP_10
00000288                           703mm EXIT_10
00000288                           704mm     ENDM
00000288  7607                     705m     MOVE.L #7,D3                                    ; LOOP ROUND ALL 8 HEX CHARACTERS OF 4 BITS EACH
0000028A                           706m LOOP_9
0000028A                           707mm     BIN2HEX D0,D2,A0
0000028A  41FA 2C10                708mm     LEA BIN2HEX_LUT(PC),A0                          ; LOAD THE LOOKUP TABLE
0000028E  E998                     709mm     ROL.L #4,D0                                     ; SHIFT THE TOP 4 BITS DOWN TO BOTTOM OF THE REGISTER THE AND MASK OFF EVERYTHING ELSE
00000290  1400                     710mm     MOVE.B D0,D2
00000292  0282 0000000F            711mm     ANDI.L #$F,D2
00000298  1430 2000                712mm     MOVE.B 0(A0,D2),D2                              ; USE THAT AS AN INDEX INTO THE LUT
0000029C                           713mm     ENDM
0000029C                           714mm     PRINT_CHAR D2,D1
0000029C                           715mm WAIT_FOR_READY_13                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
0000029C                 TRUE      716mm     IFEQ DEBUG
0000029C  1239 00C00003            717mm         MOVE.B DUART_SRA,D1                         ; READ STATUS REGISTER
000002A2  0801 0002                718mm         BTST #2,D1                                  ; CHECK FOR SPACE TO SEND
000002A6  67F4                     719mm         BEQ WAIT_FOR_READY_13                       ; NO SPACE, CHECK AGAIN
000002A8  13C2 00C00007            720mm         MOVE.B D2,DUART_TXA                         ; SEND THE NEXT CHARACTER
000002AE                           721mm     ENDC
000002AE                           722mm 
000002AE                 FALSE     723mm     IFNE DEBUG
000002AE                           724mm     ENDC
000002AE                           725mm 
000002AE                           726mm     ENDM
000002AE  57CB FFDA                727m     DBEQ D3,LOOP_9
000002B2                           728m     ENDM
000002B2                           729m     PRINT_CRLF D1,A0
000002B2  41FA 2C23                730m     LEA CRLF(PC),A0
000002B6                           731mm     PRINT_STR A0,D1
000002B6                           732mm LOOP_15
000002B6  0C10 0000                733mm     CMP.B #NULL,(A0)                                ; 0 -> DONE
000002BA  6700 0016                734mm     BEQ EXIT_15
000002BE                           735mmm     PRINT_CHAR (A0)+,D1
000002BE                           736mmm WAIT_FOR_READY_16                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
000002BE                 TRUE      737mmm     IFEQ DEBUG
000002BE  1239 00C00003            738mmm         MOVE.B DUART_SRA,D1                         ; READ STATUS REGISTER
000002C4  0801 0002                739mmm         BTST #2,D1                                  ; CHECK FOR SPACE TO SEND
000002C8  67F4                     740mmm         BEQ WAIT_FOR_READY_16                       ; NO SPACE, CHECK AGAIN
000002CA  13D8 00C00007            741mmm         MOVE.B (A0)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
000002D0                           742mmm     ENDC
000002D0                           743mmm 
000002D0                 FALSE     744mmm     IFNE DEBUG
000002D0                           745mmm     ENDC
000002D0                           746mmm 
000002D0                           747mmm     ENDM
000002D0  60E4                     748mm     BRA LOOP_15
000002D2                           749mm EXIT_15
000002D2                           750mm     ENDM
000002D2                           751m     ENDM
000002D2                           752  
000002D2  41FA 29DE                753      LEA HELPPROMPT(PC),A0
000002D6                           754m     PRINT_STR A0,D3
000002D6                           755m LOOP_17
000002D6  0C10 0000                756m     CMP.B #NULL,(A0)                                ; 0 -> DONE
000002DA  6700 0016                757m     BEQ EXIT_17
000002DE                           758mm     PRINT_CHAR (A0)+,D3
000002DE                           759mm WAIT_FOR_READY_18                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
000002DE                 TRUE      760mm     IFEQ DEBUG
000002DE  1639 00C00003            761mm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
000002E4  0803 0002                762mm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
000002E8  67F4                     763mm         BEQ WAIT_FOR_READY_18                       ; NO SPACE, CHECK AGAIN
000002EA  13D8 00C00007            764mm         MOVE.B (A0)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
000002F0                           765mm     ENDC
000002F0                           766mm 
000002F0                 FALSE     767mm     IFNE DEBUG
000002F0                           768mm     ENDC
000002F0                           769mm 
000002F0                           770mm     ENDM
000002F0  60E4                     771m     BRA LOOP_17
000002F2                           772m EXIT_17
000002F2                           773m     ENDM
000002F2                           774  
000002F2                           775m     PRINT_CRLF D3,A0
000002F2  41FA 2BE3                776m     LEA CRLF(PC),A0
000002F6                           777mm     PRINT_STR A0,D3
000002F6                           778mm LOOP_20
000002F6  0C10 0000                779mm     CMP.B #NULL,(A0)                                ; 0 -> DONE
000002FA  6700 0016                780mm     BEQ EXIT_20
000002FE                           781mmm     PRINT_CHAR (A0)+,D3
000002FE                           782mmm WAIT_FOR_READY_21                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
000002FE                 TRUE      783mmm     IFEQ DEBUG
000002FE  1639 00C00003            784mmm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
00000304  0803 0002                785mmm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
00000308  67F4                     786mmm         BEQ WAIT_FOR_READY_21                       ; NO SPACE, CHECK AGAIN
0000030A  13D8 00C00007            787mmm         MOVE.B (A0)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00000310                           788mmm     ENDC
00000310                           789mmm 
00000310                 FALSE     790mmm     IFNE DEBUG
00000310                           791mmm     ENDC
00000310                           792mmm 
00000310                           793mmm     ENDM
00000310  60E4                     794mm     BRA LOOP_20
00000312                           795mm EXIT_20
00000312                           796mm     ENDM
00000312                           797m     ENDM
00000312                           798  
00000312  7E00                     799      MOVE.L #0,D7                                    ; address accumulator
00000314                           800  
00000314  13FC 0002 00E00001       801      MOVE.B #2,DISPLAY
0000031C                           802      
0000031C  13FC 0000 00A00001       803      MOVE.B #$0, MC68230_GENERAL_CONTROL             ; set up the MC68230
00000324  13FC 0040 00A0000D       804      MOVE.B #$40, MC68230_PORT_A_CONTROL
0000032C  13FC 0040 00A0000F       805      MOVE.B #$40, MC68230_PORT_B_CONTROL
00000334  13FC 00FF 00A00009       806      MOVE.B #MC68230_PORT_DIRECTION_WRITE, MC68230_PORT_C_DIRECTION
0000033C                           807      
0000033C  13FC 0003 00E00001       808      MOVE.B #3,DISPLAY
00000344                           809      
00000344                           810      
00000344                           811  MAIN_LOOP
00000344  41FA 2B94                812      LEA PROMPT(PC),A0
00000348                           813m     PRINT_STR A0,D3
00000348                           814m LOOP_22
00000348  0C10 0000                815m     CMP.B #NULL,(A0)                                ; 0 -> DONE
0000034C  6700 0016                816m     BEQ EXIT_22
00000350                           817mm     PRINT_CHAR (A0)+,D3
00000350                           818mm WAIT_FOR_READY_23                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000350                 TRUE      819mm     IFEQ DEBUG
00000350  1639 00C00003            820mm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
00000356  0803 0002                821mm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
0000035A  67F4                     822mm         BEQ WAIT_FOR_READY_23                       ; NO SPACE, CHECK AGAIN
0000035C  13D8 00C00007            823mm         MOVE.B (A0)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00000362                           824mm     ENDC
00000362                           825mm 
00000362                 FALSE     826mm     IFNE DEBUG
00000362                           827mm     ENDC
00000362                           828mm 
00000362                           829mm     ENDM
00000362  60E4                     830m     BRA LOOP_22
00000364                           831m EXIT_22
00000364                           832m     ENDM
00000364                           833  
00000364                           834  GET_INPUT
00000364                           835m     WAIT_CHAR D2,D3                                 ; fetch character from serial port -> D2
00000364                           836m WAIT_FOR_READY_24                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000364                 TRUE      837m     IFEQ DEBUG
00000364  1639 00C00003            838m         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
0000036A  0803 0000                839m         BTST #0,D3                                  ; CHECK FOR CHARACTER
0000036E  67F4                     840m         BEQ WAIT_FOR_READY_24                       ; NOTHING, CHECK AGAIN
00000370                           841m     ENDC
00000370                           842m 
00000370                           843mm     READ_CHAR D2
00000370                 TRUE      844mm     IFEQ DEBUG
00000370  1439 00C00007            845mm         MOVE.B DUART_RXA,D2                         ; GOT A CHARACTER, READ IT
00000376                           846mm     ENDC
00000376                 FALSE     847mm     IFNE DEBUG
00000376                           848mm     ENDC
00000376                           849mm 
00000376  B43C 001B                850mm     CMP.B #$1B,D2                                   ; CHECK FOR ESCAPE AND GO TO START
0000037A  6700 FD88                851mm     BEQ START
0000037E                           852mm     ENDM
0000037E                           853m 
0000037E                 TRUE      854m     IFEQ DEBUG
0000037E                           855mm         PRINT_CHAR D2,D3                            ; ECHO IT BACK
0000037E                           856mm WAIT_FOR_READY_26                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
0000037E                 TRUE      857mm     IFEQ DEBUG
0000037E  1639 00C00003            858mm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
00000384  0803 0002                859mm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
00000388  67F4                     860mm         BEQ WAIT_FOR_READY_26                       ; NO SPACE, CHECK AGAIN
0000038A  13C2 00C00007            861mm         MOVE.B D2,DUART_TXA                         ; SEND THE NEXT CHARACTER
00000390                           862mm     ENDC
00000390                           863mm 
00000390                 FALSE     864mm     IFNE DEBUG
00000390                           865mm     ENDC
00000390                           866mm 
00000390                           867mm     ENDM
00000390                           868m     ENDC
00000390                           869m     ENDM
00000390                           870  
00000390                           871      IF.B D2 <GE> #'0' AND.B D2 <LE> #'9' THEN
00000390  B43C 0030                872s     CMP.B   #'0',D2
00000394  6D00 000E                873s     BLT _00000001
00000398  B43C 0039                874s     CMP.B   #'9',D2
0000039C  6E00 0006                875s     BGT _00000001
000003A0  6000 2748                876          BRA HEX_DIGIT
000003A4                           877      ENDI
000003A4                           878s _00000001
000003A4                           879      IF.B D2 <GE> #'A' AND.B D2 <LE> #'F' THEN
000003A4  B43C 0041                880s     CMP.B   #'A',D2
000003A8  6D00 000E                881s     BLT _00000002
000003AC  B43C 0046                882s     CMP.B   #'F',D2
000003B0  6E00 0006                883s     BGT _00000002
000003B4  6000 2734                884          BRA HEX_DIGIT
000003B8                           885      ENDI
000003B8                           886s _00000002
000003B8                           887  
000003B8  B43C 0077                888      CMP.B #'w',D2
000003BC  6700 01BA                889      BEQ W
000003C0                           890  
000003C0  B43C 006C                891      CMP.B #'l',D2
000003C4  6700 099C                892      BEQ L 
000003C8                           893  
000003C8  B43C 0070                894      CMP.B #'p',D2
000003CC  6700 0C76                895      BEQ P
000003D0                           896  
000003D0                           897m     PRINT_CRLF D3,A0
000003D0  41FA 2B05                898m     LEA CRLF(PC),A0
000003D4                           899mm     PRINT_STR A0,D3
000003D4                           900mm LOOP_28
000003D4  0C10 0000                901mm     CMP.B #NULL,(A0)                                ; 0 -> DONE
000003D8  6700 0016                902mm     BEQ EXIT_28
000003DC                           903mmm     PRINT_CHAR (A0)+,D3
000003DC                           904mmm WAIT_FOR_READY_29                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
000003DC                 TRUE      905mmm     IFEQ DEBUG
000003DC  1639 00C00003            906mmm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
000003E2  0803 0002                907mmm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
000003E6  67F4                     908mmm         BEQ WAIT_FOR_READY_29                       ; NO SPACE, CHECK AGAIN
000003E8  13D8 00C00007            909mmm         MOVE.B (A0)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
000003EE                           910mmm     ENDC
000003EE                           911mmm 
000003EE                 FALSE     912mmm     IFNE DEBUG
000003EE                           913mmm     ENDC
000003EE                           914mmm 
000003EE                           915mmm     ENDM
000003EE  60E4                     916mm     BRA LOOP_28
000003F0                           917mm EXIT_28
000003F0                           918mm     ENDM
000003F0                           919m     ENDM
000003F0                           920   
000003F0  B43C 003F                921      CMP.B #'?',D2
000003F4  6700 007E                922      BEQ H
000003F8                           923   
000003F8  B43C 0076                924      CMP.B #'v',D2
000003FC  6700 007E                925      BEQ V
00000400                           926      
00000400  B43C 0072                927      CMP.B #'r',D2
00000404  6700 009A                928      BEQ R
00000408                           929  
00000408  B43C 0073                930      CMP.B #'s',D2
0000040C  6700 01E4                931      BEQ S
00000410                           932  
00000410  B43C 0067                933      CMP.B #'g',D2
00000414  6700 0856                934      BEQ G   
00000418                           935  
00000418  B43C 007A                936      CMP.B #'z',D2
0000041C  6700 0854                937      BEQ Z   
00000420                           938  
00000420  B43C 0078                939      CMP.B #'x',D2
00000424  6700 0DEE                940      BEQ X
00000428                           941  
00000428  B43C 0049                942      CMP.B #'I',D2
0000042C  6700 0F02                943      BEQ EI
00000430                           944  
00000430  B43C 006F                945      CMP.B #'o',D2
00000434  6700 0F0A                946      BEQ DI
00000438                           947  
00000438  B43C 0023                948      CMP.B #'#',D2
0000043C  6700 0F12                949      BEQ HASH
00000440                           950  
00000440  B43C 0069                951      CMP.B #'i',D2
00000444  6700 0F20                952      BEQ I
00000448                           953  
00000448  B43C 0062                954      CMP.B #'b',D2
0000044C  6700 1A3C                955      BEQ B
00000450                           956  
00000450  41FA 29E8                957      LEA HUH(PC),A0
00000454                           958m     PRINT_STR A0,D3
00000454                           959m LOOP_30
00000454  0C10 0000                960m     CMP.B #NULL,(A0)                                ; 0 -> DONE
00000458  6700 0016                961m     BEQ EXIT_30
0000045C                           962mm     PRINT_CHAR (A0)+,D3
0000045C                           963mm WAIT_FOR_READY_31                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
0000045C                 TRUE      964mm     IFEQ DEBUG
0000045C  1639 00C00003            965mm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
00000462  0803 0002                966mm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
00000466  67F4                     967mm         BEQ WAIT_FOR_READY_31                       ; NO SPACE, CHECK AGAIN
00000468  13D8 00C00007            968mm         MOVE.B (A0)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
0000046E                           969mm     ENDC
0000046E                           970mm 
0000046E                 FALSE     971mm     IFNE DEBUG
0000046E                           972mm     ENDC
0000046E                           973mm 
0000046E                           974mm     ENDM
0000046E  60E4                     975m     BRA LOOP_30
00000470                           976m EXIT_30
00000470                           977m     ENDM
00000470                           978  
00000470  6000 FED2                979      BRA MAIN_LOOP
00000474                           980  
00000474                           981  ; commands
00000474                           982  H
00000474  41FA 284F                983      LEA HELP(PC),A0
00000478  6000 0006                984      BRA PRINTIT
0000047C                           985  
0000047C                           986  V
0000047C  41FA 2B0F                987      LEA VERSION(PC),A0
00000480                           988  PRINTIT
00000480                           989m     PRINT_STR A0,D3    
00000480                           990m LOOP_32
00000480  0C10 0000                991m     CMP.B #NULL,(A0)                                ; 0 -> DONE
00000484  6700 0016                992m     BEQ EXIT_32
00000488                           993mm     PRINT_CHAR (A0)+,D3
00000488                           994mm WAIT_FOR_READY_33                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000488                 TRUE      995mm     IFEQ DEBUG
00000488  1639 00C00003            996mm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
0000048E  0803 0002                997mm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
00000492  67F4                     998mm         BEQ WAIT_FOR_READY_33                       ; NO SPACE, CHECK AGAIN
00000494  13D8 00C00007            999mm         MOVE.B (A0)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
0000049A                          1000mm     ENDC
0000049A                          1001mm 
0000049A                 FALSE    1002mm     IFNE DEBUG
0000049A                          1003mm     ENDC
0000049A                          1004mm 
0000049A                          1005mm     ENDM
0000049A  60E4                    1006m     BRA LOOP_32
0000049C                          1007m EXIT_32
0000049C                          1008m     ENDM
0000049C  6000 FEA6               1009      BRA MAIN_LOOP
000004A0                          1010  
000004A0                          1011  R
000004A0  2047                    1012      MOVE.L D7,A0                                    ; address accumulator -> address register
000004A2  7E00                    1013      MOVE.L #0,D7                                    ;clear the now used address accumulator
000004A4  2410                    1014      MOVE.L (A0),D2                                  ; read the memory and print it
000004A6                          1015m     PRINT_REG D2,D3,D4,D5,A0
000004A6  41FA 2A35               1016m     LEA OX(PC),A0
000004AA                          1017mm     PRINT_STR A0,D3
000004AA                          1018mm LOOP_35
000004AA  0C10 0000               1019mm     CMP.B #NULL,(A0)                                ; 0 -> DONE
000004AE  6700 0016               1020mm     BEQ EXIT_35
000004B2                          1021mmm     PRINT_CHAR (A0)+,D3
000004B2                          1022mmm WAIT_FOR_READY_36                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
000004B2                 TRUE     1023mmm     IFEQ DEBUG
000004B2  1639 00C00003           1024mmm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
000004B8  0803 0002               1025mmm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
000004BC  67F4                    1026mmm         BEQ WAIT_FOR_READY_36                       ; NO SPACE, CHECK AGAIN
000004BE  13D8 00C00007           1027mmm         MOVE.B (A0)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
000004C4                          1028mmm     ENDC
000004C4                          1029mmm 
000004C4                 FALSE    1030mmm     IFNE DEBUG
000004C4                          1031mmm     ENDC
000004C4                          1032mmm 
000004C4                          1033mmm     ENDM
000004C4  60E4                    1034mm     BRA LOOP_35
000004C6                          1035mm EXIT_35
000004C6                          1036mm     ENDM
000004C6  7A07                    1037m     MOVE.L #7,D5                                    ; LOOP ROUND ALL 8 HEX CHARACTERS OF 4 BITS EACH
000004C8                          1038m LOOP_34
000004C8                          1039mm     BIN2HEX D2,D4,A0
000004C8  41FA 29D2               1040mm     LEA BIN2HEX_LUT(PC),A0                          ; LOAD THE LOOKUP TABLE
000004CC  E99A                    1041mm     ROL.L #4,D2                                     ; SHIFT THE TOP 4 BITS DOWN TO BOTTOM OF THE REGISTER THE AND MASK OFF EVERYTHING ELSE
000004CE  1802                    1042mm     MOVE.B D2,D4
000004D0  0284 0000000F           1043mm     ANDI.L #$F,D4
000004D6  1830 4000               1044mm     MOVE.B 0(A0,D4),D4                              ; USE THAT AS AN INDEX INTO THE LUT
000004DA                          1045mm     ENDM
000004DA                          1046mm     PRINT_CHAR D4,D3
000004DA                          1047mm WAIT_FOR_READY_38                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
000004DA                 TRUE     1048mm     IFEQ DEBUG
000004DA  1639 00C00003           1049mm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
000004E0  0803 0002               1050mm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
000004E4  67F4                    1051mm         BEQ WAIT_FOR_READY_38                       ; NO SPACE, CHECK AGAIN
000004E6  13C4 00C00007           1052mm         MOVE.B D4,DUART_TXA                         ; SEND THE NEXT CHARACTER
000004EC                          1053mm     ENDC
000004EC                          1054mm 
000004EC                 FALSE    1055mm     IFNE DEBUG
000004EC                          1056mm     ENDC
000004EC                          1057mm 
000004EC                          1058mm     ENDM
000004EC  57CD FFDA               1059m     DBEQ D5,LOOP_34
000004F0                          1060m     ENDM
000004F0                          1061      
000004F0                          1062m     PRINT_CHAR #32,D3
000004F0                          1063m WAIT_FOR_READY_39                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
000004F0                 TRUE     1064m     IFEQ DEBUG
000004F0  1639 00C00003           1065m         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
000004F6  0803 0002               1066m         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
000004FA  67F4                    1067m         BEQ WAIT_FOR_READY_39                       ; NO SPACE, CHECK AGAIN
000004FC  13FC 0020 00C00007      1068m         MOVE.B #32,DUART_TXA                            ; SEND THE NEXT CHARACTER
00000504                          1069m     ENDC
00000504                          1070m 
00000504                 FALSE    1071m     IFNE DEBUG
00000504                          1072m     ENDC
00000504                          1073m 
00000504                          1074m     ENDM
00000504                          1075  
00000504  E19A                    1076      ROL.L #8,D2
00000506                          1077m     PRINT_CHAR D2,D3
00000506                          1078m WAIT_FOR_READY_40                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000506                 TRUE     1079m     IFEQ DEBUG
00000506  1639 00C00003           1080m         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
0000050C  0803 0002               1081m         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
00000510  67F4                    1082m         BEQ WAIT_FOR_READY_40                       ; NO SPACE, CHECK AGAIN
00000512  13C2 00C00007           1083m         MOVE.B D2,DUART_TXA                         ; SEND THE NEXT CHARACTER
00000518                          1084m     ENDC
00000518                          1085m 
00000518                 FALSE    1086m     IFNE DEBUG
00000518                          1087m     ENDC
00000518                          1088m 
00000518                          1089m     ENDM
00000518  E19A                    1090      ROL.L #8,D2
0000051A                          1091m     PRINT_CHAR D2,D3
0000051A                          1092m WAIT_FOR_READY_41                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
0000051A                 TRUE     1093m     IFEQ DEBUG
0000051A  1639 00C00003           1094m         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
00000520  0803 0002               1095m         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
00000524  67F4                    1096m         BEQ WAIT_FOR_READY_41                       ; NO SPACE, CHECK AGAIN
00000526  13C2 00C00007           1097m         MOVE.B D2,DUART_TXA                         ; SEND THE NEXT CHARACTER
0000052C                          1098m     ENDC
0000052C                          1099m 
0000052C                 FALSE    1100m     IFNE DEBUG
0000052C                          1101m     ENDC
0000052C                          1102m 
0000052C                          1103m     ENDM
0000052C  E19A                    1104      ROL.L #8,D2
0000052E                          1105m     PRINT_CHAR D2,D3
0000052E                          1106m WAIT_FOR_READY_42                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
0000052E                 TRUE     1107m     IFEQ DEBUG
0000052E  1639 00C00003           1108m         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
00000534  0803 0002               1109m         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
00000538  67F4                    1110m         BEQ WAIT_FOR_READY_42                       ; NO SPACE, CHECK AGAIN
0000053A  13C2 00C00007           1111m         MOVE.B D2,DUART_TXA                         ; SEND THE NEXT CHARACTER
00000540                          1112m     ENDC
00000540                          1113m 
00000540                 FALSE    1114m     IFNE DEBUG
00000540                          1115m     ENDC
00000540                          1116m 
00000540                          1117m     ENDM
00000540  E19A                    1118      ROL.L #8,D2
00000542                          1119m     PRINT_CHAR D2,D3
00000542                          1120m WAIT_FOR_READY_43                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000542                 TRUE     1121m     IFEQ DEBUG
00000542  1639 00C00003           1122m         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
00000548  0803 0002               1123m         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
0000054C  67F4                    1124m         BEQ WAIT_FOR_READY_43                       ; NO SPACE, CHECK AGAIN
0000054E  13C2 00C00007           1125m         MOVE.B D2,DUART_TXA                         ; SEND THE NEXT CHARACTER
00000554                          1126m     ENDC
00000554                          1127m 
00000554                 FALSE    1128m     IFNE DEBUG
00000554                          1129m     ENDC
00000554                          1130m 
00000554                          1131m     ENDM
00000554                          1132  
00000554                          1133m     PRINT_CRLF D3,A0
00000554  41FA 2981               1134m     LEA CRLF(PC),A0
00000558                          1135mm     PRINT_STR A0,D3
00000558                          1136mm LOOP_45
00000558  0C10 0000               1137mm     CMP.B #NULL,(A0)                                ; 0 -> DONE
0000055C  6700 0016               1138mm     BEQ EXIT_45
00000560                          1139mmm     PRINT_CHAR (A0)+,D3
00000560                          1140mmm WAIT_FOR_READY_46                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000560                 TRUE     1141mmm     IFEQ DEBUG
00000560  1639 00C00003           1142mmm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
00000566  0803 0002               1143mmm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
0000056A  67F4                    1144mmm         BEQ WAIT_FOR_READY_46                       ; NO SPACE, CHECK AGAIN
0000056C  13D8 00C00007           1145mmm         MOVE.B (A0)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00000572                          1146mmm     ENDC
00000572                          1147mmm 
00000572                 FALSE    1148mmm     IFNE DEBUG
00000572                          1149mmm     ENDC
00000572                          1150mmm 
00000572                          1151mmm     ENDM
00000572  60E4                    1152mm     BRA LOOP_45
00000574                          1153mm EXIT_45
00000574                          1154mm     ENDM
00000574                          1155m     ENDM
00000574                          1156      
00000574  6000 FDCE               1157      BRA MAIN_LOOP
00000578                          1158  
00000578                          1159  W
00000578                          1160      FOR D6 = #0 TO #7 DO                                ; read 4 bytes
00000578  3C3C 0000               1161s     MOVE.W  #0,D6
0000057C  6000 0046               1162s     BRA _20000005
00000580                          1163s _20000004
00000580  E98D                    1164          LSL.L #4,D5                                     ; make what we have so far more significant
00000582                          1165m         WAIT_CHAR D2,D3                                 ; next character -> D2
00000582                          1166m WAIT_FOR_READY_47                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000582                 TRUE     1167m     IFEQ DEBUG
00000582  1639 00C00003           1168m         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
00000588  0803 0000               1169m         BTST #0,D3                                  ; CHECK FOR CHARACTER
0000058C  67F4                    1170m         BEQ WAIT_FOR_READY_47                       ; NOTHING, CHECK AGAIN
0000058E                          1171m     ENDC
0000058E                          1172m 
0000058E                          1173mm     READ_CHAR D2
0000058E                 TRUE     1174mm     IFEQ DEBUG
0000058E  1439 00C00007           1175mm         MOVE.B DUART_RXA,D2                         ; GOT A CHARACTER, READ IT
00000594                          1176mm     ENDC
00000594                 FALSE    1177mm     IFNE DEBUG
00000594                          1178mm     ENDC
00000594                          1179mm 
00000594  B43C 001B               1180mm     CMP.B #$1B,D2                                   ; CHECK FOR ESCAPE AND GO TO START
00000598  6700 FB6A               1181mm     BEQ START
0000059C                          1182mm     ENDM
0000059C                          1183m 
0000059C                 TRUE     1184m     IFEQ DEBUG
0000059C                          1185mm         PRINT_CHAR D2,D3                            ; ECHO IT BACK
0000059C                          1186mm WAIT_FOR_READY_49                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
0000059C                 TRUE     1187mm     IFEQ DEBUG
0000059C  1639 00C00003           1188mm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
000005A2  0803 0002               1189mm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
000005A6  67F4                    1190mm         BEQ WAIT_FOR_READY_49                       ; NO SPACE, CHECK AGAIN
000005A8  13C2 00C00007           1191mm         MOVE.B D2,DUART_TXA                         ; SEND THE NEXT CHARACTER
000005AE                          1192mm     ENDC
000005AE                          1193mm 
000005AE                 FALSE    1194mm     IFNE DEBUG
000005AE                          1195mm     ENDC
000005AE                          1196mm 
000005AE                          1197mm     ENDM
000005AE                          1198m     ENDC
000005AE                          1199m     ENDM
000005AE                          1200m         HEX2BIN D2,D2,A0                                ; convert to binary -> D2
000005AE  41FA 28FC               1201m     LEA HEX2BIN_LUT(PC),A0                          ; LOAD THE LOOKUP TABLE
000005B2  0402 0030               1202m     SUB.B #'0',D2                                   ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
000005B6  C4BC 000000FF           1203m     AND.L #$FF,D2                                   ; IGNORE THE TOP 3 BYTES
000005BC  1430 2000               1204m     MOVE.B 0(A0,D2),D2                              ; USE THAT AS AN INDEX INTO THE LUT   
000005C0                          1205m     ENDM
000005C0  8A02                    1206          OR.B D2,D5
000005C2                          1207      ENDF
000005C2  5246                    1208s     ADD.W   #1,D6
000005C4                          1209s _20000005
000005C4  BC7C 0007               1210s     CMP.W   #7,D6
000005C8  6FB6                    1211s     BLE _20000004
000005CA                          1212  
000005CA                          1213m     PRINT_CRLF D3,A0
000005CA  41FA 290B               1214m     LEA CRLF(PC),A0
000005CE                          1215mm     PRINT_STR A0,D3
000005CE                          1216mm LOOP_52
000005CE  0C10 0000               1217mm     CMP.B #NULL,(A0)                                ; 0 -> DONE
000005D2  6700 0016               1218mm     BEQ EXIT_52
000005D6                          1219mmm     PRINT_CHAR (A0)+,D3
000005D6                          1220mmm WAIT_FOR_READY_53                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
000005D6                 TRUE     1221mmm     IFEQ DEBUG
000005D6  1639 00C00003           1222mmm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
000005DC  0803 0002               1223mmm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
000005E0  67F4                    1224mmm         BEQ WAIT_FOR_READY_53                       ; NO SPACE, CHECK AGAIN
000005E2  13D8 00C00007           1225mmm         MOVE.B (A0)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
000005E8                          1226mmm     ENDC
000005E8                          1227mmm 
000005E8                 FALSE    1228mmm     IFNE DEBUG
000005E8                          1229mmm     ENDC
000005E8                          1230mmm 
000005E8                          1231mmm     ENDM
000005E8  60E4                    1232mm     BRA LOOP_52
000005EA                          1233mm EXIT_52
000005EA                          1234mm     ENDM
000005EA                          1235m     ENDM
000005EA                          1236  
000005EA  2047                    1237      MOVE.L D7,A0                                    ; address accumulator -> address register
000005EC                          1238  
000005EC  2085                    1239      MOVE.L D5,(A0)                                  ; write the data
000005EE                          1240  
000005EE  6000 FD54               1241      BRA MAIN_LOOP
000005F2                          1242  
000005F2                          1243  ; register map for S
000005F2                          1244  ; A0 - start address
000005F2                          1245  ; A1 - offset
000005F2                          1246  ; A2 - next address to write
000005F2                          1247  ; A3 - next location (jmp)
000005F2                          1248  ; A4 - Working Address Register
000005F2                          1249  ; D0 - record count
000005F2                          1250  ; D1 - 'S', record type, data byte, done flag (0x00000000 = continue, 0xFFFFFFFF = done)
000005F2                          1251  ; D2 - checksum
000005F2                          1252  ; D3 - data byte count
000005F2                          1253  ; D4 - read address, moved into A2
000005F2                          1254  ; D5 - temp
000005F2                          1255  ; D6 - temp
000005F2                          1256  ; D7 - temp
000005F2                          1257  S
000005F2  2078 0000               1258      MOVE.L 0,A0                                     ; start address -> A0
000005F6  2247                    1259      MOVE.L D7,A1                                    ; grab the address accumulator (offset) into A1
000005F8  7E00                    1260      MOVE.L #0,D7
000005FA  7000                    1261      MOVE.L #0,D0                                    ; count of records read -> D0
000005FC                          1262          
000005FC                          1263  WAIT_FOR_SRECORD                                    ; wait for the start of a record, indicated by 'S'
000005FC                          1264m     DOWNLOAD D1
000005FC                          1265m WAIT_FOR_READY_54                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
000005FC                          1266m 
000005FC  1239 00C00003           1267m     MOVE.B DUART_SRA,D1                             ; CHECK FOR COMMAND
00000602  0801 0000               1268m     BTST #0,D1                                      ; CHECK FOR CHARACTER
00000606  6700 0010               1269m     BEQ CONTINUE_54                                 ; NOTHING, CONTINUE
0000060A                          1270m 
0000060A                          1271mm     READ_CHAR D1                                    ; WE're not going to do anything with it, just check for escape
0000060A                 TRUE     1272mm     IFEQ DEBUG
0000060A  1239 00C00007           1273mm         MOVE.B DUART_RXA,D1                         ; GOT A CHARACTER, READ IT
00000610                          1274mm     ENDC
00000610                 FALSE    1275mm     IFNE DEBUG
00000610                          1276mm     ENDC
00000610                          1277mm 
00000610  B23C 001B               1278mm     CMP.B #$1B,D1                                   ; CHECK FOR ESCAPE AND GO TO START
00000614  6700 FAEE               1279mm     BEQ START
00000618                          1280mm     ENDM
00000618                          1281m CONTINUE_54
00000618  1239 00C00013           1282m     MOVE.B DUART_SRB,D1                             ; READ DOWNLOAD STATUS REGISTER
0000061E  0801 0000               1283m     BTST #0,D1                                      ; CHECK FOR CHARACTER
00000622  67D8                    1284m     BEQ WAIT_FOR_READY_54                           ; NOTHING, CHECK AGAIN
00000624                          1285m     
00000624  1239 00C00017           1286m     MOVE.B DUART_RXB,D1                             ; GOT A CHARACTER, READ IT
0000062A  13C1 00E00001           1287m     MOVE.B D1,DISPLAY                               ; ECHO TO THE DISPLAY
00000630                          1288m 
00000630                          1289m     ENDM
00000630  B23C 0053               1290      CMP.B #'S',D1                                   ; found S?
00000634  66C6                    1291      BNE WAIT_FOR_SRECORD                            ; nope, keep waiting
00000636                          1292      
00000636                          1293m     PRINT_CHAR #'.',D5                              ; print a progress indicator
00000636                          1294m WAIT_FOR_READY_56                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000636                 TRUE     1295m     IFEQ DEBUG
00000636  1A39 00C00003           1296m         MOVE.B DUART_SRA,D5                         ; READ STATUS REGISTER
0000063C  0805 0002               1297m         BTST #2,D5                                  ; CHECK FOR SPACE TO SEND
00000640  67F4                    1298m         BEQ WAIT_FOR_READY_56                       ; NO SPACE, CHECK AGAIN
00000642  13FC 002E 00C00007      1299m         MOVE.B #'.',DUART_TXA                           ; SEND THE NEXT CHARACTER
0000064A                          1300m     ENDC
0000064A                          1301m 
0000064A                 FALSE    1302m     IFNE DEBUG
0000064A                          1303m     ENDC
0000064A                          1304m 
0000064A                          1305m     ENDM
0000064A                          1306      ;PRINT_CHAR #'S',D5                             ; print the S
0000064A  5280                    1307      ADD.L #1,D0                                     ; read another S record, increment count
0000064C                          1308      
0000064C                          1309m     DOWNLOAD D1                                     ; read the record identifier and echo it back
0000064C                          1310m WAIT_FOR_READY_57                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
0000064C                          1311m 
0000064C  1239 00C00003           1312m     MOVE.B DUART_SRA,D1                             ; CHECK FOR COMMAND
00000652  0801 0000               1313m     BTST #0,D1                                      ; CHECK FOR CHARACTER
00000656  6700 0010               1314m     BEQ CONTINUE_57                                 ; NOTHING, CONTINUE
0000065A                          1315m 
0000065A                          1316mm     READ_CHAR D1                                    ; WE're not going to do anything with it, just check for escape
0000065A                 TRUE     1317mm     IFEQ DEBUG
0000065A  1239 00C00007           1318mm         MOVE.B DUART_RXA,D1                         ; GOT A CHARACTER, READ IT
00000660                          1319mm     ENDC
00000660                 FALSE    1320mm     IFNE DEBUG
00000660                          1321mm     ENDC
00000660                          1322mm 
00000660  B23C 001B               1323mm     CMP.B #$1B,D1                                   ; CHECK FOR ESCAPE AND GO TO START
00000664  6700 FA9E               1324mm     BEQ START
00000668                          1325mm     ENDM
00000668                          1326m CONTINUE_57
00000668  1239 00C00013           1327m     MOVE.B DUART_SRB,D1                             ; READ DOWNLOAD STATUS REGISTER
0000066E  0801 0000               1328m     BTST #0,D1                                      ; CHECK FOR CHARACTER
00000672  67D8                    1329m     BEQ WAIT_FOR_READY_57                           ; NOTHING, CHECK AGAIN
00000674                          1330m     
00000674  1239 00C00017           1331m     MOVE.B DUART_RXB,D1                             ; GOT A CHARACTER, READ IT
0000067A  13C1 00E00001           1332m     MOVE.B D1,DISPLAY                               ; ECHO TO THE DISPLAY
00000680                          1333m 
00000680                          1334m     ENDM
00000680                          1335      ;PRINT_CHAR D1,D5
00000680                          1336  
00000680  7400                    1337      MOVE.L #0,D2                                    ; clear the checksum
00000682                          1338  
00000682                          1339m     DOWNLOAD_BYTE D3,D5,D6,D7,D2,A4
00000682  1E3C 0002               1340m     MOVE.B #2,D7
00000686                          1341m     WHILE.B D7 <GT> 0 DO
00000686                          1342ms _10000000
00000686  BE38 0000               1343ms     CMP.B   0,D7
0000068A  6F00 0050               1344ms     BLE _10000001
0000068E  E98B                    1345m         LSL.L #4,D3                                 ; IT's OK to do this first, because we are either starting from 0, 
00000690                          1346mm         DOWNLOAD D5                                 ; OR WE ARE READING THE NEXT BYTE ALONG, SO NEED TO SHIFT UP THE PREVIOUS ONE
00000690                          1347mm WAIT_FOR_READY_60                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000690                          1348mm 
00000690  1A39 00C00003           1349mm     MOVE.B DUART_SRA,D5                             ; CHECK FOR COMMAND
00000696  0805 0000               1350mm     BTST #0,D5                                      ; CHECK FOR CHARACTER
0000069A  6700 0010               1351mm     BEQ CONTINUE_60                                 ; NOTHING, CONTINUE
0000069E                          1352mm 
0000069E                          1353mmm     READ_CHAR D5                                    ; WE're not going to do anything with it, just check for escape
0000069E                 TRUE     1354mmm     IFEQ DEBUG
0000069E  1A39 00C00007           1355mmm         MOVE.B DUART_RXA,D5                         ; GOT A CHARACTER, READ IT
000006A4                          1356mmm     ENDC
000006A4                 FALSE    1357mmm     IFNE DEBUG
000006A4                          1358mmm     ENDC
000006A4                          1359mmm 
000006A4  BA3C 001B               1360mmm     CMP.B #$1B,D5                                   ; CHECK FOR ESCAPE AND GO TO START
000006A8  6700 FA5A               1361mmm     BEQ START
000006AC                          1362mmm     ENDM
000006AC                          1363mm CONTINUE_60
000006AC  1A39 00C00013           1364mm     MOVE.B DUART_SRB,D5                             ; READ DOWNLOAD STATUS REGISTER
000006B2  0805 0000               1365mm     BTST #0,D5                                      ; CHECK FOR CHARACTER
000006B6  67D8                    1366mm     BEQ WAIT_FOR_READY_60                           ; NOTHING, CHECK AGAIN
000006B8                          1367mm     
000006B8  1A39 00C00017           1368mm     MOVE.B DUART_RXB,D5                             ; GOT A CHARACTER, READ IT
000006BE  13C5 00E00001           1369mm     MOVE.B D5,DISPLAY                               ; ECHO TO THE DISPLAY
000006C4                          1370mm 
000006C4                          1371mm     ENDM
000006C4                          1372m         ;PRINT_CHAR D5,D6
000006C4                          1373mm         HEX2BIN D5,D5,A4
000006C4  49FA 27E6               1374mm     LEA HEX2BIN_LUT(PC),A4                          ; LOAD THE LOOKUP TABLE
000006C8  0405 0030               1375mm     SUB.B #'0',D5                                   ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
000006CC  CABC 000000FF           1376mm     AND.L #$FF,D5                                   ; IGNORE THE TOP 3 BYTES
000006D2  1A34 5000               1377mm     MOVE.B 0(A4,D5),D5                              ; USE THAT AS AN INDEX INTO THE LUT   
000006D6                          1378mm     ENDM
000006D6  8605                    1379m         OR.B D5,D3
000006D8  5307                    1380m         SUB.B #1,D7
000006DA                          1381m     ENDW
000006DA  60AA                    1382ms     BRA _10000000
000006DC                          1383ms _10000001
000006DC                          1384m 
000006DC  7A00                    1385m     MOVE.L #0,D5                                    ; REXTRACT LATEST BYTE OF ADDRESS AND ADD INTO CHECKSUM
000006DE  1A03                    1386m     MOVE.B D3,D5
000006E0  D483                    1387m     ADD.L D3,D2
000006E2                          1388m 
000006E2                          1389m     ENDM
000006E2                          1390  
000006E2                          1391      IF.B D1 <EQ> #'0' THEN.L                        ; header, just ignore it
000006E2  B23C 0030               1392s     CMP.B   #'0',D1
000006E6  6600 000A               1393s     BNE.L   _00000003
000006EA                          1394          ;PRINT_CRLF D5,A4
000006EA  6000 FF10               1395          BRA WAIT_FOR_SRECORD
000006EE                          1396      ELSE
000006EE  6000 0360               1397s     BRA _00000004
000006F2                          1398s _00000003
000006F2                          1399          IF.B D1 <EQ> #'1' OR.B D1 <EQ> #'2' THEN.L  ; 16 or 24 bit address data record
000006F2  B23C 0031               1400s     CMP.B   #'1',D1
000006F6  6708                    1401s     BEQ.S   _00000005
000006F8  B23C 0032               1402s     CMP.B   #'2',D1
000006FC  6600 01A8               1403s     BNE.L   _00000006
00000700                          1404s _00000005
00000700  5783                    1405              SUB.L #3,D3                             ; subtract three bytes for 16 bit address and 1 byte checksum
00000702                          1406  
00000702  7800                    1407              MOVE.L #0,D4                            ; read two bytes of address
00000704                          1408m             DOWNLOAD_BYTE D4,D5,D6,D7,D2,A4         ; first byte                                    
00000704  1E3C 0002               1409m     MOVE.B #2,D7
00000708                          1410m     WHILE.B D7 <GT> 0 DO
00000708                          1411ms _10000002
00000708  BE38 0000               1412ms     CMP.B   0,D7
0000070C  6F00 0050               1413ms     BLE _10000003
00000710  E98C                    1414m         LSL.L #4,D4                                 ; IT's OK to do this first, because we are either starting from 0, 
00000712                          1415mm         DOWNLOAD D5                                 ; OR WE ARE READING THE NEXT BYTE ALONG, SO NEED TO SHIFT UP THE PREVIOUS ONE
00000712                          1416mm WAIT_FOR_READY_64                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000712                          1417mm 
00000712  1A39 00C00003           1418mm     MOVE.B DUART_SRA,D5                             ; CHECK FOR COMMAND
00000718  0805 0000               1419mm     BTST #0,D5                                      ; CHECK FOR CHARACTER
0000071C  6700 0010               1420mm     BEQ CONTINUE_64                                 ; NOTHING, CONTINUE
00000720                          1421mm 
00000720                          1422mmm     READ_CHAR D5                                    ; WE're not going to do anything with it, just check for escape
00000720                 TRUE     1423mmm     IFEQ DEBUG
00000720  1A39 00C00007           1424mmm         MOVE.B DUART_RXA,D5                         ; GOT A CHARACTER, READ IT
00000726                          1425mmm     ENDC
00000726                 FALSE    1426mmm     IFNE DEBUG
00000726                          1427mmm     ENDC
00000726                          1428mmm 
00000726  BA3C 001B               1429mmm     CMP.B #$1B,D5                                   ; CHECK FOR ESCAPE AND GO TO START
0000072A  6700 F9D8               1430mmm     BEQ START
0000072E                          1431mmm     ENDM
0000072E                          1432mm CONTINUE_64
0000072E  1A39 00C00013           1433mm     MOVE.B DUART_SRB,D5                             ; READ DOWNLOAD STATUS REGISTER
00000734  0805 0000               1434mm     BTST #0,D5                                      ; CHECK FOR CHARACTER
00000738  67D8                    1435mm     BEQ WAIT_FOR_READY_64                           ; NOTHING, CHECK AGAIN
0000073A                          1436mm     
0000073A  1A39 00C00017           1437mm     MOVE.B DUART_RXB,D5                             ; GOT A CHARACTER, READ IT
00000740  13C5 00E00001           1438mm     MOVE.B D5,DISPLAY                               ; ECHO TO THE DISPLAY
00000746                          1439mm 
00000746                          1440mm     ENDM
00000746                          1441m         ;PRINT_CHAR D5,D6
00000746                          1442mm         HEX2BIN D5,D5,A4
00000746  49FA 2764               1443mm     LEA HEX2BIN_LUT(PC),A4                          ; LOAD THE LOOKUP TABLE
0000074A  0405 0030               1444mm     SUB.B #'0',D5                                   ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
0000074E  CABC 000000FF           1445mm     AND.L #$FF,D5                                   ; IGNORE THE TOP 3 BYTES
00000754  1A34 5000               1446mm     MOVE.B 0(A4,D5),D5                              ; USE THAT AS AN INDEX INTO THE LUT   
00000758                          1447mm     ENDM
00000758  8805                    1448m         OR.B D5,D4
0000075A  5307                    1449m         SUB.B #1,D7
0000075C                          1450m     ENDW
0000075C  60AA                    1451ms     BRA _10000002
0000075E                          1452ms _10000003
0000075E                          1453m 
0000075E  7A00                    1454m     MOVE.L #0,D5                                    ; REXTRACT LATEST BYTE OF ADDRESS AND ADD INTO CHECKSUM
00000760  1A04                    1455m     MOVE.B D4,D5
00000762  D484                    1456m     ADD.L D4,D2
00000764                          1457m 
00000764                          1458m     ENDM
00000764                          1459m             DOWNLOAD_BYTE D4,D5,D6,D7,D2,A4         ; second one
00000764  1E3C 0002               1460m     MOVE.B #2,D7
00000768                          1461m     WHILE.B D7 <GT> 0 DO
00000768                          1462ms _10000004
00000768  BE38 0000               1463ms     CMP.B   0,D7
0000076C  6F00 0050               1464ms     BLE _10000005
00000770  E98C                    1465m         LSL.L #4,D4                                 ; IT's OK to do this first, because we are either starting from 0, 
00000772                          1466mm         DOWNLOAD D5                                 ; OR WE ARE READING THE NEXT BYTE ALONG, SO NEED TO SHIFT UP THE PREVIOUS ONE
00000772                          1467mm WAIT_FOR_READY_68                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000772                          1468mm 
00000772  1A39 00C00003           1469mm     MOVE.B DUART_SRA,D5                             ; CHECK FOR COMMAND
00000778  0805 0000               1470mm     BTST #0,D5                                      ; CHECK FOR CHARACTER
0000077C  6700 0010               1471mm     BEQ CONTINUE_68                                 ; NOTHING, CONTINUE
00000780                          1472mm 
00000780                          1473mmm     READ_CHAR D5                                    ; WE're not going to do anything with it, just check for escape
00000780                 TRUE     1474mmm     IFEQ DEBUG
00000780  1A39 00C00007           1475mmm         MOVE.B DUART_RXA,D5                         ; GOT A CHARACTER, READ IT
00000786                          1476mmm     ENDC
00000786                 FALSE    1477mmm     IFNE DEBUG
00000786                          1478mmm     ENDC
00000786                          1479mmm 
00000786  BA3C 001B               1480mmm     CMP.B #$1B,D5                                   ; CHECK FOR ESCAPE AND GO TO START
0000078A  6700 F978               1481mmm     BEQ START
0000078E                          1482mmm     ENDM
0000078E                          1483mm CONTINUE_68
0000078E  1A39 00C00013           1484mm     MOVE.B DUART_SRB,D5                             ; READ DOWNLOAD STATUS REGISTER
00000794  0805 0000               1485mm     BTST #0,D5                                      ; CHECK FOR CHARACTER
00000798  67D8                    1486mm     BEQ WAIT_FOR_READY_68                           ; NOTHING, CHECK AGAIN
0000079A                          1487mm     
0000079A  1A39 00C00017           1488mm     MOVE.B DUART_RXB,D5                             ; GOT A CHARACTER, READ IT
000007A0  13C5 00E00001           1489mm     MOVE.B D5,DISPLAY                               ; ECHO TO THE DISPLAY
000007A6                          1490mm 
000007A6                          1491mm     ENDM
000007A6                          1492m         ;PRINT_CHAR D5,D6
000007A6                          1493mm         HEX2BIN D5,D5,A4
000007A6  49FA 2704               1494mm     LEA HEX2BIN_LUT(PC),A4                          ; LOAD THE LOOKUP TABLE
000007AA  0405 0030               1495mm     SUB.B #'0',D5                                   ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
000007AE  CABC 000000FF           1496mm     AND.L #$FF,D5                                   ; IGNORE THE TOP 3 BYTES
000007B4  1A34 5000               1497mm     MOVE.B 0(A4,D5),D5                              ; USE THAT AS AN INDEX INTO THE LUT   
000007B8                          1498mm     ENDM
000007B8  8805                    1499m         OR.B D5,D4
000007BA  5307                    1500m         SUB.B #1,D7
000007BC                          1501m     ENDW
000007BC  60AA                    1502ms     BRA _10000004
000007BE                          1503ms _10000005
000007BE                          1504m 
000007BE  7A00                    1505m     MOVE.L #0,D5                                    ; REXTRACT LATEST BYTE OF ADDRESS AND ADD INTO CHECKSUM
000007C0  1A04                    1506m     MOVE.B D4,D5
000007C2  D484                    1507m     ADD.L D4,D2
000007C4                          1508m 
000007C4                          1509m     ENDM
000007C4                          1510  
000007C4                          1511              IF.B D1 <EQ> #'2'  THEN.L               ; 24 bit address data record, read another byte
000007C4  B23C 0032               1512s     CMP.B   #'2',D1
000007C8  6600 0064               1513s     BNE.L   _00000007
000007CC  5383                    1514                  SUB.L #1,D3                         ; subtract an extra bytes for 24 bit address    
000007CE                          1515m                 DOWNLOAD_BYTE D4,D5,D6,D7,D2,A4     ; 3rd byte
000007CE  1E3C 0002               1516m     MOVE.B #2,D7
000007D2                          1517m     WHILE.B D7 <GT> 0 DO
000007D2                          1518ms _10000006
000007D2  BE38 0000               1519ms     CMP.B   0,D7
000007D6  6F00 0050               1520ms     BLE _10000007
000007DA  E98C                    1521m         LSL.L #4,D4                                 ; IT's OK to do this first, because we are either starting from 0, 
000007DC                          1522mm         DOWNLOAD D5                                 ; OR WE ARE READING THE NEXT BYTE ALONG, SO NEED TO SHIFT UP THE PREVIOUS ONE
000007DC                          1523mm WAIT_FOR_READY_72                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
000007DC                          1524mm 
000007DC  1A39 00C00003           1525mm     MOVE.B DUART_SRA,D5                             ; CHECK FOR COMMAND
000007E2  0805 0000               1526mm     BTST #0,D5                                      ; CHECK FOR CHARACTER
000007E6  6700 0010               1527mm     BEQ CONTINUE_72                                 ; NOTHING, CONTINUE
000007EA                          1528mm 
000007EA                          1529mmm     READ_CHAR D5                                    ; WE're not going to do anything with it, just check for escape
000007EA                 TRUE     1530mmm     IFEQ DEBUG
000007EA  1A39 00C00007           1531mmm         MOVE.B DUART_RXA,D5                         ; GOT A CHARACTER, READ IT
000007F0                          1532mmm     ENDC
000007F0                 FALSE    1533mmm     IFNE DEBUG
000007F0                          1534mmm     ENDC
000007F0                          1535mmm 
000007F0  BA3C 001B               1536mmm     CMP.B #$1B,D5                                   ; CHECK FOR ESCAPE AND GO TO START
000007F4  6700 F90E               1537mmm     BEQ START
000007F8                          1538mmm     ENDM
000007F8                          1539mm CONTINUE_72
000007F8  1A39 00C00013           1540mm     MOVE.B DUART_SRB,D5                             ; READ DOWNLOAD STATUS REGISTER
000007FE  0805 0000               1541mm     BTST #0,D5                                      ; CHECK FOR CHARACTER
00000802  67D8                    1542mm     BEQ WAIT_FOR_READY_72                           ; NOTHING, CHECK AGAIN
00000804                          1543mm     
00000804  1A39 00C00017           1544mm     MOVE.B DUART_RXB,D5                             ; GOT A CHARACTER, READ IT
0000080A  13C5 00E00001           1545mm     MOVE.B D5,DISPLAY                               ; ECHO TO THE DISPLAY
00000810                          1546mm 
00000810                          1547mm     ENDM
00000810                          1548m         ;PRINT_CHAR D5,D6
00000810                          1549mm         HEX2BIN D5,D5,A4
00000810  49FA 269A               1550mm     LEA HEX2BIN_LUT(PC),A4                          ; LOAD THE LOOKUP TABLE
00000814  0405 0030               1551mm     SUB.B #'0',D5                                   ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
00000818  CABC 000000FF           1552mm     AND.L #$FF,D5                                   ; IGNORE THE TOP 3 BYTES
0000081E  1A34 5000               1553mm     MOVE.B 0(A4,D5),D5                              ; USE THAT AS AN INDEX INTO THE LUT   
00000822                          1554mm     ENDM
00000822  8805                    1555m         OR.B D5,D4
00000824  5307                    1556m         SUB.B #1,D7
00000826                          1557m     ENDW
00000826  60AA                    1558ms     BRA _10000006
00000828                          1559ms _10000007
00000828                          1560m 
00000828  7A00                    1561m     MOVE.L #0,D5                                    ; REXTRACT LATEST BYTE OF ADDRESS AND ADD INTO CHECKSUM
0000082A  1A04                    1562m     MOVE.B D4,D5
0000082C  D484                    1563m     ADD.L D4,D2
0000082E                          1564m 
0000082E                          1565m     ENDM
0000082E                          1566              ENDI
0000082E                          1567s _00000007
0000082E                          1568  
0000082E  2444                    1569              MOVE.L D4,A2                            ; put the address in an address register
00000830  D5C9                    1570              ADD.L A1,A2                             ; add in the offset
00000832                          1571  
00000832                          1572              WHILE.B D3 <GT> #0 DO                   ; read the data bytes
00000832                          1573s _10000008
00000832  B63C 0000               1574s     CMP.B   #0,D3
00000836  6F00 0068               1575s     BLE _10000009
0000083A                          1576m                 DOWNLOAD_BYTE D1,D5,D6,D7,D2,A4     ; read it
0000083A  1E3C 0002               1577m     MOVE.B #2,D7
0000083E                          1578m     WHILE.B D7 <GT> 0 DO
0000083E                          1579ms _1000000A
0000083E  BE38 0000               1580ms     CMP.B   0,D7
00000842  6F00 0050               1581ms     BLE _1000000B
00000846  E989                    1582m         LSL.L #4,D1                                 ; IT's OK to do this first, because we are either starting from 0, 
00000848                          1583mm         DOWNLOAD D5                                 ; OR WE ARE READING THE NEXT BYTE ALONG, SO NEED TO SHIFT UP THE PREVIOUS ONE
00000848                          1584mm WAIT_FOR_READY_76                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000848                          1585mm 
00000848  1A39 00C00003           1586mm     MOVE.B DUART_SRA,D5                             ; CHECK FOR COMMAND
0000084E  0805 0000               1587mm     BTST #0,D5                                      ; CHECK FOR CHARACTER
00000852  6700 0010               1588mm     BEQ CONTINUE_76                                 ; NOTHING, CONTINUE
00000856                          1589mm 
00000856                          1590mmm     READ_CHAR D5                                    ; WE're not going to do anything with it, just check for escape
00000856                 TRUE     1591mmm     IFEQ DEBUG
00000856  1A39 00C00007           1592mmm         MOVE.B DUART_RXA,D5                         ; GOT A CHARACTER, READ IT
0000085C                          1593mmm     ENDC
0000085C                 FALSE    1594mmm     IFNE DEBUG
0000085C                          1595mmm     ENDC
0000085C                          1596mmm 
0000085C  BA3C 001B               1597mmm     CMP.B #$1B,D5                                   ; CHECK FOR ESCAPE AND GO TO START
00000860  6700 F8A2               1598mmm     BEQ START
00000864                          1599mmm     ENDM
00000864                          1600mm CONTINUE_76
00000864  1A39 00C00013           1601mm     MOVE.B DUART_SRB,D5                             ; READ DOWNLOAD STATUS REGISTER
0000086A  0805 0000               1602mm     BTST #0,D5                                      ; CHECK FOR CHARACTER
0000086E  67D8                    1603mm     BEQ WAIT_FOR_READY_76                           ; NOTHING, CHECK AGAIN
00000870                          1604mm     
00000870  1A39 00C00017           1605mm     MOVE.B DUART_RXB,D5                             ; GOT A CHARACTER, READ IT
00000876  13C5 00E00001           1606mm     MOVE.B D5,DISPLAY                               ; ECHO TO THE DISPLAY
0000087C                          1607mm 
0000087C                          1608mm     ENDM
0000087C                          1609m         ;PRINT_CHAR D5,D6
0000087C                          1610mm         HEX2BIN D5,D5,A4
0000087C  49FA 262E               1611mm     LEA HEX2BIN_LUT(PC),A4                          ; LOAD THE LOOKUP TABLE
00000880  0405 0030               1612mm     SUB.B #'0',D5                                   ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
00000884  CABC 000000FF           1613mm     AND.L #$FF,D5                                   ; IGNORE THE TOP 3 BYTES
0000088A  1A34 5000               1614mm     MOVE.B 0(A4,D5),D5                              ; USE THAT AS AN INDEX INTO THE LUT   
0000088E                          1615mm     ENDM
0000088E  8205                    1616m         OR.B D5,D1
00000890  5307                    1617m         SUB.B #1,D7
00000892                          1618m     ENDW
00000892  60AA                    1619ms     BRA _1000000A
00000894                          1620ms _1000000B
00000894                          1621m 
00000894  7A00                    1622m     MOVE.L #0,D5                                    ; REXTRACT LATEST BYTE OF ADDRESS AND ADD INTO CHECKSUM
00000896  1A01                    1623m     MOVE.B D1,D5
00000898  D481                    1624m     ADD.L D1,D2
0000089A                          1625m 
0000089A                          1626m     ENDM
0000089A                          1627   
0000089A  14C1                    1628                  MOVE.B D1,(A2)+                     ; store it!
0000089C                          1629  
0000089C  5303                    1630                  SUB.B #1,D3                         ; 1 less byte to go
0000089E                          1631              ENDW
0000089E  6092                    1632s     BRA _10000008
000008A0                          1633s _10000009
000008A0                          1634  
000008A0  7200                    1635              MOVE.L #0,D1                            ; not done yet
000008A2                          1636          ELSE
000008A2  6000 01AC               1637s     BRA _00000008
000008A6                          1638s _00000006
000008A6                          1639              IF.B D1 <EQ> #'8' THEN.L                ; termination record, exit
000008A6  B23C 0038               1640s     CMP.B   #'8',D1
000008AA  6600 012E               1641s     BNE.L   _00000009
000008AE  7800                    1642                  MOVE.L #0,D4                        ; read the 24 bit start address
000008B0                          1643m                 DOWNLOAD_BYTE D4,D5,D6,D7,D2,A4     ; top byte
000008B0  1E3C 0002               1644m     MOVE.B #2,D7
000008B4                          1645m     WHILE.B D7 <GT> 0 DO
000008B4                          1646ms _1000000C
000008B4  BE38 0000               1647ms     CMP.B   0,D7
000008B8  6F00 0050               1648ms     BLE _1000000D
000008BC  E98C                    1649m         LSL.L #4,D4                                 ; IT's OK to do this first, because we are either starting from 0, 
000008BE                          1650mm         DOWNLOAD D5                                 ; OR WE ARE READING THE NEXT BYTE ALONG, SO NEED TO SHIFT UP THE PREVIOUS ONE
000008BE                          1651mm WAIT_FOR_READY_80                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
000008BE                          1652mm 
000008BE  1A39 00C00003           1653mm     MOVE.B DUART_SRA,D5                             ; CHECK FOR COMMAND
000008C4  0805 0000               1654mm     BTST #0,D5                                      ; CHECK FOR CHARACTER
000008C8  6700 0010               1655mm     BEQ CONTINUE_80                                 ; NOTHING, CONTINUE
000008CC                          1656mm 
000008CC                          1657mmm     READ_CHAR D5                                    ; WE're not going to do anything with it, just check for escape
000008CC                 TRUE     1658mmm     IFEQ DEBUG
000008CC  1A39 00C00007           1659mmm         MOVE.B DUART_RXA,D5                         ; GOT A CHARACTER, READ IT
000008D2                          1660mmm     ENDC
000008D2                 FALSE    1661mmm     IFNE DEBUG
000008D2                          1662mmm     ENDC
000008D2                          1663mmm 
000008D2  BA3C 001B               1664mmm     CMP.B #$1B,D5                                   ; CHECK FOR ESCAPE AND GO TO START
000008D6  6700 F82C               1665mmm     BEQ START
000008DA                          1666mmm     ENDM
000008DA                          1667mm CONTINUE_80
000008DA  1A39 00C00013           1668mm     MOVE.B DUART_SRB,D5                             ; READ DOWNLOAD STATUS REGISTER
000008E0  0805 0000               1669mm     BTST #0,D5                                      ; CHECK FOR CHARACTER
000008E4  67D8                    1670mm     BEQ WAIT_FOR_READY_80                           ; NOTHING, CHECK AGAIN
000008E6                          1671mm     
000008E6  1A39 00C00017           1672mm     MOVE.B DUART_RXB,D5                             ; GOT A CHARACTER, READ IT
000008EC  13C5 00E00001           1673mm     MOVE.B D5,DISPLAY                               ; ECHO TO THE DISPLAY
000008F2                          1674mm 
000008F2                          1675mm     ENDM
000008F2                          1676m         ;PRINT_CHAR D5,D6
000008F2                          1677mm         HEX2BIN D5,D5,A4
000008F2  49FA 25B8               1678mm     LEA HEX2BIN_LUT(PC),A4                          ; LOAD THE LOOKUP TABLE
000008F6  0405 0030               1679mm     SUB.B #'0',D5                                   ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
000008FA  CABC 000000FF           1680mm     AND.L #$FF,D5                                   ; IGNORE THE TOP 3 BYTES
00000900  1A34 5000               1681mm     MOVE.B 0(A4,D5),D5                              ; USE THAT AS AN INDEX INTO THE LUT   
00000904                          1682mm     ENDM
00000904  8805                    1683m         OR.B D5,D4
00000906  5307                    1684m         SUB.B #1,D7
00000908                          1685m     ENDW
00000908  60AA                    1686ms     BRA _1000000C
0000090A                          1687ms _1000000D
0000090A                          1688m 
0000090A  7A00                    1689m     MOVE.L #0,D5                                    ; REXTRACT LATEST BYTE OF ADDRESS AND ADD INTO CHECKSUM
0000090C  1A04                    1690m     MOVE.B D4,D5
0000090E  D484                    1691m     ADD.L D4,D2
00000910                          1692m 
00000910                          1693m     ENDM
00000910                          1694m                 DOWNLOAD_BYTE D4,D5,D6,D7,D2,A4     ; middle byte
00000910  1E3C 0002               1695m     MOVE.B #2,D7
00000914                          1696m     WHILE.B D7 <GT> 0 DO
00000914                          1697ms _1000000E
00000914  BE38 0000               1698ms     CMP.B   0,D7
00000918  6F00 0050               1699ms     BLE _1000000F
0000091C  E98C                    1700m         LSL.L #4,D4                                 ; IT's OK to do this first, because we are either starting from 0, 
0000091E                          1701mm         DOWNLOAD D5                                 ; OR WE ARE READING THE NEXT BYTE ALONG, SO NEED TO SHIFT UP THE PREVIOUS ONE
0000091E                          1702mm WAIT_FOR_READY_84                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
0000091E                          1703mm 
0000091E  1A39 00C00003           1704mm     MOVE.B DUART_SRA,D5                             ; CHECK FOR COMMAND
00000924  0805 0000               1705mm     BTST #0,D5                                      ; CHECK FOR CHARACTER
00000928  6700 0010               1706mm     BEQ CONTINUE_84                                 ; NOTHING, CONTINUE
0000092C                          1707mm 
0000092C                          1708mmm     READ_CHAR D5                                    ; WE're not going to do anything with it, just check for escape
0000092C                 TRUE     1709mmm     IFEQ DEBUG
0000092C  1A39 00C00007           1710mmm         MOVE.B DUART_RXA,D5                         ; GOT A CHARACTER, READ IT
00000932                          1711mmm     ENDC
00000932                 FALSE    1712mmm     IFNE DEBUG
00000932                          1713mmm     ENDC
00000932                          1714mmm 
00000932  BA3C 001B               1715mmm     CMP.B #$1B,D5                                   ; CHECK FOR ESCAPE AND GO TO START
00000936  6700 F7CC               1716mmm     BEQ START
0000093A                          1717mmm     ENDM
0000093A                          1718mm CONTINUE_84
0000093A  1A39 00C00013           1719mm     MOVE.B DUART_SRB,D5                             ; READ DOWNLOAD STATUS REGISTER
00000940  0805 0000               1720mm     BTST #0,D5                                      ; CHECK FOR CHARACTER
00000944  67D8                    1721mm     BEQ WAIT_FOR_READY_84                           ; NOTHING, CHECK AGAIN
00000946                          1722mm     
00000946  1A39 00C00017           1723mm     MOVE.B DUART_RXB,D5                             ; GOT A CHARACTER, READ IT
0000094C  13C5 00E00001           1724mm     MOVE.B D5,DISPLAY                               ; ECHO TO THE DISPLAY
00000952                          1725mm 
00000952                          1726mm     ENDM
00000952                          1727m         ;PRINT_CHAR D5,D6
00000952                          1728mm         HEX2BIN D5,D5,A4
00000952  49FA 2558               1729mm     LEA HEX2BIN_LUT(PC),A4                          ; LOAD THE LOOKUP TABLE
00000956  0405 0030               1730mm     SUB.B #'0',D5                                   ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
0000095A  CABC 000000FF           1731mm     AND.L #$FF,D5                                   ; IGNORE THE TOP 3 BYTES
00000960  1A34 5000               1732mm     MOVE.B 0(A4,D5),D5                              ; USE THAT AS AN INDEX INTO THE LUT   
00000964                          1733mm     ENDM
00000964  8805                    1734m         OR.B D5,D4
00000966  5307                    1735m         SUB.B #1,D7
00000968                          1736m     ENDW
00000968  60AA                    1737ms     BRA _1000000E
0000096A                          1738ms _1000000F
0000096A                          1739m 
0000096A  7A00                    1740m     MOVE.L #0,D5                                    ; REXTRACT LATEST BYTE OF ADDRESS AND ADD INTO CHECKSUM
0000096C  1A04                    1741m     MOVE.B D4,D5
0000096E  D484                    1742m     ADD.L D4,D2
00000970                          1743m 
00000970                          1744m     ENDM
00000970                          1745m                 DOWNLOAD_BYTE D4,D5,D6,D7,D2,A4     ; bottom byte
00000970  1E3C 0002               1746m     MOVE.B #2,D7
00000974                          1747m     WHILE.B D7 <GT> 0 DO
00000974                          1748ms _10000010
00000974  BE38 0000               1749ms     CMP.B   0,D7
00000978  6F00 0050               1750ms     BLE _10000011
0000097C  E98C                    1751m         LSL.L #4,D4                                 ; IT's OK to do this first, because we are either starting from 0, 
0000097E                          1752mm         DOWNLOAD D5                                 ; OR WE ARE READING THE NEXT BYTE ALONG, SO NEED TO SHIFT UP THE PREVIOUS ONE
0000097E                          1753mm WAIT_FOR_READY_88                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
0000097E                          1754mm 
0000097E  1A39 00C00003           1755mm     MOVE.B DUART_SRA,D5                             ; CHECK FOR COMMAND
00000984  0805 0000               1756mm     BTST #0,D5                                      ; CHECK FOR CHARACTER
00000988  6700 0010               1757mm     BEQ CONTINUE_88                                 ; NOTHING, CONTINUE
0000098C                          1758mm 
0000098C                          1759mmm     READ_CHAR D5                                    ; WE're not going to do anything with it, just check for escape
0000098C                 TRUE     1760mmm     IFEQ DEBUG
0000098C  1A39 00C00007           1761mmm         MOVE.B DUART_RXA,D5                         ; GOT A CHARACTER, READ IT
00000992                          1762mmm     ENDC
00000992                 FALSE    1763mmm     IFNE DEBUG
00000992                          1764mmm     ENDC
00000992                          1765mmm 
00000992  BA3C 001B               1766mmm     CMP.B #$1B,D5                                   ; CHECK FOR ESCAPE AND GO TO START
00000996  6700 F76C               1767mmm     BEQ START
0000099A                          1768mmm     ENDM
0000099A                          1769mm CONTINUE_88
0000099A  1A39 00C00013           1770mm     MOVE.B DUART_SRB,D5                             ; READ DOWNLOAD STATUS REGISTER
000009A0  0805 0000               1771mm     BTST #0,D5                                      ; CHECK FOR CHARACTER
000009A4  67D8                    1772mm     BEQ WAIT_FOR_READY_88                           ; NOTHING, CHECK AGAIN
000009A6                          1773mm     
000009A6  1A39 00C00017           1774mm     MOVE.B DUART_RXB,D5                             ; GOT A CHARACTER, READ IT
000009AC  13C5 00E00001           1775mm     MOVE.B D5,DISPLAY                               ; ECHO TO THE DISPLAY
000009B2                          1776mm 
000009B2                          1777mm     ENDM
000009B2                          1778m         ;PRINT_CHAR D5,D6
000009B2                          1779mm         HEX2BIN D5,D5,A4
000009B2  49FA 24F8               1780mm     LEA HEX2BIN_LUT(PC),A4                          ; LOAD THE LOOKUP TABLE
000009B6  0405 0030               1781mm     SUB.B #'0',D5                                   ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
000009BA  CABC 000000FF           1782mm     AND.L #$FF,D5                                   ; IGNORE THE TOP 3 BYTES
000009C0  1A34 5000               1783mm     MOVE.B 0(A4,D5),D5                              ; USE THAT AS AN INDEX INTO THE LUT   
000009C4                          1784mm     ENDM
000009C4  8805                    1785m         OR.B D5,D4
000009C6  5307                    1786m         SUB.B #1,D7
000009C8                          1787m     ENDW
000009C8  60AA                    1788ms     BRA _10000010
000009CA                          1789ms _10000011
000009CA                          1790m 
000009CA  7A00                    1791m     MOVE.L #0,D5                                    ; REXTRACT LATEST BYTE OF ADDRESS AND ADD INTO CHECKSUM
000009CC  1A04                    1792m     MOVE.B D4,D5
000009CE  D484                    1793m     ADD.L D4,D2
000009D0                          1794m 
000009D0                          1795m     ENDM
000009D0                          1796  
000009D0  2044                    1797                  MOVE.L D4,A0                        ; start address -> A0
000009D2  D1C9                    1798                  ADD.L A1,A0                         ; add in the offset
000009D4                          1799  
000009D4  72FF                    1800                  MOVE.L #$FFFFFFFF,D1                ; done
000009D6                          1801              ELSE
000009D6  6000 0078               1802s     BRA _0000000A
000009DA                          1803s _00000009
000009DA                          1804m                 PRINT_CRLF D5,A4
000009DA  49FA 24FB               1805m     LEA CRLF(PC),A4
000009DE                          1806mm     PRINT_STR A4,D5
000009DE                          1807mm LOOP_92
000009DE  0C14 0000               1808mm     CMP.B #NULL,(A4)                                ; 0 -> DONE
000009E2  6700 0016               1809mm     BEQ EXIT_92
000009E6                          1810mmm     PRINT_CHAR (A4)+,D5
000009E6                          1811mmm WAIT_FOR_READY_93                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
000009E6                 TRUE     1812mmm     IFEQ DEBUG
000009E6  1A39 00C00003           1813mmm         MOVE.B DUART_SRA,D5                         ; READ STATUS REGISTER
000009EC  0805 0002               1814mmm         BTST #2,D5                                  ; CHECK FOR SPACE TO SEND
000009F0  67F4                    1815mmm         BEQ WAIT_FOR_READY_93                       ; NO SPACE, CHECK AGAIN
000009F2  13DC 00C00007           1816mmm         MOVE.B (A4)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
000009F8                          1817mmm     ENDC
000009F8                          1818mmm 
000009F8                 FALSE    1819mmm     IFNE DEBUG
000009F8                          1820mmm     ENDC
000009F8                          1821mmm 
000009F8                          1822mmm     ENDM
000009F8  60E4                    1823mm     BRA LOOP_92
000009FA                          1824mm EXIT_92
000009FA                          1825mm     ENDM
000009FA                          1826m     ENDM
000009FA                          1827  
000009FA  49FA 2467               1828                  LEA UNREC(PC),A4                    ; warn for unrecognised type
000009FE                          1829m                 PRINT_STR A4,D5
000009FE                          1830m LOOP_94
000009FE  0C14 0000               1831m     CMP.B #NULL,(A4)                                ; 0 -> DONE
00000A02  6700 0016               1832m     BEQ EXIT_94
00000A06                          1833mm     PRINT_CHAR (A4)+,D5
00000A06                          1834mm WAIT_FOR_READY_95                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000A06                 TRUE     1835mm     IFEQ DEBUG
00000A06  1A39 00C00003           1836mm         MOVE.B DUART_SRA,D5                         ; READ STATUS REGISTER
00000A0C  0805 0002               1837mm         BTST #2,D5                                  ; CHECK FOR SPACE TO SEND
00000A10  67F4                    1838mm         BEQ WAIT_FOR_READY_95                       ; NO SPACE, CHECK AGAIN
00000A12  13DC 00C00007           1839mm         MOVE.B (A4)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00000A18                          1840mm     ENDC
00000A18                          1841mm 
00000A18                 FALSE    1842mm     IFNE DEBUG
00000A18                          1843mm     ENDC
00000A18                          1844mm 
00000A18                          1845mm     ENDM
00000A18  60E4                    1846m     BRA LOOP_94
00000A1A                          1847m EXIT_94
00000A1A                          1848m     ENDM
00000A1A                          1849m                 PRINT_CHAR D1,D5
00000A1A                          1850m WAIT_FOR_READY_96                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000A1A                 TRUE     1851m     IFEQ DEBUG
00000A1A  1A39 00C00003           1852m         MOVE.B DUART_SRA,D5                         ; READ STATUS REGISTER
00000A20  0805 0002               1853m         BTST #2,D5                                  ; CHECK FOR SPACE TO SEND
00000A24  67F4                    1854m         BEQ WAIT_FOR_READY_96                       ; NO SPACE, CHECK AGAIN
00000A26  13C1 00C00007           1855m         MOVE.B D1,DUART_TXA                         ; SEND THE NEXT CHARACTER
00000A2C                          1856m     ENDC
00000A2C                          1857m 
00000A2C                 FALSE    1858m     IFNE DEBUG
00000A2C                          1859m     ENDC
00000A2C                          1860m 
00000A2C                          1861m     ENDM
00000A2C                          1862m                 PRINT_CRLF D5,A4
00000A2C  49FA 24A9               1863m     LEA CRLF(PC),A4
00000A30                          1864mm     PRINT_STR A4,D5
00000A30                          1865mm LOOP_98
00000A30  0C14 0000               1866mm     CMP.B #NULL,(A4)                                ; 0 -> DONE
00000A34  6700 0016               1867mm     BEQ EXIT_98
00000A38                          1868mmm     PRINT_CHAR (A4)+,D5
00000A38                          1869mmm WAIT_FOR_READY_99                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000A38                 TRUE     1870mmm     IFEQ DEBUG
00000A38  1A39 00C00003           1871mmm         MOVE.B DUART_SRA,D5                         ; READ STATUS REGISTER
00000A3E  0805 0002               1872mmm         BTST #2,D5                                  ; CHECK FOR SPACE TO SEND
00000A42  67F4                    1873mmm         BEQ WAIT_FOR_READY_99                       ; NO SPACE, CHECK AGAIN
00000A44  13DC 00C00007           1874mmm         MOVE.B (A4)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00000A4A                          1875mmm     ENDC
00000A4A                          1876mmm 
00000A4A                 FALSE    1877mmm     IFNE DEBUG
00000A4A                          1878mmm     ENDC
00000A4A                          1879mmm 
00000A4A                          1880mmm     ENDM
00000A4A  60E4                    1881mm     BRA LOOP_98
00000A4C                          1882mm EXIT_98
00000A4C                          1883mm     ENDM
00000A4C                          1884m     ENDM
00000A4C                          1885  
00000A4C  6000 FBAE               1886                  BRA WAIT_FOR_SRECORD                ; ignore any other type 
00000A50                          1887              ENDI
00000A50                          1888s _0000000A
00000A50                          1889          ENDI
00000A50                          1890s _00000008
00000A50                          1891      ENDI
00000A50                          1892s _00000004
00000A50                          1893  
00000A50                          1894m     DOWNLOAD_BYTE D4,D5,D6,D7,D2,A4
00000A50  1E3C 0002               1895m     MOVE.B #2,D7
00000A54                          1896m     WHILE.B D7 <GT> 0 DO
00000A54                          1897ms _10000012
00000A54  BE38 0000               1898ms     CMP.B   0,D7
00000A58  6F00 0050               1899ms     BLE _10000013
00000A5C  E98C                    1900m         LSL.L #4,D4                                 ; IT's OK to do this first, because we are either starting from 0, 
00000A5E                          1901mm         DOWNLOAD D5                                 ; OR WE ARE READING THE NEXT BYTE ALONG, SO NEED TO SHIFT UP THE PREVIOUS ONE
00000A5E                          1902mm WAIT_FOR_READY_101                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000A5E                          1903mm 
00000A5E  1A39 00C00003           1904mm     MOVE.B DUART_SRA,D5                             ; CHECK FOR COMMAND
00000A64  0805 0000               1905mm     BTST #0,D5                                      ; CHECK FOR CHARACTER
00000A68  6700 0010               1906mm     BEQ CONTINUE_101                                    ; NOTHING, CONTINUE
00000A6C                          1907mm 
00000A6C                          1908mmm     READ_CHAR D5                                    ; WE're not going to do anything with it, just check for escape
00000A6C                 TRUE     1909mmm     IFEQ DEBUG
00000A6C  1A39 00C00007           1910mmm         MOVE.B DUART_RXA,D5                         ; GOT A CHARACTER, READ IT
00000A72                          1911mmm     ENDC
00000A72                 FALSE    1912mmm     IFNE DEBUG
00000A72                          1913mmm     ENDC
00000A72                          1914mmm 
00000A72  BA3C 001B               1915mmm     CMP.B #$1B,D5                                   ; CHECK FOR ESCAPE AND GO TO START
00000A76  6700 F68C               1916mmm     BEQ START
00000A7A                          1917mmm     ENDM
00000A7A                          1918mm CONTINUE_101
00000A7A  1A39 00C00013           1919mm     MOVE.B DUART_SRB,D5                             ; READ DOWNLOAD STATUS REGISTER
00000A80  0805 0000               1920mm     BTST #0,D5                                      ; CHECK FOR CHARACTER
00000A84  67D8                    1921mm     BEQ WAIT_FOR_READY_101                          ; NOTHING, CHECK AGAIN
00000A86                          1922mm     
00000A86  1A39 00C00017           1923mm     MOVE.B DUART_RXB,D5                             ; GOT A CHARACTER, READ IT
00000A8C  13C5 00E00001           1924mm     MOVE.B D5,DISPLAY                               ; ECHO TO THE DISPLAY
00000A92                          1925mm 
00000A92                          1926mm     ENDM
00000A92                          1927m         ;PRINT_CHAR D5,D6
00000A92                          1928mm         HEX2BIN D5,D5,A4
00000A92  49FA 2418               1929mm     LEA HEX2BIN_LUT(PC),A4                          ; LOAD THE LOOKUP TABLE
00000A96  0405 0030               1930mm     SUB.B #'0',D5                                   ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
00000A9A  CABC 000000FF           1931mm     AND.L #$FF,D5                                   ; IGNORE THE TOP 3 BYTES
00000AA0  1A34 5000               1932mm     MOVE.B 0(A4,D5),D5                              ; USE THAT AS AN INDEX INTO THE LUT   
00000AA4                          1933mm     ENDM
00000AA4  8805                    1934m         OR.B D5,D4
00000AA6  5307                    1935m         SUB.B #1,D7
00000AA8                          1936m     ENDW
00000AA8  60AA                    1937ms     BRA _10000012
00000AAA                          1938ms _10000013
00000AAA                          1939m 
00000AAA  7A00                    1940m     MOVE.L #0,D5                                    ; REXTRACT LATEST BYTE OF ADDRESS AND ADD INTO CHECKSUM
00000AAC  1A04                    1941m     MOVE.B D4,D5
00000AAE  D484                    1942m     ADD.L D4,D2
00000AB0                          1943m 
00000AB0                          1944m     ENDM
00000AB0                          1945  
00000AB0                          1946      IF.B D2 <NE> #$FF THEN.L
00000AB0  B43C 00FF               1947s     CMP.B   #$FF,D2
00000AB4  6700 00B0               1948s     BEQ.L   _0000000B
00000AB8                          1949m         PRINT_CRLF D5,A4
00000AB8  49FA 241D               1950m     LEA CRLF(PC),A4
00000ABC                          1951mm     PRINT_STR A4,D5
00000ABC                          1952mm LOOP_105
00000ABC  0C14 0000               1953mm     CMP.B #NULL,(A4)                                ; 0 -> DONE
00000AC0  6700 0016               1954mm     BEQ EXIT_105
00000AC4                          1955mmm     PRINT_CHAR (A4)+,D5
00000AC4                          1956mmm WAIT_FOR_READY_106                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000AC4                 TRUE     1957mmm     IFEQ DEBUG
00000AC4  1A39 00C00003           1958mmm         MOVE.B DUART_SRA,D5                         ; READ STATUS REGISTER
00000ACA  0805 0002               1959mmm         BTST #2,D5                                  ; CHECK FOR SPACE TO SEND
00000ACE  67F4                    1960mmm         BEQ WAIT_FOR_READY_106                      ; NO SPACE, CHECK AGAIN
00000AD0  13DC 00C00007           1961mmm         MOVE.B (A4)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00000AD6                          1962mmm     ENDC
00000AD6                          1963mmm 
00000AD6                 FALSE    1964mmm     IFNE DEBUG
00000AD6                          1965mmm     ENDC
00000AD6                          1966mmm 
00000AD6                          1967mmm     ENDM
00000AD6  60E4                    1968mm     BRA LOOP_105
00000AD8                          1969mm EXIT_105
00000AD8                          1970mm     ENDM
00000AD8                          1971m     ENDM
00000AD8  49FA 23A0               1972          LEA CS_FAILURE(PC),A4                       ; warn for mismatched checksum
00000ADC                          1973m         PRINT_STR A4,D5
00000ADC                          1974m LOOP_107
00000ADC  0C14 0000               1975m     CMP.B #NULL,(A4)                                ; 0 -> DONE
00000AE0  6700 0016               1976m     BEQ EXIT_107
00000AE4                          1977mm     PRINT_CHAR (A4)+,D5
00000AE4                          1978mm WAIT_FOR_READY_108                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000AE4                 TRUE     1979mm     IFEQ DEBUG
00000AE4  1A39 00C00003           1980mm         MOVE.B DUART_SRA,D5                         ; READ STATUS REGISTER
00000AEA  0805 0002               1981mm         BTST #2,D5                                  ; CHECK FOR SPACE TO SEND
00000AEE  67F4                    1982mm         BEQ WAIT_FOR_READY_108                      ; NO SPACE, CHECK AGAIN
00000AF0  13DC 00C00007           1983mm         MOVE.B (A4)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00000AF6                          1984mm     ENDC
00000AF6                          1985mm 
00000AF6                 FALSE    1986mm     IFNE DEBUG
00000AF6                          1987mm     ENDC
00000AF6                          1988mm 
00000AF6                          1989mm     ENDM
00000AF6  60E4                    1990m     BRA LOOP_107
00000AF8                          1991m EXIT_107
00000AF8                          1992m     ENDM
00000AF8                          1993m         PRINT_REG D0,D5,D3,D6,A4
00000AF8  49FA 23E3               1994m     LEA OX(PC),A4
00000AFC                          1995mm     PRINT_STR A4,D5
00000AFC                          1996mm LOOP_110
00000AFC  0C14 0000               1997mm     CMP.B #NULL,(A4)                                ; 0 -> DONE
00000B00  6700 0016               1998mm     BEQ EXIT_110
00000B04                          1999mmm     PRINT_CHAR (A4)+,D5
00000B04                          2000mmm WAIT_FOR_READY_111                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000B04                 TRUE     2001mmm     IFEQ DEBUG
00000B04  1A39 00C00003           2002mmm         MOVE.B DUART_SRA,D5                         ; READ STATUS REGISTER
00000B0A  0805 0002               2003mmm         BTST #2,D5                                  ; CHECK FOR SPACE TO SEND
00000B0E  67F4                    2004mmm         BEQ WAIT_FOR_READY_111                      ; NO SPACE, CHECK AGAIN
00000B10  13DC 00C00007           2005mmm         MOVE.B (A4)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00000B16                          2006mmm     ENDC
00000B16                          2007mmm 
00000B16                 FALSE    2008mmm     IFNE DEBUG
00000B16                          2009mmm     ENDC
00000B16                          2010mmm 
00000B16                          2011mmm     ENDM
00000B16  60E4                    2012mm     BRA LOOP_110
00000B18                          2013mm EXIT_110
00000B18                          2014mm     ENDM
00000B18  7C07                    2015m     MOVE.L #7,D6                                    ; LOOP ROUND ALL 8 HEX CHARACTERS OF 4 BITS EACH
00000B1A                          2016m LOOP_109
00000B1A                          2017mm     BIN2HEX D0,D3,A4
00000B1A  49FA 2380               2018mm     LEA BIN2HEX_LUT(PC),A4                          ; LOAD THE LOOKUP TABLE
00000B1E  E998                    2019mm     ROL.L #4,D0                                     ; SHIFT THE TOP 4 BITS DOWN TO BOTTOM OF THE REGISTER THE AND MASK OFF EVERYTHING ELSE
00000B20  1600                    2020mm     MOVE.B D0,D3
00000B22  0283 0000000F           2021mm     ANDI.L #$F,D3
00000B28  1634 3000               2022mm     MOVE.B 0(A4,D3),D3                              ; USE THAT AS AN INDEX INTO THE LUT
00000B2C                          2023mm     ENDM
00000B2C                          2024mm     PRINT_CHAR D3,D5
00000B2C                          2025mm WAIT_FOR_READY_113                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000B2C                 TRUE     2026mm     IFEQ DEBUG
00000B2C  1A39 00C00003           2027mm         MOVE.B DUART_SRA,D5                         ; READ STATUS REGISTER
00000B32  0805 0002               2028mm         BTST #2,D5                                  ; CHECK FOR SPACE TO SEND
00000B36  67F4                    2029mm         BEQ WAIT_FOR_READY_113                      ; NO SPACE, CHECK AGAIN
00000B38  13C3 00C00007           2030mm         MOVE.B D3,DUART_TXA                         ; SEND THE NEXT CHARACTER
00000B3E                          2031mm     ENDC
00000B3E                          2032mm 
00000B3E                 FALSE    2033mm     IFNE DEBUG
00000B3E                          2034mm     ENDC
00000B3E                          2035mm 
00000B3E                          2036mm     ENDM
00000B3E  57CE FFDA               2037m     DBEQ D6,LOOP_109
00000B42                          2038m     ENDM
00000B42                          2039m         PRINT_CRLF D5,A4
00000B42  49FA 2393               2040m     LEA CRLF(PC),A4
00000B46                          2041mm     PRINT_STR A4,D5
00000B46                          2042mm LOOP_115
00000B46  0C14 0000               2043mm     CMP.B #NULL,(A4)                                ; 0 -> DONE
00000B4A  6700 0016               2044mm     BEQ EXIT_115
00000B4E                          2045mmm     PRINT_CHAR (A4)+,D5
00000B4E                          2046mmm WAIT_FOR_READY_116                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000B4E                 TRUE     2047mmm     IFEQ DEBUG
00000B4E  1A39 00C00003           2048mmm         MOVE.B DUART_SRA,D5                         ; READ STATUS REGISTER
00000B54  0805 0002               2049mmm         BTST #2,D5                                  ; CHECK FOR SPACE TO SEND
00000B58  67F4                    2050mmm         BEQ WAIT_FOR_READY_116                      ; NO SPACE, CHECK AGAIN
00000B5A  13DC 00C00007           2051mmm         MOVE.B (A4)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00000B60                          2052mmm     ENDC
00000B60                          2053mmm 
00000B60                 FALSE    2054mmm     IFNE DEBUG
00000B60                          2055mmm     ENDC
00000B60                          2056mmm 
00000B60                          2057mmm     ENDM
00000B60  60E4                    2058mm     BRA LOOP_115
00000B62                          2059mm EXIT_115
00000B62                          2060mm     ENDM
00000B62                          2061m     ENDM
00000B62                          2062          
00000B62  6000 F7E0               2063          BRA MAIN_LOOP
00000B66                          2064      ENDI
00000B66                          2065s _0000000B
00000B66                          2066  
00000B66                          2067      IF D1 <EQ> #0 THEN
00000B66  B27C 0000               2068s     CMP.W   #0,D1
00000B6A  6600 0006               2069s     BNE _0000000C
00000B6E  6000 FA8C               2070        BRA WAIT_FOR_SRECORD
00000B72                          2071      ENDI
00000B72                          2072s _0000000C
00000B72                          2073  DOWNLOAD_DONE
00000B72                          2074m     PRINT_CRLF D5,A4
00000B72  49FA 2363               2075m     LEA CRLF(PC),A4
00000B76                          2076mm     PRINT_STR A4,D5
00000B76                          2077mm LOOP_118
00000B76  0C14 0000               2078mm     CMP.B #NULL,(A4)                                ; 0 -> DONE
00000B7A  6700 0016               2079mm     BEQ EXIT_118
00000B7E                          2080mmm     PRINT_CHAR (A4)+,D5
00000B7E                          2081mmm WAIT_FOR_READY_119                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000B7E                 TRUE     2082mmm     IFEQ DEBUG
00000B7E  1A39 00C00003           2083mmm         MOVE.B DUART_SRA,D5                         ; READ STATUS REGISTER
00000B84  0805 0002               2084mmm         BTST #2,D5                                  ; CHECK FOR SPACE TO SEND
00000B88  67F4                    2085mmm         BEQ WAIT_FOR_READY_119                      ; NO SPACE, CHECK AGAIN
00000B8A  13DC 00C00007           2086mmm         MOVE.B (A4)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00000B90                          2087mmm     ENDC
00000B90                          2088mmm 
00000B90                 FALSE    2089mmm     IFNE DEBUG
00000B90                          2090mmm     ENDC
00000B90                          2091mmm 
00000B90                          2092mmm     ENDM
00000B90  60E4                    2093mm     BRA LOOP_118
00000B92                          2094mm EXIT_118
00000B92                          2095mm     ENDM
00000B92                          2096m     ENDM
00000B92                          2097m     PRINT_REG D0,D5,D6,D2,A1                        ; print out number of Srecords read
00000B92  43FA 2349               2098m     LEA OX(PC),A1
00000B96                          2099mm     PRINT_STR A1,D5
00000B96                          2100mm LOOP_121
00000B96  0C11 0000               2101mm     CMP.B #NULL,(A1)                                ; 0 -> DONE
00000B9A  6700 0016               2102mm     BEQ EXIT_121
00000B9E                          2103mmm     PRINT_CHAR (A1)+,D5
00000B9E                          2104mmm WAIT_FOR_READY_122                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000B9E                 TRUE     2105mmm     IFEQ DEBUG
00000B9E  1A39 00C00003           2106mmm         MOVE.B DUART_SRA,D5                         ; READ STATUS REGISTER
00000BA4  0805 0002               2107mmm         BTST #2,D5                                  ; CHECK FOR SPACE TO SEND
00000BA8  67F4                    2108mmm         BEQ WAIT_FOR_READY_122                      ; NO SPACE, CHECK AGAIN
00000BAA  13D9 00C00007           2109mmm         MOVE.B (A1)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00000BB0                          2110mmm     ENDC
00000BB0                          2111mmm 
00000BB0                 FALSE    2112mmm     IFNE DEBUG
00000BB0                          2113mmm     ENDC
00000BB0                          2114mmm 
00000BB0                          2115mmm     ENDM
00000BB0  60E4                    2116mm     BRA LOOP_121
00000BB2                          2117mm EXIT_121
00000BB2                          2118mm     ENDM
00000BB2  7407                    2119m     MOVE.L #7,D2                                    ; LOOP ROUND ALL 8 HEX CHARACTERS OF 4 BITS EACH
00000BB4                          2120m LOOP_120
00000BB4                          2121mm     BIN2HEX D0,D6,A1
00000BB4  43FA 22E6               2122mm     LEA BIN2HEX_LUT(PC),A1                          ; LOAD THE LOOKUP TABLE
00000BB8  E998                    2123mm     ROL.L #4,D0                                     ; SHIFT THE TOP 4 BITS DOWN TO BOTTOM OF THE REGISTER THE AND MASK OFF EVERYTHING ELSE
00000BBA  1C00                    2124mm     MOVE.B D0,D6
00000BBC  0286 0000000F           2125mm     ANDI.L #$F,D6
00000BC2  1C31 6000               2126mm     MOVE.B 0(A1,D6),D6                              ; USE THAT AS AN INDEX INTO THE LUT
00000BC6                          2127mm     ENDM
00000BC6                          2128mm     PRINT_CHAR D6,D5
00000BC6                          2129mm WAIT_FOR_READY_124                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000BC6                 TRUE     2130mm     IFEQ DEBUG
00000BC6  1A39 00C00003           2131mm         MOVE.B DUART_SRA,D5                         ; READ STATUS REGISTER
00000BCC  0805 0002               2132mm         BTST #2,D5                                  ; CHECK FOR SPACE TO SEND
00000BD0  67F4                    2133mm         BEQ WAIT_FOR_READY_124                      ; NO SPACE, CHECK AGAIN
00000BD2  13C6 00C00007           2134mm         MOVE.B D6,DUART_TXA                         ; SEND THE NEXT CHARACTER
00000BD8                          2135mm     ENDC
00000BD8                          2136mm 
00000BD8                 FALSE    2137mm     IFNE DEBUG
00000BD8                          2138mm     ENDC
00000BD8                          2139mm 
00000BD8                          2140mm     ENDM
00000BD8  57CA FFDA               2141m     DBEQ D2,LOOP_120
00000BDC                          2142m     ENDM
00000BDC  43FA 2263               2143      LEA READ(PC),A1
00000BE0                          2144m     PRINT_STR A1,D5
00000BE0                          2145m LOOP_125
00000BE0  0C11 0000               2146m     CMP.B #NULL,(A1)                                ; 0 -> DONE
00000BE4  6700 0016               2147m     BEQ EXIT_125
00000BE8                          2148mm     PRINT_CHAR (A1)+,D5
00000BE8                          2149mm WAIT_FOR_READY_126                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000BE8                 TRUE     2150mm     IFEQ DEBUG
00000BE8  1A39 00C00003           2151mm         MOVE.B DUART_SRA,D5                         ; READ STATUS REGISTER
00000BEE  0805 0002               2152mm         BTST #2,D5                                  ; CHECK FOR SPACE TO SEND
00000BF2  67F4                    2153mm         BEQ WAIT_FOR_READY_126                      ; NO SPACE, CHECK AGAIN
00000BF4  13D9 00C00007           2154mm         MOVE.B (A1)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00000BFA                          2155mm     ENDC
00000BFA                          2156mm 
00000BFA                 FALSE    2157mm     IFNE DEBUG
00000BFA                          2158mm     ENDC
00000BFA                          2159mm 
00000BFA                          2160mm     ENDM
00000BFA  60E4                    2161m     BRA LOOP_125
00000BFC                          2162m EXIT_125
00000BFC                          2163m     ENDM
00000BFC  2E08                    2164      MOVE.L A0,D7                                    ; set address accumulator to start address
00000BFE                          2165m     PRINT_REG D7,D5,D6,D2,A1                        ; print out start address
00000BFE  43FA 22DD               2166m     LEA OX(PC),A1
00000C02                          2167mm     PRINT_STR A1,D5
00000C02                          2168mm LOOP_128
00000C02  0C11 0000               2169mm     CMP.B #NULL,(A1)                                ; 0 -> DONE
00000C06  6700 0016               2170mm     BEQ EXIT_128
00000C0A                          2171mmm     PRINT_CHAR (A1)+,D5
00000C0A                          2172mmm WAIT_FOR_READY_129                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000C0A                 TRUE     2173mmm     IFEQ DEBUG
00000C0A  1A39 00C00003           2174mmm         MOVE.B DUART_SRA,D5                         ; READ STATUS REGISTER
00000C10  0805 0002               2175mmm         BTST #2,D5                                  ; CHECK FOR SPACE TO SEND
00000C14  67F4                    2176mmm         BEQ WAIT_FOR_READY_129                      ; NO SPACE, CHECK AGAIN
00000C16  13D9 00C00007           2177mmm         MOVE.B (A1)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00000C1C                          2178mmm     ENDC
00000C1C                          2179mmm 
00000C1C                 FALSE    2180mmm     IFNE DEBUG
00000C1C                          2181mmm     ENDC
00000C1C                          2182mmm 
00000C1C                          2183mmm     ENDM
00000C1C  60E4                    2184mm     BRA LOOP_128
00000C1E                          2185mm EXIT_128
00000C1E                          2186mm     ENDM
00000C1E  7407                    2187m     MOVE.L #7,D2                                    ; LOOP ROUND ALL 8 HEX CHARACTERS OF 4 BITS EACH
00000C20                          2188m LOOP_127
00000C20                          2189mm     BIN2HEX D7,D6,A1
00000C20  43FA 227A               2190mm     LEA BIN2HEX_LUT(PC),A1                          ; LOAD THE LOOKUP TABLE
00000C24  E99F                    2191mm     ROL.L #4,D7                                     ; SHIFT THE TOP 4 BITS DOWN TO BOTTOM OF THE REGISTER THE AND MASK OFF EVERYTHING ELSE
00000C26  1C07                    2192mm     MOVE.B D7,D6
00000C28  0286 0000000F           2193mm     ANDI.L #$F,D6
00000C2E  1C31 6000               2194mm     MOVE.B 0(A1,D6),D6                              ; USE THAT AS AN INDEX INTO THE LUT
00000C32                          2195mm     ENDM
00000C32                          2196mm     PRINT_CHAR D6,D5
00000C32                          2197mm WAIT_FOR_READY_131                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000C32                 TRUE     2198mm     IFEQ DEBUG
00000C32  1A39 00C00003           2199mm         MOVE.B DUART_SRA,D5                         ; READ STATUS REGISTER
00000C38  0805 0002               2200mm         BTST #2,D5                                  ; CHECK FOR SPACE TO SEND
00000C3C  67F4                    2201mm         BEQ WAIT_FOR_READY_131                      ; NO SPACE, CHECK AGAIN
00000C3E  13C6 00C00007           2202mm         MOVE.B D6,DUART_TXA                         ; SEND THE NEXT CHARACTER
00000C44                          2203mm     ENDC
00000C44                          2204mm 
00000C44                 FALSE    2205mm     IFNE DEBUG
00000C44                          2206mm     ENDC
00000C44                          2207mm 
00000C44                          2208mm     ENDM
00000C44  57CA FFDA               2209m     DBEQ D2,LOOP_127
00000C48                          2210m     ENDM
00000C48                          2211m     PRINT_CRLF D5,A4
00000C48  49FA 228D               2212m     LEA CRLF(PC),A4
00000C4C                          2213mm     PRINT_STR A4,D5
00000C4C                          2214mm LOOP_133
00000C4C  0C14 0000               2215mm     CMP.B #NULL,(A4)                                ; 0 -> DONE
00000C50  6700 0016               2216mm     BEQ EXIT_133
00000C54                          2217mmm     PRINT_CHAR (A4)+,D5
00000C54                          2218mmm WAIT_FOR_READY_134                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000C54                 TRUE     2219mmm     IFEQ DEBUG
00000C54  1A39 00C00003           2220mmm         MOVE.B DUART_SRA,D5                         ; READ STATUS REGISTER
00000C5A  0805 0002               2221mmm         BTST #2,D5                                  ; CHECK FOR SPACE TO SEND
00000C5E  67F4                    2222mmm         BEQ WAIT_FOR_READY_134                      ; NO SPACE, CHECK AGAIN
00000C60  13DC 00C00007           2223mmm         MOVE.B (A4)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00000C66                          2224mmm     ENDC
00000C66                          2225mmm 
00000C66                 FALSE    2226mmm     IFNE DEBUG
00000C66                          2227mmm     ENDC
00000C66                          2228mmm 
00000C66                          2229mmm     ENDM
00000C66  60E4                    2230mm     BRA LOOP_133
00000C68                          2231mm EXIT_133
00000C68                          2232mm     ENDM
00000C68                          2233m     ENDM
00000C68                          2234  
00000C68  6000 F6DA               2235      BRA MAIN_LOOP
00000C6C                          2236  
00000C6C                          2237  G
00000C6C  2047                    2238      MOVE.L D7,A0                                    ; grab the address accumulator and then clear it
00000C6E  7E00                    2239      MOVE.L #0,D7
00000C70                          2240  
00000C70  4ED0                    2241      JMP (A0)
00000C72                          2242          
00000C72                          2243  Z
00000C72  207C 00200000           2244      MOVE.L #RAM,A0                                  ; address of RAM
00000C78  D1FC 00100000           2245      ADD.L #$100000,A0
00000C7E                          2246  
00000C7E                          2247      FOR.L D0 = #0 TO #$FFFFC BY #4 DO               ; write
00000C7E  7000                    2248s     MOVE.L  #0,D0
00000C80  6000 0012               2249s     BRA _20000007
00000C84                          2250s _20000006
00000C84  2200                    2251          MOVE.L D0,D1                                ; progress update
00000C86  E089                    2252          LSR.L #8,D1 
00000C88  E089                    2253          LSR.L #8,D1
00000C8A  13C1 00E00001           2254          MOVE.B D1,DISPLAY
00000C90                          2255          
00000C90  2108                    2256          MOVE.L A0,-(A0)
00000C92                          2257      ENDF
00000C92  5880                    2258s     ADD.L   #4,D0
00000C94                          2259s _20000007
00000C94  B0BC 000FFFFC           2260s     CMP.L   #$FFFFC,D0
00000C9A  6FE8                    2261s     BLE _20000006
00000C9C                          2262  
00000C9C  207C 00200000           2263      MOVE.L #RAM,A0                                  ; address of RAM
00000CA2  D1FC 00100000           2264      ADD.L #$100000,A0
00000CA8                          2265  
00000CA8                          2266      FOR.L D0 = #0 TO #$FFFFC BY #4 DO               ; read back and check 
00000CA8  7000                    2267s     MOVE.L  #0,D0
00000CAA  6000 00A8               2268s     BRA _20000009
00000CAE                          2269s _20000008
00000CAE  2200                    2270          MOVE.L D0,D1                                ; progress update
00000CB0  E089                    2271          LSR.L #8,D1
00000CB2  E089                    2272          LSR.L #8,D1
00000CB4  13C1 00E00001           2273          MOVE.B D1,DISPLAY
00000CBA                          2274  
00000CBA  2408                    2275          MOVE.L A0,D2
00000CBC  2220                    2276          MOVE.L -(A0),D1
00000CBE                          2277  
00000CBE                          2278          IF.L D2 <NE> D1 THEN
00000CBE  B481                    2279s     CMP.L   D1,D2
00000CC0  6700 0090               2280s     BEQ _0000000D
00000CC4  43FA 21C5               2281              LEA RAM_ERROR(PC),A1
00000CC8                          2282m             PRINT_STR A1,D1
00000CC8                          2283m LOOP_135
00000CC8  0C11 0000               2284m     CMP.B #NULL,(A1)                                ; 0 -> DONE
00000CCC  6700 0016               2285m     BEQ EXIT_135
00000CD0                          2286mm     PRINT_CHAR (A1)+,D1
00000CD0                          2287mm WAIT_FOR_READY_136                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000CD0                 TRUE     2288mm     IFEQ DEBUG
00000CD0  1239 00C00003           2289mm         MOVE.B DUART_SRA,D1                         ; READ STATUS REGISTER
00000CD6  0801 0002               2290mm         BTST #2,D1                                  ; CHECK FOR SPACE TO SEND
00000CDA  67F4                    2291mm         BEQ WAIT_FOR_READY_136                      ; NO SPACE, CHECK AGAIN
00000CDC  13D9 00C00007           2292mm         MOVE.B (A1)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00000CE2                          2293mm     ENDC
00000CE2                          2294mm 
00000CE2                 FALSE    2295mm     IFNE DEBUG
00000CE2                          2296mm     ENDC
00000CE2                          2297mm 
00000CE2                          2298mm     ENDM
00000CE2  60E4                    2299m     BRA LOOP_135
00000CE4                          2300m EXIT_135
00000CE4                          2301m     ENDM
00000CE4  2208                    2302              MOVE.L A0,D1
00000CE6  5981                    2303              SUB.L #4,D1
00000CE8                          2304m             PRINT_REG D1,D3,D2,D6,A1                ; print out failure address
00000CE8  43FA 21F3               2305m     LEA OX(PC),A1
00000CEC                          2306mm     PRINT_STR A1,D3
00000CEC                          2307mm LOOP_138
00000CEC  0C11 0000               2308mm     CMP.B #NULL,(A1)                                ; 0 -> DONE
00000CF0  6700 0016               2309mm     BEQ EXIT_138
00000CF4                          2310mmm     PRINT_CHAR (A1)+,D3
00000CF4                          2311mmm WAIT_FOR_READY_139                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000CF4                 TRUE     2312mmm     IFEQ DEBUG
00000CF4  1639 00C00003           2313mmm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
00000CFA  0803 0002               2314mmm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
00000CFE  67F4                    2315mmm         BEQ WAIT_FOR_READY_139                      ; NO SPACE, CHECK AGAIN
00000D00  13D9 00C00007           2316mmm         MOVE.B (A1)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00000D06                          2317mmm     ENDC
00000D06                          2318mmm 
00000D06                 FALSE    2319mmm     IFNE DEBUG
00000D06                          2320mmm     ENDC
00000D06                          2321mmm 
00000D06                          2322mmm     ENDM
00000D06  60E4                    2323mm     BRA LOOP_138
00000D08                          2324mm EXIT_138
00000D08                          2325mm     ENDM
00000D08  7C07                    2326m     MOVE.L #7,D6                                    ; LOOP ROUND ALL 8 HEX CHARACTERS OF 4 BITS EACH
00000D0A                          2327m LOOP_137
00000D0A                          2328mm     BIN2HEX D1,D2,A1
00000D0A  43FA 2190               2329mm     LEA BIN2HEX_LUT(PC),A1                          ; LOAD THE LOOKUP TABLE
00000D0E  E999                    2330mm     ROL.L #4,D1                                     ; SHIFT THE TOP 4 BITS DOWN TO BOTTOM OF THE REGISTER THE AND MASK OFF EVERYTHING ELSE
00000D10  1401                    2331mm     MOVE.B D1,D2
00000D12  0282 0000000F           2332mm     ANDI.L #$F,D2
00000D18  1431 2000               2333mm     MOVE.B 0(A1,D2),D2                              ; USE THAT AS AN INDEX INTO THE LUT
00000D1C                          2334mm     ENDM
00000D1C                          2335mm     PRINT_CHAR D2,D3
00000D1C                          2336mm WAIT_FOR_READY_141                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000D1C                 TRUE     2337mm     IFEQ DEBUG
00000D1C  1639 00C00003           2338mm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
00000D22  0803 0002               2339mm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
00000D26  67F4                    2340mm         BEQ WAIT_FOR_READY_141                      ; NO SPACE, CHECK AGAIN
00000D28  13C2 00C00007           2341mm         MOVE.B D2,DUART_TXA                         ; SEND THE NEXT CHARACTER
00000D2E                          2342mm     ENDC
00000D2E                          2343mm 
00000D2E                 FALSE    2344mm     IFNE DEBUG
00000D2E                          2345mm     ENDC
00000D2E                          2346mm 
00000D2E                          2347mm     ENDM
00000D2E  57CE FFDA               2348m     DBEQ D6,LOOP_137
00000D32                          2349m     ENDM
00000D32                          2350m             PRINT_CRLF D3,A1
00000D32  43FA 21A3               2351m     LEA CRLF(PC),A1
00000D36                          2352mm     PRINT_STR A1,D3
00000D36                          2353mm LOOP_143
00000D36  0C11 0000               2354mm     CMP.B #NULL,(A1)                                ; 0 -> DONE
00000D3A  6700 0016               2355mm     BEQ EXIT_143
00000D3E                          2356mmm     PRINT_CHAR (A1)+,D3
00000D3E                          2357mmm WAIT_FOR_READY_144                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000D3E                 TRUE     2358mmm     IFEQ DEBUG
00000D3E  1639 00C00003           2359mmm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
00000D44  0803 0002               2360mmm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
00000D48  67F4                    2361mmm         BEQ WAIT_FOR_READY_144                      ; NO SPACE, CHECK AGAIN
00000D4A  13D9 00C00007           2362mmm         MOVE.B (A1)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00000D50                          2363mmm     ENDC
00000D50                          2364mmm 
00000D50                 FALSE    2365mmm     IFNE DEBUG
00000D50                          2366mmm     ENDC
00000D50                          2367mmm 
00000D50                          2368mmm     ENDM
00000D50  60E4                    2369mm     BRA LOOP_143
00000D52                          2370mm EXIT_143
00000D52                          2371mm     ENDM
00000D52                          2372m     ENDM
00000D52                          2373          ENDI 
00000D52                          2374s _0000000D
00000D52                          2375      ENDF
00000D52  5880                    2376s     ADD.L   #4,D0
00000D54                          2377s _20000009
00000D54  B0BC 000FFFFC           2378s     CMP.L   #$FFFFC,D0
00000D5A  6F00 FF52               2379s     BLE _20000008
00000D5E                          2380  
00000D5E  6000 F5E4               2381      BRA MAIN_LOOP
00000D62                          2382  
00000D62                          2383  L
00000D62  7000                    2384      MOVE.L #0,D0                                    ; D0 will be the length to write               
00000D64  7200                    2385      MOVE.L #0,D1                                    ; D1 will be the address to write 
00000D66                          2386  
00000D66                          2387      FOR D2 = #0 TO #7 DO                            ; read 4 bytes, we'll split into 2 byte address (MS) and 2 byte length (LS)
00000D66  343C 0000               2388s     MOVE.W  #0,D2
00000D6A  6000 0046               2389s     BRA _2000000B
00000D6E                          2390s _2000000A
00000D6E  E989                    2391          LSL.L #4,D1                                 ; make what we have so far more significant
00000D70                          2392m         WAIT_CHAR D3,D4                             ; next character -> D2
00000D70                          2393m WAIT_FOR_READY_145                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000D70                 TRUE     2394m     IFEQ DEBUG
00000D70  1839 00C00003           2395m         MOVE.B DUART_SRA,D4                         ; READ STATUS REGISTER
00000D76  0804 0000               2396m         BTST #0,D4                                  ; CHECK FOR CHARACTER
00000D7A  67F4                    2397m         BEQ WAIT_FOR_READY_145                      ; NOTHING, CHECK AGAIN
00000D7C                          2398m     ENDC
00000D7C                          2399m 
00000D7C                          2400mm     READ_CHAR D3
00000D7C                 TRUE     2401mm     IFEQ DEBUG
00000D7C  1639 00C00007           2402mm         MOVE.B DUART_RXA,D3                         ; GOT A CHARACTER, READ IT
00000D82                          2403mm     ENDC
00000D82                 FALSE    2404mm     IFNE DEBUG
00000D82                          2405mm     ENDC
00000D82                          2406mm 
00000D82  B63C 001B               2407mm     CMP.B #$1B,D3                                   ; CHECK FOR ESCAPE AND GO TO START
00000D86  6700 F37C               2408mm     BEQ START
00000D8A                          2409mm     ENDM
00000D8A                          2410m 
00000D8A                 TRUE     2411m     IFEQ DEBUG
00000D8A                          2412mm         PRINT_CHAR D3,D4                            ; ECHO IT BACK
00000D8A                          2413mm WAIT_FOR_READY_147                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000D8A                 TRUE     2414mm     IFEQ DEBUG
00000D8A  1839 00C00003           2415mm         MOVE.B DUART_SRA,D4                         ; READ STATUS REGISTER
00000D90  0804 0002               2416mm         BTST #2,D4                                  ; CHECK FOR SPACE TO SEND
00000D94  67F4                    2417mm         BEQ WAIT_FOR_READY_147                      ; NO SPACE, CHECK AGAIN
00000D96  13C3 00C00007           2418mm         MOVE.B D3,DUART_TXA                         ; SEND THE NEXT CHARACTER
00000D9C                          2419mm     ENDC
00000D9C                          2420mm 
00000D9C                 FALSE    2421mm     IFNE DEBUG
00000D9C                          2422mm     ENDC
00000D9C                          2423mm 
00000D9C                          2424mm     ENDM
00000D9C                          2425m     ENDC
00000D9C                          2426m     ENDM
00000D9C                          2427m         HEX2BIN D3,D3,A0                            ; convert to binary -> D2
00000D9C  41FA 210E               2428m     LEA HEX2BIN_LUT(PC),A0                          ; LOAD THE LOOKUP TABLE
00000DA0  0403 0030               2429m     SUB.B #'0',D3                                   ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
00000DA4  C6BC 000000FF           2430m     AND.L #$FF,D3                                   ; IGNORE THE TOP 3 BYTES
00000DAA  1630 3000               2431m     MOVE.B 0(A0,D3),D3                              ; USE THAT AS AN INDEX INTO THE LUT   
00000DAE                          2432m     ENDM
00000DAE  8203                    2433          OR.B D3,D1
00000DB0                          2434      ENDF
00000DB0  5242                    2435s     ADD.W   #1,D2
00000DB2                          2436s _2000000B
00000DB2  B47C 0007               2437s     CMP.W   #7,D2
00000DB6  6FB6                    2438s     BLE _2000000A
00000DB8                          2439  
00000DB8  3001                    2440      MOVE.W D1,D0                                    ; extract the LSword for the length 
00000DBA  0480 00000104           2441      SUB.L #START,D0                                 ; remove the vector table from the length
00000DC0  E089                    2442      LSR.L #8,D1                                     ; extract the MSword for the address
00000DC2  E089                    2443      LSR.L #8,D1
00000DC4                          2444  
00000DC4                          2445m     PRINT_CRLF D2,A1
00000DC4  43FA 2111               2446m     LEA CRLF(PC),A1
00000DC8                          2447mm     PRINT_STR A1,D2
00000DC8                          2448mm LOOP_150
00000DC8  0C11 0000               2449mm     CMP.B #NULL,(A1)                                ; 0 -> DONE
00000DCC  6700 0016               2450mm     BEQ EXIT_150
00000DD0                          2451mmm     PRINT_CHAR (A1)+,D2
00000DD0                          2452mmm WAIT_FOR_READY_151                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000DD0                 TRUE     2453mmm     IFEQ DEBUG
00000DD0  1439 00C00003           2454mmm         MOVE.B DUART_SRA,D2                         ; READ STATUS REGISTER
00000DD6  0802 0002               2455mmm         BTST #2,D2                                  ; CHECK FOR SPACE TO SEND
00000DDA  67F4                    2456mmm         BEQ WAIT_FOR_READY_151                      ; NO SPACE, CHECK AGAIN
00000DDC  13D9 00C00007           2457mmm         MOVE.B (A1)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00000DE2                          2458mmm     ENDC
00000DE2                          2459mmm 
00000DE2                 FALSE    2460mmm     IFNE DEBUG
00000DE2                          2461mmm     ENDC
00000DE2                          2462mmm 
00000DE2                          2463mmm     ENDM
00000DE2  60E4                    2464mm     BRA LOOP_150
00000DE4                          2465mm EXIT_150
00000DE4                          2466mm     ENDM
00000DE4                          2467m     ENDM
00000DE4                          2468  
00000DE4  2041                    2469      MOVE.L D1,A0                                    ; target address
00000DE6  2641                    2470      MOVE.L D1,A3                                    ; keep a copy for later
00000DE8                          2471  
00000DE8  2247                    2472      MOVE.L D7,A1                                    ; address accumulator -> address register
00000DEA  D3FC 00000104           2473      ADD.L #START,A1                                 ; skip the vectors
00000DF0  2847                    2474      MOVE.L D7,A4                                    ; keep a clean copy for later
00000DF2  7E00                    2475      MOVE.L #0,D7                                    ; clear the now used address accumulator
00000DF4                          2476  
00000DF4                          2477m     UNPROTECT                                       ; important to only unprotect when we are fully committed (ie, can't escape)
00000DF4  31FC AAAA 2AAA          2478m     MOVE.W #$AAAA,$2AAA                             ; REMOVE WRITE PROTECT
00000DFA  4E71                    2479m     NOP
00000DFC  31FC 5555 1554          2480m     MOVE.W #$5555,$1554
00000E02  4E71                    2481m     NOP
00000E04  31FC 8080 2AAA          2482m     MOVE.W #$8080,$2AAA
00000E0A  4E71                    2483m     NOP
00000E0C  31FC AAAA 2AAA          2484m     MOVE.W #$AAAA,$2AAA
00000E12  4E71                    2485m     NOP
00000E14  31FC 5555 1554          2486m     MOVE.W #$5555,$1554
00000E1A  4E71                    2487m     NOP
00000E1C  31FC 2020 2AAA          2488m     MOVE.W #$2020,$2AAA
00000E22                          2489m     ENDM
00000E22                          2490                      
00000E22                          2491      FOR D7 = #$0 TO #$FFFFFFFF DO                   ; dead timing loop to wait for unprotect
00000E22  3E3C 0000               2492s     MOVE.W  #$0,D7
00000E26  6000 0006               2493s     BRA _2000000D
00000E2A                          2494s _2000000C
00000E2A  4E71                    2495          NOP
00000E2C                          2496      ENDF
00000E2C  5247                    2497s     ADD.W   #1,D7
00000E2E                          2498s _2000000D
00000E2E  BE7C FFFF               2499s     CMP.W   #$FFFFFFFF,D7
00000E32  6FF6                    2500s     BLE _2000000C
00000E34                          2501                  
00000E34  45FA 208D               2502      LEA LOADING(PC),A2
00000E38                          2503m     PRINT_STR A2,D2
00000E38                          2504m LOOP_153
00000E38  0C12 0000               2505m     CMP.B #NULL,(A2)                                ; 0 -> DONE
00000E3C  6700 0016               2506m     BEQ EXIT_153
00000E40                          2507mm     PRINT_CHAR (A2)+,D2
00000E40                          2508mm WAIT_FOR_READY_154                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000E40                 TRUE     2509mm     IFEQ DEBUG
00000E40  1439 00C00003           2510mm         MOVE.B DUART_SRA,D2                         ; READ STATUS REGISTER
00000E46  0802 0002               2511mm         BTST #2,D2                                  ; CHECK FOR SPACE TO SEND
00000E4A  67F4                    2512mm         BEQ WAIT_FOR_READY_154                      ; NO SPACE, CHECK AGAIN
00000E4C  13DA 00C00007           2513mm         MOVE.B (A2)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00000E52                          2514mm     ENDC
00000E52                          2515mm 
00000E52                 FALSE    2516mm     IFNE DEBUG
00000E52                          2517mm     ENDC
00000E52                          2518mm 
00000E52                          2519mm     ENDM
00000E52  60E4                    2520m     BRA LOOP_153
00000E54                          2521m EXIT_153
00000E54                          2522m     ENDM
00000E54                          2523          
00000E54  2409                    2524      MOVE.L A1,D2
00000E56                          2525m     PRINT_REG D2,D3,D4,D5,A2
00000E56  45FA 2085               2526m     LEA OX(PC),A2
00000E5A                          2527mm     PRINT_STR A2,D3
00000E5A                          2528mm LOOP_156
00000E5A  0C12 0000               2529mm     CMP.B #NULL,(A2)                                ; 0 -> DONE
00000E5E  6700 0016               2530mm     BEQ EXIT_156
00000E62                          2531mmm     PRINT_CHAR (A2)+,D3
00000E62                          2532mmm WAIT_FOR_READY_157                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000E62                 TRUE     2533mmm     IFEQ DEBUG
00000E62  1639 00C00003           2534mmm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
00000E68  0803 0002               2535mmm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
00000E6C  67F4                    2536mmm         BEQ WAIT_FOR_READY_157                      ; NO SPACE, CHECK AGAIN
00000E6E  13DA 00C00007           2537mmm         MOVE.B (A2)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00000E74                          2538mmm     ENDC
00000E74                          2539mmm 
00000E74                 FALSE    2540mmm     IFNE DEBUG
00000E74                          2541mmm     ENDC
00000E74                          2542mmm 
00000E74                          2543mmm     ENDM
00000E74  60E4                    2544mm     BRA LOOP_156
00000E76                          2545mm EXIT_156
00000E76                          2546mm     ENDM
00000E76  7A07                    2547m     MOVE.L #7,D5                                    ; LOOP ROUND ALL 8 HEX CHARACTERS OF 4 BITS EACH
00000E78                          2548m LOOP_155
00000E78                          2549mm     BIN2HEX D2,D4,A2
00000E78  45FA 2022               2550mm     LEA BIN2HEX_LUT(PC),A2                          ; LOAD THE LOOKUP TABLE
00000E7C  E99A                    2551mm     ROL.L #4,D2                                     ; SHIFT THE TOP 4 BITS DOWN TO BOTTOM OF THE REGISTER THE AND MASK OFF EVERYTHING ELSE
00000E7E  1802                    2552mm     MOVE.B D2,D4
00000E80  0284 0000000F           2553mm     ANDI.L #$F,D4
00000E86  1832 4000               2554mm     MOVE.B 0(A2,D4),D4                              ; USE THAT AS AN INDEX INTO THE LUT
00000E8A                          2555mm     ENDM
00000E8A                          2556mm     PRINT_CHAR D4,D3
00000E8A                          2557mm WAIT_FOR_READY_159                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000E8A                 TRUE     2558mm     IFEQ DEBUG
00000E8A  1639 00C00003           2559mm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
00000E90  0803 0002               2560mm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
00000E94  67F4                    2561mm         BEQ WAIT_FOR_READY_159                      ; NO SPACE, CHECK AGAIN
00000E96  13C4 00C00007           2562mm         MOVE.B D4,DUART_TXA                         ; SEND THE NEXT CHARACTER
00000E9C                          2563mm     ENDC
00000E9C                          2564mm 
00000E9C                 FALSE    2565mm     IFNE DEBUG
00000E9C                          2566mm     ENDC
00000E9C                          2567mm 
00000E9C                          2568mm     ENDM
00000E9C  57CD FFDA               2569m     DBEQ D5,LOOP_155
00000EA0                          2570m     ENDM
00000EA0                          2571  
00000EA0  45FA 203E               2572      LEA TO(PC),A2
00000EA4                          2573m     PRINT_STR A2,D3
00000EA4                          2574m LOOP_160
00000EA4  0C12 0000               2575m     CMP.B #NULL,(A2)                                ; 0 -> DONE
00000EA8  6700 0016               2576m     BEQ EXIT_160
00000EAC                          2577mm     PRINT_CHAR (A2)+,D3
00000EAC                          2578mm WAIT_FOR_READY_161                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000EAC                 TRUE     2579mm     IFEQ DEBUG
00000EAC  1639 00C00003           2580mm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
00000EB2  0803 0002               2581mm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
00000EB6  67F4                    2582mm         BEQ WAIT_FOR_READY_161                      ; NO SPACE, CHECK AGAIN
00000EB8  13DA 00C00007           2583mm         MOVE.B (A2)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00000EBE                          2584mm     ENDC
00000EBE                          2585mm 
00000EBE                 FALSE    2586mm     IFNE DEBUG
00000EBE                          2587mm     ENDC
00000EBE                          2588mm 
00000EBE                          2589mm     ENDM
00000EBE  60E4                    2590m     BRA LOOP_160
00000EC0                          2591m EXIT_160
00000EC0                          2592m     ENDM
00000EC0                          2593  
00000EC0  2408                    2594      MOVE.L A0,D2
00000EC2                          2595m     PRINT_REG D2,D3,D4,D5,A2
00000EC2  45FA 2019               2596m     LEA OX(PC),A2
00000EC6                          2597mm     PRINT_STR A2,D3
00000EC6                          2598mm LOOP_163
00000EC6  0C12 0000               2599mm     CMP.B #NULL,(A2)                                ; 0 -> DONE
00000ECA  6700 0016               2600mm     BEQ EXIT_163
00000ECE                          2601mmm     PRINT_CHAR (A2)+,D3
00000ECE                          2602mmm WAIT_FOR_READY_164                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000ECE                 TRUE     2603mmm     IFEQ DEBUG
00000ECE  1639 00C00003           2604mmm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
00000ED4  0803 0002               2605mmm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
00000ED8  67F4                    2606mmm         BEQ WAIT_FOR_READY_164                      ; NO SPACE, CHECK AGAIN
00000EDA  13DA 00C00007           2607mmm         MOVE.B (A2)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00000EE0                          2608mmm     ENDC
00000EE0                          2609mmm 
00000EE0                 FALSE    2610mmm     IFNE DEBUG
00000EE0                          2611mmm     ENDC
00000EE0                          2612mmm 
00000EE0                          2613mmm     ENDM
00000EE0  60E4                    2614mm     BRA LOOP_163
00000EE2                          2615mm EXIT_163
00000EE2                          2616mm     ENDM
00000EE2  7A07                    2617m     MOVE.L #7,D5                                    ; LOOP ROUND ALL 8 HEX CHARACTERS OF 4 BITS EACH
00000EE4                          2618m LOOP_162
00000EE4                          2619mm     BIN2HEX D2,D4,A2
00000EE4  45FA 1FB6               2620mm     LEA BIN2HEX_LUT(PC),A2                          ; LOAD THE LOOKUP TABLE
00000EE8  E99A                    2621mm     ROL.L #4,D2                                     ; SHIFT THE TOP 4 BITS DOWN TO BOTTOM OF THE REGISTER THE AND MASK OFF EVERYTHING ELSE
00000EEA  1802                    2622mm     MOVE.B D2,D4
00000EEC  0284 0000000F           2623mm     ANDI.L #$F,D4
00000EF2  1832 4000               2624mm     MOVE.B 0(A2,D4),D4                              ; USE THAT AS AN INDEX INTO THE LUT
00000EF6                          2625mm     ENDM
00000EF6                          2626mm     PRINT_CHAR D4,D3
00000EF6                          2627mm WAIT_FOR_READY_166                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000EF6                 TRUE     2628mm     IFEQ DEBUG
00000EF6  1639 00C00003           2629mm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
00000EFC  0803 0002               2630mm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
00000F00  67F4                    2631mm         BEQ WAIT_FOR_READY_166                      ; NO SPACE, CHECK AGAIN
00000F02  13C4 00C00007           2632mm         MOVE.B D4,DUART_TXA                         ; SEND THE NEXT CHARACTER
00000F08                          2633mm     ENDC
00000F08                          2634mm 
00000F08                 FALSE    2635mm     IFNE DEBUG
00000F08                          2636mm     ENDC
00000F08                          2637mm 
00000F08                          2638mm     ENDM
00000F08  57CD FFDA               2639m     DBEQ D5,LOOP_162
00000F0C                          2640m     ENDM
00000F0C                          2641  
00000F0C  45FA 1FD7               2642      LEA FOR(PC),A2
00000F10                          2643m     PRINT_STR A2,D3
00000F10                          2644m LOOP_167
00000F10  0C12 0000               2645m     CMP.B #NULL,(A2)                                ; 0 -> DONE
00000F14  6700 0016               2646m     BEQ EXIT_167
00000F18                          2647mm     PRINT_CHAR (A2)+,D3
00000F18                          2648mm WAIT_FOR_READY_168                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000F18                 TRUE     2649mm     IFEQ DEBUG
00000F18  1639 00C00003           2650mm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
00000F1E  0803 0002               2651mm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
00000F22  67F4                    2652mm         BEQ WAIT_FOR_READY_168                      ; NO SPACE, CHECK AGAIN
00000F24  13DA 00C00007           2653mm         MOVE.B (A2)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00000F2A                          2654mm     ENDC
00000F2A                          2655mm 
00000F2A                 FALSE    2656mm     IFNE DEBUG
00000F2A                          2657mm     ENDC
00000F2A                          2658mm 
00000F2A                          2659mm     ENDM
00000F2A  60E4                    2660m     BRA LOOP_167
00000F2C                          2661m EXIT_167
00000F2C                          2662m     ENDM
00000F2C                          2663m     PRINT_REG D0,D3,D4,D5,A2
00000F2C  45FA 1FAF               2664m     LEA OX(PC),A2
00000F30                          2665mm     PRINT_STR A2,D3
00000F30                          2666mm LOOP_170
00000F30  0C12 0000               2667mm     CMP.B #NULL,(A2)                                ; 0 -> DONE
00000F34  6700 0016               2668mm     BEQ EXIT_170
00000F38                          2669mmm     PRINT_CHAR (A2)+,D3
00000F38                          2670mmm WAIT_FOR_READY_171                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000F38                 TRUE     2671mmm     IFEQ DEBUG
00000F38  1639 00C00003           2672mmm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
00000F3E  0803 0002               2673mmm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
00000F42  67F4                    2674mmm         BEQ WAIT_FOR_READY_171                      ; NO SPACE, CHECK AGAIN
00000F44  13DA 00C00007           2675mmm         MOVE.B (A2)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00000F4A                          2676mmm     ENDC
00000F4A                          2677mmm 
00000F4A                 FALSE    2678mmm     IFNE DEBUG
00000F4A                          2679mmm     ENDC
00000F4A                          2680mmm 
00000F4A                          2681mmm     ENDM
00000F4A  60E4                    2682mm     BRA LOOP_170
00000F4C                          2683mm EXIT_170
00000F4C                          2684mm     ENDM
00000F4C  7A07                    2685m     MOVE.L #7,D5                                    ; LOOP ROUND ALL 8 HEX CHARACTERS OF 4 BITS EACH
00000F4E                          2686m LOOP_169
00000F4E                          2687mm     BIN2HEX D0,D4,A2
00000F4E  45FA 1F4C               2688mm     LEA BIN2HEX_LUT(PC),A2                          ; LOAD THE LOOKUP TABLE
00000F52  E998                    2689mm     ROL.L #4,D0                                     ; SHIFT THE TOP 4 BITS DOWN TO BOTTOM OF THE REGISTER THE AND MASK OFF EVERYTHING ELSE
00000F54  1800                    2690mm     MOVE.B D0,D4
00000F56  0284 0000000F           2691mm     ANDI.L #$F,D4
00000F5C  1832 4000               2692mm     MOVE.B 0(A2,D4),D4                              ; USE THAT AS AN INDEX INTO THE LUT
00000F60                          2693mm     ENDM
00000F60                          2694mm     PRINT_CHAR D4,D3
00000F60                          2695mm WAIT_FOR_READY_173                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000F60                 TRUE     2696mm     IFEQ DEBUG
00000F60  1639 00C00003           2697mm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
00000F66  0803 0002               2698mm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
00000F6A  67F4                    2699mm         BEQ WAIT_FOR_READY_173                      ; NO SPACE, CHECK AGAIN
00000F6C  13C4 00C00007           2700mm         MOVE.B D4,DUART_TXA                         ; SEND THE NEXT CHARACTER
00000F72                          2701mm     ENDC
00000F72                          2702mm 
00000F72                 FALSE    2703mm     IFNE DEBUG
00000F72                          2704mm     ENDC
00000F72                          2705mm 
00000F72                          2706mm     ENDM
00000F72  57CD FFDA               2707m     DBEQ D5,LOOP_169
00000F76                          2708m     ENDM
00000F76                          2709  
00000F76                          2710m     PRINT_CRLF D3,A2
00000F76  45FA 1F5F               2711m     LEA CRLF(PC),A2
00000F7A                          2712mm     PRINT_STR A2,D3
00000F7A                          2713mm LOOP_175
00000F7A  0C12 0000               2714mm     CMP.B #NULL,(A2)                                ; 0 -> DONE
00000F7E  6700 0016               2715mm     BEQ EXIT_175
00000F82                          2716mmm     PRINT_CHAR (A2)+,D3
00000F82                          2717mmm WAIT_FOR_READY_176                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000F82                 TRUE     2718mmm     IFEQ DEBUG
00000F82  1639 00C00003           2719mmm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
00000F88  0803 0002               2720mmm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
00000F8C  67F4                    2721mmm         BEQ WAIT_FOR_READY_176                      ; NO SPACE, CHECK AGAIN
00000F8E  13DA 00C00007           2722mmm         MOVE.B (A2)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00000F94                          2723mmm     ENDC
00000F94                          2724mmm 
00000F94                 FALSE    2725mmm     IFNE DEBUG
00000F94                          2726mmm     ENDC
00000F94                          2727mmm 
00000F94                          2728mmm     ENDM
00000F94  60E4                    2729mm     BRA LOOP_175
00000F96                          2730mm EXIT_175
00000F96                          2731mm     ENDM
00000F96                          2732m     ENDM
00000F96                          2733  
00000F96                          2734      WHILE D0 <GT> #0 DO
00000F96                          2735s _10000014
00000F96  B07C 0000               2736s     CMP.W   #0,D0
00000F9A  6F00 001C               2737s     BLE _10000015
00000F9E  5580                    2738          SUB.L #2,D0
00000FA0                          2739  
00000FA0  13D1 00E00001           2740          MOVE.B (A1),DISPLAY
00000FA6                          2741m         PROGRAM (A1),(A0),D2
00000FA6  3091                    2742m   MOVE.W (A1),(A0)                                      ; WRITE THE DATA
00000FA8                          2743m 
00000FA8                          2744m WAIT_FOR_COMPLETE_177
00000FA8  3410                    2745m         MOVE.W (A0),D2
00000FAA                          2746m 
00000FAA                          2747m         IF.W D2 <NE> (A1) THEN
00000FAA  B451                    2748ms     CMP.W   (A1),D2
00000FAC  6700 0004               2749ms     BEQ _0000000E
00000FB0  60F6                    2750m             BRA WAIT_FOR_COMPLETE_177
00000FB2                          2751m         ENDI
00000FB2                          2752ms _0000000E
00000FB2                          2753m         ENDM
00000FB2                          2754                  
00000FB2  5488                    2755          ADD.L #2,A0
00000FB4  5489                    2756          ADD.L #2,A1
00000FB6                          2757      ENDW
00000FB6  60DE                    2758s     BRA _10000014
00000FB8                          2759s _10000015
00000FB8                          2760      
00000FB8  41F8 0000               2761      LEA STACK,A0
00000FBC  D1CC                    2762      ADD.L A4,A0
00000FBE  2010                    2763      MOVE.L (A0),D0
00000FC0                          2764      
00000FC0  207C 00000000           2765      MOVE.L #0,A0
00000FC6                          2766m     PROGRAM_VECTOR D0,A0,D2
00000FC6  5488                    2767m     ADD.L #2,A0
00000FC8                          2768mm     PROGRAM D0, (A0), D2                            ; WRITE IT
00000FC8  3080                    2769mm   MOVE.W D0,(A0)                                        ; WRITE THE DATA
00000FCA                          2770mm 
00000FCA                          2771mm WAIT_FOR_COMPLETE_179
00000FCA  3410                    2772mm         MOVE.W (A0),D2
00000FCC                          2773mm 
00000FCC                          2774mm         IF.W D2 <NE> D0 THEN
00000FCC  B440                    2775mms     CMP.W   D0,D2
00000FCE  6700 0004               2776mms     BEQ _0000000F
00000FD2  60F6                    2777mm             BRA WAIT_FOR_COMPLETE_179
00000FD4                          2778mm         ENDI
00000FD4                          2779mms _0000000F
00000FD4                          2780mm         ENDM
00000FD4  E088                    2781m     LSR.L #8,D0
00000FD6  E088                    2782m     LSR.L #8,D0
00000FD8  5588                    2783m     SUB.L #2,A0
00000FDA                          2784mm     PROGRAM D0, (A0), D2
00000FDA  3080                    2785mm   MOVE.W D0,(A0)                                        ; WRITE THE DATA
00000FDC                          2786mm 
00000FDC                          2787mm WAIT_FOR_COMPLETE_180
00000FDC  3410                    2788mm         MOVE.W (A0),D2
00000FDE                          2789mm 
00000FDE                          2790mm         IF.W D2 <NE> D0 THEN
00000FDE  B440                    2791mms     CMP.W   D0,D2
00000FE0  6700 0004               2792mms     BEQ _00000010
00000FE4  60F6                    2793mm             BRA WAIT_FOR_COMPLETE_180
00000FE6                          2794mm         ENDI
00000FE6                          2795mms _00000010
00000FE6                          2796mm         ENDM
00000FE6                          2797m     ENDM
00000FE6                          2798      
00000FE6                          2799      FOR A0 = #RESET TO #START-4 BY #4 DO
00000FE6  307C 0004               2800s     MOVE.W  #RESET,A0
00000FEA  6000 003C               2801s     BRA _2000000F
00000FEE                          2802s _2000000E
00000FEE                          2803  
00000FEE  2248                    2804          MOVE.L A0,A1
00000FF0  D3CC                    2805          ADD.L A4,A1
00000FF2                          2806              
00000FF2  2011                    2807          MOVE.L (A1),D0  
00000FF4  D081                    2808          ADD.L D1,D0
00000FF6  0480 00000104           2809          SUB.L #START,D0
00000FFC                          2810  
00000FFC  2408                    2811          MOVE.L A0,D2
00000FFE                          2812          
00000FFE  2408                    2813          MOVE.L A0,D2
00001000  13C2 00E00001           2814          MOVE.B D2,DISPLAY
00001006                          2815m         PROGRAM_VECTOR D0,A0,D2
00001006  5488                    2816m     ADD.L #2,A0
00001008                          2817mm     PROGRAM D0, (A0), D2                            ; WRITE IT
00001008  3080                    2818mm   MOVE.W D0,(A0)                                        ; WRITE THE DATA
0000100A                          2819mm 
0000100A                          2820mm WAIT_FOR_COMPLETE_182
0000100A  3410                    2821mm         MOVE.W (A0),D2
0000100C                          2822mm 
0000100C                          2823mm         IF.W D2 <NE> D0 THEN
0000100C  B440                    2824mms     CMP.W   D0,D2
0000100E  6700 0004               2825mms     BEQ _00000011
00001012  60F6                    2826mm             BRA WAIT_FOR_COMPLETE_182
00001014                          2827mm         ENDI
00001014                          2828mms _00000011
00001014                          2829mm         ENDM
00001014  E088                    2830m     LSR.L #8,D0
00001016  E088                    2831m     LSR.L #8,D0
00001018  5588                    2832m     SUB.L #2,A0
0000101A                          2833mm     PROGRAM D0, (A0), D2
0000101A  3080                    2834mm   MOVE.W D0,(A0)                                        ; WRITE THE DATA
0000101C                          2835mm 
0000101C                          2836mm WAIT_FOR_COMPLETE_183
0000101C  3410                    2837mm         MOVE.W (A0),D2
0000101E                          2838mm 
0000101E                          2839mm         IF.W D2 <NE> D0 THEN
0000101E  B440                    2840mms     CMP.W   D0,D2
00001020  6700 0004               2841mms     BEQ _00000012
00001024  60F6                    2842mm             BRA WAIT_FOR_COMPLETE_183
00001026                          2843mm         ENDI
00001026                          2844mms _00000012
00001026                          2845mm         ENDM
00001026                          2846m     ENDM
00001026                          2847      ENDF
00001026  5848                    2848s     ADD.W   #4,A0
00001028                          2849s _2000000F
00001028  B0FC 0100               2850s     CMP.W   #START-4,A0
0000102C  6FC0                    2851s     BLE _2000000E
0000102E                          2852                                          
0000102E                          2853m     PROTECT
0000102E  31FC AAAA 2AAA          2854m     MOVE.W #$AAAA,$2AAA                             ; AND WRITE PROTECT
00001034  31FC 5555 1554          2855m     MOVE.W #$5555,$1554
0000103A  31FC A0A0 2AAA          2856m     MOVE.W #$A0A0,$2AAA
00001040                          2857m     ENDM
00001040                          2858  
00001040  6000 F302               2859      BRA MAIN_LOOP
00001044                          2860      
00001044                          2861  P
00001044  7000                    2862      MOVE.L #0,D0                                    ; D0 will be the data to write
00001046                          2863  
00001046                          2864      FOR D1 = #0 TO #3 DO                            ; read 2 bytes
00001046  323C 0000               2865s     MOVE.W  #0,D1
0000104A  6000 0046               2866s     BRA _20000011
0000104E                          2867s _20000010
0000104E  E988                    2868          LSL.L #4,D0                                 ; make what we have so far more significant
00001050                          2869m         WAIT_CHAR D2,D3                             ; next character -> D2
00001050                          2870m WAIT_FOR_READY_185                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00001050                 TRUE     2871m     IFEQ DEBUG
00001050  1639 00C00003           2872m         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
00001056  0803 0000               2873m         BTST #0,D3                                  ; CHECK FOR CHARACTER
0000105A  67F4                    2874m         BEQ WAIT_FOR_READY_185                      ; NOTHING, CHECK AGAIN
0000105C                          2875m     ENDC
0000105C                          2876m 
0000105C                          2877mm     READ_CHAR D2
0000105C                 TRUE     2878mm     IFEQ DEBUG
0000105C  1439 00C00007           2879mm         MOVE.B DUART_RXA,D2                         ; GOT A CHARACTER, READ IT
00001062                          2880mm     ENDC
00001062                 FALSE    2881mm     IFNE DEBUG
00001062                          2882mm     ENDC
00001062                          2883mm 
00001062  B43C 001B               2884mm     CMP.B #$1B,D2                                   ; CHECK FOR ESCAPE AND GO TO START
00001066  6700 F09C               2885mm     BEQ START
0000106A                          2886mm     ENDM
0000106A                          2887m 
0000106A                 TRUE     2888m     IFEQ DEBUG
0000106A                          2889mm         PRINT_CHAR D2,D3                            ; ECHO IT BACK
0000106A                          2890mm WAIT_FOR_READY_187                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
0000106A                 TRUE     2891mm     IFEQ DEBUG
0000106A  1639 00C00003           2892mm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
00001070  0803 0002               2893mm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
00001074  67F4                    2894mm         BEQ WAIT_FOR_READY_187                      ; NO SPACE, CHECK AGAIN
00001076  13C2 00C00007           2895mm         MOVE.B D2,DUART_TXA                         ; SEND THE NEXT CHARACTER
0000107C                          2896mm     ENDC
0000107C                          2897mm 
0000107C                 FALSE    2898mm     IFNE DEBUG
0000107C                          2899mm     ENDC
0000107C                          2900mm 
0000107C                          2901mm     ENDM
0000107C                          2902m     ENDC
0000107C                          2903m     ENDM
0000107C                          2904m         HEX2BIN D2,D2,A0                            ; convert to binary -> D2
0000107C  41FA 1E2E               2905m     LEA HEX2BIN_LUT(PC),A0                          ; LOAD THE LOOKUP TABLE
00001080  0402 0030               2906m     SUB.B #'0',D2                                   ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
00001084  C4BC 000000FF           2907m     AND.L #$FF,D2                                   ; IGNORE THE TOP 3 BYTES
0000108A  1430 2000               2908m     MOVE.B 0(A0,D2),D2                              ; USE THAT AS AN INDEX INTO THE LUT   
0000108E                          2909m     ENDM
0000108E  8002                    2910          OR.B D2,D0
00001090                          2911      ENDF
00001090  5241                    2912s     ADD.W   #1,D1
00001092                          2913s _20000011
00001092  B27C 0003               2914s     CMP.W   #3,D1
00001096  6FB6                    2915s     BLE _20000010
00001098                          2916  
00001098                          2917m     PRINT_CRLF D2,A1
00001098  43FA 1E3D               2918m     LEA CRLF(PC),A1
0000109C                          2919mm     PRINT_STR A1,D2
0000109C                          2920mm LOOP_190
0000109C  0C11 0000               2921mm     CMP.B #NULL,(A1)                                ; 0 -> DONE
000010A0  6700 0016               2922mm     BEQ EXIT_190
000010A4                          2923mmm     PRINT_CHAR (A1)+,D2
000010A4                          2924mmm WAIT_FOR_READY_191                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
000010A4                 TRUE     2925mmm     IFEQ DEBUG
000010A4  1439 00C00003           2926mmm         MOVE.B DUART_SRA,D2                         ; READ STATUS REGISTER
000010AA  0802 0002               2927mmm         BTST #2,D2                                  ; CHECK FOR SPACE TO SEND
000010AE  67F4                    2928mmm         BEQ WAIT_FOR_READY_191                      ; NO SPACE, CHECK AGAIN
000010B0  13D9 00C00007           2929mmm         MOVE.B (A1)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
000010B6                          2930mmm     ENDC
000010B6                          2931mmm 
000010B6                 FALSE    2932mmm     IFNE DEBUG
000010B6                          2933mmm     ENDC
000010B6                          2934mmm 
000010B6                          2935mmm     ENDM
000010B6  60E4                    2936mm     BRA LOOP_190
000010B8                          2937mm EXIT_190
000010B8                          2938mm     ENDM
000010B8                          2939m     ENDM
000010B8                          2940  
000010B8  2047                    2941      MOVE.L D7,A0                                    ; address accumulator -> target address register
000010BA  7E00                    2942      MOVE.L #0,D7                                    ; clear the now used address accumulator
000010BC                          2943  
000010BC                          2944m     UNPROTECT                                       ; important to only unprotect when we are fully committed (ie, can't escape)
000010BC  31FC AAAA 2AAA          2945m     MOVE.W #$AAAA,$2AAA                             ; REMOVE WRITE PROTECT
000010C2  4E71                    2946m     NOP
000010C4  31FC 5555 1554          2947m     MOVE.W #$5555,$1554
000010CA  4E71                    2948m     NOP
000010CC  31FC 8080 2AAA          2949m     MOVE.W #$8080,$2AAA
000010D2  4E71                    2950m     NOP
000010D4  31FC AAAA 2AAA          2951m     MOVE.W #$AAAA,$2AAA
000010DA  4E71                    2952m     NOP
000010DC  31FC 5555 1554          2953m     MOVE.W #$5555,$1554
000010E2  4E71                    2954m     NOP
000010E4  31FC 2020 2AAA          2955m     MOVE.W #$2020,$2AAA
000010EA                          2956m     ENDM
000010EA                          2957                              
000010EA                          2958      FOR D7 = #$0 TO #$FFFFFFFF DO                   ; dead timing loop to wait for unprotect
000010EA  3E3C 0000               2959s     MOVE.W  #$0,D7
000010EE  6000 0006               2960s     BRA _20000013
000010F2                          2961s _20000012
000010F2  4E71                    2962          NOP
000010F4                          2963      ENDF
000010F4  5247                    2964s     ADD.W   #1,D7
000010F6                          2965s _20000013
000010F6  BE7C FFFF               2966s     CMP.W   #$FFFFFFFF,D7
000010FA  6FF6                    2967s     BLE _20000012
000010FC                          2968               
000010FC  45FA 1DC5               2969      LEA LOADING(PC),A2                              ; the prints seem to be important for timing to unprotect the EEPROM
00001100                          2970m     PRINT_STR A2,D2
00001100                          2971m LOOP_193
00001100  0C12 0000               2972m     CMP.B #NULL,(A2)                                ; 0 -> DONE
00001104  6700 0016               2973m     BEQ EXIT_193
00001108                          2974mm     PRINT_CHAR (A2)+,D2
00001108                          2975mm WAIT_FOR_READY_194                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00001108                 TRUE     2976mm     IFEQ DEBUG
00001108  1439 00C00003           2977mm         MOVE.B DUART_SRA,D2                         ; READ STATUS REGISTER
0000110E  0802 0002               2978mm         BTST #2,D2                                  ; CHECK FOR SPACE TO SEND
00001112  67F4                    2979mm         BEQ WAIT_FOR_READY_194                      ; NO SPACE, CHECK AGAIN
00001114  13DA 00C00007           2980mm         MOVE.B (A2)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
0000111A                          2981mm     ENDC
0000111A                          2982mm 
0000111A                 FALSE    2983mm     IFNE DEBUG
0000111A                          2984mm     ENDC
0000111A                          2985mm 
0000111A                          2986mm     ENDM
0000111A  60E4                    2987m     BRA LOOP_193
0000111C                          2988m EXIT_193
0000111C                          2989m     ENDM
0000111C                          2990  
0000111C                          2991m     PRINT_REG D0,D3,D4,D5,A2
0000111C  45FA 1DBF               2992m     LEA OX(PC),A2
00001120                          2993mm     PRINT_STR A2,D3
00001120                          2994mm LOOP_196
00001120  0C12 0000               2995mm     CMP.B #NULL,(A2)                                ; 0 -> DONE
00001124  6700 0016               2996mm     BEQ EXIT_196
00001128                          2997mmm     PRINT_CHAR (A2)+,D3
00001128                          2998mmm WAIT_FOR_READY_197                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00001128                 TRUE     2999mmm     IFEQ DEBUG
00001128  1639 00C00003           3000mmm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
0000112E  0803 0002               3001mmm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
00001132  67F4                    3002mmm         BEQ WAIT_FOR_READY_197                      ; NO SPACE, CHECK AGAIN
00001134  13DA 00C00007           3003mmm         MOVE.B (A2)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
0000113A                          3004mmm     ENDC
0000113A                          3005mmm 
0000113A                 FALSE    3006mmm     IFNE DEBUG
0000113A                          3007mmm     ENDC
0000113A                          3008mmm 
0000113A                          3009mmm     ENDM
0000113A  60E4                    3010mm     BRA LOOP_196
0000113C                          3011mm EXIT_196
0000113C                          3012mm     ENDM
0000113C  7A07                    3013m     MOVE.L #7,D5                                    ; LOOP ROUND ALL 8 HEX CHARACTERS OF 4 BITS EACH
0000113E                          3014m LOOP_195
0000113E                          3015mm     BIN2HEX D0,D4,A2
0000113E  45FA 1D5C               3016mm     LEA BIN2HEX_LUT(PC),A2                          ; LOAD THE LOOKUP TABLE
00001142  E998                    3017mm     ROL.L #4,D0                                     ; SHIFT THE TOP 4 BITS DOWN TO BOTTOM OF THE REGISTER THE AND MASK OFF EVERYTHING ELSE
00001144  1800                    3018mm     MOVE.B D0,D4
00001146  0284 0000000F           3019mm     ANDI.L #$F,D4
0000114C  1832 4000               3020mm     MOVE.B 0(A2,D4),D4                              ; USE THAT AS AN INDEX INTO THE LUT
00001150                          3021mm     ENDM
00001150                          3022mm     PRINT_CHAR D4,D3
00001150                          3023mm WAIT_FOR_READY_199                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00001150                 TRUE     3024mm     IFEQ DEBUG
00001150  1639 00C00003           3025mm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
00001156  0803 0002               3026mm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
0000115A  67F4                    3027mm         BEQ WAIT_FOR_READY_199                      ; NO SPACE, CHECK AGAIN
0000115C  13C4 00C00007           3028mm         MOVE.B D4,DUART_TXA                         ; SEND THE NEXT CHARACTER
00001162                          3029mm     ENDC
00001162                          3030mm 
00001162                 FALSE    3031mm     IFNE DEBUG
00001162                          3032mm     ENDC
00001162                          3033mm 
00001162                          3034mm     ENDM
00001162  57CD FFDA               3035m     DBEQ D5,LOOP_195
00001166                          3036m     ENDM
00001166                          3037  
00001166  45FA 1D78               3038      LEA TO(PC),A2
0000116A                          3039m     PRINT_STR A2,D3
0000116A                          3040m LOOP_200
0000116A  0C12 0000               3041m     CMP.B #NULL,(A2)                                ; 0 -> DONE
0000116E  6700 0016               3042m     BEQ EXIT_200
00001172                          3043mm     PRINT_CHAR (A2)+,D3
00001172                          3044mm WAIT_FOR_READY_201                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00001172                 TRUE     3045mm     IFEQ DEBUG
00001172  1639 00C00003           3046mm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
00001178  0803 0002               3047mm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
0000117C  67F4                    3048mm         BEQ WAIT_FOR_READY_201                      ; NO SPACE, CHECK AGAIN
0000117E  13DA 00C00007           3049mm         MOVE.B (A2)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00001184                          3050mm     ENDC
00001184                          3051mm 
00001184                 FALSE    3052mm     IFNE DEBUG
00001184                          3053mm     ENDC
00001184                          3054mm 
00001184                          3055mm     ENDM
00001184  60E4                    3056m     BRA LOOP_200
00001186                          3057m EXIT_200
00001186                          3058m     ENDM
00001186                          3059  
00001186  2408                    3060      MOVE.L A0,D2
00001188                          3061m     PRINT_REG D2,D3,D4,D5,A2
00001188  45FA 1D53               3062m     LEA OX(PC),A2
0000118C                          3063mm     PRINT_STR A2,D3
0000118C                          3064mm LOOP_203
0000118C  0C12 0000               3065mm     CMP.B #NULL,(A2)                                ; 0 -> DONE
00001190  6700 0016               3066mm     BEQ EXIT_203
00001194                          3067mmm     PRINT_CHAR (A2)+,D3
00001194                          3068mmm WAIT_FOR_READY_204                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00001194                 TRUE     3069mmm     IFEQ DEBUG
00001194  1639 00C00003           3070mmm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
0000119A  0803 0002               3071mmm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
0000119E  67F4                    3072mmm         BEQ WAIT_FOR_READY_204                      ; NO SPACE, CHECK AGAIN
000011A0  13DA 00C00007           3073mmm         MOVE.B (A2)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
000011A6                          3074mmm     ENDC
000011A6                          3075mmm 
000011A6                 FALSE    3076mmm     IFNE DEBUG
000011A6                          3077mmm     ENDC
000011A6                          3078mmm 
000011A6                          3079mmm     ENDM
000011A6  60E4                    3080mm     BRA LOOP_203
000011A8                          3081mm EXIT_203
000011A8                          3082mm     ENDM
000011A8  7A07                    3083m     MOVE.L #7,D5                                    ; LOOP ROUND ALL 8 HEX CHARACTERS OF 4 BITS EACH
000011AA                          3084m LOOP_202
000011AA                          3085mm     BIN2HEX D2,D4,A2
000011AA  45FA 1CF0               3086mm     LEA BIN2HEX_LUT(PC),A2                          ; LOAD THE LOOKUP TABLE
000011AE  E99A                    3087mm     ROL.L #4,D2                                     ; SHIFT THE TOP 4 BITS DOWN TO BOTTOM OF THE REGISTER THE AND MASK OFF EVERYTHING ELSE
000011B0  1802                    3088mm     MOVE.B D2,D4
000011B2  0284 0000000F           3089mm     ANDI.L #$F,D4
000011B8  1832 4000               3090mm     MOVE.B 0(A2,D4),D4                              ; USE THAT AS AN INDEX INTO THE LUT
000011BC                          3091mm     ENDM
000011BC                          3092mm     PRINT_CHAR D4,D3
000011BC                          3093mm WAIT_FOR_READY_206                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
000011BC                 TRUE     3094mm     IFEQ DEBUG
000011BC  1639 00C00003           3095mm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
000011C2  0803 0002               3096mm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
000011C6  67F4                    3097mm         BEQ WAIT_FOR_READY_206                      ; NO SPACE, CHECK AGAIN
000011C8  13C4 00C00007           3098mm         MOVE.B D4,DUART_TXA                         ; SEND THE NEXT CHARACTER
000011CE                          3099mm     ENDC
000011CE                          3100mm 
000011CE                 FALSE    3101mm     IFNE DEBUG
000011CE                          3102mm     ENDC
000011CE                          3103mm 
000011CE                          3104mm     ENDM
000011CE  57CD FFDA               3105m     DBEQ D5,LOOP_202
000011D2                          3106m     ENDM
000011D2                          3107  
000011D2                          3108m     PRINT_CRLF D3,A2
000011D2  45FA 1D03               3109m     LEA CRLF(PC),A2
000011D6                          3110mm     PRINT_STR A2,D3
000011D6                          3111mm LOOP_208
000011D6  0C12 0000               3112mm     CMP.B #NULL,(A2)                                ; 0 -> DONE
000011DA  6700 0016               3113mm     BEQ EXIT_208
000011DE                          3114mmm     PRINT_CHAR (A2)+,D3
000011DE                          3115mmm WAIT_FOR_READY_209                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
000011DE                 TRUE     3116mmm     IFEQ DEBUG
000011DE  1639 00C00003           3117mmm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
000011E4  0803 0002               3118mmm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
000011E8  67F4                    3119mmm         BEQ WAIT_FOR_READY_209                      ; NO SPACE, CHECK AGAIN
000011EA  13DA 00C00007           3120mmm         MOVE.B (A2)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
000011F0                          3121mmm     ENDC
000011F0                          3122mmm 
000011F0                 FALSE    3123mmm     IFNE DEBUG
000011F0                          3124mmm     ENDC
000011F0                          3125mmm 
000011F0                          3126mmm     ENDM
000011F0  60E4                    3127mm     BRA LOOP_208
000011F2                          3128mm EXIT_208
000011F2                          3129mm     ENDM
000011F2                          3130m     ENDM
000011F2                          3131  
000011F2                          3132m     PROGRAM D0,(A0),D2
000011F2  3080                    3133m   MOVE.W D0,(A0)                                        ; WRITE THE DATA
000011F4                          3134m 
000011F4                          3135m WAIT_FOR_COMPLETE_210
000011F4  3410                    3136m         MOVE.W (A0),D2
000011F6                          3137m 
000011F6                          3138m         IF.W D2 <NE> D0 THEN
000011F6  B440                    3139ms     CMP.W   D0,D2
000011F8  6700 0004               3140ms     BEQ _00000013
000011FC  60F6                    3141m             BRA WAIT_FOR_COMPLETE_210
000011FE                          3142m         ENDI
000011FE                          3143ms _00000013
000011FE                          3144m         ENDM
000011FE                          3145  
000011FE                          3146m     PROTECT
000011FE  31FC AAAA 2AAA          3147m     MOVE.W #$AAAA,$2AAA                             ; AND WRITE PROTECT
00001204  31FC 5555 1554          3148m     MOVE.W #$5555,$1554
0000120A  31FC A0A0 2AAA          3149m     MOVE.W #$A0A0,$2AAA
00001210                          3150m     ENDM
00001210                          3151      
00001210  6000 F132               3152      BRA MAIN_LOOP
00001214                          3153      
00001214                          3154  X
00001214  45FA 1CDA               3155      LEA STATUS_REGISTER(PC),A2
00001218                          3156m     PRINT_STR A2,D3
00001218                          3157m LOOP_212
00001218  0C12 0000               3158m     CMP.B #NULL,(A2)                                ; 0 -> DONE
0000121C  6700 0016               3159m     BEQ EXIT_212
00001220                          3160mm     PRINT_CHAR (A2)+,D3
00001220                          3161mm WAIT_FOR_READY_213                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00001220                 TRUE     3162mm     IFEQ DEBUG
00001220  1639 00C00003           3163mm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
00001226  0803 0002               3164mm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
0000122A  67F4                    3165mm         BEQ WAIT_FOR_READY_213                      ; NO SPACE, CHECK AGAIN
0000122C  13DA 00C00007           3166mm         MOVE.B (A2)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00001232                          3167mm     ENDC
00001232                          3168mm 
00001232                 FALSE    3169mm     IFNE DEBUG
00001232                          3170mm     ENDC
00001232                          3171mm 
00001232                          3172mm     ENDM
00001232  60E4                    3173m     BRA LOOP_212
00001234                          3174m EXIT_212
00001234                          3175m     ENDM
00001234                          3176  
00001234  40C0                    3177      MOVE SR,D0
00001236                          3178m     PRINT_REG D0,D3,D4,D5,A2
00001236  45FA 1CA5               3179m     LEA OX(PC),A2
0000123A                          3180mm     PRINT_STR A2,D3
0000123A                          3181mm LOOP_215
0000123A  0C12 0000               3182mm     CMP.B #NULL,(A2)                                ; 0 -> DONE
0000123E  6700 0016               3183mm     BEQ EXIT_215
00001242                          3184mmm     PRINT_CHAR (A2)+,D3
00001242                          3185mmm WAIT_FOR_READY_216                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00001242                 TRUE     3186mmm     IFEQ DEBUG
00001242  1639 00C00003           3187mmm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
00001248  0803 0002               3188mmm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
0000124C  67F4                    3189mmm         BEQ WAIT_FOR_READY_216                      ; NO SPACE, CHECK AGAIN
0000124E  13DA 00C00007           3190mmm         MOVE.B (A2)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00001254                          3191mmm     ENDC
00001254                          3192mmm 
00001254                 FALSE    3193mmm     IFNE DEBUG
00001254                          3194mmm     ENDC
00001254                          3195mmm 
00001254                          3196mmm     ENDM
00001254  60E4                    3197mm     BRA LOOP_215
00001256                          3198mm EXIT_215
00001256                          3199mm     ENDM
00001256  7A07                    3200m     MOVE.L #7,D5                                    ; LOOP ROUND ALL 8 HEX CHARACTERS OF 4 BITS EACH
00001258                          3201m LOOP_214
00001258                          3202mm     BIN2HEX D0,D4,A2
00001258  45FA 1C42               3203mm     LEA BIN2HEX_LUT(PC),A2                          ; LOAD THE LOOKUP TABLE
0000125C  E998                    3204mm     ROL.L #4,D0                                     ; SHIFT THE TOP 4 BITS DOWN TO BOTTOM OF THE REGISTER THE AND MASK OFF EVERYTHING ELSE
0000125E  1800                    3205mm     MOVE.B D0,D4
00001260  0284 0000000F           3206mm     ANDI.L #$F,D4
00001266  1832 4000               3207mm     MOVE.B 0(A2,D4),D4                              ; USE THAT AS AN INDEX INTO THE LUT
0000126A                          3208mm     ENDM
0000126A                          3209mm     PRINT_CHAR D4,D3
0000126A                          3210mm WAIT_FOR_READY_218                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
0000126A                 TRUE     3211mm     IFEQ DEBUG
0000126A  1639 00C00003           3212mm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
00001270  0803 0002               3213mm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
00001274  67F4                    3214mm         BEQ WAIT_FOR_READY_218                      ; NO SPACE, CHECK AGAIN
00001276  13C4 00C00007           3215mm         MOVE.B D4,DUART_TXA                         ; SEND THE NEXT CHARACTER
0000127C                          3216mm     ENDC
0000127C                          3217mm 
0000127C                 FALSE    3218mm     IFNE DEBUG
0000127C                          3219mm     ENDC
0000127C                          3220mm 
0000127C                          3221mm     ENDM
0000127C  57CD FFDA               3222m     DBEQ D5,LOOP_214
00001280                          3223m     ENDM
00001280                          3224m     PRINT_CRLF D3,A2
00001280  45FA 1C55               3225m     LEA CRLF(PC),A2
00001284                          3226mm     PRINT_STR A2,D3
00001284                          3227mm LOOP_220
00001284  0C12 0000               3228mm     CMP.B #NULL,(A2)                                ; 0 -> DONE
00001288  6700 0016               3229mm     BEQ EXIT_220
0000128C                          3230mmm     PRINT_CHAR (A2)+,D3
0000128C                          3231mmm WAIT_FOR_READY_221                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
0000128C                 TRUE     3232mmm     IFEQ DEBUG
0000128C  1639 00C00003           3233mmm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
00001292  0803 0002               3234mmm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
00001296  67F4                    3235mmm         BEQ WAIT_FOR_READY_221                      ; NO SPACE, CHECK AGAIN
00001298  13DA 00C00007           3236mmm         MOVE.B (A2)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
0000129E                          3237mmm     ENDC
0000129E                          3238mmm 
0000129E                 FALSE    3239mmm     IFNE DEBUG
0000129E                          3240mmm     ENDC
0000129E                          3241mmm 
0000129E                          3242mmm     ENDM
0000129E  60E4                    3243mm     BRA LOOP_220
000012A0                          3244mm EXIT_220
000012A0                          3245mm     ENDM
000012A0                          3246m     ENDM
000012A0                          3247  
000012A0  45FA 1C49               3248      LEA STACK_POINTER(PC),A2
000012A4                          3249m     PRINT_STR A2,D3
000012A4                          3250m LOOP_222
000012A4  0C12 0000               3251m     CMP.B #NULL,(A2)                                ; 0 -> DONE
000012A8  6700 0016               3252m     BEQ EXIT_222
000012AC                          3253mm     PRINT_CHAR (A2)+,D3
000012AC                          3254mm WAIT_FOR_READY_223                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
000012AC                 TRUE     3255mm     IFEQ DEBUG
000012AC  1639 00C00003           3256mm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
000012B2  0803 0002               3257mm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
000012B6  67F4                    3258mm         BEQ WAIT_FOR_READY_223                      ; NO SPACE, CHECK AGAIN
000012B8  13DA 00C00007           3259mm         MOVE.B (A2)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
000012BE                          3260mm     ENDC
000012BE                          3261mm 
000012BE                 FALSE    3262mm     IFNE DEBUG
000012BE                          3263mm     ENDC
000012BE                          3264mm 
000012BE                          3265mm     ENDM
000012BE  60E4                    3266m     BRA LOOP_222
000012C0                          3267m EXIT_222
000012C0                          3268m     ENDM
000012C0                          3269  
000012C0  200F                    3270      MOVE.L SP,D0
000012C2                          3271m     PRINT_REG D0,D3,D4,D5,A2
000012C2  45FA 1C19               3272m     LEA OX(PC),A2
000012C6                          3273mm     PRINT_STR A2,D3
000012C6                          3274mm LOOP_225
000012C6  0C12 0000               3275mm     CMP.B #NULL,(A2)                                ; 0 -> DONE
000012CA  6700 0016               3276mm     BEQ EXIT_225
000012CE                          3277mmm     PRINT_CHAR (A2)+,D3
000012CE                          3278mmm WAIT_FOR_READY_226                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
000012CE                 TRUE     3279mmm     IFEQ DEBUG
000012CE  1639 00C00003           3280mmm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
000012D4  0803 0002               3281mmm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
000012D8  67F4                    3282mmm         BEQ WAIT_FOR_READY_226                      ; NO SPACE, CHECK AGAIN
000012DA  13DA 00C00007           3283mmm         MOVE.B (A2)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
000012E0                          3284mmm     ENDC
000012E0                          3285mmm 
000012E0                 FALSE    3286mmm     IFNE DEBUG
000012E0                          3287mmm     ENDC
000012E0                          3288mmm 
000012E0                          3289mmm     ENDM
000012E0  60E4                    3290mm     BRA LOOP_225
000012E2                          3291mm EXIT_225
000012E2                          3292mm     ENDM
000012E2  7A07                    3293m     MOVE.L #7,D5                                    ; LOOP ROUND ALL 8 HEX CHARACTERS OF 4 BITS EACH
000012E4                          3294m LOOP_224
000012E4                          3295mm     BIN2HEX D0,D4,A2
000012E4  45FA 1BB6               3296mm     LEA BIN2HEX_LUT(PC),A2                          ; LOAD THE LOOKUP TABLE
000012E8  E998                    3297mm     ROL.L #4,D0                                     ; SHIFT THE TOP 4 BITS DOWN TO BOTTOM OF THE REGISTER THE AND MASK OFF EVERYTHING ELSE
000012EA  1800                    3298mm     MOVE.B D0,D4
000012EC  0284 0000000F           3299mm     ANDI.L #$F,D4
000012F2  1832 4000               3300mm     MOVE.B 0(A2,D4),D4                              ; USE THAT AS AN INDEX INTO THE LUT
000012F6                          3301mm     ENDM
000012F6                          3302mm     PRINT_CHAR D4,D3
000012F6                          3303mm WAIT_FOR_READY_228                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
000012F6                 TRUE     3304mm     IFEQ DEBUG
000012F6  1639 00C00003           3305mm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
000012FC  0803 0002               3306mm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
00001300  67F4                    3307mm         BEQ WAIT_FOR_READY_228                      ; NO SPACE, CHECK AGAIN
00001302  13C4 00C00007           3308mm         MOVE.B D4,DUART_TXA                         ; SEND THE NEXT CHARACTER
00001308                          3309mm     ENDC
00001308                          3310mm 
00001308                 FALSE    3311mm     IFNE DEBUG
00001308                          3312mm     ENDC
00001308                          3313mm 
00001308                          3314mm     ENDM
00001308  57CD FFDA               3315m     DBEQ D5,LOOP_224
0000130C                          3316m     ENDM
0000130C                          3317m     PRINT_CRLF D3,A2
0000130C  45FA 1BC9               3318m     LEA CRLF(PC),A2
00001310                          3319mm     PRINT_STR A2,D3
00001310                          3320mm LOOP_230
00001310  0C12 0000               3321mm     CMP.B #NULL,(A2)                                ; 0 -> DONE
00001314  6700 0016               3322mm     BEQ EXIT_230
00001318                          3323mmm     PRINT_CHAR (A2)+,D3
00001318                          3324mmm WAIT_FOR_READY_231                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00001318                 TRUE     3325mmm     IFEQ DEBUG
00001318  1639 00C00003           3326mmm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
0000131E  0803 0002               3327mmm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
00001322  67F4                    3328mmm         BEQ WAIT_FOR_READY_231                      ; NO SPACE, CHECK AGAIN
00001324  13DA 00C00007           3329mmm         MOVE.B (A2)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
0000132A                          3330mmm     ENDC
0000132A                          3331mmm 
0000132A                 FALSE    3332mmm     IFNE DEBUG
0000132A                          3333mmm     ENDC
0000132A                          3334mmm 
0000132A                          3335mmm     ENDM
0000132A  60E4                    3336mm     BRA LOOP_230
0000132C                          3337mm EXIT_230
0000132C                          3338mm     ENDM
0000132C                          3339m     ENDM
0000132C                          3340  
0000132C  6000 F016               3341      BRA MAIN_LOOP
00001330                          3342          
00001330                          3343  EI
00001330  13FC 0008 00C0000B      3344      MOVE.B #8,DUART_IMR
00001338  027C F8FF               3345      AND.W #$F8FF,SR
0000133C  6000 F006               3346      BRA MAIN_LOOP
00001340                          3347      
00001340                          3348  DI
00001340  13FC 0000 00C0000B      3349      MOVE.B #0,DUART_IMR
00001348  007C 0700               3350      OR.W #$0700,SR
0000134C  6000 EFF6               3351      BRA MAIN_LOOP
00001350                          3352          
00001350                          3353  HASH
00001350                          3354m     PROTECT
00001350  31FC AAAA 2AAA          3355m     MOVE.W #$AAAA,$2AAA                             ; AND WRITE PROTECT
00001356  31FC 5555 1554          3356m     MOVE.W #$5555,$1554
0000135C  31FC A0A0 2AAA          3357m     MOVE.W #$A0A0,$2AAA
00001362                          3358m     ENDM
00001362  6000 EFE0               3359      BRA MAIN_LOOP
00001366                          3360  
00001366                          3361  I
00001366  13FC 0038 00A00019      3362      MOVE.B #(MC68230_PORT_C_READ | MC68230_PORT_C_WRITE | MC68230_PORT_C_CS), MC68230_PORT_C_DATA
0000136E                          3363      
0000136E                          3364m     WRITE_8 #IDE_DRIVESEL_MASTER, #IDE_DRIVESEL_REGISTER, D0
0000136E  13FC 00FF 00A00007      3365m     MOVE.B #MC68230_PORT_DIRECTION_WRITE, MC68230_PORT_B_DIRECTION
00001376  103C 0030               3366m     MOVE.B #(MC68230_PORT_C_READ | MC68230_PORT_C_WRITE), D0
0000137A  0000 0006               3367m     ORI.B #IDE_DRIVESEL_REGISTER, D0
0000137E  13C0 00A00019           3368m     MOVE.B D0, MC68230_PORT_C_DATA
00001384  0200 00EF               3369m     ANDI.B #~MC68230_PORT_C_WRITE, D0
00001388  13FC 00E0 00A00013      3370m     MOVE.B #IDE_DRIVESEL_MASTER, MC68230_PORT_B_DATA
00001390  13C0 00A00019           3371m     MOVE.B D0, MC68230_PORT_C_DATA
00001396  0000 0010               3372m     ORI.B #MC68230_PORT_C_WRITE, D0
0000139A  13C0 00A00019           3373m     MOVE.B D0, MC68230_PORT_C_DATA
000013A0  13FC 0038 00A00019      3374m     MOVE.B #(MC68230_PORT_C_READ | MC68230_PORT_C_WRITE | MC68230_PORT_C_CS), MC68230_PORT_C_DATA
000013A8                          3375m     ENDM
000013A8                          3376m     WAIT_DRIVE_READY D0, D1
000013A8                          3377m LOOP_234
000013A8                          3378mm     READ_IDE_STATUS D0, D1
000013A8                          3379mmm     READ_8 #IDE_STATUS_REGISTER, D0, D1
000013A8  13FC 0000 00A00007      3380mmm     MOVE.B #MC68230_PORT_DIRECTION_READ, MC68230_PORT_B_DIRECTION
000013B0  123C 0030               3381mmm     MOVE.B #(MC68230_PORT_C_READ | MC68230_PORT_C_WRITE), D1
000013B4  0001 0007               3382mmm     ORI.B #IDE_STATUS_REGISTER, D1
000013B8  13C1 00A00019           3383mmm     MOVE.B D1, MC68230_PORT_C_DATA
000013BE  0201 00DF               3384mmm     ANDI.B #~MC68230_PORT_C_READ, D1
000013C2  13C1 00A00019           3385mmm     MOVE.B D1, MC68230_PORT_C_DATA
000013C8  1039 00A00013           3386mmm     MOVE.B MC68230_PORT_B_DATA, D0
000013CE  0001 0020               3387mmm     ORI.B #MC68230_PORT_C_READ, D1
000013D2  13C1 00A00019           3388mmm     MOVE.B D1, MC68230_PORT_C_DATA
000013D8  13FC 0038 00A00019      3389mmm     MOVE.B #(MC68230_PORT_C_READ | MC68230_PORT_C_WRITE | MC68230_PORT_C_CS), MC68230_PORT_C_DATA
000013E0                          3390mmm     ENDM
000013E0                          3391mm     ENDM
000013E0  0800 0006               3392m     BTST #IDE_STATUS_READY, D0
000013E4  67C2                    3393m     BEQ LOOP_234
000013E6                          3394m     ENDM
000013E6                          3395          
000013E6                          3396m     SEND_READ_COMMAND_AND_WAIT #0, D0, D1, D2
000013E6                          3397mm     WAIT_DRIVE_NOT_BUSY D0, D1
000013E6                          3398mm LOOP_238
000013E6                          3399mmm     READ_IDE_STATUS D0, D1
000013E6                          3400mmmm     READ_8 #IDE_STATUS_REGISTER, D0, D1
000013E6  13FC 0000 00A00007      3401mmmm     MOVE.B #MC68230_PORT_DIRECTION_READ, MC68230_PORT_B_DIRECTION
000013EE  123C 0030               3402mmmm     MOVE.B #(MC68230_PORT_C_READ | MC68230_PORT_C_WRITE), D1
000013F2  0001 0007               3403mmmm     ORI.B #IDE_STATUS_REGISTER, D1
000013F6  13C1 00A00019           3404mmmm     MOVE.B D1, MC68230_PORT_C_DATA
000013FC  0201 00DF               3405mmmm     ANDI.B #~MC68230_PORT_C_READ, D1
00001400  13C1 00A00019           3406mmmm     MOVE.B D1, MC68230_PORT_C_DATA
00001406  1039 00A00013           3407mmmm     MOVE.B MC68230_PORT_B_DATA, D0
0000140C  0001 0020               3408mmmm     ORI.B #MC68230_PORT_C_READ, D1
00001410  13C1 00A00019           3409mmmm     MOVE.B D1, MC68230_PORT_C_DATA
00001416  13FC 0038 00A00019      3410mmmm     MOVE.B #(MC68230_PORT_C_READ | MC68230_PORT_C_WRITE | MC68230_PORT_C_CS), MC68230_PORT_C_DATA
0000141E                          3411mmmm     ENDM
0000141E                          3412mmm     ENDM
0000141E  0800 0007               3413mm     BTST #IDE_STATUS_BUSY, D0
00001422  66C2                    3414mm     BNE LOOP_238
00001424                          3415mm     ENDM
00001424                          3416mm     SET_READ_ADDRESS #0, D0, D1, D2
00001424                          3417mmm     WRITE_8 #1, #IDE_SECTOR_COUNT_REGISTER, D0
00001424  13FC 00FF 00A00007      3418mmm     MOVE.B #MC68230_PORT_DIRECTION_WRITE, MC68230_PORT_B_DIRECTION
0000142C  103C 0030               3419mmm     MOVE.B #(MC68230_PORT_C_READ | MC68230_PORT_C_WRITE), D0
00001430  0000 0002               3420mmm     ORI.B #IDE_SECTOR_COUNT_REGISTER, D0
00001434  13C0 00A00019           3421mmm     MOVE.B D0, MC68230_PORT_C_DATA
0000143A  0200 00EF               3422mmm     ANDI.B #~MC68230_PORT_C_WRITE, D0
0000143E  13FC 0001 00A00013      3423mmm     MOVE.B #1, MC68230_PORT_B_DATA
00001446  13C0 00A00019           3424mmm     MOVE.B D0, MC68230_PORT_C_DATA
0000144C  0000 0010               3425mmm     ORI.B #MC68230_PORT_C_WRITE, D0
00001450  13C0 00A00019           3426mmm     MOVE.B D0, MC68230_PORT_C_DATA
00001456  13FC 0038 00A00019      3427mmm     MOVE.B #(MC68230_PORT_C_READ | MC68230_PORT_C_WRITE | MC68230_PORT_C_CS), MC68230_PORT_C_DATA
0000145E                          3428mmm     ENDM
0000145E  7200                    3429mm     MOVE.L #0,D1
00001460                          3430mmm     WRITE_8 D1, #IDE_LBA_0_7_REGISTER, D0
00001460  13FC 00FF 00A00007      3431mmm     MOVE.B #MC68230_PORT_DIRECTION_WRITE, MC68230_PORT_B_DIRECTION
00001468  103C 0030               3432mmm     MOVE.B #(MC68230_PORT_C_READ | MC68230_PORT_C_WRITE), D0
0000146C  0000 0003               3433mmm     ORI.B #IDE_LBA_0_7_REGISTER, D0
00001470  13C0 00A00019           3434mmm     MOVE.B D0, MC68230_PORT_C_DATA
00001476  0200 00EF               3435mmm     ANDI.B #~MC68230_PORT_C_WRITE, D0
0000147A  13C1 00A00013           3436mmm     MOVE.B D1, MC68230_PORT_B_DATA
00001480  13C0 00A00019           3437mmm     MOVE.B D0, MC68230_PORT_C_DATA
00001486  0000 0010               3438mmm     ORI.B #MC68230_PORT_C_WRITE, D0
0000148A  13C0 00A00019           3439mmm     MOVE.B D0, MC68230_PORT_C_DATA
00001490  13FC 0038 00A00019      3440mmm     MOVE.B #(MC68230_PORT_C_READ | MC68230_PORT_C_WRITE | MC68230_PORT_C_CS), MC68230_PORT_C_DATA
00001498                          3441mmm     ENDM
00001498  E089                    3442mm     LSR.L #8, D1
0000149A                          3443mmm     WRITE_8 D1, #IDE_LBA_8_15_REGISTER, D0
0000149A  13FC 00FF 00A00007      3444mmm     MOVE.B #MC68230_PORT_DIRECTION_WRITE, MC68230_PORT_B_DIRECTION
000014A2  103C 0030               3445mmm     MOVE.B #(MC68230_PORT_C_READ | MC68230_PORT_C_WRITE), D0
000014A6  0000 0004               3446mmm     ORI.B #IDE_LBA_8_15_REGISTER, D0
000014AA  13C0 00A00019           3447mmm     MOVE.B D0, MC68230_PORT_C_DATA
000014B0  0200 00EF               3448mmm     ANDI.B #~MC68230_PORT_C_WRITE, D0
000014B4  13C1 00A00013           3449mmm     MOVE.B D1, MC68230_PORT_B_DATA
000014BA  13C0 00A00019           3450mmm     MOVE.B D0, MC68230_PORT_C_DATA
000014C0  0000 0010               3451mmm     ORI.B #MC68230_PORT_C_WRITE, D0
000014C4  13C0 00A00019           3452mmm     MOVE.B D0, MC68230_PORT_C_DATA
000014CA  13FC 0038 00A00019      3453mmm     MOVE.B #(MC68230_PORT_C_READ | MC68230_PORT_C_WRITE | MC68230_PORT_C_CS), MC68230_PORT_C_DATA
000014D2                          3454mmm     ENDM
000014D2  E089                    3455mm     LSR.L #8, D1                                
000014D4                          3456mmm     WRITE_8 D1, #IDE_LBA_16_23_REGISTER, D0
000014D4  13FC 00FF 00A00007      3457mmm     MOVE.B #MC68230_PORT_DIRECTION_WRITE, MC68230_PORT_B_DIRECTION
000014DC  103C 0030               3458mmm     MOVE.B #(MC68230_PORT_C_READ | MC68230_PORT_C_WRITE), D0
000014E0  0000 0005               3459mmm     ORI.B #IDE_LBA_16_23_REGISTER, D0
000014E4  13C0 00A00019           3460mmm     MOVE.B D0, MC68230_PORT_C_DATA
000014EA  0200 00EF               3461mmm     ANDI.B #~MC68230_PORT_C_WRITE, D0
000014EE  13C1 00A00013           3462mmm     MOVE.B D1, MC68230_PORT_B_DATA
000014F4  13C0 00A00019           3463mmm     MOVE.B D0, MC68230_PORT_C_DATA
000014FA  0000 0010               3464mmm     ORI.B #MC68230_PORT_C_WRITE, D0
000014FE  13C0 00A00019           3465mmm     MOVE.B D0, MC68230_PORT_C_DATA
00001504  13FC 0038 00A00019      3466mmm     MOVE.B #(MC68230_PORT_C_READ | MC68230_PORT_C_WRITE | MC68230_PORT_C_CS), MC68230_PORT_C_DATA
0000150C                          3467mmm     ENDM
0000150C  E089                    3468mm     LSR.L #8, D1
0000150E                          3469mmm     READ_8 #IDE_DRIVESEL_REGISTER, D2, D0
0000150E  13FC 0000 00A00007      3470mmm     MOVE.B #MC68230_PORT_DIRECTION_READ, MC68230_PORT_B_DIRECTION
00001516  103C 0030               3471mmm     MOVE.B #(MC68230_PORT_C_READ | MC68230_PORT_C_WRITE), D0
0000151A  0000 0006               3472mmm     ORI.B #IDE_DRIVESEL_REGISTER, D0
0000151E  13C0 00A00019           3473mmm     MOVE.B D0, MC68230_PORT_C_DATA
00001524  0200 00DF               3474mmm     ANDI.B #~MC68230_PORT_C_READ, D0
00001528  13C0 00A00019           3475mmm     MOVE.B D0, MC68230_PORT_C_DATA
0000152E  1439 00A00013           3476mmm     MOVE.B MC68230_PORT_B_DATA, D2
00001534  0000 0020               3477mmm     ORI.B #MC68230_PORT_C_READ, D0
00001538  13C0 00A00019           3478mmm     MOVE.B D0, MC68230_PORT_C_DATA
0000153E  13FC 0038 00A00019      3479mmm     MOVE.B #(MC68230_PORT_C_READ | MC68230_PORT_C_WRITE | MC68230_PORT_C_CS), MC68230_PORT_C_DATA
00001546                          3480mmm     ENDM
00001546  0201 000F               3481mm     ANDI.B #$0F,D1
0000154A  8401                    3482mm     OR.B D1,D2
0000154C                          3483mmm     WRITE_8 D2, #IDE_DRIVESEL_REGISTER, D0
0000154C  13FC 00FF 00A00007      3484mmm     MOVE.B #MC68230_PORT_DIRECTION_WRITE, MC68230_PORT_B_DIRECTION
00001554  103C 0030               3485mmm     MOVE.B #(MC68230_PORT_C_READ | MC68230_PORT_C_WRITE), D0
00001558  0000 0006               3486mmm     ORI.B #IDE_DRIVESEL_REGISTER, D0
0000155C  13C0 00A00019           3487mmm     MOVE.B D0, MC68230_PORT_C_DATA
00001562  0200 00EF               3488mmm     ANDI.B #~MC68230_PORT_C_WRITE, D0
00001566  13C2 00A00013           3489mmm     MOVE.B D2, MC68230_PORT_B_DATA
0000156C  13C0 00A00019           3490mmm     MOVE.B D0, MC68230_PORT_C_DATA
00001572  0000 0010               3491mmm     ORI.B #MC68230_PORT_C_WRITE, D0
00001576  13C0 00A00019           3492mmm     MOVE.B D0, MC68230_PORT_C_DATA
0000157C  13FC 0038 00A00019      3493mmm     MOVE.B #(MC68230_PORT_C_READ | MC68230_PORT_C_WRITE | MC68230_PORT_C_CS), MC68230_PORT_C_DATA
00001584                          3494mmm     ENDM
00001584                          3495mm     ENDM
00001584                          3496mm     SEND_COMMAND #IDE_COMMAND_READ_WITH_RETRY, D0
00001584                          3497mmm     WRITE_8 #IDE_COMMAND_READ_WITH_RETRY, #IDE_COMMAND_REGISTER, D0
00001584  13FC 00FF 00A00007      3498mmm     MOVE.B #MC68230_PORT_DIRECTION_WRITE, MC68230_PORT_B_DIRECTION
0000158C  103C 0030               3499mmm     MOVE.B #(MC68230_PORT_C_READ | MC68230_PORT_C_WRITE), D0
00001590  0000 0007               3500mmm     ORI.B #IDE_COMMAND_REGISTER, D0
00001594  13C0 00A00019           3501mmm     MOVE.B D0, MC68230_PORT_C_DATA
0000159A  0200 00EF               3502mmm     ANDI.B #~MC68230_PORT_C_WRITE, D0
0000159E  13FC 0020 00A00013      3503mmm     MOVE.B #IDE_COMMAND_READ_WITH_RETRY, MC68230_PORT_B_DATA
000015A6  13C0 00A00019           3504mmm     MOVE.B D0, MC68230_PORT_C_DATA
000015AC  0000 0010               3505mmm     ORI.B #MC68230_PORT_C_WRITE, D0
000015B0  13C0 00A00019           3506mmm     MOVE.B D0, MC68230_PORT_C_DATA
000015B6  13FC 0038 00A00019      3507mmm     MOVE.B #(MC68230_PORT_C_READ | MC68230_PORT_C_WRITE | MC68230_PORT_C_CS), MC68230_PORT_C_DATA
000015BE                          3508mmm     ENDM
000015BE                          3509mm     ENDM
000015BE                          3510mm     WAIT_DRIVE_NOT_BUSY D0, D1
000015BE                          3511mm LOOP_250
000015BE                          3512mmm     READ_IDE_STATUS D0, D1
000015BE                          3513mmmm     READ_8 #IDE_STATUS_REGISTER, D0, D1
000015BE  13FC 0000 00A00007      3514mmmm     MOVE.B #MC68230_PORT_DIRECTION_READ, MC68230_PORT_B_DIRECTION
000015C6  123C 0030               3515mmmm     MOVE.B #(MC68230_PORT_C_READ | MC68230_PORT_C_WRITE), D1
000015CA  0001 0007               3516mmmm     ORI.B #IDE_STATUS_REGISTER, D1
000015CE  13C1 00A00019           3517mmmm     MOVE.B D1, MC68230_PORT_C_DATA
000015D4  0201 00DF               3518mmmm     ANDI.B #~MC68230_PORT_C_READ, D1
000015D8  13C1 00A00019           3519mmmm     MOVE.B D1, MC68230_PORT_C_DATA
000015DE  1039 00A00013           3520mmmm     MOVE.B MC68230_PORT_B_DATA, D0
000015E4  0001 0020               3521mmmm     ORI.B #MC68230_PORT_C_READ, D1
000015E8  13C1 00A00019           3522mmmm     MOVE.B D1, MC68230_PORT_C_DATA
000015EE  13FC 0038 00A00019      3523mmmm     MOVE.B #(MC68230_PORT_C_READ | MC68230_PORT_C_WRITE | MC68230_PORT_C_CS), MC68230_PORT_C_DATA
000015F6                          3524mmmm     ENDM
000015F6                          3525mmm     ENDM
000015F6  0800 0007               3526mm     BTST #IDE_STATUS_BUSY, D0
000015FA  66C2                    3527mm     BNE LOOP_250
000015FC                          3528mm     ENDM
000015FC                          3529mm     WAIT_DRIVE_DRQ D0, D1
000015FC                          3530mm LOOP_253
000015FC                          3531mmm     READ_IDE_STATUS D0, D1
000015FC                          3532mmmm     READ_8 #IDE_STATUS_REGISTER, D0, D1
000015FC  13FC 0000 00A00007      3533mmmm     MOVE.B #MC68230_PORT_DIRECTION_READ, MC68230_PORT_B_DIRECTION
00001604  123C 0030               3534mmmm     MOVE.B #(MC68230_PORT_C_READ | MC68230_PORT_C_WRITE), D1
00001608  0001 0007               3535mmmm     ORI.B #IDE_STATUS_REGISTER, D1
0000160C  13C1 00A00019           3536mmmm     MOVE.B D1, MC68230_PORT_C_DATA
00001612  0201 00DF               3537mmmm     ANDI.B #~MC68230_PORT_C_READ, D1
00001616  13C1 00A00019           3538mmmm     MOVE.B D1, MC68230_PORT_C_DATA
0000161C  1039 00A00013           3539mmmm     MOVE.B MC68230_PORT_B_DATA, D0
00001622  0001 0020               3540mmmm     ORI.B #MC68230_PORT_C_READ, D1
00001626  13C1 00A00019           3541mmmm     MOVE.B D1, MC68230_PORT_C_DATA
0000162C  13FC 0038 00A00019      3542mmmm     MOVE.B #(MC68230_PORT_C_READ | MC68230_PORT_C_WRITE | MC68230_PORT_C_CS), MC68230_PORT_C_DATA
00001634                          3543mmmm     ENDM
00001634                          3544mmm     ENDM
00001634  0800 0003               3545mm     BTST #IDE_STATUS_DRQ, D0
00001638  67C2                    3546mm     BEQ LOOP_253
0000163A                          3547mm     ENDM
0000163A                          3548m     ENDM
0000163A                          3549  
0000163A  7800                    3550      MOVE.L #0,D4                                ; words read from block
0000163C                          3551  
0000163C                          3552m     READ_32 #IDE_DATA_REGISTER, D2, D1          ; num entries -> D2
0000163C                          3553mm     READ_16 #IDE_DATA_REGISTER, D2, D1
0000163C  13FC 0000 00A00007      3554mm     MOVE.B #MC68230_PORT_DIRECTION_READ, MC68230_PORT_B_DIRECTION
00001644  13FC 0000 00A00005      3555mm     MOVE.B #MC68230_PORT_DIRECTION_READ, MC68230_PORT_A_DIRECTION
0000164C                          3556mm     
0000164C  123C 0030               3557mm     MOVE.B #(MC68230_PORT_C_READ | MC68230_PORT_C_WRITE), D1    
00001650  0001 0000               3558mm     ORI.B #IDE_DATA_REGISTER, D1
00001654  13C1 00A00019           3559mm     MOVE.B D1, MC68230_PORT_C_DATA
0000165A  0201 00DF               3560mm     ANDI.B #~MC68230_PORT_C_READ, D1
0000165E  13C1 00A00019           3561mm     MOVE.B D1, MC68230_PORT_C_DATA
00001664  1439 00A00011           3562mm     MOVE.B MC68230_PORT_A_DATA, D2
0000166A  E14A                    3563mm     LSL.W #8, D2
0000166C  1439 00A00013           3564mm     MOVE.B MC68230_PORT_B_DATA, D2
00001672  0001 0020               3565mm     ORI.B #MC68230_PORT_C_READ, D1
00001676  13C1 00A00019           3566mm     MOVE.B D1, MC68230_PORT_C_DATA
0000167C  13FC 0038 00A00019      3567mm     MOVE.B #(MC68230_PORT_C_READ | MC68230_PORT_C_WRITE | MC68230_PORT_C_CS), MC68230_PORT_C_DATA
00001684                          3568mm     ENDM
00001684  E18A                    3569m     LSL.L #8, D2
00001686  E18A                    3570m     LSL.L #8, D2
00001688                          3571mm     READ_16 #IDE_DATA_REGISTER, D2, D1
00001688  13FC 0000 00A00007      3572mm     MOVE.B #MC68230_PORT_DIRECTION_READ, MC68230_PORT_B_DIRECTION
00001690  13FC 0000 00A00005      3573mm     MOVE.B #MC68230_PORT_DIRECTION_READ, MC68230_PORT_A_DIRECTION
00001698                          3574mm     
00001698  123C 0030               3575mm     MOVE.B #(MC68230_PORT_C_READ | MC68230_PORT_C_WRITE), D1    
0000169C  0001 0000               3576mm     ORI.B #IDE_DATA_REGISTER, D1
000016A0  13C1 00A00019           3577mm     MOVE.B D1, MC68230_PORT_C_DATA
000016A6  0201 00DF               3578mm     ANDI.B #~MC68230_PORT_C_READ, D1
000016AA  13C1 00A00019           3579mm     MOVE.B D1, MC68230_PORT_C_DATA
000016B0  1439 00A00011           3580mm     MOVE.B MC68230_PORT_A_DATA, D2
000016B6  E14A                    3581mm     LSL.W #8, D2
000016B8  1439 00A00013           3582mm     MOVE.B MC68230_PORT_B_DATA, D2
000016BE  0001 0020               3583mm     ORI.B #MC68230_PORT_C_READ, D1
000016C2  13C1 00A00019           3584mm     MOVE.B D1, MC68230_PORT_C_DATA
000016C8  13FC 0038 00A00019      3585mm     MOVE.B #(MC68230_PORT_C_READ | MC68230_PORT_C_WRITE | MC68230_PORT_C_CS), MC68230_PORT_C_DATA
000016D0                          3586mm     ENDM
000016D0                          3587m     ENDM
000016D0  5484                    3588      ADD.L #2, D4
000016D2                          3589              
000016D2  7600                    3590      MOVE.L #0, D3                               ; entries printed -> D3
000016D4                          3591      
000016D4                          3592      WHILE.L D4 <LT> #256 DO                     ; read the entire 256 words to complete the transfer, even though we don't care
000016D4                          3593s _10000016
000016D4  B8BC 00000100           3594s     CMP.L   #256,D4
000016DA  6C00 07A8               3595s     BGE _10000017
000016DE                          3596          IF D3 <LT> D2 THEN
000016DE  B642                    3597s     CMP.W   D2,D3
000016E0  6C00 0754               3598s     BGE _00000014
000016E4                          3599m             READ_32 #IDE_DATA_REGISTER, D5, D1  ; empty flag  -> D5
000016E4                          3600mm     READ_16 #IDE_DATA_REGISTER, D5, D1
000016E4  13FC 0000 00A00007      3601mm     MOVE.B #MC68230_PORT_DIRECTION_READ, MC68230_PORT_B_DIRECTION
000016EC  13FC 0000 00A00005      3602mm     MOVE.B #MC68230_PORT_DIRECTION_READ, MC68230_PORT_A_DIRECTION
000016F4                          3603mm     
000016F4  123C 0030               3604mm     MOVE.B #(MC68230_PORT_C_READ | MC68230_PORT_C_WRITE), D1    
000016F8  0001 0000               3605mm     ORI.B #IDE_DATA_REGISTER, D1
000016FC  13C1 00A00019           3606mm     MOVE.B D1, MC68230_PORT_C_DATA
00001702  0201 00DF               3607mm     ANDI.B #~MC68230_PORT_C_READ, D1
00001706  13C1 00A00019           3608mm     MOVE.B D1, MC68230_PORT_C_DATA
0000170C  1A39 00A00011           3609mm     MOVE.B MC68230_PORT_A_DATA, D5
00001712  E14D                    3610mm     LSL.W #8, D5
00001714  1A39 00A00013           3611mm     MOVE.B MC68230_PORT_B_DATA, D5
0000171A  0001 0020               3612mm     ORI.B #MC68230_PORT_C_READ, D1
0000171E  13C1 00A00019           3613mm     MOVE.B D1, MC68230_PORT_C_DATA
00001724  13FC 0038 00A00019      3614mm     MOVE.B #(MC68230_PORT_C_READ | MC68230_PORT_C_WRITE | MC68230_PORT_C_CS), MC68230_PORT_C_DATA
0000172C                          3615mm     ENDM
0000172C  E18D                    3616m     LSL.L #8, D5
0000172E  E18D                    3617m     LSL.L #8, D5
00001730                          3618mm     READ_16 #IDE_DATA_REGISTER, D5, D1
00001730  13FC 0000 00A00007      3619mm     MOVE.B #MC68230_PORT_DIRECTION_READ, MC68230_PORT_B_DIRECTION
00001738  13FC 0000 00A00005      3620mm     MOVE.B #MC68230_PORT_DIRECTION_READ, MC68230_PORT_A_DIRECTION
00001740                          3621mm     
00001740  123C 0030               3622mm     MOVE.B #(MC68230_PORT_C_READ | MC68230_PORT_C_WRITE), D1    
00001744  0001 0000               3623mm     ORI.B #IDE_DATA_REGISTER, D1
00001748  13C1 00A00019           3624mm     MOVE.B D1, MC68230_PORT_C_DATA
0000174E  0201 00DF               3625mm     ANDI.B #~MC68230_PORT_C_READ, D1
00001752  13C1 00A00019           3626mm     MOVE.B D1, MC68230_PORT_C_DATA
00001758  1A39 00A00011           3627mm     MOVE.B MC68230_PORT_A_DATA, D5
0000175E  E14D                    3628mm     LSL.W #8, D5
00001760  1A39 00A00013           3629mm     MOVE.B MC68230_PORT_B_DATA, D5
00001766  0001 0020               3630mm     ORI.B #MC68230_PORT_C_READ, D1
0000176A  13C1 00A00019           3631mm     MOVE.B D1, MC68230_PORT_C_DATA
00001770  13FC 0038 00A00019      3632mm     MOVE.B #(MC68230_PORT_C_READ | MC68230_PORT_C_WRITE | MC68230_PORT_C_CS), MC68230_PORT_C_DATA
00001778                          3633mm     ENDM
00001778                          3634m     ENDM
00001778  5484                    3635              ADD.L #2, D4
0000177A                          3636          
0000177A                          3637              IF D5 <NE> #1 THEN
0000177A  BA7C 0001               3638s     CMP.W   #1,D5
0000177E  6700 0044               3639s     BEQ _00000015
00001782                          3640m                 PRINT_REG_4BIT D3,D1,D6,A0
00001782  41FA 1718               3641m     LEA BIN2HEX_LUT(PC),A0                          ; LOAD THE LOOKUP TABLE
00001786  1C03                    3642m     MOVE.B D3,D6
00001788  0286 0000000F           3643m     ANDI.L #$F,D6
0000178E  1C30 6000               3644m     MOVE.B 0(A0,D6),D6                              ; USE THAT AS AN INDEX INTO THE LUT
00001792                          3645mm     PRINT_CHAR D6,D1
00001792                          3646mm WAIT_FOR_READY_263                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00001792                 TRUE     3647mm     IFEQ DEBUG
00001792  1239 00C00003           3648mm         MOVE.B DUART_SRA,D1                         ; READ STATUS REGISTER
00001798  0801 0002               3649mm         BTST #2,D1                                  ; CHECK FOR SPACE TO SEND
0000179C  67F4                    3650mm         BEQ WAIT_FOR_READY_263                      ; NO SPACE, CHECK AGAIN
0000179E  13C6 00C00007           3651mm         MOVE.B D6,DUART_TXA                         ; SEND THE NEXT CHARACTER
000017A4                          3652mm     ENDC
000017A4                          3653mm 
000017A4                 FALSE    3654mm     IFNE DEBUG
000017A4                          3655mm     ENDC
000017A4                          3656mm 
000017A4                          3657mm     ENDM
000017A4                          3658m     ENDM
000017A4  41FA 174F               3659                  LEA INDEX_SEP(PC),A0
000017A8                          3660m                 PRINT_STR A0,D1
000017A8                          3661m LOOP_264
000017A8  0C10 0000               3662m     CMP.B #NULL,(A0)                                ; 0 -> DONE
000017AC  6700 0016               3663m     BEQ EXIT_264
000017B0                          3664mm     PRINT_CHAR (A0)+,D1
000017B0                          3665mm WAIT_FOR_READY_265                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
000017B0                 TRUE     3666mm     IFEQ DEBUG
000017B0  1239 00C00003           3667mm         MOVE.B DUART_SRA,D1                         ; READ STATUS REGISTER
000017B6  0801 0002               3668mm         BTST #2,D1                                  ; CHECK FOR SPACE TO SEND
000017BA  67F4                    3669mm         BEQ WAIT_FOR_READY_265                      ; NO SPACE, CHECK AGAIN
000017BC  13D8 00C00007           3670mm         MOVE.B (A0)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
000017C2                          3671mm     ENDC
000017C2                          3672mm 
000017C2                 FALSE    3673mm     IFNE DEBUG
000017C2                          3674mm     ENDC
000017C2                          3675mm 
000017C2                          3676mm     ENDM
000017C2  60E4                    3677m     BRA LOOP_264
000017C4                          3678m EXIT_264
000017C4                          3679m     ENDM
000017C4                          3680              ENDI
000017C4                          3681s _00000015
000017C4                          3682              
000017C4                          3683m             READ_32 #IDE_DATA_REGISTER, D6, D1 ; strlen
000017C4                          3684mm     READ_16 #IDE_DATA_REGISTER, D6, D1
000017C4  13FC 0000 00A00007      3685mm     MOVE.B #MC68230_PORT_DIRECTION_READ, MC68230_PORT_B_DIRECTION
000017CC  13FC 0000 00A00005      3686mm     MOVE.B #MC68230_PORT_DIRECTION_READ, MC68230_PORT_A_DIRECTION
000017D4                          3687mm     
000017D4  123C 0030               3688mm     MOVE.B #(MC68230_PORT_C_READ | MC68230_PORT_C_WRITE), D1    
000017D8  0001 0000               3689mm     ORI.B #IDE_DATA_REGISTER, D1
000017DC  13C1 00A00019           3690mm     MOVE.B D1, MC68230_PORT_C_DATA
000017E2  0201 00DF               3691mm     ANDI.B #~MC68230_PORT_C_READ, D1
000017E6  13C1 00A00019           3692mm     MOVE.B D1, MC68230_PORT_C_DATA
000017EC  1C39 00A00011           3693mm     MOVE.B MC68230_PORT_A_DATA, D6
000017F2  E14E                    3694mm     LSL.W #8, D6
000017F4  1C39 00A00013           3695mm     MOVE.B MC68230_PORT_B_DATA, D6
000017FA  0001 0020               3696mm     ORI.B #MC68230_PORT_C_READ, D1
000017FE  13C1 00A00019           3697mm     MOVE.B D1, MC68230_PORT_C_DATA
00001804  13FC 0038 00A00019      3698mm     MOVE.B #(MC68230_PORT_C_READ | MC68230_PORT_C_WRITE | MC68230_PORT_C_CS), MC68230_PORT_C_DATA
0000180C                          3699mm     ENDM
0000180C  E18E                    3700m     LSL.L #8, D6
0000180E  E18E                    3701m     LSL.L #8, D6
00001810                          3702mm     READ_16 #IDE_DATA_REGISTER, D6, D1
00001810  13FC 0000 00A00007      3703mm     MOVE.B #MC68230_PORT_DIRECTION_READ, MC68230_PORT_B_DIRECTION
00001818  13FC 0000 00A00005      3704mm     MOVE.B #MC68230_PORT_DIRECTION_READ, MC68230_PORT_A_DIRECTION
00001820                          3705mm     
00001820  123C 0030               3706mm     MOVE.B #(MC68230_PORT_C_READ | MC68230_PORT_C_WRITE), D1    
00001824  0001 0000               3707mm     ORI.B #IDE_DATA_REGISTER, D1
00001828  13C1 00A00019           3708mm     MOVE.B D1, MC68230_PORT_C_DATA
0000182E  0201 00DF               3709mm     ANDI.B #~MC68230_PORT_C_READ, D1
00001832  13C1 00A00019           3710mm     MOVE.B D1, MC68230_PORT_C_DATA
00001838  1C39 00A00011           3711mm     MOVE.B MC68230_PORT_A_DATA, D6
0000183E  E14E                    3712mm     LSL.W #8, D6
00001840  1C39 00A00013           3713mm     MOVE.B MC68230_PORT_B_DATA, D6
00001846  0001 0020               3714mm     ORI.B #MC68230_PORT_C_READ, D1
0000184A  13C1 00A00019           3715mm     MOVE.B D1, MC68230_PORT_C_DATA
00001850  13FC 0038 00A00019      3716mm     MOVE.B #(MC68230_PORT_C_READ | MC68230_PORT_C_WRITE | MC68230_PORT_C_CS), MC68230_PORT_C_DATA
00001858                          3717mm     ENDM
00001858                          3718m     ENDM
00001858  5484                    3719              ADD.L #2, D4
0000185A                          3720              
0000185A                          3721              FOR D6 = #0 TO #5 DO
0000185A  3C3C 0000               3722s     MOVE.W  #0,D6
0000185E  6000 00F2               3723s     BRA _20000015
00001862                          3724s _20000014
00001862                          3725m                 READ_32 #IDE_DATA_REGISTER, D7, D1
00001862                          3726mm     READ_16 #IDE_DATA_REGISTER, D7, D1
00001862  13FC 0000 00A00007      3727mm     MOVE.B #MC68230_PORT_DIRECTION_READ, MC68230_PORT_B_DIRECTION
0000186A  13FC 0000 00A00005      3728mm     MOVE.B #MC68230_PORT_DIRECTION_READ, MC68230_PORT_A_DIRECTION
00001872                          3729mm     
00001872  123C 0030               3730mm     MOVE.B #(MC68230_PORT_C_READ | MC68230_PORT_C_WRITE), D1    
00001876  0001 0000               3731mm     ORI.B #IDE_DATA_REGISTER, D1
0000187A  13C1 00A00019           3732mm     MOVE.B D1, MC68230_PORT_C_DATA
00001880  0201 00DF               3733mm     ANDI.B #~MC68230_PORT_C_READ, D1
00001884  13C1 00A00019           3734mm     MOVE.B D1, MC68230_PORT_C_DATA
0000188A  1E39 00A00011           3735mm     MOVE.B MC68230_PORT_A_DATA, D7
00001890  E14F                    3736mm     LSL.W #8, D7
00001892  1E39 00A00013           3737mm     MOVE.B MC68230_PORT_B_DATA, D7
00001898  0001 0020               3738mm     ORI.B #MC68230_PORT_C_READ, D1
0000189C  13C1 00A00019           3739mm     MOVE.B D1, MC68230_PORT_C_DATA
000018A2  13FC 0038 00A00019      3740mm     MOVE.B #(MC68230_PORT_C_READ | MC68230_PORT_C_WRITE | MC68230_PORT_C_CS), MC68230_PORT_C_DATA
000018AA                          3741mm     ENDM
000018AA  E18F                    3742m     LSL.L #8, D7
000018AC  E18F                    3743m     LSL.L #8, D7
000018AE                          3744mm     READ_16 #IDE_DATA_REGISTER, D7, D1
000018AE  13FC 0000 00A00007      3745mm     MOVE.B #MC68230_PORT_DIRECTION_READ, MC68230_PORT_B_DIRECTION
000018B6  13FC 0000 00A00005      3746mm     MOVE.B #MC68230_PORT_DIRECTION_READ, MC68230_PORT_A_DIRECTION
000018BE                          3747mm     
000018BE  123C 0030               3748mm     MOVE.B #(MC68230_PORT_C_READ | MC68230_PORT_C_WRITE), D1    
000018C2  0001 0000               3749mm     ORI.B #IDE_DATA_REGISTER, D1
000018C6  13C1 00A00019           3750mm     MOVE.B D1, MC68230_PORT_C_DATA
000018CC  0201 00DF               3751mm     ANDI.B #~MC68230_PORT_C_READ, D1
000018D0  13C1 00A00019           3752mm     MOVE.B D1, MC68230_PORT_C_DATA
000018D6  1E39 00A00011           3753mm     MOVE.B MC68230_PORT_A_DATA, D7
000018DC  E14F                    3754mm     LSL.W #8, D7
000018DE  1E39 00A00013           3755mm     MOVE.B MC68230_PORT_B_DATA, D7
000018E4  0001 0020               3756mm     ORI.B #MC68230_PORT_C_READ, D1
000018E8  13C1 00A00019           3757mm     MOVE.B D1, MC68230_PORT_C_DATA
000018EE  13FC 0038 00A00019      3758mm     MOVE.B #(MC68230_PORT_C_READ | MC68230_PORT_C_WRITE | MC68230_PORT_C_CS), MC68230_PORT_C_DATA
000018F6                          3759mm     ENDM
000018F6                          3760m     ENDM
000018F6  5484                    3761                  ADD.L #2, D4
000018F8                          3762                              
000018F8                          3763                  IF D5 <NE> #1 THEN
000018F8  BA7C 0001               3764s     CMP.W   #1,D5
000018FC  6700 0052               3765s     BEQ _00000016
00001900  E19F                    3766                      ROL.l #8,D7                 
00001902                          3767m                     PRINT_CHAR D7, D1
00001902                          3768m WAIT_FOR_READY_272                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00001902                 TRUE     3769m     IFEQ DEBUG
00001902  1239 00C00003           3770m         MOVE.B DUART_SRA,D1                         ; READ STATUS REGISTER
00001908  0801 0002               3771m         BTST #2,D1                                  ; CHECK FOR SPACE TO SEND
0000190C  67F4                    3772m         BEQ WAIT_FOR_READY_272                      ; NO SPACE, CHECK AGAIN
0000190E  13C7 00C00007           3773m         MOVE.B D7,DUART_TXA                         ; SEND THE NEXT CHARACTER
00001914                          3774m     ENDC
00001914                          3775m 
00001914                 FALSE    3776m     IFNE DEBUG
00001914                          3777m     ENDC
00001914                          3778m 
00001914                          3779m     ENDM
00001914  E19F                    3780                      ROL.l #8,D7                 
00001916                          3781m                     PRINT_CHAR D7, D1
00001916                          3782m WAIT_FOR_READY_273                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00001916                 TRUE     3783m     IFEQ DEBUG
00001916  1239 00C00003           3784m         MOVE.B DUART_SRA,D1                         ; READ STATUS REGISTER
0000191C  0801 0002               3785m         BTST #2,D1                                  ; CHECK FOR SPACE TO SEND
00001920  67F4                    3786m         BEQ WAIT_FOR_READY_273                      ; NO SPACE, CHECK AGAIN
00001922  13C7 00C00007           3787m         MOVE.B D7,DUART_TXA                         ; SEND THE NEXT CHARACTER
00001928                          3788m     ENDC
00001928                          3789m 
00001928                 FALSE    3790m     IFNE DEBUG
00001928                          3791m     ENDC
00001928                          3792m 
00001928                          3793m     ENDM
00001928  E19F                    3794                      ROL.l #8,D7                 
0000192A                          3795m                     PRINT_CHAR D7, D1
0000192A                          3796m WAIT_FOR_READY_274                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
0000192A                 TRUE     3797m     IFEQ DEBUG
0000192A  1239 00C00003           3798m         MOVE.B DUART_SRA,D1                         ; READ STATUS REGISTER
00001930  0801 0002               3799m         BTST #2,D1                                  ; CHECK FOR SPACE TO SEND
00001934  67F4                    3800m         BEQ WAIT_FOR_READY_274                      ; NO SPACE, CHECK AGAIN
00001936  13C7 00C00007           3801m         MOVE.B D7,DUART_TXA                         ; SEND THE NEXT CHARACTER
0000193C                          3802m     ENDC
0000193C                          3803m 
0000193C                 FALSE    3804m     IFNE DEBUG
0000193C                          3805m     ENDC
0000193C                          3806m 
0000193C                          3807m     ENDM
0000193C  E19F                    3808                      ROL.l #8,D7                 
0000193E                          3809m                     PRINT_CHAR D7, D1
0000193E                          3810m WAIT_FOR_READY_275                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
0000193E                 TRUE     3811m     IFEQ DEBUG
0000193E  1239 00C00003           3812m         MOVE.B DUART_SRA,D1                         ; READ STATUS REGISTER
00001944  0801 0002               3813m         BTST #2,D1                                  ; CHECK FOR SPACE TO SEND
00001948  67F4                    3814m         BEQ WAIT_FOR_READY_275                      ; NO SPACE, CHECK AGAIN
0000194A  13C7 00C00007           3815m         MOVE.B D7,DUART_TXA                         ; SEND THE NEXT CHARACTER
00001950                          3816m     ENDC
00001950                          3817m 
00001950                 FALSE    3818m     IFNE DEBUG
00001950                          3819m     ENDC
00001950                          3820m 
00001950                          3821m     ENDM
00001950                          3822                  ENDI
00001950                          3823s _00000016
00001950                          3824              ENDF
00001950  5246                    3825s     ADD.W   #1,D6
00001952                          3826s _20000015
00001952  BC7C 0005               3827s     CMP.W   #5,D6
00001956  6F00 FF0A               3828s     BLE _20000014
0000195A                          3829  
0000195A                          3830m             READ_32 #IDE_DATA_REGISTER, D6, D1  ; skip index
0000195A                          3831mm     READ_16 #IDE_DATA_REGISTER, D6, D1
0000195A  13FC 0000 00A00007      3832mm     MOVE.B #MC68230_PORT_DIRECTION_READ, MC68230_PORT_B_DIRECTION
00001962  13FC 0000 00A00005      3833mm     MOVE.B #MC68230_PORT_DIRECTION_READ, MC68230_PORT_A_DIRECTION
0000196A                          3834mm     
0000196A  123C 0030               3835mm     MOVE.B #(MC68230_PORT_C_READ | MC68230_PORT_C_WRITE), D1    
0000196E  0001 0000               3836mm     ORI.B #IDE_DATA_REGISTER, D1
00001972  13C1 00A00019           3837mm     MOVE.B D1, MC68230_PORT_C_DATA
00001978  0201 00DF               3838mm     ANDI.B #~MC68230_PORT_C_READ, D1
0000197C  13C1 00A00019           3839mm     MOVE.B D1, MC68230_PORT_C_DATA
00001982  1C39 00A00011           3840mm     MOVE.B MC68230_PORT_A_DATA, D6
00001988  E14E                    3841mm     LSL.W #8, D6
0000198A  1C39 00A00013           3842mm     MOVE.B MC68230_PORT_B_DATA, D6
00001990  0001 0020               3843mm     ORI.B #MC68230_PORT_C_READ, D1
00001994  13C1 00A00019           3844mm     MOVE.B D1, MC68230_PORT_C_DATA
0000199A  13FC 0038 00A00019      3845mm     MOVE.B #(MC68230_PORT_C_READ | MC68230_PORT_C_WRITE | MC68230_PORT_C_CS), MC68230_PORT_C_DATA
000019A2                          3846mm     ENDM
000019A2  E18E                    3847m     LSL.L #8, D6
000019A4  E18E                    3848m     LSL.L #8, D6
000019A6                          3849mm     READ_16 #IDE_DATA_REGISTER, D6, D1
000019A6  13FC 0000 00A00007      3850mm     MOVE.B #MC68230_PORT_DIRECTION_READ, MC68230_PORT_B_DIRECTION
000019AE  13FC 0000 00A00005      3851mm     MOVE.B #MC68230_PORT_DIRECTION_READ, MC68230_PORT_A_DIRECTION
000019B6                          3852mm     
000019B6  123C 0030               3853mm     MOVE.B #(MC68230_PORT_C_READ | MC68230_PORT_C_WRITE), D1    
000019BA  0001 0000               3854mm     ORI.B #IDE_DATA_REGISTER, D1
000019BE  13C1 00A00019           3855mm     MOVE.B D1, MC68230_PORT_C_DATA
000019C4  0201 00DF               3856mm     ANDI.B #~MC68230_PORT_C_READ, D1
000019C8  13C1 00A00019           3857mm     MOVE.B D1, MC68230_PORT_C_DATA
000019CE  1C39 00A00011           3858mm     MOVE.B MC68230_PORT_A_DATA, D6
000019D4  E14E                    3859mm     LSL.W #8, D6
000019D6  1C39 00A00013           3860mm     MOVE.B MC68230_PORT_B_DATA, D6
000019DC  0001 0020               3861mm     ORI.B #MC68230_PORT_C_READ, D1
000019E0  13C1 00A00019           3862mm     MOVE.B D1, MC68230_PORT_C_DATA
000019E6  13FC 0038 00A00019      3863mm     MOVE.B #(MC68230_PORT_C_READ | MC68230_PORT_C_WRITE | MC68230_PORT_C_CS), MC68230_PORT_C_DATA
000019EE                          3864mm     ENDM
000019EE                          3865m     ENDM
000019EE  5484                    3866              ADD.L #2, D4
000019F0                          3867m             READ_32 #IDE_DATA_REGISTER, D6, D1  ; skip length
000019F0                          3868mm     READ_16 #IDE_DATA_REGISTER, D6, D1
000019F0  13FC 0000 00A00007      3869mm     MOVE.B #MC68230_PORT_DIRECTION_READ, MC68230_PORT_B_DIRECTION
000019F8  13FC 0000 00A00005      3870mm     MOVE.B #MC68230_PORT_DIRECTION_READ, MC68230_PORT_A_DIRECTION
00001A00                          3871mm     
00001A00  123C 0030               3872mm     MOVE.B #(MC68230_PORT_C_READ | MC68230_PORT_C_WRITE), D1    
00001A04  0001 0000               3873mm     ORI.B #IDE_DATA_REGISTER, D1
00001A08  13C1 00A00019           3874mm     MOVE.B D1, MC68230_PORT_C_DATA
00001A0E  0201 00DF               3875mm     ANDI.B #~MC68230_PORT_C_READ, D1
00001A12  13C1 00A00019           3876mm     MOVE.B D1, MC68230_PORT_C_DATA
00001A18  1C39 00A00011           3877mm     MOVE.B MC68230_PORT_A_DATA, D6
00001A1E  E14E                    3878mm     LSL.W #8, D6
00001A20  1C39 00A00013           3879mm     MOVE.B MC68230_PORT_B_DATA, D6
00001A26  0001 0020               3880mm     ORI.B #MC68230_PORT_C_READ, D1
00001A2A  13C1 00A00019           3881mm     MOVE.B D1, MC68230_PORT_C_DATA
00001A30  13FC 0038 00A00019      3882mm     MOVE.B #(MC68230_PORT_C_READ | MC68230_PORT_C_WRITE | MC68230_PORT_C_CS), MC68230_PORT_C_DATA
00001A38                          3883mm     ENDM
00001A38  E18E                    3884m     LSL.L #8, D6
00001A3A  E18E                    3885m     LSL.L #8, D6
00001A3C                          3886mm     READ_16 #IDE_DATA_REGISTER, D6, D1
00001A3C  13FC 0000 00A00007      3887mm     MOVE.B #MC68230_PORT_DIRECTION_READ, MC68230_PORT_B_DIRECTION
00001A44  13FC 0000 00A00005      3888mm     MOVE.B #MC68230_PORT_DIRECTION_READ, MC68230_PORT_A_DIRECTION
00001A4C                          3889mm     
00001A4C  123C 0030               3890mm     MOVE.B #(MC68230_PORT_C_READ | MC68230_PORT_C_WRITE), D1    
00001A50  0001 0000               3891mm     ORI.B #IDE_DATA_REGISTER, D1
00001A54  13C1 00A00019           3892mm     MOVE.B D1, MC68230_PORT_C_DATA
00001A5A  0201 00DF               3893mm     ANDI.B #~MC68230_PORT_C_READ, D1
00001A5E  13C1 00A00019           3894mm     MOVE.B D1, MC68230_PORT_C_DATA
00001A64  1C39 00A00011           3895mm     MOVE.B MC68230_PORT_A_DATA, D6
00001A6A  E14E                    3896mm     LSL.W #8, D6
00001A6C  1C39 00A00013           3897mm     MOVE.B MC68230_PORT_B_DATA, D6
00001A72  0001 0020               3898mm     ORI.B #MC68230_PORT_C_READ, D1
00001A76  13C1 00A00019           3899mm     MOVE.B D1, MC68230_PORT_C_DATA
00001A7C  13FC 0038 00A00019      3900mm     MOVE.B #(MC68230_PORT_C_READ | MC68230_PORT_C_WRITE | MC68230_PORT_C_CS), MC68230_PORT_C_DATA
00001A84                          3901mm     ENDM
00001A84                          3902m     ENDM
00001A84  5484                    3903              ADD.L #2, D4
00001A86                          3904  
00001A86                          3905              IF D5 <NE> #1 THEN
00001A86  BA7C 0001               3906s     CMP.W   #1,D5
00001A8A  6700 006C               3907s     BEQ _00000017
00001A8E  41FA 1465               3908                  LEA INDEX_SEP(PC),A0
00001A92                          3909m                 PRINT_STR A0,D1
00001A92                          3910m LOOP_282
00001A92  0C10 0000               3911m     CMP.B #NULL,(A0)                                ; 0 -> DONE
00001A96  6700 0016               3912m     BEQ EXIT_282
00001A9A                          3913mm     PRINT_CHAR (A0)+,D1
00001A9A                          3914mm WAIT_FOR_READY_283                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00001A9A                 TRUE     3915mm     IFEQ DEBUG
00001A9A  1239 00C00003           3916mm         MOVE.B DUART_SRA,D1                         ; READ STATUS REGISTER
00001AA0  0801 0002               3917mm         BTST #2,D1                                  ; CHECK FOR SPACE TO SEND
00001AA4  67F4                    3918mm         BEQ WAIT_FOR_READY_283                      ; NO SPACE, CHECK AGAIN
00001AA6  13D8 00C00007           3919mm         MOVE.B (A0)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00001AAC                          3920mm     ENDC
00001AAC                          3921mm 
00001AAC                 FALSE    3922mm     IFNE DEBUG
00001AAC                          3923mm     ENDC
00001AAC                          3924mm 
00001AAC                          3925mm     ENDM
00001AAC  60E4                    3926m     BRA LOOP_282
00001AAE                          3927m EXIT_282
00001AAE                          3928m     ENDM
00001AAE                          3929m                 PRINT_REG D6,D1,D0,D7,A0
00001AAE  41FA 142D               3930m     LEA OX(PC),A0
00001AB2                          3931mm     PRINT_STR A0,D1
00001AB2                          3932mm LOOP_285
00001AB2  0C10 0000               3933mm     CMP.B #NULL,(A0)                                ; 0 -> DONE
00001AB6  6700 0016               3934mm     BEQ EXIT_285
00001ABA                          3935mmm     PRINT_CHAR (A0)+,D1
00001ABA                          3936mmm WAIT_FOR_READY_286                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00001ABA                 TRUE     3937mmm     IFEQ DEBUG
00001ABA  1239 00C00003           3938mmm         MOVE.B DUART_SRA,D1                         ; READ STATUS REGISTER
00001AC0  0801 0002               3939mmm         BTST #2,D1                                  ; CHECK FOR SPACE TO SEND
00001AC4  67F4                    3940mmm         BEQ WAIT_FOR_READY_286                      ; NO SPACE, CHECK AGAIN
00001AC6  13D8 00C00007           3941mmm         MOVE.B (A0)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00001ACC                          3942mmm     ENDC
00001ACC                          3943mmm 
00001ACC                 FALSE    3944mmm     IFNE DEBUG
00001ACC                          3945mmm     ENDC
00001ACC                          3946mmm 
00001ACC                          3947mmm     ENDM
00001ACC  60E4                    3948mm     BRA LOOP_285
00001ACE                          3949mm EXIT_285
00001ACE                          3950mm     ENDM
00001ACE  7E07                    3951m     MOVE.L #7,D7                                    ; LOOP ROUND ALL 8 HEX CHARACTERS OF 4 BITS EACH
00001AD0                          3952m LOOP_284
00001AD0                          3953mm     BIN2HEX D6,D0,A0
00001AD0  41FA 13CA               3954mm     LEA BIN2HEX_LUT(PC),A0                          ; LOAD THE LOOKUP TABLE
00001AD4  E99E                    3955mm     ROL.L #4,D6                                     ; SHIFT THE TOP 4 BITS DOWN TO BOTTOM OF THE REGISTER THE AND MASK OFF EVERYTHING ELSE
00001AD6  1006                    3956mm     MOVE.B D6,D0
00001AD8  0280 0000000F           3957mm     ANDI.L #$F,D0
00001ADE  1030 0000               3958mm     MOVE.B 0(A0,D0),D0                              ; USE THAT AS AN INDEX INTO THE LUT
00001AE2                          3959mm     ENDM
00001AE2                          3960mm     PRINT_CHAR D0,D1
00001AE2                          3961mm WAIT_FOR_READY_288                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00001AE2                 TRUE     3962mm     IFEQ DEBUG
00001AE2  1239 00C00003           3963mm         MOVE.B DUART_SRA,D1                         ; READ STATUS REGISTER
00001AE8  0801 0002               3964mm         BTST #2,D1                                  ; CHECK FOR SPACE TO SEND
00001AEC  67F4                    3965mm         BEQ WAIT_FOR_READY_288                      ; NO SPACE, CHECK AGAIN
00001AEE  13C0 00C00007           3966mm         MOVE.B D0,DUART_TXA                         ; SEND THE NEXT CHARACTER
00001AF4                          3967mm     ENDC
00001AF4                          3968mm 
00001AF4                 FALSE    3969mm     IFNE DEBUG
00001AF4                          3970mm     ENDC
00001AF4                          3971mm 
00001AF4                          3972mm     ENDM
00001AF4  57CF FFDA               3973m     DBEQ D7,LOOP_284
00001AF8                          3974m     ENDM
00001AF8                          3975              ENDI
00001AF8                          3976s _00000017
00001AF8                          3977              
00001AF8                          3978m             READ_32 #IDE_DATA_REGISTER, D6, D1  ; skip load address
00001AF8                          3979mm     READ_16 #IDE_DATA_REGISTER, D6, D1
00001AF8  13FC 0000 00A00007      3980mm     MOVE.B #MC68230_PORT_DIRECTION_READ, MC68230_PORT_B_DIRECTION
00001B00  13FC 0000 00A00005      3981mm     MOVE.B #MC68230_PORT_DIRECTION_READ, MC68230_PORT_A_DIRECTION
00001B08                          3982mm     
00001B08  123C 0030               3983mm     MOVE.B #(MC68230_PORT_C_READ | MC68230_PORT_C_WRITE), D1    
00001B0C  0001 0000               3984mm     ORI.B #IDE_DATA_REGISTER, D1
00001B10  13C1 00A00019           3985mm     MOVE.B D1, MC68230_PORT_C_DATA
00001B16  0201 00DF               3986mm     ANDI.B #~MC68230_PORT_C_READ, D1
00001B1A  13C1 00A00019           3987mm     MOVE.B D1, MC68230_PORT_C_DATA
00001B20  1C39 00A00011           3988mm     MOVE.B MC68230_PORT_A_DATA, D6
00001B26  E14E                    3989mm     LSL.W #8, D6
00001B28  1C39 00A00013           3990mm     MOVE.B MC68230_PORT_B_DATA, D6
00001B2E  0001 0020               3991mm     ORI.B #MC68230_PORT_C_READ, D1
00001B32  13C1 00A00019           3992mm     MOVE.B D1, MC68230_PORT_C_DATA
00001B38  13FC 0038 00A00019      3993mm     MOVE.B #(MC68230_PORT_C_READ | MC68230_PORT_C_WRITE | MC68230_PORT_C_CS), MC68230_PORT_C_DATA
00001B40                          3994mm     ENDM
00001B40  E18E                    3995m     LSL.L #8, D6
00001B42  E18E                    3996m     LSL.L #8, D6
00001B44                          3997mm     READ_16 #IDE_DATA_REGISTER, D6, D1
00001B44  13FC 0000 00A00007      3998mm     MOVE.B #MC68230_PORT_DIRECTION_READ, MC68230_PORT_B_DIRECTION
00001B4C  13FC 0000 00A00005      3999mm     MOVE.B #MC68230_PORT_DIRECTION_READ, MC68230_PORT_A_DIRECTION
00001B54                          4000mm     
00001B54  123C 0030               4001mm     MOVE.B #(MC68230_PORT_C_READ | MC68230_PORT_C_WRITE), D1    
00001B58  0001 0000               4002mm     ORI.B #IDE_DATA_REGISTER, D1
00001B5C  13C1 00A00019           4003mm     MOVE.B D1, MC68230_PORT_C_DATA
00001B62  0201 00DF               4004mm     ANDI.B #~MC68230_PORT_C_READ, D1
00001B66  13C1 00A00019           4005mm     MOVE.B D1, MC68230_PORT_C_DATA
00001B6C  1C39 00A00011           4006mm     MOVE.B MC68230_PORT_A_DATA, D6
00001B72  E14E                    4007mm     LSL.W #8, D6
00001B74  1C39 00A00013           4008mm     MOVE.B MC68230_PORT_B_DATA, D6
00001B7A  0001 0020               4009mm     ORI.B #MC68230_PORT_C_READ, D1
00001B7E  13C1 00A00019           4010mm     MOVE.B D1, MC68230_PORT_C_DATA
00001B84  13FC 0038 00A00019      4011mm     MOVE.B #(MC68230_PORT_C_READ | MC68230_PORT_C_WRITE | MC68230_PORT_C_CS), MC68230_PORT_C_DATA
00001B8C                          4012mm     ENDM
00001B8C                          4013m     ENDM
00001B8C  5484                    4014              ADD.L #2, D4
00001B8E                          4015              IF D5 <NE> #1 THEN
00001B8E  BA7C 0001               4016s     CMP.W   #1,D5
00001B92  6700 006C               4017s     BEQ _00000018
00001B96  41FA 135D               4018                  LEA INDEX_SEP(PC),A0
00001B9A                          4019m                 PRINT_STR A0,D1
00001B9A                          4020m LOOP_292
00001B9A  0C10 0000               4021m     CMP.B #NULL,(A0)                                ; 0 -> DONE
00001B9E  6700 0016               4022m     BEQ EXIT_292
00001BA2                          4023mm     PRINT_CHAR (A0)+,D1
00001BA2                          4024mm WAIT_FOR_READY_293                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00001BA2                 TRUE     4025mm     IFEQ DEBUG
00001BA2  1239 00C00003           4026mm         MOVE.B DUART_SRA,D1                         ; READ STATUS REGISTER
00001BA8  0801 0002               4027mm         BTST #2,D1                                  ; CHECK FOR SPACE TO SEND
00001BAC  67F4                    4028mm         BEQ WAIT_FOR_READY_293                      ; NO SPACE, CHECK AGAIN
00001BAE  13D8 00C00007           4029mm         MOVE.B (A0)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00001BB4                          4030mm     ENDC
00001BB4                          4031mm 
00001BB4                 FALSE    4032mm     IFNE DEBUG
00001BB4                          4033mm     ENDC
00001BB4                          4034mm 
00001BB4                          4035mm     ENDM
00001BB4  60E4                    4036m     BRA LOOP_292
00001BB6                          4037m EXIT_292
00001BB6                          4038m     ENDM
00001BB6                          4039m                 PRINT_REG D6,D1,D0,D7,A0
00001BB6  41FA 1325               4040m     LEA OX(PC),A0
00001BBA                          4041mm     PRINT_STR A0,D1
00001BBA                          4042mm LOOP_295
00001BBA  0C10 0000               4043mm     CMP.B #NULL,(A0)                                ; 0 -> DONE
00001BBE  6700 0016               4044mm     BEQ EXIT_295
00001BC2                          4045mmm     PRINT_CHAR (A0)+,D1
00001BC2                          4046mmm WAIT_FOR_READY_296                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00001BC2                 TRUE     4047mmm     IFEQ DEBUG
00001BC2  1239 00C00003           4048mmm         MOVE.B DUART_SRA,D1                         ; READ STATUS REGISTER
00001BC8  0801 0002               4049mmm         BTST #2,D1                                  ; CHECK FOR SPACE TO SEND
00001BCC  67F4                    4050mmm         BEQ WAIT_FOR_READY_296                      ; NO SPACE, CHECK AGAIN
00001BCE  13D8 00C00007           4051mmm         MOVE.B (A0)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00001BD4                          4052mmm     ENDC
00001BD4                          4053mmm 
00001BD4                 FALSE    4054mmm     IFNE DEBUG
00001BD4                          4055mmm     ENDC
00001BD4                          4056mmm 
00001BD4                          4057mmm     ENDM
00001BD4  60E4                    4058mm     BRA LOOP_295
00001BD6                          4059mm EXIT_295
00001BD6                          4060mm     ENDM
00001BD6  7E07                    4061m     MOVE.L #7,D7                                    ; LOOP ROUND ALL 8 HEX CHARACTERS OF 4 BITS EACH
00001BD8                          4062m LOOP_294
00001BD8                          4063mm     BIN2HEX D6,D0,A0
00001BD8  41FA 12C2               4064mm     LEA BIN2HEX_LUT(PC),A0                          ; LOAD THE LOOKUP TABLE
00001BDC  E99E                    4065mm     ROL.L #4,D6                                     ; SHIFT THE TOP 4 BITS DOWN TO BOTTOM OF THE REGISTER THE AND MASK OFF EVERYTHING ELSE
00001BDE  1006                    4066mm     MOVE.B D6,D0
00001BE0  0280 0000000F           4067mm     ANDI.L #$F,D0
00001BE6  1030 0000               4068mm     MOVE.B 0(A0,D0),D0                              ; USE THAT AS AN INDEX INTO THE LUT
00001BEA                          4069mm     ENDM
00001BEA                          4070mm     PRINT_CHAR D0,D1
00001BEA                          4071mm WAIT_FOR_READY_298                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00001BEA                 TRUE     4072mm     IFEQ DEBUG
00001BEA  1239 00C00003           4073mm         MOVE.B DUART_SRA,D1                         ; READ STATUS REGISTER
00001BF0  0801 0002               4074mm         BTST #2,D1                                  ; CHECK FOR SPACE TO SEND
00001BF4  67F4                    4075mm         BEQ WAIT_FOR_READY_298                      ; NO SPACE, CHECK AGAIN
00001BF6  13C0 00C00007           4076mm         MOVE.B D0,DUART_TXA                         ; SEND THE NEXT CHARACTER
00001BFC                          4077mm     ENDC
00001BFC                          4078mm 
00001BFC                 FALSE    4079mm     IFNE DEBUG
00001BFC                          4080mm     ENDC
00001BFC                          4081mm 
00001BFC                          4082mm     ENDM
00001BFC  57CF FFDA               4083m     DBEQ D7,LOOP_294
00001C00                          4084m     ENDM
00001C00                          4085              ENDI
00001C00                          4086s _00000018
00001C00                          4087  
00001C00                          4088m             READ_32 #IDE_DATA_REGISTER, D6, D1  ; skip go address
00001C00                          4089mm     READ_16 #IDE_DATA_REGISTER, D6, D1
00001C00  13FC 0000 00A00007      4090mm     MOVE.B #MC68230_PORT_DIRECTION_READ, MC68230_PORT_B_DIRECTION
00001C08  13FC 0000 00A00005      4091mm     MOVE.B #MC68230_PORT_DIRECTION_READ, MC68230_PORT_A_DIRECTION
00001C10                          4092mm     
00001C10  123C 0030               4093mm     MOVE.B #(MC68230_PORT_C_READ | MC68230_PORT_C_WRITE), D1    
00001C14  0001 0000               4094mm     ORI.B #IDE_DATA_REGISTER, D1
00001C18  13C1 00A00019           4095mm     MOVE.B D1, MC68230_PORT_C_DATA
00001C1E  0201 00DF               4096mm     ANDI.B #~MC68230_PORT_C_READ, D1
00001C22  13C1 00A00019           4097mm     MOVE.B D1, MC68230_PORT_C_DATA
00001C28  1C39 00A00011           4098mm     MOVE.B MC68230_PORT_A_DATA, D6
00001C2E  E14E                    4099mm     LSL.W #8, D6
00001C30  1C39 00A00013           4100mm     MOVE.B MC68230_PORT_B_DATA, D6
00001C36  0001 0020               4101mm     ORI.B #MC68230_PORT_C_READ, D1
00001C3A  13C1 00A00019           4102mm     MOVE.B D1, MC68230_PORT_C_DATA
00001C40  13FC 0038 00A00019      4103mm     MOVE.B #(MC68230_PORT_C_READ | MC68230_PORT_C_WRITE | MC68230_PORT_C_CS), MC68230_PORT_C_DATA
00001C48                          4104mm     ENDM
00001C48  E18E                    4105m     LSL.L #8, D6
00001C4A  E18E                    4106m     LSL.L #8, D6
00001C4C                          4107mm     READ_16 #IDE_DATA_REGISTER, D6, D1
00001C4C  13FC 0000 00A00007      4108mm     MOVE.B #MC68230_PORT_DIRECTION_READ, MC68230_PORT_B_DIRECTION
00001C54  13FC 0000 00A00005      4109mm     MOVE.B #MC68230_PORT_DIRECTION_READ, MC68230_PORT_A_DIRECTION
00001C5C                          4110mm     
00001C5C  123C 0030               4111mm     MOVE.B #(MC68230_PORT_C_READ | MC68230_PORT_C_WRITE), D1    
00001C60  0001 0000               4112mm     ORI.B #IDE_DATA_REGISTER, D1
00001C64  13C1 00A00019           4113mm     MOVE.B D1, MC68230_PORT_C_DATA
00001C6A  0201 00DF               4114mm     ANDI.B #~MC68230_PORT_C_READ, D1
00001C6E  13C1 00A00019           4115mm     MOVE.B D1, MC68230_PORT_C_DATA
00001C74  1C39 00A00011           4116mm     MOVE.B MC68230_PORT_A_DATA, D6
00001C7A  E14E                    4117mm     LSL.W #8, D6
00001C7C  1C39 00A00013           4118mm     MOVE.B MC68230_PORT_B_DATA, D6
00001C82  0001 0020               4119mm     ORI.B #MC68230_PORT_C_READ, D1
00001C86  13C1 00A00019           4120mm     MOVE.B D1, MC68230_PORT_C_DATA
00001C8C  13FC 0038 00A00019      4121mm     MOVE.B #(MC68230_PORT_C_READ | MC68230_PORT_C_WRITE | MC68230_PORT_C_CS), MC68230_PORT_C_DATA
00001C94                          4122mm     ENDM
00001C94                          4123m     ENDM
00001C94  5484                    4124              ADD.L #2, D4        
00001C96                          4125              IF D5 <NE> #1 THEN
00001C96  BA7C 0001               4126s     CMP.W   #1,D5
00001C9A  6700 006C               4127s     BEQ _00000019
00001C9E  41FA 1255               4128                  LEA INDEX_SEP(PC),A0
00001CA2                          4129m                 PRINT_STR A0,D1
00001CA2                          4130m LOOP_302
00001CA2  0C10 0000               4131m     CMP.B #NULL,(A0)                                ; 0 -> DONE
00001CA6  6700 0016               4132m     BEQ EXIT_302
00001CAA                          4133mm     PRINT_CHAR (A0)+,D1
00001CAA                          4134mm WAIT_FOR_READY_303                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00001CAA                 TRUE     4135mm     IFEQ DEBUG
00001CAA  1239 00C00003           4136mm         MOVE.B DUART_SRA,D1                         ; READ STATUS REGISTER
00001CB0  0801 0002               4137mm         BTST #2,D1                                  ; CHECK FOR SPACE TO SEND
00001CB4  67F4                    4138mm         BEQ WAIT_FOR_READY_303                      ; NO SPACE, CHECK AGAIN
00001CB6  13D8 00C00007           4139mm         MOVE.B (A0)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00001CBC                          4140mm     ENDC
00001CBC                          4141mm 
00001CBC                 FALSE    4142mm     IFNE DEBUG
00001CBC                          4143mm     ENDC
00001CBC                          4144mm 
00001CBC                          4145mm     ENDM
00001CBC  60E4                    4146m     BRA LOOP_302
00001CBE                          4147m EXIT_302
00001CBE                          4148m     ENDM
00001CBE                          4149m                 PRINT_REG D6,D1,D0,D7,A0
00001CBE  41FA 121D               4150m     LEA OX(PC),A0
00001CC2                          4151mm     PRINT_STR A0,D1
00001CC2                          4152mm LOOP_305
00001CC2  0C10 0000               4153mm     CMP.B #NULL,(A0)                                ; 0 -> DONE
00001CC6  6700 0016               4154mm     BEQ EXIT_305
00001CCA                          4155mmm     PRINT_CHAR (A0)+,D1
00001CCA                          4156mmm WAIT_FOR_READY_306                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00001CCA                 TRUE     4157mmm     IFEQ DEBUG
00001CCA  1239 00C00003           4158mmm         MOVE.B DUART_SRA,D1                         ; READ STATUS REGISTER
00001CD0  0801 0002               4159mmm         BTST #2,D1                                  ; CHECK FOR SPACE TO SEND
00001CD4  67F4                    4160mmm         BEQ WAIT_FOR_READY_306                      ; NO SPACE, CHECK AGAIN
00001CD6  13D8 00C00007           4161mmm         MOVE.B (A0)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00001CDC                          4162mmm     ENDC
00001CDC                          4163mmm 
00001CDC                 FALSE    4164mmm     IFNE DEBUG
00001CDC                          4165mmm     ENDC
00001CDC                          4166mmm 
00001CDC                          4167mmm     ENDM
00001CDC  60E4                    4168mm     BRA LOOP_305
00001CDE                          4169mm EXIT_305
00001CDE                          4170mm     ENDM
00001CDE  7E07                    4171m     MOVE.L #7,D7                                    ; LOOP ROUND ALL 8 HEX CHARACTERS OF 4 BITS EACH
00001CE0                          4172m LOOP_304
00001CE0                          4173mm     BIN2HEX D6,D0,A0
00001CE0  41FA 11BA               4174mm     LEA BIN2HEX_LUT(PC),A0                          ; LOAD THE LOOKUP TABLE
00001CE4  E99E                    4175mm     ROL.L #4,D6                                     ; SHIFT THE TOP 4 BITS DOWN TO BOTTOM OF THE REGISTER THE AND MASK OFF EVERYTHING ELSE
00001CE6  1006                    4176mm     MOVE.B D6,D0
00001CE8  0280 0000000F           4177mm     ANDI.L #$F,D0
00001CEE  1030 0000               4178mm     MOVE.B 0(A0,D0),D0                              ; USE THAT AS AN INDEX INTO THE LUT
00001CF2                          4179mm     ENDM
00001CF2                          4180mm     PRINT_CHAR D0,D1
00001CF2                          4181mm WAIT_FOR_READY_308                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00001CF2                 TRUE     4182mm     IFEQ DEBUG
00001CF2  1239 00C00003           4183mm         MOVE.B DUART_SRA,D1                         ; READ STATUS REGISTER
00001CF8  0801 0002               4184mm         BTST #2,D1                                  ; CHECK FOR SPACE TO SEND
00001CFC  67F4                    4185mm         BEQ WAIT_FOR_READY_308                      ; NO SPACE, CHECK AGAIN
00001CFE  13C0 00C00007           4186mm         MOVE.B D0,DUART_TXA                         ; SEND THE NEXT CHARACTER
00001D04                          4187mm     ENDC
00001D04                          4188mm 
00001D04                 FALSE    4189mm     IFNE DEBUG
00001D04                          4190mm     ENDC
00001D04                          4191mm 
00001D04                          4192mm     ENDM
00001D04  57CF FFDA               4193m     DBEQ D7,LOOP_304
00001D08                          4194m     ENDM
00001D08                          4195              ENDI
00001D08                          4196s _00000019
00001D08                          4197  
00001D08                          4198m             READ_32 #IDE_DATA_REGISTER, D6, D1  ; skip start block
00001D08                          4199mm     READ_16 #IDE_DATA_REGISTER, D6, D1
00001D08  13FC 0000 00A00007      4200mm     MOVE.B #MC68230_PORT_DIRECTION_READ, MC68230_PORT_B_DIRECTION
00001D10  13FC 0000 00A00005      4201mm     MOVE.B #MC68230_PORT_DIRECTION_READ, MC68230_PORT_A_DIRECTION
00001D18                          4202mm     
00001D18  123C 0030               4203mm     MOVE.B #(MC68230_PORT_C_READ | MC68230_PORT_C_WRITE), D1    
00001D1C  0001 0000               4204mm     ORI.B #IDE_DATA_REGISTER, D1
00001D20  13C1 00A00019           4205mm     MOVE.B D1, MC68230_PORT_C_DATA
00001D26  0201 00DF               4206mm     ANDI.B #~MC68230_PORT_C_READ, D1
00001D2A  13C1 00A00019           4207mm     MOVE.B D1, MC68230_PORT_C_DATA
00001D30  1C39 00A00011           4208mm     MOVE.B MC68230_PORT_A_DATA, D6
00001D36  E14E                    4209mm     LSL.W #8, D6
00001D38  1C39 00A00013           4210mm     MOVE.B MC68230_PORT_B_DATA, D6
00001D3E  0001 0020               4211mm     ORI.B #MC68230_PORT_C_READ, D1
00001D42  13C1 00A00019           4212mm     MOVE.B D1, MC68230_PORT_C_DATA
00001D48  13FC 0038 00A00019      4213mm     MOVE.B #(MC68230_PORT_C_READ | MC68230_PORT_C_WRITE | MC68230_PORT_C_CS), MC68230_PORT_C_DATA
00001D50                          4214mm     ENDM
00001D50  E18E                    4215m     LSL.L #8, D6
00001D52  E18E                    4216m     LSL.L #8, D6
00001D54                          4217mm     READ_16 #IDE_DATA_REGISTER, D6, D1
00001D54  13FC 0000 00A00007      4218mm     MOVE.B #MC68230_PORT_DIRECTION_READ, MC68230_PORT_B_DIRECTION
00001D5C  13FC 0000 00A00005      4219mm     MOVE.B #MC68230_PORT_DIRECTION_READ, MC68230_PORT_A_DIRECTION
00001D64                          4220mm     
00001D64  123C 0030               4221mm     MOVE.B #(MC68230_PORT_C_READ | MC68230_PORT_C_WRITE), D1    
00001D68  0001 0000               4222mm     ORI.B #IDE_DATA_REGISTER, D1
00001D6C  13C1 00A00019           4223mm     MOVE.B D1, MC68230_PORT_C_DATA
00001D72  0201 00DF               4224mm     ANDI.B #~MC68230_PORT_C_READ, D1
00001D76  13C1 00A00019           4225mm     MOVE.B D1, MC68230_PORT_C_DATA
00001D7C  1C39 00A00011           4226mm     MOVE.B MC68230_PORT_A_DATA, D6
00001D82  E14E                    4227mm     LSL.W #8, D6
00001D84  1C39 00A00013           4228mm     MOVE.B MC68230_PORT_B_DATA, D6
00001D8A  0001 0020               4229mm     ORI.B #MC68230_PORT_C_READ, D1
00001D8E  13C1 00A00019           4230mm     MOVE.B D1, MC68230_PORT_C_DATA
00001D94  13FC 0038 00A00019      4231mm     MOVE.B #(MC68230_PORT_C_READ | MC68230_PORT_C_WRITE | MC68230_PORT_C_CS), MC68230_PORT_C_DATA
00001D9C                          4232mm     ENDM
00001D9C                          4233m     ENDM
00001D9C  5484                    4234              ADD.L #2, D4        
00001D9E                          4235              IF D5 <NE> #1 THEN
00001D9E  BA7C 0001               4236s     CMP.W   #1,D5
00001DA2  6700 008C               4237s     BEQ _0000001A
00001DA6  41FA 114D               4238                  LEA INDEX_SEP(PC),A0
00001DAA                          4239m                 PRINT_STR A0,D1
00001DAA                          4240m LOOP_312
00001DAA  0C10 0000               4241m     CMP.B #NULL,(A0)                                ; 0 -> DONE
00001DAE  6700 0016               4242m     BEQ EXIT_312
00001DB2                          4243mm     PRINT_CHAR (A0)+,D1
00001DB2                          4244mm WAIT_FOR_READY_313                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00001DB2                 TRUE     4245mm     IFEQ DEBUG
00001DB2  1239 00C00003           4246mm         MOVE.B DUART_SRA,D1                         ; READ STATUS REGISTER
00001DB8  0801 0002               4247mm         BTST #2,D1                                  ; CHECK FOR SPACE TO SEND
00001DBC  67F4                    4248mm         BEQ WAIT_FOR_READY_313                      ; NO SPACE, CHECK AGAIN
00001DBE  13D8 00C00007           4249mm         MOVE.B (A0)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00001DC4                          4250mm     ENDC
00001DC4                          4251mm 
00001DC4                 FALSE    4252mm     IFNE DEBUG
00001DC4                          4253mm     ENDC
00001DC4                          4254mm 
00001DC4                          4255mm     ENDM
00001DC4  60E4                    4256m     BRA LOOP_312
00001DC6                          4257m EXIT_312
00001DC6                          4258m     ENDM
00001DC6                          4259m                 PRINT_REG D6,D1,D0,D7,A0
00001DC6  41FA 1115               4260m     LEA OX(PC),A0
00001DCA                          4261mm     PRINT_STR A0,D1
00001DCA                          4262mm LOOP_315
00001DCA  0C10 0000               4263mm     CMP.B #NULL,(A0)                                ; 0 -> DONE
00001DCE  6700 0016               4264mm     BEQ EXIT_315
00001DD2                          4265mmm     PRINT_CHAR (A0)+,D1
00001DD2                          4266mmm WAIT_FOR_READY_316                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00001DD2                 TRUE     4267mmm     IFEQ DEBUG
00001DD2  1239 00C00003           4268mmm         MOVE.B DUART_SRA,D1                         ; READ STATUS REGISTER
00001DD8  0801 0002               4269mmm         BTST #2,D1                                  ; CHECK FOR SPACE TO SEND
00001DDC  67F4                    4270mmm         BEQ WAIT_FOR_READY_316                      ; NO SPACE, CHECK AGAIN
00001DDE  13D8 00C00007           4271mmm         MOVE.B (A0)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00001DE4                          4272mmm     ENDC
00001DE4                          4273mmm 
00001DE4                 FALSE    4274mmm     IFNE DEBUG
00001DE4                          4275mmm     ENDC
00001DE4                          4276mmm 
00001DE4                          4277mmm     ENDM
00001DE4  60E4                    4278mm     BRA LOOP_315
00001DE6                          4279mm EXIT_315
00001DE6                          4280mm     ENDM
00001DE6  7E07                    4281m     MOVE.L #7,D7                                    ; LOOP ROUND ALL 8 HEX CHARACTERS OF 4 BITS EACH
00001DE8                          4282m LOOP_314
00001DE8                          4283mm     BIN2HEX D6,D0,A0
00001DE8  41FA 10B2               4284mm     LEA BIN2HEX_LUT(PC),A0                          ; LOAD THE LOOKUP TABLE
00001DEC  E99E                    4285mm     ROL.L #4,D6                                     ; SHIFT THE TOP 4 BITS DOWN TO BOTTOM OF THE REGISTER THE AND MASK OFF EVERYTHING ELSE
00001DEE  1006                    4286mm     MOVE.B D6,D0
00001DF0  0280 0000000F           4287mm     ANDI.L #$F,D0
00001DF6  1030 0000               4288mm     MOVE.B 0(A0,D0),D0                              ; USE THAT AS AN INDEX INTO THE LUT
00001DFA                          4289mm     ENDM
00001DFA                          4290mm     PRINT_CHAR D0,D1
00001DFA                          4291mm WAIT_FOR_READY_318                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00001DFA                 TRUE     4292mm     IFEQ DEBUG
00001DFA  1239 00C00003           4293mm         MOVE.B DUART_SRA,D1                         ; READ STATUS REGISTER
00001E00  0801 0002               4294mm         BTST #2,D1                                  ; CHECK FOR SPACE TO SEND
00001E04  67F4                    4295mm         BEQ WAIT_FOR_READY_318                      ; NO SPACE, CHECK AGAIN
00001E06  13C0 00C00007           4296mm         MOVE.B D0,DUART_TXA                         ; SEND THE NEXT CHARACTER
00001E0C                          4297mm     ENDC
00001E0C                          4298mm 
00001E0C                 FALSE    4299mm     IFNE DEBUG
00001E0C                          4300mm     ENDC
00001E0C                          4301mm 
00001E0C                          4302mm     ENDM
00001E0C  57CF FFDA               4303m     DBEQ D7,LOOP_314
00001E10                          4304m     ENDM
00001E10                          4305m                 PRINT_CRLF D1,A1
00001E10  43FA 10C5               4306m     LEA CRLF(PC),A1
00001E14                          4307mm     PRINT_STR A1,D1
00001E14                          4308mm LOOP_320
00001E14  0C11 0000               4309mm     CMP.B #NULL,(A1)                                ; 0 -> DONE
00001E18  6700 0016               4310mm     BEQ EXIT_320
00001E1C                          4311mmm     PRINT_CHAR (A1)+,D1
00001E1C                          4312mmm WAIT_FOR_READY_321                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00001E1C                 TRUE     4313mmm     IFEQ DEBUG
00001E1C  1239 00C00003           4314mmm         MOVE.B DUART_SRA,D1                         ; READ STATUS REGISTER
00001E22  0801 0002               4315mmm         BTST #2,D1                                  ; CHECK FOR SPACE TO SEND
00001E26  67F4                    4316mmm         BEQ WAIT_FOR_READY_321                      ; NO SPACE, CHECK AGAIN
00001E28  13D9 00C00007           4317mmm         MOVE.B (A1)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00001E2E                          4318mmm     ENDC
00001E2E                          4319mmm 
00001E2E                 FALSE    4320mmm     IFNE DEBUG
00001E2E                          4321mmm     ENDC
00001E2E                          4322mmm 
00001E2E                          4323mmm     ENDM
00001E2E  60E4                    4324mm     BRA LOOP_320
00001E30                          4325mm EXIT_320
00001E30                          4326mm     ENDM
00001E30                          4327m     ENDM
00001E30                          4328              ENDI
00001E30                          4329s _0000001A
00001E30                          4330          
00001E30  5283                    4331              ADD.L #1, D3
00001E32                          4332          ELSE
00001E32  6000 004C               4333s     BRA _0000001B
00001E36                          4334s _00000014
00001E36                          4335m             READ_16 #IDE_DATA_REGISTER, D6, D1  ; ignore
00001E36  13FC 0000 00A00007      4336m     MOVE.B #MC68230_PORT_DIRECTION_READ, MC68230_PORT_B_DIRECTION
00001E3E  13FC 0000 00A00005      4337m     MOVE.B #MC68230_PORT_DIRECTION_READ, MC68230_PORT_A_DIRECTION
00001E46                          4338m     
00001E46  123C 0030               4339m     MOVE.B #(MC68230_PORT_C_READ | MC68230_PORT_C_WRITE), D1    
00001E4A  0001 0000               4340m     ORI.B #IDE_DATA_REGISTER, D1
00001E4E  13C1 00A00019           4341m     MOVE.B D1, MC68230_PORT_C_DATA
00001E54  0201 00DF               4342m     ANDI.B #~MC68230_PORT_C_READ, D1
00001E58  13C1 00A00019           4343m     MOVE.B D1, MC68230_PORT_C_DATA
00001E5E  1C39 00A00011           4344m     MOVE.B MC68230_PORT_A_DATA, D6
00001E64  E14E                    4345m     LSL.W #8, D6
00001E66  1C39 00A00013           4346m     MOVE.B MC68230_PORT_B_DATA, D6
00001E6C  0001 0020               4347m     ORI.B #MC68230_PORT_C_READ, D1
00001E70  13C1 00A00019           4348m     MOVE.B D1, MC68230_PORT_C_DATA
00001E76  13FC 0038 00A00019      4349m     MOVE.B #(MC68230_PORT_C_READ | MC68230_PORT_C_WRITE | MC68230_PORT_C_CS), MC68230_PORT_C_DATA
00001E7E                          4350m     ENDM
00001E7E  5284                    4351              ADD.L #1, D4    
00001E80                          4352          ENDI
00001E80                          4353s _0000001B
00001E80                          4354      ENDW
00001E80  6000 F852               4355s     BRA _10000016
00001E84                          4356s _10000017
00001E84                          4357      
00001E84  7E00                    4358      MOVE.L #0,D7
00001E86                          4359      
00001E86  6000 E4BC               4360      BRA MAIN_LOOP
00001E8A                          4361      
00001E8A                          4362  B
00001E8A  13FC 0038 00A00019      4363      MOVE.B #(MC68230_PORT_C_READ | MC68230_PORT_C_WRITE | MC68230_PORT_C_CS), MC68230_PORT_C_DATA
00001E92                          4364      
00001E92                          4365m     WRITE_8 #IDE_DRIVESEL_MASTER, #IDE_DRIVESEL_REGISTER, D0
00001E92  13FC 00FF 00A00007      4366m     MOVE.B #MC68230_PORT_DIRECTION_WRITE, MC68230_PORT_B_DIRECTION
00001E9A  103C 0030               4367m     MOVE.B #(MC68230_PORT_C_READ | MC68230_PORT_C_WRITE), D0
00001E9E  0000 0006               4368m     ORI.B #IDE_DRIVESEL_REGISTER, D0
00001EA2  13C0 00A00019           4369m     MOVE.B D0, MC68230_PORT_C_DATA
00001EA8  0200 00EF               4370m     ANDI.B #~MC68230_PORT_C_WRITE, D0
00001EAC  13FC 00E0 00A00013      4371m     MOVE.B #IDE_DRIVESEL_MASTER, MC68230_PORT_B_DATA
00001EB4  13C0 00A00019           4372m     MOVE.B D0, MC68230_PORT_C_DATA
00001EBA  0000 0010               4373m     ORI.B #MC68230_PORT_C_WRITE, D0
00001EBE  13C0 00A00019           4374m     MOVE.B D0, MC68230_PORT_C_DATA
00001EC4  13FC 0038 00A00019      4375m     MOVE.B #(MC68230_PORT_C_READ | MC68230_PORT_C_WRITE | MC68230_PORT_C_CS), MC68230_PORT_C_DATA
00001ECC                          4376m     ENDM
00001ECC                          4377m     WAIT_DRIVE_READY D0, D1
00001ECC                          4378m LOOP_324
00001ECC                          4379mm     READ_IDE_STATUS D0, D1
00001ECC                          4380mmm     READ_8 #IDE_STATUS_REGISTER, D0, D1
00001ECC  13FC 0000 00A00007      4381mmm     MOVE.B #MC68230_PORT_DIRECTION_READ, MC68230_PORT_B_DIRECTION
00001ED4  123C 0030               4382mmm     MOVE.B #(MC68230_PORT_C_READ | MC68230_PORT_C_WRITE), D1
00001ED8  0001 0007               4383mmm     ORI.B #IDE_STATUS_REGISTER, D1
00001EDC  13C1 00A00019           4384mmm     MOVE.B D1, MC68230_PORT_C_DATA
00001EE2  0201 00DF               4385mmm     ANDI.B #~MC68230_PORT_C_READ, D1
00001EE6  13C1 00A00019           4386mmm     MOVE.B D1, MC68230_PORT_C_DATA
00001EEC  1039 00A00013           4387mmm     MOVE.B MC68230_PORT_B_DATA, D0
00001EF2  0001 0020               4388mmm     ORI.B #MC68230_PORT_C_READ, D1
00001EF6  13C1 00A00019           4389mmm     MOVE.B D1, MC68230_PORT_C_DATA
00001EFC  13FC 0038 00A00019      4390mmm     MOVE.B #(MC68230_PORT_C_READ | MC68230_PORT_C_WRITE | MC68230_PORT_C_CS), MC68230_PORT_C_DATA
00001F04                          4391mmm     ENDM
00001F04                          4392mm     ENDM
00001F04  0800 0006               4393m     BTST #IDE_STATUS_READY, D0
00001F08  67C2                    4394m     BEQ LOOP_324
00001F0A                          4395m     ENDM
00001F0A                          4396          
00001F0A                          4397m     SEND_READ_COMMAND_AND_WAIT #0, D0, D1, D2
00001F0A                          4398mm     WAIT_DRIVE_NOT_BUSY D0, D1
00001F0A                          4399mm LOOP_328
00001F0A                          4400mmm     READ_IDE_STATUS D0, D1
00001F0A                          4401mmmm     READ_8 #IDE_STATUS_REGISTER, D0, D1
00001F0A  13FC 0000 00A00007      4402mmmm     MOVE.B #MC68230_PORT_DIRECTION_READ, MC68230_PORT_B_DIRECTION
00001F12  123C 0030               4403mmmm     MOVE.B #(MC68230_PORT_C_READ | MC68230_PORT_C_WRITE), D1
00001F16  0001 0007               4404mmmm     ORI.B #IDE_STATUS_REGISTER, D1
00001F1A  13C1 00A00019           4405mmmm     MOVE.B D1, MC68230_PORT_C_DATA
00001F20  0201 00DF               4406mmmm     ANDI.B #~MC68230_PORT_C_READ, D1
00001F24  13C1 00A00019           4407mmmm     MOVE.B D1, MC68230_PORT_C_DATA
00001F2A  1039 00A00013           4408mmmm     MOVE.B MC68230_PORT_B_DATA, D0
00001F30  0001 0020               4409mmmm     ORI.B #MC68230_PORT_C_READ, D1
00001F34  13C1 00A00019           4410mmmm     MOVE.B D1, MC68230_PORT_C_DATA
00001F3A  13FC 0038 00A00019      4411mmmm     MOVE.B #(MC68230_PORT_C_READ | MC68230_PORT_C_WRITE | MC68230_PORT_C_CS), MC68230_PORT_C_DATA
00001F42                          4412mmmm     ENDM
00001F42                          4413mmm     ENDM
00001F42  0800 0007               4414mm     BTST #IDE_STATUS_BUSY, D0
00001F46  66C2                    4415mm     BNE LOOP_328
00001F48                          4416mm     ENDM
00001F48                          4417mm     SET_READ_ADDRESS #0, D0, D1, D2
00001F48                          4418mmm     WRITE_8 #1, #IDE_SECTOR_COUNT_REGISTER, D0
00001F48  13FC 00FF 00A00007      4419mmm     MOVE.B #MC68230_PORT_DIRECTION_WRITE, MC68230_PORT_B_DIRECTION
00001F50  103C 0030               4420mmm     MOVE.B #(MC68230_PORT_C_READ | MC68230_PORT_C_WRITE), D0
00001F54  0000 0002               4421mmm     ORI.B #IDE_SECTOR_COUNT_REGISTER, D0
00001F58  13C0 00A00019           4422mmm     MOVE.B D0, MC68230_PORT_C_DATA
00001F5E  0200 00EF               4423mmm     ANDI.B #~MC68230_PORT_C_WRITE, D0
00001F62  13FC 0001 00A00013      4424mmm     MOVE.B #1, MC68230_PORT_B_DATA
00001F6A  13C0 00A00019           4425mmm     MOVE.B D0, MC68230_PORT_C_DATA
00001F70  0000 0010               4426mmm     ORI.B #MC68230_PORT_C_WRITE, D0
00001F74  13C0 00A00019           4427mmm     MOVE.B D0, MC68230_PORT_C_DATA
00001F7A  13FC 0038 00A00019      4428mmm     MOVE.B #(MC68230_PORT_C_READ | MC68230_PORT_C_WRITE | MC68230_PORT_C_CS), MC68230_PORT_C_DATA
00001F82                          4429mmm     ENDM
00001F82  7200                    4430mm     MOVE.L #0,D1
00001F84                          4431mmm     WRITE_8 D1, #IDE_LBA_0_7_REGISTER, D0
00001F84  13FC 00FF 00A00007      4432mmm     MOVE.B #MC68230_PORT_DIRECTION_WRITE, MC68230_PORT_B_DIRECTION
00001F8C  103C 0030               4433mmm     MOVE.B #(MC68230_PORT_C_READ | MC68230_PORT_C_WRITE), D0
00001F90  0000 0003               4434mmm     ORI.B #IDE_LBA_0_7_REGISTER, D0
00001F94  13C0 00A00019           4435mmm     MOVE.B D0, MC68230_PORT_C_DATA
00001F9A  0200 00EF               4436mmm     ANDI.B #~MC68230_PORT_C_WRITE, D0
00001F9E  13C1 00A00013           4437mmm     MOVE.B D1, MC68230_PORT_B_DATA
00001FA4  13C0 00A00019           4438mmm     MOVE.B D0, MC68230_PORT_C_DATA
00001FAA  0000 0010               4439mmm     ORI.B #MC68230_PORT_C_WRITE, D0
00001FAE  13C0 00A00019           4440mmm     MOVE.B D0, MC68230_PORT_C_DATA
00001FB4  13FC 0038 00A00019      4441mmm     MOVE.B #(MC68230_PORT_C_READ | MC68230_PORT_C_WRITE | MC68230_PORT_C_CS), MC68230_PORT_C_DATA
00001FBC                          4442mmm     ENDM
00001FBC  E089                    4443mm     LSR.L #8, D1
00001FBE                          4444mmm     WRITE_8 D1, #IDE_LBA_8_15_REGISTER, D0
00001FBE  13FC 00FF 00A00007      4445mmm     MOVE.B #MC68230_PORT_DIRECTION_WRITE, MC68230_PORT_B_DIRECTION
00001FC6  103C 0030               4446mmm     MOVE.B #(MC68230_PORT_C_READ | MC68230_PORT_C_WRITE), D0
00001FCA  0000 0004               4447mmm     ORI.B #IDE_LBA_8_15_REGISTER, D0
00001FCE  13C0 00A00019           4448mmm     MOVE.B D0, MC68230_PORT_C_DATA
00001FD4  0200 00EF               4449mmm     ANDI.B #~MC68230_PORT_C_WRITE, D0
00001FD8  13C1 00A00013           4450mmm     MOVE.B D1, MC68230_PORT_B_DATA
00001FDE  13C0 00A00019           4451mmm     MOVE.B D0, MC68230_PORT_C_DATA
00001FE4  0000 0010               4452mmm     ORI.B #MC68230_PORT_C_WRITE, D0
00001FE8  13C0 00A00019           4453mmm     MOVE.B D0, MC68230_PORT_C_DATA
00001FEE  13FC 0038 00A00019      4454mmm     MOVE.B #(MC68230_PORT_C_READ | MC68230_PORT_C_WRITE | MC68230_PORT_C_CS), MC68230_PORT_C_DATA
00001FF6                          4455mmm     ENDM
00001FF6  E089                    4456mm     LSR.L #8, D1                                
00001FF8                          4457mmm     WRITE_8 D1, #IDE_LBA_16_23_REGISTER, D0
00001FF8  13FC 00FF 00A00007      4458mmm     MOVE.B #MC68230_PORT_DIRECTION_WRITE, MC68230_PORT_B_DIRECTION
00002000  103C 0030               4459mmm     MOVE.B #(MC68230_PORT_C_READ | MC68230_PORT_C_WRITE), D0
00002004  0000 0005               4460mmm     ORI.B #IDE_LBA_16_23_REGISTER, D0
00002008  13C0 00A00019           4461mmm     MOVE.B D0, MC68230_PORT_C_DATA
0000200E  0200 00EF               4462mmm     ANDI.B #~MC68230_PORT_C_WRITE, D0
00002012  13C1 00A00013           4463mmm     MOVE.B D1, MC68230_PORT_B_DATA
00002018  13C0 00A00019           4464mmm     MOVE.B D0, MC68230_PORT_C_DATA
0000201E  0000 0010               4465mmm     ORI.B #MC68230_PORT_C_WRITE, D0
00002022  13C0 00A00019           4466mmm     MOVE.B D0, MC68230_PORT_C_DATA
00002028  13FC 0038 00A00019      4467mmm     MOVE.B #(MC68230_PORT_C_READ | MC68230_PORT_C_WRITE | MC68230_PORT_C_CS), MC68230_PORT_C_DATA
00002030                          4468mmm     ENDM
00002030  E089                    4469mm     LSR.L #8, D1
00002032                          4470mmm     READ_8 #IDE_DRIVESEL_REGISTER, D2, D0
00002032  13FC 0000 00A00007      4471mmm     MOVE.B #MC68230_PORT_DIRECTION_READ, MC68230_PORT_B_DIRECTION
0000203A  103C 0030               4472mmm     MOVE.B #(MC68230_PORT_C_READ | MC68230_PORT_C_WRITE), D0
0000203E  0000 0006               4473mmm     ORI.B #IDE_DRIVESEL_REGISTER, D0
00002042  13C0 00A00019           4474mmm     MOVE.B D0, MC68230_PORT_C_DATA
00002048  0200 00DF               4475mmm     ANDI.B #~MC68230_PORT_C_READ, D0
0000204C  13C0 00A00019           4476mmm     MOVE.B D0, MC68230_PORT_C_DATA
00002052  1439 00A00013           4477mmm     MOVE.B MC68230_PORT_B_DATA, D2
00002058  0000 0020               4478mmm     ORI.B #MC68230_PORT_C_READ, D0
0000205C  13C0 00A00019           4479mmm     MOVE.B D0, MC68230_PORT_C_DATA
00002062  13FC 0038 00A00019      4480mmm     MOVE.B #(MC68230_PORT_C_READ | MC68230_PORT_C_WRITE | MC68230_PORT_C_CS), MC68230_PORT_C_DATA
0000206A                          4481mmm     ENDM
0000206A  0201 000F               4482mm     ANDI.B #$0F,D1
0000206E  8401                    4483mm     OR.B D1,D2
00002070                          4484mmm     WRITE_8 D2, #IDE_DRIVESEL_REGISTER, D0
00002070  13FC 00FF 00A00007      4485mmm     MOVE.B #MC68230_PORT_DIRECTION_WRITE, MC68230_PORT_B_DIRECTION
00002078  103C 0030               4486mmm     MOVE.B #(MC68230_PORT_C_READ | MC68230_PORT_C_WRITE), D0
0000207C  0000 0006               4487mmm     ORI.B #IDE_DRIVESEL_REGISTER, D0
00002080  13C0 00A00019           4488mmm     MOVE.B D0, MC68230_PORT_C_DATA
00002086  0200 00EF               4489mmm     ANDI.B #~MC68230_PORT_C_WRITE, D0
0000208A  13C2 00A00013           4490mmm     MOVE.B D2, MC68230_PORT_B_DATA
00002090  13C0 00A00019           4491mmm     MOVE.B D0, MC68230_PORT_C_DATA
00002096  0000 0010               4492mmm     ORI.B #MC68230_PORT_C_WRITE, D0
0000209A  13C0 00A00019           4493mmm     MOVE.B D0, MC68230_PORT_C_DATA
000020A0  13FC 0038 00A00019      4494mmm     MOVE.B #(MC68230_PORT_C_READ | MC68230_PORT_C_WRITE | MC68230_PORT_C_CS), MC68230_PORT_C_DATA
000020A8                          4495mmm     ENDM
000020A8                          4496mm     ENDM
000020A8                          4497mm     SEND_COMMAND #IDE_COMMAND_READ_WITH_RETRY, D0
000020A8                          4498mmm     WRITE_8 #IDE_COMMAND_READ_WITH_RETRY, #IDE_COMMAND_REGISTER, D0
000020A8  13FC 00FF 00A00007      4499mmm     MOVE.B #MC68230_PORT_DIRECTION_WRITE, MC68230_PORT_B_DIRECTION
000020B0  103C 0030               4500mmm     MOVE.B #(MC68230_PORT_C_READ | MC68230_PORT_C_WRITE), D0
000020B4  0000 0007               4501mmm     ORI.B #IDE_COMMAND_REGISTER, D0
000020B8  13C0 00A00019           4502mmm     MOVE.B D0, MC68230_PORT_C_DATA
000020BE  0200 00EF               4503mmm     ANDI.B #~MC68230_PORT_C_WRITE, D0
000020C2  13FC 0020 00A00013      4504mmm     MOVE.B #IDE_COMMAND_READ_WITH_RETRY, MC68230_PORT_B_DATA
000020CA  13C0 00A00019           4505mmm     MOVE.B D0, MC68230_PORT_C_DATA
000020D0  0000 0010               4506mmm     ORI.B #MC68230_PORT_C_WRITE, D0
000020D4  13C0 00A00019           4507mmm     MOVE.B D0, MC68230_PORT_C_DATA
000020DA  13FC 0038 00A00019      4508mmm     MOVE.B #(MC68230_PORT_C_READ | MC68230_PORT_C_WRITE | MC68230_PORT_C_CS), MC68230_PORT_C_DATA
000020E2                          4509mmm     ENDM
000020E2                          4510mm     ENDM
000020E2                          4511mm     WAIT_DRIVE_NOT_BUSY D0, D1
000020E2                          4512mm LOOP_340
000020E2                          4513mmm     READ_IDE_STATUS D0, D1
000020E2                          4514mmmm     READ_8 #IDE_STATUS_REGISTER, D0, D1
000020E2  13FC 0000 00A00007      4515mmmm     MOVE.B #MC68230_PORT_DIRECTION_READ, MC68230_PORT_B_DIRECTION
000020EA  123C 0030               4516mmmm     MOVE.B #(MC68230_PORT_C_READ | MC68230_PORT_C_WRITE), D1
000020EE  0001 0007               4517mmmm     ORI.B #IDE_STATUS_REGISTER, D1
000020F2  13C1 00A00019           4518mmmm     MOVE.B D1, MC68230_PORT_C_DATA
000020F8  0201 00DF               4519mmmm     ANDI.B #~MC68230_PORT_C_READ, D1
000020FC  13C1 00A00019           4520mmmm     MOVE.B D1, MC68230_PORT_C_DATA
00002102  1039 00A00013           4521mmmm     MOVE.B MC68230_PORT_B_DATA, D0
00002108  0001 0020               4522mmmm     ORI.B #MC68230_PORT_C_READ, D1
0000210C  13C1 00A00019           4523mmmm     MOVE.B D1, MC68230_PORT_C_DATA
00002112  13FC 0038 00A00019      4524mmmm     MOVE.B #(MC68230_PORT_C_READ | MC68230_PORT_C_WRITE | MC68230_PORT_C_CS), MC68230_PORT_C_DATA
0000211A                          4525mmmm     ENDM
0000211A                          4526mmm     ENDM
0000211A  0800 0007               4527mm     BTST #IDE_STATUS_BUSY, D0
0000211E  66C2                    4528mm     BNE LOOP_340
00002120                          4529mm     ENDM
00002120                          4530mm     WAIT_DRIVE_DRQ D0, D1
00002120                          4531mm LOOP_343
00002120                          4532mmm     READ_IDE_STATUS D0, D1
00002120                          4533mmmm     READ_8 #IDE_STATUS_REGISTER, D0, D1
00002120  13FC 0000 00A00007      4534mmmm     MOVE.B #MC68230_PORT_DIRECTION_READ, MC68230_PORT_B_DIRECTION
00002128  123C 0030               4535mmmm     MOVE.B #(MC68230_PORT_C_READ | MC68230_PORT_C_WRITE), D1
0000212C  0001 0007               4536mmmm     ORI.B #IDE_STATUS_REGISTER, D1
00002130  13C1 00A00019           4537mmmm     MOVE.B D1, MC68230_PORT_C_DATA
00002136  0201 00DF               4538mmmm     ANDI.B #~MC68230_PORT_C_READ, D1
0000213A  13C1 00A00019           4539mmmm     MOVE.B D1, MC68230_PORT_C_DATA
00002140  1039 00A00013           4540mmmm     MOVE.B MC68230_PORT_B_DATA, D0
00002146  0001 0020               4541mmmm     ORI.B #MC68230_PORT_C_READ, D1
0000214A  13C1 00A00019           4542mmmm     MOVE.B D1, MC68230_PORT_C_DATA
00002150  13FC 0038 00A00019      4543mmmm     MOVE.B #(MC68230_PORT_C_READ | MC68230_PORT_C_WRITE | MC68230_PORT_C_CS), MC68230_PORT_C_DATA
00002158                          4544mmmm     ENDM
00002158                          4545mmm     ENDM
00002158  0800 0003               4546mm     BTST #IDE_STATUS_DRQ, D0
0000215C  67C2                    4547mm     BEQ LOOP_343
0000215E                          4548mm     ENDM
0000215E                          4549m     ENDM
0000215E                          4550      
0000215E  7800                    4551      MOVE.L #0,D4                                ; words read from block
00002160                          4552  
00002160                          4553m     READ_32 #IDE_DATA_REGISTER, D2, D1          ; num entries -> D2
00002160                          4554mm     READ_16 #IDE_DATA_REGISTER, D2, D1
00002160  13FC 0000 00A00007      4555mm     MOVE.B #MC68230_PORT_DIRECTION_READ, MC68230_PORT_B_DIRECTION
00002168  13FC 0000 00A00005      4556mm     MOVE.B #MC68230_PORT_DIRECTION_READ, MC68230_PORT_A_DIRECTION
00002170                          4557mm     
00002170  123C 0030               4558mm     MOVE.B #(MC68230_PORT_C_READ | MC68230_PORT_C_WRITE), D1    
00002174  0001 0000               4559mm     ORI.B #IDE_DATA_REGISTER, D1
00002178  13C1 00A00019           4560mm     MOVE.B D1, MC68230_PORT_C_DATA
0000217E  0201 00DF               4561mm     ANDI.B #~MC68230_PORT_C_READ, D1
00002182  13C1 00A00019           4562mm     MOVE.B D1, MC68230_PORT_C_DATA
00002188  1439 00A00011           4563mm     MOVE.B MC68230_PORT_A_DATA, D2
0000218E  E14A                    4564mm     LSL.W #8, D2
00002190  1439 00A00013           4565mm     MOVE.B MC68230_PORT_B_DATA, D2
00002196  0001 0020               4566mm     ORI.B #MC68230_PORT_C_READ, D1
0000219A  13C1 00A00019           4567mm     MOVE.B D1, MC68230_PORT_C_DATA
000021A0  13FC 0038 00A00019      4568mm     MOVE.B #(MC68230_PORT_C_READ | MC68230_PORT_C_WRITE | MC68230_PORT_C_CS), MC68230_PORT_C_DATA
000021A8                          4569mm     ENDM
000021A8  E18A                    4570m     LSL.L #8, D2
000021AA  E18A                    4571m     LSL.L #8, D2
000021AC                          4572mm     READ_16 #IDE_DATA_REGISTER, D2, D1
000021AC  13FC 0000 00A00007      4573mm     MOVE.B #MC68230_PORT_DIRECTION_READ, MC68230_PORT_B_DIRECTION
000021B4  13FC 0000 00A00005      4574mm     MOVE.B #MC68230_PORT_DIRECTION_READ, MC68230_PORT_A_DIRECTION
000021BC                          4575mm     
000021BC  123C 0030               4576mm     MOVE.B #(MC68230_PORT_C_READ | MC68230_PORT_C_WRITE), D1    
000021C0  0001 0000               4577mm     ORI.B #IDE_DATA_REGISTER, D1
000021C4  13C1 00A00019           4578mm     MOVE.B D1, MC68230_PORT_C_DATA
000021CA  0201 00DF               4579mm     ANDI.B #~MC68230_PORT_C_READ, D1
000021CE  13C1 00A00019           4580mm     MOVE.B D1, MC68230_PORT_C_DATA
000021D4  1439 00A00011           4581mm     MOVE.B MC68230_PORT_A_DATA, D2
000021DA  E14A                    4582mm     LSL.W #8, D2
000021DC  1439 00A00013           4583mm     MOVE.B MC68230_PORT_B_DATA, D2
000021E2  0001 0020               4584mm     ORI.B #MC68230_PORT_C_READ, D1
000021E6  13C1 00A00019           4585mm     MOVE.B D1, MC68230_PORT_C_DATA
000021EC  13FC 0038 00A00019      4586mm     MOVE.B #(MC68230_PORT_C_READ | MC68230_PORT_C_WRITE | MC68230_PORT_C_CS), MC68230_PORT_C_DATA
000021F4                          4587mm     ENDM
000021F4                          4588m     ENDM
000021F4  5484                    4589      ADD.L #2, D4
000021F6                          4590  
000021F6  2407                    4591      MOVE.L D7,D2                                ; move the one we want into D2
000021F8                          4592              
000021F8  7600                    4593      MOVE.L #0,D3                                ; entries read -> D3
000021FA                          4594      
000021FA                          4595      WHILE.L D4 <LT> #256 DO                 ; read the entire 256 words to complete the transfer, even though we don't care
000021FA                          4596s _10000018
000021FA  B8BC 00000100           4597s     CMP.L   #256,D4
00002200  6C00 05BE               4598s     BGE _10000019
00002204                          4599          IF D3 <LE> D2 THEN
00002204  B642                    4600s     CMP.W   D2,D3
00002206  6E00 056A               4601s     BGT _0000001C
0000220A                          4602m             READ_32 #IDE_DATA_REGISTER, D5, D1  ; empty flag  -> D5
0000220A                          4603mm     READ_16 #IDE_DATA_REGISTER, D5, D1
0000220A  13FC 0000 00A00007      4604mm     MOVE.B #MC68230_PORT_DIRECTION_READ, MC68230_PORT_B_DIRECTION
00002212  13FC 0000 00A00005      4605mm     MOVE.B #MC68230_PORT_DIRECTION_READ, MC68230_PORT_A_DIRECTION
0000221A                          4606mm     
0000221A  123C 0030               4607mm     MOVE.B #(MC68230_PORT_C_READ | MC68230_PORT_C_WRITE), D1    
0000221E  0001 0000               4608mm     ORI.B #IDE_DATA_REGISTER, D1
00002222  13C1 00A00019           4609mm     MOVE.B D1, MC68230_PORT_C_DATA
00002228  0201 00DF               4610mm     ANDI.B #~MC68230_PORT_C_READ, D1
0000222C  13C1 00A00019           4611mm     MOVE.B D1, MC68230_PORT_C_DATA
00002232  1A39 00A00011           4612mm     MOVE.B MC68230_PORT_A_DATA, D5
00002238  E14D                    4613mm     LSL.W #8, D5
0000223A  1A39 00A00013           4614mm     MOVE.B MC68230_PORT_B_DATA, D5
00002240  0001 0020               4615mm     ORI.B #MC68230_PORT_C_READ, D1
00002244  13C1 00A00019           4616mm     MOVE.B D1, MC68230_PORT_C_DATA
0000224A  13FC 0038 00A00019      4617mm     MOVE.B #(MC68230_PORT_C_READ | MC68230_PORT_C_WRITE | MC68230_PORT_C_CS), MC68230_PORT_C_DATA
00002252                          4618mm     ENDM
00002252  E18D                    4619m     LSL.L #8, D5
00002254  E18D                    4620m     LSL.L #8, D5
00002256                          4621mm     READ_16 #IDE_DATA_REGISTER, D5, D1
00002256  13FC 0000 00A00007      4622mm     MOVE.B #MC68230_PORT_DIRECTION_READ, MC68230_PORT_B_DIRECTION
0000225E  13FC 0000 00A00005      4623mm     MOVE.B #MC68230_PORT_DIRECTION_READ, MC68230_PORT_A_DIRECTION
00002266                          4624mm     
00002266  123C 0030               4625mm     MOVE.B #(MC68230_PORT_C_READ | MC68230_PORT_C_WRITE), D1    
0000226A  0001 0000               4626mm     ORI.B #IDE_DATA_REGISTER, D1
0000226E  13C1 00A00019           4627mm     MOVE.B D1, MC68230_PORT_C_DATA
00002274  0201 00DF               4628mm     ANDI.B #~MC68230_PORT_C_READ, D1
00002278  13C1 00A00019           4629mm     MOVE.B D1, MC68230_PORT_C_DATA
0000227E  1A39 00A00011           4630mm     MOVE.B MC68230_PORT_A_DATA, D5
00002284  E14D                    4631mm     LSL.W #8, D5
00002286  1A39 00A00013           4632mm     MOVE.B MC68230_PORT_B_DATA, D5
0000228C  0001 0020               4633mm     ORI.B #MC68230_PORT_C_READ, D1
00002290  13C1 00A00019           4634mm     MOVE.B D1, MC68230_PORT_C_DATA
00002296  13FC 0038 00A00019      4635mm     MOVE.B #(MC68230_PORT_C_READ | MC68230_PORT_C_WRITE | MC68230_PORT_C_CS), MC68230_PORT_C_DATA
0000229E                          4636mm     ENDM
0000229E                          4637m     ENDM
0000229E  5484                    4638              ADD.L #2, D4
000022A0                          4639                      
000022A0                          4640m             READ_32 #IDE_DATA_REGISTER, D6, D1 ; strlen
000022A0                          4641mm     READ_16 #IDE_DATA_REGISTER, D6, D1
000022A0  13FC 0000 00A00007      4642mm     MOVE.B #MC68230_PORT_DIRECTION_READ, MC68230_PORT_B_DIRECTION
000022A8  13FC 0000 00A00005      4643mm     MOVE.B #MC68230_PORT_DIRECTION_READ, MC68230_PORT_A_DIRECTION
000022B0                          4644mm     
000022B0  123C 0030               4645mm     MOVE.B #(MC68230_PORT_C_READ | MC68230_PORT_C_WRITE), D1    
000022B4  0001 0000               4646mm     ORI.B #IDE_DATA_REGISTER, D1
000022B8  13C1 00A00019           4647mm     MOVE.B D1, MC68230_PORT_C_DATA
000022BE  0201 00DF               4648mm     ANDI.B #~MC68230_PORT_C_READ, D1
000022C2  13C1 00A00019           4649mm     MOVE.B D1, MC68230_PORT_C_DATA
000022C8  1C39 00A00011           4650mm     MOVE.B MC68230_PORT_A_DATA, D6
000022CE  E14E                    4651mm     LSL.W #8, D6
000022D0  1C39 00A00013           4652mm     MOVE.B MC68230_PORT_B_DATA, D6
000022D6  0001 0020               4653mm     ORI.B #MC68230_PORT_C_READ, D1
000022DA  13C1 00A00019           4654mm     MOVE.B D1, MC68230_PORT_C_DATA
000022E0  13FC 0038 00A00019      4655mm     MOVE.B #(MC68230_PORT_C_READ | MC68230_PORT_C_WRITE | MC68230_PORT_C_CS), MC68230_PORT_C_DATA
000022E8                          4656mm     ENDM
000022E8  E18E                    4657m     LSL.L #8, D6
000022EA  E18E                    4658m     LSL.L #8, D6
000022EC                          4659mm     READ_16 #IDE_DATA_REGISTER, D6, D1
000022EC  13FC 0000 00A00007      4660mm     MOVE.B #MC68230_PORT_DIRECTION_READ, MC68230_PORT_B_DIRECTION
000022F4  13FC 0000 00A00005      4661mm     MOVE.B #MC68230_PORT_DIRECTION_READ, MC68230_PORT_A_DIRECTION
000022FC                          4662mm     
000022FC  123C 0030               4663mm     MOVE.B #(MC68230_PORT_C_READ | MC68230_PORT_C_WRITE), D1    
00002300  0001 0000               4664mm     ORI.B #IDE_DATA_REGISTER, D1
00002304  13C1 00A00019           4665mm     MOVE.B D1, MC68230_PORT_C_DATA
0000230A  0201 00DF               4666mm     ANDI.B #~MC68230_PORT_C_READ, D1
0000230E  13C1 00A00019           4667mm     MOVE.B D1, MC68230_PORT_C_DATA
00002314  1C39 00A00011           4668mm     MOVE.B MC68230_PORT_A_DATA, D6
0000231A  E14E                    4669mm     LSL.W #8, D6
0000231C  1C39 00A00013           4670mm     MOVE.B MC68230_PORT_B_DATA, D6
00002322  0001 0020               4671mm     ORI.B #MC68230_PORT_C_READ, D1
00002326  13C1 00A00019           4672mm     MOVE.B D1, MC68230_PORT_C_DATA
0000232C  13FC 0038 00A00019      4673mm     MOVE.B #(MC68230_PORT_C_READ | MC68230_PORT_C_WRITE | MC68230_PORT_C_CS), MC68230_PORT_C_DATA
00002334                          4674mm     ENDM
00002334                          4675m     ENDM
00002334  5484                    4676              ADD.L #2, D4
00002336                          4677              IF D3 <EQ> D2 THEN
00002336  B642                    4678s     CMP.W   D2,D3
00002338  6600 002A               4679s     BNE _0000001D
0000233C                          4680                  IF D5 <NE> #1 THEN
0000233C  BA7C 0001               4681s     CMP.W   #1,D5
00002340  6700 0022               4682s     BEQ _0000001E
00002344  41FA 0BB3               4683                      LEA BOOT(PC),A0
00002348                          4684m                     PRINT_STR A0,D1
00002348                          4685m LOOP_355
00002348  0C10 0000               4686m     CMP.B #NULL,(A0)                                ; 0 -> DONE
0000234C  6700 0016               4687m     BEQ EXIT_355
00002350                          4688mm     PRINT_CHAR (A0)+,D1
00002350                          4689mm WAIT_FOR_READY_356                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00002350                 TRUE     4690mm     IFEQ DEBUG
00002350  1239 00C00003           4691mm         MOVE.B DUART_SRA,D1                         ; READ STATUS REGISTER
00002356  0801 0002               4692mm         BTST #2,D1                                  ; CHECK FOR SPACE TO SEND
0000235A  67F4                    4693mm         BEQ WAIT_FOR_READY_356                      ; NO SPACE, CHECK AGAIN
0000235C  13D8 00C00007           4694mm         MOVE.B (A0)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00002362                          4695mm     ENDC
00002362                          4696mm 
00002362                 FALSE    4697mm     IFNE DEBUG
00002362                          4698mm     ENDC
00002362                          4699mm 
00002362                          4700mm     ENDM
00002362  60E4                    4701m     BRA LOOP_355
00002364                          4702m EXIT_355
00002364                          4703m     ENDM
00002364                          4704                  ENDI
00002364                          4705s _0000001E
00002364                          4706              ENDI
00002364                          4707s _0000001D
00002364                          4708              
00002364                          4709              FOR D6 = #0 TO #5 DO
00002364  3C3C 0000               4710s     MOVE.W  #0,D6
00002368  6000 00F8               4711s     BRA _20000017
0000236C                          4712s _20000016
0000236C                          4713m                 READ_32 #IDE_DATA_REGISTER, D7, D1
0000236C                          4714mm     READ_16 #IDE_DATA_REGISTER, D7, D1
0000236C  13FC 0000 00A00007      4715mm     MOVE.B #MC68230_PORT_DIRECTION_READ, MC68230_PORT_B_DIRECTION
00002374  13FC 0000 00A00005      4716mm     MOVE.B #MC68230_PORT_DIRECTION_READ, MC68230_PORT_A_DIRECTION
0000237C                          4717mm     
0000237C  123C 0030               4718mm     MOVE.B #(MC68230_PORT_C_READ | MC68230_PORT_C_WRITE), D1    
00002380  0001 0000               4719mm     ORI.B #IDE_DATA_REGISTER, D1
00002384  13C1 00A00019           4720mm     MOVE.B D1, MC68230_PORT_C_DATA
0000238A  0201 00DF               4721mm     ANDI.B #~MC68230_PORT_C_READ, D1
0000238E  13C1 00A00019           4722mm     MOVE.B D1, MC68230_PORT_C_DATA
00002394  1E39 00A00011           4723mm     MOVE.B MC68230_PORT_A_DATA, D7
0000239A  E14F                    4724mm     LSL.W #8, D7
0000239C  1E39 00A00013           4725mm     MOVE.B MC68230_PORT_B_DATA, D7
000023A2  0001 0020               4726mm     ORI.B #MC68230_PORT_C_READ, D1
000023A6  13C1 00A00019           4727mm     MOVE.B D1, MC68230_PORT_C_DATA
000023AC  13FC 0038 00A00019      4728mm     MOVE.B #(MC68230_PORT_C_READ | MC68230_PORT_C_WRITE | MC68230_PORT_C_CS), MC68230_PORT_C_DATA
000023B4                          4729mm     ENDM
000023B4  E18F                    4730m     LSL.L #8, D7
000023B6  E18F                    4731m     LSL.L #8, D7
000023B8                          4732mm     READ_16 #IDE_DATA_REGISTER, D7, D1
000023B8  13FC 0000 00A00007      4733mm     MOVE.B #MC68230_PORT_DIRECTION_READ, MC68230_PORT_B_DIRECTION
000023C0  13FC 0000 00A00005      4734mm     MOVE.B #MC68230_PORT_DIRECTION_READ, MC68230_PORT_A_DIRECTION
000023C8                          4735mm     
000023C8  123C 0030               4736mm     MOVE.B #(MC68230_PORT_C_READ | MC68230_PORT_C_WRITE), D1    
000023CC  0001 0000               4737mm     ORI.B #IDE_DATA_REGISTER, D1
000023D0  13C1 00A00019           4738mm     MOVE.B D1, MC68230_PORT_C_DATA
000023D6  0201 00DF               4739mm     ANDI.B #~MC68230_PORT_C_READ, D1
000023DA  13C1 00A00019           4740mm     MOVE.B D1, MC68230_PORT_C_DATA
000023E0  1E39 00A00011           4741mm     MOVE.B MC68230_PORT_A_DATA, D7
000023E6  E14F                    4742mm     LSL.W #8, D7
000023E8  1E39 00A00013           4743mm     MOVE.B MC68230_PORT_B_DATA, D7
000023EE  0001 0020               4744mm     ORI.B #MC68230_PORT_C_READ, D1
000023F2  13C1 00A00019           4745mm     MOVE.B D1, MC68230_PORT_C_DATA
000023F8  13FC 0038 00A00019      4746mm     MOVE.B #(MC68230_PORT_C_READ | MC68230_PORT_C_WRITE | MC68230_PORT_C_CS), MC68230_PORT_C_DATA
00002400                          4747mm     ENDM
00002400                          4748m     ENDM
00002400  5484                    4749                  ADD.L #2, D4
00002402                          4750                  IF D3 <EQ> D2 THEN
00002402  B642                    4751s     CMP.W   D2,D3
00002404  6600 005A               4752s     BNE _0000001F
00002408                          4753                      IF D5 <NE> #1 THEN
00002408  BA7C 0001               4754s     CMP.W   #1,D5
0000240C  6700 0052               4755s     BEQ _00000020
00002410                          4756                          
00002410  E19F                    4757                          ROL.l #8,D7                 
00002412                          4758m                         PRINT_CHAR D7, D1
00002412                          4759m WAIT_FOR_READY_360                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00002412                 TRUE     4760m     IFEQ DEBUG
00002412  1239 00C00003           4761m         MOVE.B DUART_SRA,D1                         ; READ STATUS REGISTER
00002418  0801 0002               4762m         BTST #2,D1                                  ; CHECK FOR SPACE TO SEND
0000241C  67F4                    4763m         BEQ WAIT_FOR_READY_360                      ; NO SPACE, CHECK AGAIN
0000241E  13C7 00C00007           4764m         MOVE.B D7,DUART_TXA                         ; SEND THE NEXT CHARACTER
00002424                          4765m     ENDC
00002424                          4766m 
00002424                 FALSE    4767m     IFNE DEBUG
00002424                          4768m     ENDC
00002424                          4769m 
00002424                          4770m     ENDM
00002424  E19F                    4771                          ROL.l #8,D7                 
00002426                          4772m                         PRINT_CHAR D7, D1
00002426                          4773m WAIT_FOR_READY_361                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00002426                 TRUE     4774m     IFEQ DEBUG
00002426  1239 00C00003           4775m         MOVE.B DUART_SRA,D1                         ; READ STATUS REGISTER
0000242C  0801 0002               4776m         BTST #2,D1                                  ; CHECK FOR SPACE TO SEND
00002430  67F4                    4777m         BEQ WAIT_FOR_READY_361                      ; NO SPACE, CHECK AGAIN
00002432  13C7 00C00007           4778m         MOVE.B D7,DUART_TXA                         ; SEND THE NEXT CHARACTER
00002438                          4779m     ENDC
00002438                          4780m 
00002438                 FALSE    4781m     IFNE DEBUG
00002438                          4782m     ENDC
00002438                          4783m 
00002438                          4784m     ENDM
00002438  E19F                    4785                          ROL.l #8,D7                 
0000243A                          4786m                         PRINT_CHAR D7, D1
0000243A                          4787m WAIT_FOR_READY_362                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
0000243A                 TRUE     4788m     IFEQ DEBUG
0000243A  1239 00C00003           4789m         MOVE.B DUART_SRA,D1                         ; READ STATUS REGISTER
00002440  0801 0002               4790m         BTST #2,D1                                  ; CHECK FOR SPACE TO SEND
00002444  67F4                    4791m         BEQ WAIT_FOR_READY_362                      ; NO SPACE, CHECK AGAIN
00002446  13C7 00C00007           4792m         MOVE.B D7,DUART_TXA                         ; SEND THE NEXT CHARACTER
0000244C                          4793m     ENDC
0000244C                          4794m 
0000244C                 FALSE    4795m     IFNE DEBUG
0000244C                          4796m     ENDC
0000244C                          4797m 
0000244C                          4798m     ENDM
0000244C  E19F                    4799                          ROL.l #8,D7                 
0000244E                          4800m                         PRINT_CHAR D7, D1
0000244E                          4801m WAIT_FOR_READY_363                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
0000244E                 TRUE     4802m     IFEQ DEBUG
0000244E  1239 00C00003           4803m         MOVE.B DUART_SRA,D1                         ; READ STATUS REGISTER
00002454  0801 0002               4804m         BTST #2,D1                                  ; CHECK FOR SPACE TO SEND
00002458  67F4                    4805m         BEQ WAIT_FOR_READY_363                      ; NO SPACE, CHECK AGAIN
0000245A  13C7 00C00007           4806m         MOVE.B D7,DUART_TXA                         ; SEND THE NEXT CHARACTER
00002460                          4807m     ENDC
00002460                          4808m 
00002460                 FALSE    4809m     IFNE DEBUG
00002460                          4810m     ENDC
00002460                          4811m 
00002460                          4812m     ENDM
00002460                          4813                      ENDI
00002460                          4814s _00000020
00002460                          4815                  ENDI
00002460                          4816s _0000001F
00002460                          4817              ENDF
00002460  5246                    4818s     ADD.W   #1,D6
00002462                          4819s _20000017
00002462  BC7C 0005               4820s     CMP.W   #5,D6
00002466  6F00 FF04               4821s     BLE _20000016
0000246A                          4822  
0000246A                          4823m             READ_32 #IDE_DATA_REGISTER, D6, D1  ; skip index
0000246A                          4824mm     READ_16 #IDE_DATA_REGISTER, D6, D1
0000246A  13FC 0000 00A00007      4825mm     MOVE.B #MC68230_PORT_DIRECTION_READ, MC68230_PORT_B_DIRECTION
00002472  13FC 0000 00A00005      4826mm     MOVE.B #MC68230_PORT_DIRECTION_READ, MC68230_PORT_A_DIRECTION
0000247A                          4827mm     
0000247A  123C 0030               4828mm     MOVE.B #(MC68230_PORT_C_READ | MC68230_PORT_C_WRITE), D1    
0000247E  0001 0000               4829mm     ORI.B #IDE_DATA_REGISTER, D1
00002482  13C1 00A00019           4830mm     MOVE.B D1, MC68230_PORT_C_DATA
00002488  0201 00DF               4831mm     ANDI.B #~MC68230_PORT_C_READ, D1
0000248C  13C1 00A00019           4832mm     MOVE.B D1, MC68230_PORT_C_DATA
00002492  1C39 00A00011           4833mm     MOVE.B MC68230_PORT_A_DATA, D6
00002498  E14E                    4834mm     LSL.W #8, D6
0000249A  1C39 00A00013           4835mm     MOVE.B MC68230_PORT_B_DATA, D6
000024A0  0001 0020               4836mm     ORI.B #MC68230_PORT_C_READ, D1
000024A4  13C1 00A00019           4837mm     MOVE.B D1, MC68230_PORT_C_DATA
000024AA  13FC 0038 00A00019      4838mm     MOVE.B #(MC68230_PORT_C_READ | MC68230_PORT_C_WRITE | MC68230_PORT_C_CS), MC68230_PORT_C_DATA
000024B2                          4839mm     ENDM
000024B2  E18E                    4840m     LSL.L #8, D6
000024B4  E18E                    4841m     LSL.L #8, D6
000024B6                          4842mm     READ_16 #IDE_DATA_REGISTER, D6, D1
000024B6  13FC 0000 00A00007      4843mm     MOVE.B #MC68230_PORT_DIRECTION_READ, MC68230_PORT_B_DIRECTION
000024BE  13FC 0000 00A00005      4844mm     MOVE.B #MC68230_PORT_DIRECTION_READ, MC68230_PORT_A_DIRECTION
000024C6                          4845mm     
000024C6  123C 0030               4846mm     MOVE.B #(MC68230_PORT_C_READ | MC68230_PORT_C_WRITE), D1    
000024CA  0001 0000               4847mm     ORI.B #IDE_DATA_REGISTER, D1
000024CE  13C1 00A00019           4848mm     MOVE.B D1, MC68230_PORT_C_DATA
000024D4  0201 00DF               4849mm     ANDI.B #~MC68230_PORT_C_READ, D1
000024D8  13C1 00A00019           4850mm     MOVE.B D1, MC68230_PORT_C_DATA
000024DE  1C39 00A00011           4851mm     MOVE.B MC68230_PORT_A_DATA, D6
000024E4  E14E                    4852mm     LSL.W #8, D6
000024E6  1C39 00A00013           4853mm     MOVE.B MC68230_PORT_B_DATA, D6
000024EC  0001 0020               4854mm     ORI.B #MC68230_PORT_C_READ, D1
000024F0  13C1 00A00019           4855mm     MOVE.B D1, MC68230_PORT_C_DATA
000024F6  13FC 0038 00A00019      4856mm     MOVE.B #(MC68230_PORT_C_READ | MC68230_PORT_C_WRITE | MC68230_PORT_C_CS), MC68230_PORT_C_DATA
000024FE                          4857mm     ENDM
000024FE                          4858m     ENDM
000024FE  5484                    4859              ADD.L #2, D4
00002500                          4860              
00002500                          4861m             READ_32 #IDE_DATA_REGISTER, D6, D1  ; length -> D5
00002500                          4862mm     READ_16 #IDE_DATA_REGISTER, D6, D1
00002500  13FC 0000 00A00007      4863mm     MOVE.B #MC68230_PORT_DIRECTION_READ, MC68230_PORT_B_DIRECTION
00002508  13FC 0000 00A00005      4864mm     MOVE.B #MC68230_PORT_DIRECTION_READ, MC68230_PORT_A_DIRECTION
00002510                          4865mm     
00002510  123C 0030               4866mm     MOVE.B #(MC68230_PORT_C_READ | MC68230_PORT_C_WRITE), D1    
00002514  0001 0000               4867mm     ORI.B #IDE_DATA_REGISTER, D1
00002518  13C1 00A00019           4868mm     MOVE.B D1, MC68230_PORT_C_DATA
0000251E  0201 00DF               4869mm     ANDI.B #~MC68230_PORT_C_READ, D1
00002522  13C1 00A00019           4870mm     MOVE.B D1, MC68230_PORT_C_DATA
00002528  1C39 00A00011           4871mm     MOVE.B MC68230_PORT_A_DATA, D6
0000252E  E14E                    4872mm     LSL.W #8, D6
00002530  1C39 00A00013           4873mm     MOVE.B MC68230_PORT_B_DATA, D6
00002536  0001 0020               4874mm     ORI.B #MC68230_PORT_C_READ, D1
0000253A  13C1 00A00019           4875mm     MOVE.B D1, MC68230_PORT_C_DATA
00002540  13FC 0038 00A00019      4876mm     MOVE.B #(MC68230_PORT_C_READ | MC68230_PORT_C_WRITE | MC68230_PORT_C_CS), MC68230_PORT_C_DATA
00002548                          4877mm     ENDM
00002548  E18E                    4878m     LSL.L #8, D6
0000254A  E18E                    4879m     LSL.L #8, D6
0000254C                          4880mm     READ_16 #IDE_DATA_REGISTER, D6, D1
0000254C  13FC 0000 00A00007      4881mm     MOVE.B #MC68230_PORT_DIRECTION_READ, MC68230_PORT_B_DIRECTION
00002554  13FC 0000 00A00005      4882mm     MOVE.B #MC68230_PORT_DIRECTION_READ, MC68230_PORT_A_DIRECTION
0000255C                          4883mm     
0000255C  123C 0030               4884mm     MOVE.B #(MC68230_PORT_C_READ | MC68230_PORT_C_WRITE), D1    
00002560  0001 0000               4885mm     ORI.B #IDE_DATA_REGISTER, D1
00002564  13C1 00A00019           4886mm     MOVE.B D1, MC68230_PORT_C_DATA
0000256A  0201 00DF               4887mm     ANDI.B #~MC68230_PORT_C_READ, D1
0000256E  13C1 00A00019           4888mm     MOVE.B D1, MC68230_PORT_C_DATA
00002574  1C39 00A00011           4889mm     MOVE.B MC68230_PORT_A_DATA, D6
0000257A  E14E                    4890mm     LSL.W #8, D6
0000257C  1C39 00A00013           4891mm     MOVE.B MC68230_PORT_B_DATA, D6
00002582  0001 0020               4892mm     ORI.B #MC68230_PORT_C_READ, D1
00002586  13C1 00A00019           4893mm     MOVE.B D1, MC68230_PORT_C_DATA
0000258C  13FC 0038 00A00019      4894mm     MOVE.B #(MC68230_PORT_C_READ | MC68230_PORT_C_WRITE | MC68230_PORT_C_CS), MC68230_PORT_C_DATA
00002594                          4895mm     ENDM
00002594                          4896m     ENDM
00002594  5484                    4897              ADD.L #2, D4
00002596                          4898              
00002596                          4899              IF D5 <NE> #1 THEN          ; skip empty
00002596  BA7C 0001               4900s     CMP.W   #1,D5
0000259A  6700 0008               4901s     BEQ _00000021
0000259E  2A06                    4902                  MOVE.L D6, D5
000025A0                          4903              ELSE
000025A0  6000 0004               4904s     BRA _00000022
000025A4                          4905s _00000021
000025A4  7A00                    4906                  MOVE.L #0, D5
000025A6                          4907              ENDI        
000025A6                          4908s _00000022
000025A6                          4909              
000025A6                          4910m             READ_32 #IDE_DATA_REGISTER, D6, D1  ; load address -> A0
000025A6                          4911mm     READ_16 #IDE_DATA_REGISTER, D6, D1
000025A6  13FC 0000 00A00007      4912mm     MOVE.B #MC68230_PORT_DIRECTION_READ, MC68230_PORT_B_DIRECTION
000025AE  13FC 0000 00A00005      4913mm     MOVE.B #MC68230_PORT_DIRECTION_READ, MC68230_PORT_A_DIRECTION
000025B6                          4914mm     
000025B6  123C 0030               4915mm     MOVE.B #(MC68230_PORT_C_READ | MC68230_PORT_C_WRITE), D1    
000025BA  0001 0000               4916mm     ORI.B #IDE_DATA_REGISTER, D1
000025BE  13C1 00A00019           4917mm     MOVE.B D1, MC68230_PORT_C_DATA
000025C4  0201 00DF               4918mm     ANDI.B #~MC68230_PORT_C_READ, D1
000025C8  13C1 00A00019           4919mm     MOVE.B D1, MC68230_PORT_C_DATA
000025CE  1C39 00A00011           4920mm     MOVE.B MC68230_PORT_A_DATA, D6
000025D4  E14E                    4921mm     LSL.W #8, D6
000025D6  1C39 00A00013           4922mm     MOVE.B MC68230_PORT_B_DATA, D6
000025DC  0001 0020               4923mm     ORI.B #MC68230_PORT_C_READ, D1
000025E0  13C1 00A00019           4924mm     MOVE.B D1, MC68230_PORT_C_DATA
000025E6  13FC 0038 00A00019      4925mm     MOVE.B #(MC68230_PORT_C_READ | MC68230_PORT_C_WRITE | MC68230_PORT_C_CS), MC68230_PORT_C_DATA
000025EE                          4926mm     ENDM
000025EE  E18E                    4927m     LSL.L #8, D6
000025F0  E18E                    4928m     LSL.L #8, D6
000025F2                          4929mm     READ_16 #IDE_DATA_REGISTER, D6, D1
000025F2  13FC 0000 00A00007      4930mm     MOVE.B #MC68230_PORT_DIRECTION_READ, MC68230_PORT_B_DIRECTION
000025FA  13FC 0000 00A00005      4931mm     MOVE.B #MC68230_PORT_DIRECTION_READ, MC68230_PORT_A_DIRECTION
00002602                          4932mm     
00002602  123C 0030               4933mm     MOVE.B #(MC68230_PORT_C_READ | MC68230_PORT_C_WRITE), D1    
00002606  0001 0000               4934mm     ORI.B #IDE_DATA_REGISTER, D1
0000260A  13C1 00A00019           4935mm     MOVE.B D1, MC68230_PORT_C_DATA
00002610  0201 00DF               4936mm     ANDI.B #~MC68230_PORT_C_READ, D1
00002614  13C1 00A00019           4937mm     MOVE.B D1, MC68230_PORT_C_DATA
0000261A  1C39 00A00011           4938mm     MOVE.B MC68230_PORT_A_DATA, D6
00002620  E14E                    4939mm     LSL.W #8, D6
00002622  1C39 00A00013           4940mm     MOVE.B MC68230_PORT_B_DATA, D6
00002628  0001 0020               4941mm     ORI.B #MC68230_PORT_C_READ, D1
0000262C  13C1 00A00019           4942mm     MOVE.B D1, MC68230_PORT_C_DATA
00002632  13FC 0038 00A00019      4943mm     MOVE.B #(MC68230_PORT_C_READ | MC68230_PORT_C_WRITE | MC68230_PORT_C_CS), MC68230_PORT_C_DATA
0000263A                          4944mm     ENDM
0000263A                          4945m     ENDM
0000263A  5484                    4946              ADD.L #2, D4
0000263C  2046                    4947              MOVE.L D6, A0
0000263E                          4948  
0000263E                          4949m             READ_32 #IDE_DATA_REGISTER, D6, D1  ; go address -> D7
0000263E                          4950mm     READ_16 #IDE_DATA_REGISTER, D6, D1
0000263E  13FC 0000 00A00007      4951mm     MOVE.B #MC68230_PORT_DIRECTION_READ, MC68230_PORT_B_DIRECTION
00002646  13FC 0000 00A00005      4952mm     MOVE.B #MC68230_PORT_DIRECTION_READ, MC68230_PORT_A_DIRECTION
0000264E                          4953mm     
0000264E  123C 0030               4954mm     MOVE.B #(MC68230_PORT_C_READ | MC68230_PORT_C_WRITE), D1    
00002652  0001 0000               4955mm     ORI.B #IDE_DATA_REGISTER, D1
00002656  13C1 00A00019           4956mm     MOVE.B D1, MC68230_PORT_C_DATA
0000265C  0201 00DF               4957mm     ANDI.B #~MC68230_PORT_C_READ, D1
00002660  13C1 00A00019           4958mm     MOVE.B D1, MC68230_PORT_C_DATA
00002666  1C39 00A00011           4959mm     MOVE.B MC68230_PORT_A_DATA, D6
0000266C  E14E                    4960mm     LSL.W #8, D6
0000266E  1C39 00A00013           4961mm     MOVE.B MC68230_PORT_B_DATA, D6
00002674  0001 0020               4962mm     ORI.B #MC68230_PORT_C_READ, D1
00002678  13C1 00A00019           4963mm     MOVE.B D1, MC68230_PORT_C_DATA
0000267E  13FC 0038 00A00019      4964mm     MOVE.B #(MC68230_PORT_C_READ | MC68230_PORT_C_WRITE | MC68230_PORT_C_CS), MC68230_PORT_C_DATA
00002686                          4965mm     ENDM
00002686  E18E                    4966m     LSL.L #8, D6
00002688  E18E                    4967m     LSL.L #8, D6
0000268A                          4968mm     READ_16 #IDE_DATA_REGISTER, D6, D1
0000268A  13FC 0000 00A00007      4969mm     MOVE.B #MC68230_PORT_DIRECTION_READ, MC68230_PORT_B_DIRECTION
00002692  13FC 0000 00A00005      4970mm     MOVE.B #MC68230_PORT_DIRECTION_READ, MC68230_PORT_A_DIRECTION
0000269A                          4971mm     
0000269A  123C 0030               4972mm     MOVE.B #(MC68230_PORT_C_READ | MC68230_PORT_C_WRITE), D1    
0000269E  0001 0000               4973mm     ORI.B #IDE_DATA_REGISTER, D1
000026A2  13C1 00A00019           4974mm     MOVE.B D1, MC68230_PORT_C_DATA
000026A8  0201 00DF               4975mm     ANDI.B #~MC68230_PORT_C_READ, D1
000026AC  13C1 00A00019           4976mm     MOVE.B D1, MC68230_PORT_C_DATA
000026B2  1C39 00A00011           4977mm     MOVE.B MC68230_PORT_A_DATA, D6
000026B8  E14E                    4978mm     LSL.W #8, D6
000026BA  1C39 00A00013           4979mm     MOVE.B MC68230_PORT_B_DATA, D6
000026C0  0001 0020               4980mm     ORI.B #MC68230_PORT_C_READ, D1
000026C4  13C1 00A00019           4981mm     MOVE.B D1, MC68230_PORT_C_DATA
000026CA  13FC 0038 00A00019      4982mm     MOVE.B #(MC68230_PORT_C_READ | MC68230_PORT_C_WRITE | MC68230_PORT_C_CS), MC68230_PORT_C_DATA
000026D2                          4983mm     ENDM
000026D2                          4984m     ENDM
000026D2  5484                    4985              ADD.L #2, D4        
000026D4  2E06                    4986              MOVE.L D6, D7
000026D6                          4987  
000026D6                          4988m             READ_32 #IDE_DATA_REGISTER, D6, D1  ; start block -> D6
000026D6                          4989mm     READ_16 #IDE_DATA_REGISTER, D6, D1
000026D6  13FC 0000 00A00007      4990mm     MOVE.B #MC68230_PORT_DIRECTION_READ, MC68230_PORT_B_DIRECTION
000026DE  13FC 0000 00A00005      4991mm     MOVE.B #MC68230_PORT_DIRECTION_READ, MC68230_PORT_A_DIRECTION
000026E6                          4992mm     
000026E6  123C 0030               4993mm     MOVE.B #(MC68230_PORT_C_READ | MC68230_PORT_C_WRITE), D1    
000026EA  0001 0000               4994mm     ORI.B #IDE_DATA_REGISTER, D1
000026EE  13C1 00A00019           4995mm     MOVE.B D1, MC68230_PORT_C_DATA
000026F4  0201 00DF               4996mm     ANDI.B #~MC68230_PORT_C_READ, D1
000026F8  13C1 00A00019           4997mm     MOVE.B D1, MC68230_PORT_C_DATA
000026FE  1C39 00A00011           4998mm     MOVE.B MC68230_PORT_A_DATA, D6
00002704  E14E                    4999mm     LSL.W #8, D6
00002706  1C39 00A00013           5000mm     MOVE.B MC68230_PORT_B_DATA, D6
0000270C  0001 0020               5001mm     ORI.B #MC68230_PORT_C_READ, D1
00002710  13C1 00A00019           5002mm     MOVE.B D1, MC68230_PORT_C_DATA
00002716  13FC 0038 00A00019      5003mm     MOVE.B #(MC68230_PORT_C_READ | MC68230_PORT_C_WRITE | MC68230_PORT_C_CS), MC68230_PORT_C_DATA
0000271E                          5004mm     ENDM
0000271E  E18E                    5005m     LSL.L #8, D6
00002720  E18E                    5006m     LSL.L #8, D6
00002722                          5007mm     READ_16 #IDE_DATA_REGISTER, D6, D1
00002722  13FC 0000 00A00007      5008mm     MOVE.B #MC68230_PORT_DIRECTION_READ, MC68230_PORT_B_DIRECTION
0000272A  13FC 0000 00A00005      5009mm     MOVE.B #MC68230_PORT_DIRECTION_READ, MC68230_PORT_A_DIRECTION
00002732                          5010mm     
00002732  123C 0030               5011mm     MOVE.B #(MC68230_PORT_C_READ | MC68230_PORT_C_WRITE), D1    
00002736  0001 0000               5012mm     ORI.B #IDE_DATA_REGISTER, D1
0000273A  13C1 00A00019           5013mm     MOVE.B D1, MC68230_PORT_C_DATA
00002740  0201 00DF               5014mm     ANDI.B #~MC68230_PORT_C_READ, D1
00002744  13C1 00A00019           5015mm     MOVE.B D1, MC68230_PORT_C_DATA
0000274A  1C39 00A00011           5016mm     MOVE.B MC68230_PORT_A_DATA, D6
00002750  E14E                    5017mm     LSL.W #8, D6
00002752  1C39 00A00013           5018mm     MOVE.B MC68230_PORT_B_DATA, D6
00002758  0001 0020               5019mm     ORI.B #MC68230_PORT_C_READ, D1
0000275C  13C1 00A00019           5020mm     MOVE.B D1, MC68230_PORT_C_DATA
00002762  13FC 0038 00A00019      5021mm     MOVE.B #(MC68230_PORT_C_READ | MC68230_PORT_C_WRITE | MC68230_PORT_C_CS), MC68230_PORT_C_DATA
0000276A                          5022mm     ENDM
0000276A                          5023m     ENDM
0000276A  5484                    5024              ADD.L #2, D4    
0000276C                          5025          
0000276C  5283                    5026              ADD.L #1, D3
0000276E                          5027          ELSE
0000276E  6000 004C               5028s     BRA _00000023
00002772                          5029s _0000001C
00002772                          5030m             READ_16 #IDE_DATA_REGISTER, D0, D1  ; ignore
00002772  13FC 0000 00A00007      5031m     MOVE.B #MC68230_PORT_DIRECTION_READ, MC68230_PORT_B_DIRECTION
0000277A  13FC 0000 00A00005      5032m     MOVE.B #MC68230_PORT_DIRECTION_READ, MC68230_PORT_A_DIRECTION
00002782                          5033m     
00002782  123C 0030               5034m     MOVE.B #(MC68230_PORT_C_READ | MC68230_PORT_C_WRITE), D1    
00002786  0001 0000               5035m     ORI.B #IDE_DATA_REGISTER, D1
0000278A  13C1 00A00019           5036m     MOVE.B D1, MC68230_PORT_C_DATA
00002790  0201 00DF               5037m     ANDI.B #~MC68230_PORT_C_READ, D1
00002794  13C1 00A00019           5038m     MOVE.B D1, MC68230_PORT_C_DATA
0000279A  1039 00A00011           5039m     MOVE.B MC68230_PORT_A_DATA, D0
000027A0  E148                    5040m     LSL.W #8, D0
000027A2  1039 00A00013           5041m     MOVE.B MC68230_PORT_B_DATA, D0
000027A8  0001 0020               5042m     ORI.B #MC68230_PORT_C_READ, D1
000027AC  13C1 00A00019           5043m     MOVE.B D1, MC68230_PORT_C_DATA
000027B2  13FC 0038 00A00019      5044m     MOVE.B #(MC68230_PORT_C_READ | MC68230_PORT_C_WRITE | MC68230_PORT_C_CS), MC68230_PORT_C_DATA
000027BA                          5045m     ENDM
000027BA  5284                    5046              ADD.L #1, D4    
000027BC                          5047          ENDI
000027BC                          5048s _00000023
000027BC                          5049      ENDW
000027BC  6000 FA3C               5050s     BRA _10000018
000027C0                          5051s _10000019
000027C0                          5052      
000027C0                          5053      IF D5 <EQ> #0 THEN
000027C0  BA7C 0000               5054s     CMP.W   #0,D5
000027C4  6600 0026               5055s     BNE _00000024
000027C8  41FA 0738               5056          LEA NOT_FOUND(PC),A0
000027CC                          5057m         PRINT_STR A0,D1
000027CC                          5058m LOOP_380
000027CC  0C10 0000               5059m     CMP.B #NULL,(A0)                                ; 0 -> DONE
000027D0  6700 0016               5060m     BEQ EXIT_380
000027D4                          5061mm     PRINT_CHAR (A0)+,D1
000027D4                          5062mm WAIT_FOR_READY_381                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
000027D4                 TRUE     5063mm     IFEQ DEBUG
000027D4  1239 00C00003           5064mm         MOVE.B DUART_SRA,D1                         ; READ STATUS REGISTER
000027DA  0801 0002               5065mm         BTST #2,D1                                  ; CHECK FOR SPACE TO SEND
000027DE  67F4                    5066mm         BEQ WAIT_FOR_READY_381                      ; NO SPACE, CHECK AGAIN
000027E0  13D8 00C00007           5067mm         MOVE.B (A0)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
000027E6                          5068mm     ENDC
000027E6                          5069mm 
000027E6                 FALSE    5070mm     IFNE DEBUG
000027E6                          5071mm     ENDC
000027E6                          5072mm 
000027E6                          5073mm     ENDM
000027E6  60E4                    5074m     BRA LOOP_380
000027E8                          5075m EXIT_380
000027E8                          5076m     ENDM
000027E8                          5077          
000027E8  6000 DB5A               5078          BRA MAIN_LOOP
000027EC                          5079      ENDI
000027EC                          5080s _00000024
000027EC                          5081                  
000027EC  2606                    5082      MOVE.L D6, D3
000027EE                          5083      
000027EE                          5084      ;MOVE.L A0,D5
000027EE                          5085      ;PRINT_REG D5,D1,D0,D7,A0
000027EE                          5086      ;PRINT_CRLF D1,A0
000027EE                          5087  
000027EE                          5088      ;BRA MAIN_LOOP  
000027EE                          5089      
000027EE  7801                    5090      MOVE.L #1, D4                               ; flag for first iteration
000027F0                          5091      WHILE.L D5 <GT> #0 DO
000027F0                          5092s _1000001A
000027F0  BABC 00000000           5093s     CMP.L   #0,D5
000027F6  6F00 02CE               5094s     BLE _1000001B
000027FA                          5095m         SEND_READ_COMMAND_AND_WAIT D3, D0, D1, D2
000027FA                          5096mm     WAIT_DRIVE_NOT_BUSY D0, D1
000027FA                          5097mm LOOP_383
000027FA                          5098mmm     READ_IDE_STATUS D0, D1
000027FA                          5099mmmm     READ_8 #IDE_STATUS_REGISTER, D0, D1
000027FA  13FC 0000 00A00007      5100mmmm     MOVE.B #MC68230_PORT_DIRECTION_READ, MC68230_PORT_B_DIRECTION
00002802  123C 0030               5101mmmm     MOVE.B #(MC68230_PORT_C_READ | MC68230_PORT_C_WRITE), D1
00002806  0001 0007               5102mmmm     ORI.B #IDE_STATUS_REGISTER, D1
0000280A  13C1 00A00019           5103mmmm     MOVE.B D1, MC68230_PORT_C_DATA
00002810  0201 00DF               5104mmmm     ANDI.B #~MC68230_PORT_C_READ, D1
00002814  13C1 00A00019           5105mmmm     MOVE.B D1, MC68230_PORT_C_DATA
0000281A  1039 00A00013           5106mmmm     MOVE.B MC68230_PORT_B_DATA, D0
00002820  0001 0020               5107mmmm     ORI.B #MC68230_PORT_C_READ, D1
00002824  13C1 00A00019           5108mmmm     MOVE.B D1, MC68230_PORT_C_DATA
0000282A  13FC 0038 00A00019      5109mmmm     MOVE.B #(MC68230_PORT_C_READ | MC68230_PORT_C_WRITE | MC68230_PORT_C_CS), MC68230_PORT_C_DATA
00002832                          5110mmmm     ENDM
00002832                          5111mmm     ENDM
00002832  0800 0007               5112mm     BTST #IDE_STATUS_BUSY, D0
00002836  66C2                    5113mm     BNE LOOP_383
00002838                          5114mm     ENDM
00002838                          5115mm     SET_READ_ADDRESS D3, D0, D1, D2
00002838                          5116mmm     WRITE_8 #1, #IDE_SECTOR_COUNT_REGISTER, D0
00002838  13FC 00FF 00A00007      5117mmm     MOVE.B #MC68230_PORT_DIRECTION_WRITE, MC68230_PORT_B_DIRECTION
00002840  103C 0030               5118mmm     MOVE.B #(MC68230_PORT_C_READ | MC68230_PORT_C_WRITE), D0
00002844  0000 0002               5119mmm     ORI.B #IDE_SECTOR_COUNT_REGISTER, D0
00002848  13C0 00A00019           5120mmm     MOVE.B D0, MC68230_PORT_C_DATA
0000284E  0200 00EF               5121mmm     ANDI.B #~MC68230_PORT_C_WRITE, D0
00002852  13FC 0001 00A00013      5122mmm     MOVE.B #1, MC68230_PORT_B_DATA
0000285A  13C0 00A00019           5123mmm     MOVE.B D0, MC68230_PORT_C_DATA
00002860  0000 0010               5124mmm     ORI.B #MC68230_PORT_C_WRITE, D0
00002864  13C0 00A00019           5125mmm     MOVE.B D0, MC68230_PORT_C_DATA
0000286A  13FC 0038 00A00019      5126mmm     MOVE.B #(MC68230_PORT_C_READ | MC68230_PORT_C_WRITE | MC68230_PORT_C_CS), MC68230_PORT_C_DATA
00002872                          5127mmm     ENDM
00002872  2203                    5128mm     MOVE.L D3,D1
00002874                          5129mmm     WRITE_8 D1, #IDE_LBA_0_7_REGISTER, D0
00002874  13FC 00FF 00A00007      5130mmm     MOVE.B #MC68230_PORT_DIRECTION_WRITE, MC68230_PORT_B_DIRECTION
0000287C  103C 0030               5131mmm     MOVE.B #(MC68230_PORT_C_READ | MC68230_PORT_C_WRITE), D0
00002880  0000 0003               5132mmm     ORI.B #IDE_LBA_0_7_REGISTER, D0
00002884  13C0 00A00019           5133mmm     MOVE.B D0, MC68230_PORT_C_DATA
0000288A  0200 00EF               5134mmm     ANDI.B #~MC68230_PORT_C_WRITE, D0
0000288E  13C1 00A00013           5135mmm     MOVE.B D1, MC68230_PORT_B_DATA
00002894  13C0 00A00019           5136mmm     MOVE.B D0, MC68230_PORT_C_DATA
0000289A  0000 0010               5137mmm     ORI.B #MC68230_PORT_C_WRITE, D0
0000289E  13C0 00A00019           5138mmm     MOVE.B D0, MC68230_PORT_C_DATA
000028A4  13FC 0038 00A00019      5139mmm     MOVE.B #(MC68230_PORT_C_READ | MC68230_PORT_C_WRITE | MC68230_PORT_C_CS), MC68230_PORT_C_DATA
000028AC                          5140mmm     ENDM
000028AC  E089                    5141mm     LSR.L #8, D1
000028AE                          5142mmm     WRITE_8 D1, #IDE_LBA_8_15_REGISTER, D0
000028AE  13FC 00FF 00A00007      5143mmm     MOVE.B #MC68230_PORT_DIRECTION_WRITE, MC68230_PORT_B_DIRECTION
000028B6  103C 0030               5144mmm     MOVE.B #(MC68230_PORT_C_READ | MC68230_PORT_C_WRITE), D0
000028BA  0000 0004               5145mmm     ORI.B #IDE_LBA_8_15_REGISTER, D0
000028BE  13C0 00A00019           5146mmm     MOVE.B D0, MC68230_PORT_C_DATA
000028C4  0200 00EF               5147mmm     ANDI.B #~MC68230_PORT_C_WRITE, D0
000028C8  13C1 00A00013           5148mmm     MOVE.B D1, MC68230_PORT_B_DATA
000028CE  13C0 00A00019           5149mmm     MOVE.B D0, MC68230_PORT_C_DATA
000028D4  0000 0010               5150mmm     ORI.B #MC68230_PORT_C_WRITE, D0
000028D8  13C0 00A00019           5151mmm     MOVE.B D0, MC68230_PORT_C_DATA
000028DE  13FC 0038 00A00019      5152mmm     MOVE.B #(MC68230_PORT_C_READ | MC68230_PORT_C_WRITE | MC68230_PORT_C_CS), MC68230_PORT_C_DATA
000028E6                          5153mmm     ENDM
000028E6  E089                    5154mm     LSR.L #8, D1                                
000028E8                          5155mmm     WRITE_8 D1, #IDE_LBA_16_23_REGISTER, D0
000028E8  13FC 00FF 00A00007      5156mmm     MOVE.B #MC68230_PORT_DIRECTION_WRITE, MC68230_PORT_B_DIRECTION
000028F0  103C 0030               5157mmm     MOVE.B #(MC68230_PORT_C_READ | MC68230_PORT_C_WRITE), D0
000028F4  0000 0005               5158mmm     ORI.B #IDE_LBA_16_23_REGISTER, D0
000028F8  13C0 00A00019           5159mmm     MOVE.B D0, MC68230_PORT_C_DATA
000028FE  0200 00EF               5160mmm     ANDI.B #~MC68230_PORT_C_WRITE, D0
00002902  13C1 00A00013           5161mmm     MOVE.B D1, MC68230_PORT_B_DATA
00002908  13C0 00A00019           5162mmm     MOVE.B D0, MC68230_PORT_C_DATA
0000290E  0000 0010               5163mmm     ORI.B #MC68230_PORT_C_WRITE, D0
00002912  13C0 00A00019           5164mmm     MOVE.B D0, MC68230_PORT_C_DATA
00002918  13FC 0038 00A00019      5165mmm     MOVE.B #(MC68230_PORT_C_READ | MC68230_PORT_C_WRITE | MC68230_PORT_C_CS), MC68230_PORT_C_DATA
00002920                          5166mmm     ENDM
00002920  E089                    5167mm     LSR.L #8, D1
00002922                          5168mmm     READ_8 #IDE_DRIVESEL_REGISTER, D2, D0
00002922  13FC 0000 00A00007      5169mmm     MOVE.B #MC68230_PORT_DIRECTION_READ, MC68230_PORT_B_DIRECTION
0000292A  103C 0030               5170mmm     MOVE.B #(MC68230_PORT_C_READ | MC68230_PORT_C_WRITE), D0
0000292E  0000 0006               5171mmm     ORI.B #IDE_DRIVESEL_REGISTER, D0
00002932  13C0 00A00019           5172mmm     MOVE.B D0, MC68230_PORT_C_DATA
00002938  0200 00DF               5173mmm     ANDI.B #~MC68230_PORT_C_READ, D0
0000293C  13C0 00A00019           5174mmm     MOVE.B D0, MC68230_PORT_C_DATA
00002942  1439 00A00013           5175mmm     MOVE.B MC68230_PORT_B_DATA, D2
00002948  0000 0020               5176mmm     ORI.B #MC68230_PORT_C_READ, D0
0000294C  13C0 00A00019           5177mmm     MOVE.B D0, MC68230_PORT_C_DATA
00002952  13FC 0038 00A00019      5178mmm     MOVE.B #(MC68230_PORT_C_READ | MC68230_PORT_C_WRITE | MC68230_PORT_C_CS), MC68230_PORT_C_DATA
0000295A                          5179mmm     ENDM
0000295A  0201 000F               5180mm     ANDI.B #$0F,D1
0000295E  8401                    5181mm     OR.B D1,D2
00002960                          5182mmm     WRITE_8 D2, #IDE_DRIVESEL_REGISTER, D0
00002960  13FC 00FF 00A00007      5183mmm     MOVE.B #MC68230_PORT_DIRECTION_WRITE, MC68230_PORT_B_DIRECTION
00002968  103C 0030               5184mmm     MOVE.B #(MC68230_PORT_C_READ | MC68230_PORT_C_WRITE), D0
0000296C  0000 0006               5185mmm     ORI.B #IDE_DRIVESEL_REGISTER, D0
00002970  13C0 00A00019           5186mmm     MOVE.B D0, MC68230_PORT_C_DATA
00002976  0200 00EF               5187mmm     ANDI.B #~MC68230_PORT_C_WRITE, D0
0000297A  13C2 00A00013           5188mmm     MOVE.B D2, MC68230_PORT_B_DATA
00002980  13C0 00A00019           5189mmm     MOVE.B D0, MC68230_PORT_C_DATA
00002986  0000 0010               5190mmm     ORI.B #MC68230_PORT_C_WRITE, D0
0000298A  13C0 00A00019           5191mmm     MOVE.B D0, MC68230_PORT_C_DATA
00002990  13FC 0038 00A00019      5192mmm     MOVE.B #(MC68230_PORT_C_READ | MC68230_PORT_C_WRITE | MC68230_PORT_C_CS), MC68230_PORT_C_DATA
00002998                          5193mmm     ENDM
00002998                          5194mm     ENDM
00002998                          5195mm     SEND_COMMAND #IDE_COMMAND_READ_WITH_RETRY, D0
00002998                          5196mmm     WRITE_8 #IDE_COMMAND_READ_WITH_RETRY, #IDE_COMMAND_REGISTER, D0
00002998  13FC 00FF 00A00007      5197mmm     MOVE.B #MC68230_PORT_DIRECTION_WRITE, MC68230_PORT_B_DIRECTION
000029A0  103C 0030               5198mmm     MOVE.B #(MC68230_PORT_C_READ | MC68230_PORT_C_WRITE), D0
000029A4  0000 0007               5199mmm     ORI.B #IDE_COMMAND_REGISTER, D0
000029A8  13C0 00A00019           5200mmm     MOVE.B D0, MC68230_PORT_C_DATA
000029AE  0200 00EF               5201mmm     ANDI.B #~MC68230_PORT_C_WRITE, D0
000029B2  13FC 0020 00A00013      5202mmm     MOVE.B #IDE_COMMAND_READ_WITH_RETRY, MC68230_PORT_B_DATA
000029BA  13C0 00A00019           5203mmm     MOVE.B D0, MC68230_PORT_C_DATA
000029C0  0000 0010               5204mmm     ORI.B #MC68230_PORT_C_WRITE, D0
000029C4  13C0 00A00019           5205mmm     MOVE.B D0, MC68230_PORT_C_DATA
000029CA  13FC 0038 00A00019      5206mmm     MOVE.B #(MC68230_PORT_C_READ | MC68230_PORT_C_WRITE | MC68230_PORT_C_CS), MC68230_PORT_C_DATA
000029D2                          5207mmm     ENDM
000029D2                          5208mm     ENDM
000029D2                          5209mm     WAIT_DRIVE_NOT_BUSY D0, D1
000029D2                          5210mm LOOP_395
000029D2                          5211mmm     READ_IDE_STATUS D0, D1
000029D2                          5212mmmm     READ_8 #IDE_STATUS_REGISTER, D0, D1
000029D2  13FC 0000 00A00007      5213mmmm     MOVE.B #MC68230_PORT_DIRECTION_READ, MC68230_PORT_B_DIRECTION
000029DA  123C 0030               5214mmmm     MOVE.B #(MC68230_PORT_C_READ | MC68230_PORT_C_WRITE), D1
000029DE  0001 0007               5215mmmm     ORI.B #IDE_STATUS_REGISTER, D1
000029E2  13C1 00A00019           5216mmmm     MOVE.B D1, MC68230_PORT_C_DATA
000029E8  0201 00DF               5217mmmm     ANDI.B #~MC68230_PORT_C_READ, D1
000029EC  13C1 00A00019           5218mmmm     MOVE.B D1, MC68230_PORT_C_DATA
000029F2  1039 00A00013           5219mmmm     MOVE.B MC68230_PORT_B_DATA, D0
000029F8  0001 0020               5220mmmm     ORI.B #MC68230_PORT_C_READ, D1
000029FC  13C1 00A00019           5221mmmm     MOVE.B D1, MC68230_PORT_C_DATA
00002A02  13FC 0038 00A00019      5222mmmm     MOVE.B #(MC68230_PORT_C_READ | MC68230_PORT_C_WRITE | MC68230_PORT_C_CS), MC68230_PORT_C_DATA
00002A0A                          5223mmmm     ENDM
00002A0A                          5224mmm     ENDM
00002A0A  0800 0007               5225mm     BTST #IDE_STATUS_BUSY, D0
00002A0E  66C2                    5226mm     BNE LOOP_395
00002A10                          5227mm     ENDM
00002A10                          5228mm     WAIT_DRIVE_DRQ D0, D1
00002A10                          5229mm LOOP_398
00002A10                          5230mmm     READ_IDE_STATUS D0, D1
00002A10                          5231mmmm     READ_8 #IDE_STATUS_REGISTER, D0, D1
00002A10  13FC 0000 00A00007      5232mmmm     MOVE.B #MC68230_PORT_DIRECTION_READ, MC68230_PORT_B_DIRECTION
00002A18  123C 0030               5233mmmm     MOVE.B #(MC68230_PORT_C_READ | MC68230_PORT_C_WRITE), D1
00002A1C  0001 0007               5234mmmm     ORI.B #IDE_STATUS_REGISTER, D1
00002A20  13C1 00A00019           5235mmmm     MOVE.B D1, MC68230_PORT_C_DATA
00002A26  0201 00DF               5236mmmm     ANDI.B #~MC68230_PORT_C_READ, D1
00002A2A  13C1 00A00019           5237mmmm     MOVE.B D1, MC68230_PORT_C_DATA
00002A30  1039 00A00013           5238mmmm     MOVE.B MC68230_PORT_B_DATA, D0
00002A36  0001 0020               5239mmmm     ORI.B #MC68230_PORT_C_READ, D1
00002A3A  13C1 00A00019           5240mmmm     MOVE.B D1, MC68230_PORT_C_DATA
00002A40  13FC 0038 00A00019      5241mmmm     MOVE.B #(MC68230_PORT_C_READ | MC68230_PORT_C_WRITE | MC68230_PORT_C_CS), MC68230_PORT_C_DATA
00002A48                          5242mmmm     ENDM
00002A48                          5243mmm     ENDM
00002A48  0800 0003               5244mm     BTST #IDE_STATUS_DRQ, D0
00002A4C  67C2                    5245mm     BEQ LOOP_398
00002A4E                          5246mm     ENDM
00002A4E                          5247m     ENDM
00002A4E                          5248m         PRINT_CHAR #'.', D1
00002A4E                          5249m WAIT_FOR_READY_401                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00002A4E                 TRUE     5250m     IFEQ DEBUG
00002A4E  1239 00C00003           5251m         MOVE.B DUART_SRA,D1                         ; READ STATUS REGISTER
00002A54  0801 0002               5252m         BTST #2,D1                                  ; CHECK FOR SPACE TO SEND
00002A58  67F4                    5253m         BEQ WAIT_FOR_READY_401                      ; NO SPACE, CHECK AGAIN
00002A5A  13FC 002E 00C00007      5254m         MOVE.B #'.',DUART_TXA                           ; SEND THE NEXT CHARACTER
00002A62                          5255m     ENDC
00002A62                          5256m 
00002A62                 FALSE    5257m     IFNE DEBUG
00002A62                          5258m     ENDC
00002A62                          5259m 
00002A62                          5260m     ENDM
00002A62                          5261              
00002A62                          5262          FOR.L D2 = #0 TO #255 DO
00002A62  7400                    5263s     MOVE.L  #0,D2
00002A64  6000 0050               5264s     BRA _20000019
00002A68                          5265s _20000018
00002A68                          5266m             READ_16 #IDE_DATA_REGISTER, D0, D1
00002A68  13FC 0000 00A00007      5267m     MOVE.B #MC68230_PORT_DIRECTION_READ, MC68230_PORT_B_DIRECTION
00002A70  13FC 0000 00A00005      5268m     MOVE.B #MC68230_PORT_DIRECTION_READ, MC68230_PORT_A_DIRECTION
00002A78                          5269m     
00002A78  123C 0030               5270m     MOVE.B #(MC68230_PORT_C_READ | MC68230_PORT_C_WRITE), D1    
00002A7C  0001 0000               5271m     ORI.B #IDE_DATA_REGISTER, D1
00002A80  13C1 00A00019           5272m     MOVE.B D1, MC68230_PORT_C_DATA
00002A86  0201 00DF               5273m     ANDI.B #~MC68230_PORT_C_READ, D1
00002A8A  13C1 00A00019           5274m     MOVE.B D1, MC68230_PORT_C_DATA
00002A90  1039 00A00011           5275m     MOVE.B MC68230_PORT_A_DATA, D0
00002A96  E148                    5276m     LSL.W #8, D0
00002A98  1039 00A00013           5277m     MOVE.B MC68230_PORT_B_DATA, D0
00002A9E  0001 0020               5278m     ORI.B #MC68230_PORT_C_READ, D1
00002AA2  13C1 00A00019           5279m     MOVE.B D1, MC68230_PORT_C_DATA
00002AA8  13FC 0038 00A00019      5280m     MOVE.B #(MC68230_PORT_C_READ | MC68230_PORT_C_WRITE | MC68230_PORT_C_CS), MC68230_PORT_C_DATA
00002AB0                          5281m     ENDM
00002AB0  30C0                    5282              MOVE.W D0,(A0)+
00002AB2  5585                    5283              SUB.L #2, D5
00002AB4                          5284          ENDF
00002AB4  5282                    5285s     ADD.L   #1,D2
00002AB6                          5286s _20000019
00002AB6  B4BC 000000FF           5287s     CMP.L   #255,D2
00002ABC  6FAA                    5288s     BLE _20000018
00002ABE                          5289          
00002ABE  5283                    5290          ADD.L #1, D3                                ; next block
00002AC0  7800                    5291          MOVE.L #0, D4                               ; not the first anymore
00002AC2                          5292      ENDW
00002AC2  6000 FD2C               5293s     BRA _1000001A
00002AC6                          5294s _1000001B
00002AC6                          5295  
00002AC6                          5296m     PRINT_CRLF D3,A3    
00002AC6  47FA 040F               5297m     LEA CRLF(PC),A3
00002ACA                          5298mm     PRINT_STR A3,D3
00002ACA                          5299mm LOOP_404
00002ACA  0C13 0000               5300mm     CMP.B #NULL,(A3)                                ; 0 -> DONE
00002ACE  6700 0016               5301mm     BEQ EXIT_404
00002AD2                          5302mmm     PRINT_CHAR (A3)+,D3
00002AD2                          5303mmm WAIT_FOR_READY_405                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00002AD2                 TRUE     5304mmm     IFEQ DEBUG
00002AD2  1639 00C00003           5305mmm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
00002AD8  0803 0002               5306mmm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
00002ADC  67F4                    5307mmm         BEQ WAIT_FOR_READY_405                      ; NO SPACE, CHECK AGAIN
00002ADE  13DB 00C00007           5308mmm         MOVE.B (A3)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00002AE4                          5309mmm     ENDC
00002AE4                          5310mmm 
00002AE4                 FALSE    5311mmm     IFNE DEBUG
00002AE4                          5312mmm     ENDC
00002AE4                          5313mmm 
00002AE4                          5314mmm     ENDM
00002AE4  60E4                    5315mm     BRA LOOP_404
00002AE6                          5316mm EXIT_404
00002AE6                          5317mm     ENDM
00002AE6                          5318m     ENDM
00002AE6                          5319      
00002AE6  6000 D85C               5320      BRA MAIN_LOOP   
00002AEA                          5321  
00002AEA                          5322  HEX_DIGIT
00002AEA  E98F                    5323      LSL.L #4,D7                                     ; add the next digit in the next 4 bits
00002AEC                          5324m     HEX2BIN D2,D2,A0
00002AEC  41FA 03BE               5325m     LEA HEX2BIN_LUT(PC),A0                          ; LOAD THE LOOKUP TABLE
00002AF0  0402 0030               5326m     SUB.B #'0',D2                                   ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
00002AF4  C4BC 000000FF           5327m     AND.L #$FF,D2                                   ; IGNORE THE TOP 3 BYTES
00002AFA  1430 2000               5328m     MOVE.B 0(A0,D2),D2                              ; USE THAT AS AN INDEX INTO THE LUT   
00002AFE                          5329m     ENDM
00002AFE  8E02                    5330      OR.B D2,D7  
00002B00  6000 D862               5331      BRA GET_INPUT
00002B04                          5332  
00002B04                          5333  ; exceptions    
00002B04                          5334  BUS_ERROR_HANDLER
00002B04                          5335  
00002B04  41FA 040F               5336      LEA BUS_ERROR(PC),A0
00002B08                          5337m     PRINT_STR A0,D1
00002B08                          5338m LOOP_407
00002B08  0C10 0000               5339m     CMP.B #NULL,(A0)                                ; 0 -> DONE
00002B0C  6700 0016               5340m     BEQ EXIT_407
00002B10                          5341mm     PRINT_CHAR (A0)+,D1
00002B10                          5342mm WAIT_FOR_READY_408                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00002B10                 TRUE     5343mm     IFEQ DEBUG
00002B10  1239 00C00003           5344mm         MOVE.B DUART_SRA,D1                         ; READ STATUS REGISTER
00002B16  0801 0002               5345mm         BTST #2,D1                                  ; CHECK FOR SPACE TO SEND
00002B1A  67F4                    5346mm         BEQ WAIT_FOR_READY_408                      ; NO SPACE, CHECK AGAIN
00002B1C  13D8 00C00007           5347mm         MOVE.B (A0)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00002B22                          5348mm     ENDC
00002B22                          5349mm 
00002B22                 FALSE    5350mm     IFNE DEBUG
00002B22                          5351mm     ENDC
00002B22                          5352mm 
00002B22                          5353mm     ENDM
00002B22  60E4                    5354m     BRA LOOP_407
00002B24                          5355m EXIT_407
00002B24                          5356m     ENDM
00002B24                          5357  
00002B24  7000                    5358      MOVE.L #0,D0
00002B26  3017                    5359      MOVE.W (SP),D0
00002B28                          5360  
00002B28  0800 0004               5361      BTST #4,D0
00002B2C  6700 0026               5362      BEQ WRITE
00002B30                          5363      
00002B30  41FA 03F8               5364      LEA READING(PC),A0
00002B34                          5365m     PRINT_STR A0,D1
00002B34                          5366m LOOP_409
00002B34  0C10 0000               5367m     CMP.B #NULL,(A0)                                ; 0 -> DONE
00002B38  6700 0016               5368m     BEQ EXIT_409
00002B3C                          5369mm     PRINT_CHAR (A0)+,D1
00002B3C                          5370mm WAIT_FOR_READY_410                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00002B3C                 TRUE     5371mm     IFEQ DEBUG
00002B3C  1239 00C00003           5372mm         MOVE.B DUART_SRA,D1                         ; READ STATUS REGISTER
00002B42  0801 0002               5373mm         BTST #2,D1                                  ; CHECK FOR SPACE TO SEND
00002B46  67F4                    5374mm         BEQ WAIT_FOR_READY_410                      ; NO SPACE, CHECK AGAIN
00002B48  13D8 00C00007           5375mm         MOVE.B (A0)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00002B4E                          5376mm     ENDC
00002B4E                          5377mm 
00002B4E                 FALSE    5378mm     IFNE DEBUG
00002B4E                          5379mm     ENDC
00002B4E                          5380mm 
00002B4E                          5381mm     ENDM
00002B4E  60E4                    5382m     BRA LOOP_409
00002B50                          5383m EXIT_409
00002B50                          5384m     ENDM
00002B50                          5385  
00002B50  6000 0022               5386      BRA CONTINUE    
00002B54                          5387  WRITE
00002B54  41FA 03DD               5388      LEA WRITING(PC),A0
00002B58                          5389m     PRINT_STR A0,D1
00002B58                          5390m LOOP_411
00002B58  0C10 0000               5391m     CMP.B #NULL,(A0)                                ; 0 -> DONE
00002B5C  6700 0016               5392m     BEQ EXIT_411
00002B60                          5393mm     PRINT_CHAR (A0)+,D1
00002B60                          5394mm WAIT_FOR_READY_412                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00002B60                 TRUE     5395mm     IFEQ DEBUG
00002B60  1239 00C00003           5396mm         MOVE.B DUART_SRA,D1                         ; READ STATUS REGISTER
00002B66  0801 0002               5397mm         BTST #2,D1                                  ; CHECK FOR SPACE TO SEND
00002B6A  67F4                    5398mm         BEQ WAIT_FOR_READY_412                      ; NO SPACE, CHECK AGAIN
00002B6C  13D8 00C00007           5399mm         MOVE.B (A0)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00002B72                          5400mm     ENDC
00002B72                          5401mm 
00002B72                 FALSE    5402mm     IFNE DEBUG
00002B72                          5403mm     ENDC
00002B72                          5404mm 
00002B72                          5405mm     ENDM
00002B72  60E4                    5406m     BRA LOOP_411
00002B74                          5407m EXIT_411
00002B74                          5408m     ENDM
00002B74                          5409  
00002B74                          5410  CONTINUE
00002B74  222F 0002               5411      MOVE.L 2(SP),D1
00002B78                          5412m     PRINT_REG D1,D2,D3,D4,A0
00002B78  41FA 0363               5413m     LEA OX(PC),A0
00002B7C                          5414mm     PRINT_STR A0,D2
00002B7C                          5415mm LOOP_414
00002B7C  0C10 0000               5416mm     CMP.B #NULL,(A0)                                ; 0 -> DONE
00002B80  6700 0016               5417mm     BEQ EXIT_414
00002B84                          5418mmm     PRINT_CHAR (A0)+,D2
00002B84                          5419mmm WAIT_FOR_READY_415                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00002B84                 TRUE     5420mmm     IFEQ DEBUG
00002B84  1439 00C00003           5421mmm         MOVE.B DUART_SRA,D2                         ; READ STATUS REGISTER
00002B8A  0802 0002               5422mmm         BTST #2,D2                                  ; CHECK FOR SPACE TO SEND
00002B8E  67F4                    5423mmm         BEQ WAIT_FOR_READY_415                      ; NO SPACE, CHECK AGAIN
00002B90  13D8 00C00007           5424mmm         MOVE.B (A0)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00002B96                          5425mmm     ENDC
00002B96                          5426mmm 
00002B96                 FALSE    5427mmm     IFNE DEBUG
00002B96                          5428mmm     ENDC
00002B96                          5429mmm 
00002B96                          5430mmm     ENDM
00002B96  60E4                    5431mm     BRA LOOP_414
00002B98                          5432mm EXIT_414
00002B98                          5433mm     ENDM
00002B98  7807                    5434m     MOVE.L #7,D4                                    ; LOOP ROUND ALL 8 HEX CHARACTERS OF 4 BITS EACH
00002B9A                          5435m LOOP_413
00002B9A                          5436mm     BIN2HEX D1,D3,A0
00002B9A  41FA 0300               5437mm     LEA BIN2HEX_LUT(PC),A0                          ; LOAD THE LOOKUP TABLE
00002B9E  E999                    5438mm     ROL.L #4,D1                                     ; SHIFT THE TOP 4 BITS DOWN TO BOTTOM OF THE REGISTER THE AND MASK OFF EVERYTHING ELSE
00002BA0  1601                    5439mm     MOVE.B D1,D3
00002BA2  0283 0000000F           5440mm     ANDI.L #$F,D3
00002BA8  1630 3000               5441mm     MOVE.B 0(A0,D3),D3                              ; USE THAT AS AN INDEX INTO THE LUT
00002BAC                          5442mm     ENDM
00002BAC                          5443mm     PRINT_CHAR D3,D2
00002BAC                          5444mm WAIT_FOR_READY_417                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00002BAC                 TRUE     5445mm     IFEQ DEBUG
00002BAC  1439 00C00003           5446mm         MOVE.B DUART_SRA,D2                         ; READ STATUS REGISTER
00002BB2  0802 0002               5447mm         BTST #2,D2                                  ; CHECK FOR SPACE TO SEND
00002BB6  67F4                    5448mm         BEQ WAIT_FOR_READY_417                      ; NO SPACE, CHECK AGAIN
00002BB8  13C3 00C00007           5449mm         MOVE.B D3,DUART_TXA                         ; SEND THE NEXT CHARACTER
00002BBE                          5450mm     ENDC
00002BBE                          5451mm 
00002BBE                 FALSE    5452mm     IFNE DEBUG
00002BBE                          5453mm     ENDC
00002BBE                          5454mm 
00002BBE                          5455mm     ENDM
00002BBE  57CC FFDA               5456m     DBEQ D4,LOOP_413
00002BC2                          5457m     ENDM
00002BC2                          5458  
00002BC2  41FA 0378               5459      LEA FROM(PC),A0
00002BC6                          5460m     PRINT_STR A0,D0
00002BC6                          5461m LOOP_418
00002BC6  0C10 0000               5462m     CMP.B #NULL,(A0)                                ; 0 -> DONE
00002BCA  6700 0016               5463m     BEQ EXIT_418
00002BCE                          5464mm     PRINT_CHAR (A0)+,D0
00002BCE                          5465mm WAIT_FOR_READY_419                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00002BCE                 TRUE     5466mm     IFEQ DEBUG
00002BCE  1039 00C00003           5467mm         MOVE.B DUART_SRA,D0                         ; READ STATUS REGISTER
00002BD4  0800 0002               5468mm         BTST #2,D0                                  ; CHECK FOR SPACE TO SEND
00002BD8  67F4                    5469mm         BEQ WAIT_FOR_READY_419                      ; NO SPACE, CHECK AGAIN
00002BDA  13D8 00C00007           5470mm         MOVE.B (A0)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00002BE0                          5471mm     ENDC
00002BE0                          5472mm 
00002BE0                 FALSE    5473mm     IFNE DEBUG
00002BE0                          5474mm     ENDC
00002BE0                          5475mm 
00002BE0                          5476mm     ENDM
00002BE0  60E4                    5477m     BRA LOOP_418
00002BE2                          5478m EXIT_418
00002BE2                          5479m     ENDM
00002BE2                          5480  
00002BE2  222F 000A               5481      MOVE.L 10(SP),D1
00002BE6                          5482m     PRINT_REG D1,D2,D3,D4,A0
00002BE6  41FA 02F5               5483m     LEA OX(PC),A0
00002BEA                          5484mm     PRINT_STR A0,D2
00002BEA                          5485mm LOOP_421
00002BEA  0C10 0000               5486mm     CMP.B #NULL,(A0)                                ; 0 -> DONE
00002BEE  6700 0016               5487mm     BEQ EXIT_421
00002BF2                          5488mmm     PRINT_CHAR (A0)+,D2
00002BF2                          5489mmm WAIT_FOR_READY_422                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00002BF2                 TRUE     5490mmm     IFEQ DEBUG
00002BF2  1439 00C00003           5491mmm         MOVE.B DUART_SRA,D2                         ; READ STATUS REGISTER
00002BF8  0802 0002               5492mmm         BTST #2,D2                                  ; CHECK FOR SPACE TO SEND
00002BFC  67F4                    5493mmm         BEQ WAIT_FOR_READY_422                      ; NO SPACE, CHECK AGAIN
00002BFE  13D8 00C00007           5494mmm         MOVE.B (A0)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00002C04                          5495mmm     ENDC
00002C04                          5496mmm 
00002C04                 FALSE    5497mmm     IFNE DEBUG
00002C04                          5498mmm     ENDC
00002C04                          5499mmm 
00002C04                          5500mmm     ENDM
00002C04  60E4                    5501mm     BRA LOOP_421
00002C06                          5502mm EXIT_421
00002C06                          5503mm     ENDM
00002C06  7807                    5504m     MOVE.L #7,D4                                    ; LOOP ROUND ALL 8 HEX CHARACTERS OF 4 BITS EACH
00002C08                          5505m LOOP_420
00002C08                          5506mm     BIN2HEX D1,D3,A0
00002C08  41FA 0292               5507mm     LEA BIN2HEX_LUT(PC),A0                          ; LOAD THE LOOKUP TABLE
00002C0C  E999                    5508mm     ROL.L #4,D1                                     ; SHIFT THE TOP 4 BITS DOWN TO BOTTOM OF THE REGISTER THE AND MASK OFF EVERYTHING ELSE
00002C0E  1601                    5509mm     MOVE.B D1,D3
00002C10  0283 0000000F           5510mm     ANDI.L #$F,D3
00002C16  1630 3000               5511mm     MOVE.B 0(A0,D3),D3                              ; USE THAT AS AN INDEX INTO THE LUT
00002C1A                          5512mm     ENDM
00002C1A                          5513mm     PRINT_CHAR D3,D2
00002C1A                          5514mm WAIT_FOR_READY_424                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00002C1A                 TRUE     5515mm     IFEQ DEBUG
00002C1A  1439 00C00003           5516mm         MOVE.B DUART_SRA,D2                         ; READ STATUS REGISTER
00002C20  0802 0002               5517mm         BTST #2,D2                                  ; CHECK FOR SPACE TO SEND
00002C24  67F4                    5518mm         BEQ WAIT_FOR_READY_424                      ; NO SPACE, CHECK AGAIN
00002C26  13C3 00C00007           5519mm         MOVE.B D3,DUART_TXA                         ; SEND THE NEXT CHARACTER
00002C2C                          5520mm     ENDC
00002C2C                          5521mm 
00002C2C                 FALSE    5522mm     IFNE DEBUG
00002C2C                          5523mm     ENDC
00002C2C                          5524mm 
00002C2C                          5525mm     ENDM
00002C2C  57CC FFDA               5526m     DBEQ D4,LOOP_420
00002C30                          5527m     ENDM
00002C30                          5528m     PRINT_CRLF D0,A0
00002C30  41FA 02A5               5529m     LEA CRLF(PC),A0
00002C34                          5530mm     PRINT_STR A0,D0
00002C34                          5531mm LOOP_426
00002C34  0C10 0000               5532mm     CMP.B #NULL,(A0)                                ; 0 -> DONE
00002C38  6700 0016               5533mm     BEQ EXIT_426
00002C3C                          5534mmm     PRINT_CHAR (A0)+,D0
00002C3C                          5535mmm WAIT_FOR_READY_427                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00002C3C                 TRUE     5536mmm     IFEQ DEBUG
00002C3C  1039 00C00003           5537mmm         MOVE.B DUART_SRA,D0                         ; READ STATUS REGISTER
00002C42  0800 0002               5538mmm         BTST #2,D0                                  ; CHECK FOR SPACE TO SEND
00002C46  67F4                    5539mmm         BEQ WAIT_FOR_READY_427                      ; NO SPACE, CHECK AGAIN
00002C48  13D8 00C00007           5540mmm         MOVE.B (A0)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00002C4E                          5541mmm     ENDC
00002C4E                          5542mmm 
00002C4E                 FALSE    5543mmm     IFNE DEBUG
00002C4E                          5544mmm     ENDC
00002C4E                          5545mmm 
00002C4E                          5546mmm     ENDM
00002C4E  60E4                    5547mm     BRA LOOP_426
00002C50                          5548mm EXIT_426
00002C50                          5549mm     ENDM
00002C50                          5550m     ENDM
00002C50                          5551      
00002C50  207C 00000004           5552      MOVE.L #4,A0
00002C56  4ED0                    5553      JMP (A0)
00002C58                          5554          
00002C58                          5555  ILLEGAL_HANDLER
00002C58  13FC 0007 00E00001      5556      MOVE.B #7,DISPLAY   
00002C60  207C 00000004           5557      MOVE.L #4,A0
00002C66  4ED0                    5558      JMP (A0)
00002C68                          5559          
00002C68                          5560  UNHANDLED_HANDLER
00002C68  41FA 02D9               5561      LEA UNHANDLED(PC),A0
00002C6C  4EF9 00002C90           5562      JMP PRINTIT_RTE
00002C72                          5563      
00002C72                          5564  UNINITIALISED_HANDLER
00002C72  41FA 02E5               5565      LEA UNINITIALISED(PC),A0
00002C76  4EF9 00002C90           5566      JMP PRINTIT_RTE
00002C7C                          5567  
00002C7C                          5568  TICK_HANDLER
00002C7C  1039 00C0001F           5569      MOVE.B DUART_RESET_OPR,D0
00002C82  41FA 028A               5570      LEA TICK(PC),A0
00002C86  4EF9 00002C90           5571      JMP PRINTIT_RTE
00002C8C                          5572  
00002C8C                          5573  SPURIOUS_HANDLER
00002C8C  41FA 02EA               5574      LEA SPURIOUS(PC),A0
00002C90                          5575  PRINTIT_RTE
00002C90                          5576m     PRINT_STR A0,D1
00002C90                          5577m LOOP_428
00002C90  0C10 0000               5578m     CMP.B #NULL,(A0)                                ; 0 -> DONE
00002C94  6700 0016               5579m     BEQ EXIT_428
00002C98                          5580mm     PRINT_CHAR (A0)+,D1
00002C98                          5581mm WAIT_FOR_READY_429                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00002C98                 TRUE     5582mm     IFEQ DEBUG
00002C98  1239 00C00003           5583mm         MOVE.B DUART_SRA,D1                         ; READ STATUS REGISTER
00002C9E  0801 0002               5584mm         BTST #2,D1                                  ; CHECK FOR SPACE TO SEND
00002CA2  67F4                    5585mm         BEQ WAIT_FOR_READY_429                      ; NO SPACE, CHECK AGAIN
00002CA4  13D8 00C00007           5586mm         MOVE.B (A0)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00002CAA                          5587mm     ENDC
00002CAA                          5588mm 
00002CAA                 FALSE    5589mm     IFNE DEBUG
00002CAA                          5590mm     ENDC
00002CAA                          5591mm 
00002CAA                          5592mm     ENDM
00002CAA  60E4                    5593m     BRA LOOP_428
00002CAC                          5594m EXIT_428
00002CAC                          5595m     ENDM
00002CAC  4E73                    5596      RTE 
00002CAE                          5597      
00002CAE  FFFF FFFF               5598      SIMHALT                                             ; halt simulator
00002CB2                          5599  
00002CB2                          5600  ; strings
00002CB2= 50 72 65 73 73 20 ...   5601  HELPPROMPT DC.B 'Press ? for help',CR,LF,NULL
00002CC5= 5B 3F 5D 09 09 09 ...   5602  HELP    DC.B '[?]',TAB,TAB,TAB,'help',CR,LF
00002CD1= 5B 76 5D 09 09 09 ...   5603          DC.B '[v]',TAB,TAB,TAB,'version',CR,LF
00002CE0= 78 78 78 78 78 78 ...   5604          DC.B 'xxxxxxxx[r]',TAB,TAB,'read long',CR,LF
00002CF8= 78 78 78 78 78 78 ...   5605          DC.B 'xxxxxxxx[w]xxxxxxxx',TAB,'write long',CR,LF
00002D18= 78 78 78 78 78 78 ...   5606          DC.B 'xxxxxxxx[s]',TAB,TAB,'download S records',CR,LF
00002D39= 78 78 78 78 78 78 ...   5607          DC.B 'xxxxxxxx[g]',TAB,TAB,'go',CR,LF
00002D4A= 5B 7A 5D 09 09 09 ...   5608          DC.B '[z]',TAB,TAB,TAB,'zap memory',CR,LF
00002D5C= 78 78 78 78 78 78 ...   5609          DC.B 'xxxxxxxx[l]xxxxxxxx',TAB,'load to EEPROM',CR,LF
00002D80= 78 78 78 78 78 78 ...   5610          DC.B 'xxxxxxxx[p]xxxxxxxx',TAB,'patch EEPROM',CR,LF
00002DA2= 23 09 09 09 77 72 ...   5611          DC.B '#',TAB,TAB,TAB,'write protect EEPROM',CR,LF
00002DBC= 5B 78 5D 09 09 09 ...   5612          DC.B '[x]',TAB,TAB,TAB,'print registers',CR,LF
00002DD3= 5B 49 5D 09 09 09 ...   5613          DC.B '[I]',TAB,TAB,TAB,'enable interrupts',CR,LF
00002DEC= 5B 6F 5D 09 09 09 ...   5614          DC.B '[o]',TAB,TAB,TAB,'disable interrupts',CR,LF
00002E06= 5B 69 5D 09 09 09 ...   5615          DC.B '[i]',TAB,TAB,TAB,'index the disk',CR,LF
00002E1C= 78 78 78 78 78 78 ...   5616          DC.B 'xxxxxxxx[b]',TAB,TAB,'boot from disk',CR,LF,NULL
00002E3A= 48 75 68 3F 0D 0A 00    5617  HUH  DC.B 'Huh?',CR,LF,NULL
00002E41= 20 53 20 72 65 63 ...   5618  READ    DC.B ' S records read, start address = ',NULL
00002E63= 57 3A 20 55 6E 6B ...   5619  UNREC   DC.B 'W: Unknown Srec type: ',NULL
00002E7A= 21 20 43 53 20 66 ...   5620  CS_FAILURE  DC.B '! CS failure at ',NULL
00002E8B= 21 20 52 41 4D 20 ...   5621  RAM_ERROR   DC.B '! RAM error at: ',NULL
00002E9C= 30 31 32 33 34 35 ...   5622  BIN2HEX_LUT DC.B '0123456789ABCDEF'
00002EAC= 00 01 02 03 04 05 ...   5623  HEX2BIN_LUT DC.B 0,1,2,3,4,5,6,7,8,9,0,0,0,0,0,0,0,$A,$B,$C,$D,$E,$F
00002EC3= 4C 6F 61 64 69 6E ...   5624  LOADING DC.B 'Loading EEPROM...',CR,LF,NULL
00002ED7= 0D 0A 00                5625  CRLF    DC.B CR,LF,NULL
00002EDA= 3E 20 00                5626  PROMPT  DC.B '> ',NULL
00002EDD= 30 78 00                5627  ox      DC.B '0x',NULL
00002EE0= 20 2D 3E 20 00          5628  to      DC.B ' -> ',NULL
00002EE5= 20 66 6F 72 20 00       5629  for     DC.B ' for ',NULL
00002EEB= 53 50 3A 20 00          5630  STACK_POINTER DC.B 'SP: ',NULL
00002EF0= 53 52 3A 20 00          5631  STATUS_REGISTER DC.B 'SR: ',NULL
00002EF5= 20 3A 20 00             5632  INDEX_SEP DC.B ' : ',NULL
00002EF9= 42 6F 6F 74 69 6E ...   5633  BOOT DC.B 'Booting ',NULL
00002F02= 4E 6F 74 20 66 6F ...   5634  NOT_FOUND DC.B 'Not found',CR,LF,NULL
00002F0E= 74 69 63 6B 0D 0A 00    5635  TICK DC.B 'tick',CR,LF,NULL
00002F15= 2A 20 42 75 73 2F ...   5636  BUS_ERROR DC.B '* Bus/address error ',NULL
00002F2A= 72 65 61 64 69 6E ...   5637  READING DC.B 'reading ',NULL
00002F33= 77 72 69 74 69 6E ...   5638  WRITING DC.B 'writing ',NULL
00002F3C= 20 66 72 6F 6D 20 00    5639  FROM DC.B ' from ',NULL
00002F43= 2A 20 55 6E 68 61 ...   5640  UNHANDLED DC.B '* Unhandled interrupt',NULL
00002F59= 2A 20 55 6E 69 74 ...   5641  UNINITIALISED DC.B '* Unitialised interrupt vector',NULL
00002F78= 2A 20 53 70 75 72 ...   5642  SPURIOUS DC.B '* Spurious interrupt',NULL
00002F8D= 4D 44 46 2D 6D 6F ...   5643  VERSION DC.B 'MDF-mon V1.145 (28/05/2021)',CR,LF,NULL   ; this is the last line on purpose, so if it prints, we can be sure we got it all
00002FAB= 00                      5644  END     DC.B 0
00002FAC                          5645      END START                                           ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
B                   1E8A
BIN2HEX             0
BIN2HEX_LUT         2E9C
BOOT                2EF9
BUS_ERROR           2F15
BUS_ERROR_HANDLER   2B04
CONTINUE            2B74
CONTINUE_101        A7A
CONTINUE_54         618
CONTINUE_57         668
CONTINUE_60         6AC
CONTINUE_64         72E
CONTINUE_68         78E
CONTINUE_72         7F8
CONTINUE_76         864
CONTINUE_80         8DA
CONTINUE_84         93A
CONTINUE_88         99A
CR                  D
CRLF                2ED7
CS_FAILURE          2E7A
DEBUG               0
DI                  1340
DISPLAY             E00001
DISPLAY_            0
DISPLAY_BASE        E00000
DOWNLOAD            7E4
DOWNLOAD_BYTE       B54
DOWNLOAD_DONE       B72
DUART_ACR           C00009
DUART_ACR_          4
DUART_BASE          C00000
DUART_CRA           C00005
DUART_CRA_          2
DUART_CRB           C00015
DUART_CRB_          A
DUART_CSRA          C00003
DUART_CSRA_         1
DUART_CSRB          C00013
DUART_CSRB_         9
DUART_CTLR          C0000F
DUART_CTLR_         7
DUART_CTUR          C0000D
DUART_CTUR_         6
DUART_IMR           C0000B
DUART_IMR_          5
DUART_IVR           C00019
DUART_IVR_          C
DUART_MRA           C00001
DUART_MRA_          0
DUART_MRB           C00011
DUART_MRB_          8
DUART_OPCR          C0001B
DUART_OPCR_         D
DUART_RESET_OPR     C0001F
DUART_RESET_OPR_    F
DUART_RXA           C00007
DUART_RXA_          3
DUART_RXB           C00017
DUART_RXB_          B
DUART_SET_OPR       C0001D
DUART_SET_OPR_      E
DUART_SRA           C00003
DUART_SRA_          1
DUART_SRB           C00013
DUART_SRB_          9
DUART_TXA           C00007
DUART_TXA_          3
DUART_TXB           C00017
DUART_TXB_          B
EI                  1330
END                 2FAB
EXIT_10             288
EXIT_105            AD8
EXIT_107            AF8
EXIT_110            B18
EXIT_115            B62
EXIT_118            B92
EXIT_121            BB2
EXIT_125            BFC
EXIT_128            C1E
EXIT_133            C68
EXIT_135            CE4
EXIT_138            D08
EXIT_143            D52
EXIT_15             2D2
EXIT_150            DE4
EXIT_153            E54
EXIT_156            E76
EXIT_160            EC0
EXIT_163            EE2
EXIT_167            F2C
EXIT_17             2F2
EXIT_170            F4C
EXIT_175            F96
EXIT_190            10B8
EXIT_193            111C
EXIT_196            113C
EXIT_20             312
EXIT_200            1186
EXIT_203            11A8
EXIT_208            11F2
EXIT_212            1234
EXIT_215            1256
EXIT_22             364
EXIT_220            12A0
EXIT_222            12C0
EXIT_225            12E2
EXIT_230            132C
EXIT_264            17C4
EXIT_28             3F0
EXIT_282            1AAE
EXIT_285            1ACE
EXIT_292            1BB6
EXIT_295            1BD6
EXIT_30             470
EXIT_302            1CBE
EXIT_305            1CDE
EXIT_312            1DC6
EXIT_315            1DE6
EXIT_32             49C
EXIT_320            1E30
EXIT_35             4C6
EXIT_355            2364
EXIT_380            27E8
EXIT_404            2AE6
EXIT_407            2B24
EXIT_409            2B50
EXIT_411            2B74
EXIT_414            2B98
EXIT_418            2BE2
EXIT_421            2C06
EXIT_426            2C50
EXIT_428            2CAC
EXIT_45             574
EXIT_5              240
EXIT_52             5EA
EXIT_7              260
EXIT_92             9FA
EXIT_94             A1A
EXIT_98             A4C
FOR                 2EE5
FROM                2F3C
G                   C6C
GET_INPUT           364
H                   474
HASH                1350
HELP                2CC5
HELPPROMPT          2CB2
HEX2BIN             10B
HEX2BIN_LUT         2EAC
HEX_DIGIT           2AEA
HUH                 2E3A
I                   1366
IDE_COMMAND_READ_WITH_RETRY  20
IDE_COMMAND_REGISTER  7
IDE_DATA_REGISTER   0
IDE_DRIVESEL_MASTER  E0
IDE_DRIVESEL_REGISTER  6
IDE_LBA_0_7_REGISTER  3
IDE_LBA_16_23_REGISTER  5
IDE_LBA_8_15_REGISTER  4
IDE_SECTOR_COUNT_REGISTER  2
IDE_STATUS_BUSY     7
IDE_STATUS_DRQ      3
IDE_STATUS_READY    6
IDE_STATUS_REGISTER  7
ILLEGAL_HANDLER     2C58
INDEX_SEP           2EF5
L                   D62
LF                  A
LOADING             2EC3
LOOP_10             26C
LOOP_105            ABC
LOOP_107            ADC
LOOP_109            B1A
LOOP_110            AFC
LOOP_115            B46
LOOP_118            B76
LOOP_120            BB4
LOOP_121            B96
LOOP_125            BE0
LOOP_127            C20
LOOP_128            C02
LOOP_133            C4C
LOOP_135            CC8
LOOP_137            D0A
LOOP_138            CEC
LOOP_143            D36
LOOP_15             2B6
LOOP_150            DC8
LOOP_153            E38
LOOP_155            E78
LOOP_156            E5A
LOOP_160            EA4
LOOP_162            EE4
LOOP_163            EC6
LOOP_167            F10
LOOP_169            F4E
LOOP_17             2D6
LOOP_170            F30
LOOP_175            F7A
LOOP_190            109C
LOOP_193            1100
LOOP_195            113E
LOOP_196            1120
LOOP_20             2F6
LOOP_200            116A
LOOP_202            11AA
LOOP_203            118C
LOOP_208            11D6
LOOP_212            1218
LOOP_214            1258
LOOP_215            123A
LOOP_22             348
LOOP_220            1284
LOOP_222            12A4
LOOP_224            12E4
LOOP_225            12C6
LOOP_230            1310
LOOP_234            13A8
LOOP_238            13E6
LOOP_250            15BE
LOOP_253            15FC
LOOP_264            17A8
LOOP_28             3D4
LOOP_282            1A92
LOOP_284            1AD0
LOOP_285            1AB2
LOOP_292            1B9A
LOOP_294            1BD8
LOOP_295            1BBA
LOOP_30             454
LOOP_302            1CA2
LOOP_304            1CE0
LOOP_305            1CC2
LOOP_312            1DAA
LOOP_314            1DE8
LOOP_315            1DCA
LOOP_32             480
LOOP_320            1E14
LOOP_324            1ECC
LOOP_328            1F0A
LOOP_34             4C8
LOOP_340            20E2
LOOP_343            2120
LOOP_35             4AA
LOOP_355            2348
LOOP_380            27CC
LOOP_383            27FA
LOOP_395            29D2
LOOP_398            2A10
LOOP_404            2ACA
LOOP_407            2B08
LOOP_409            2B34
LOOP_411            2B58
LOOP_413            2B9A
LOOP_414            2B7C
LOOP_418            2BC6
LOOP_420            2C08
LOOP_421            2BEA
LOOP_426            2C34
LOOP_428            2C90
LOOP_45             558
LOOP_5              224
LOOP_52             5CE
LOOP_7              244
LOOP_9              28A
LOOP_92             9DE
LOOP_94             9FE
LOOP_98             A30
MAIN_LOOP           344
MC68230_BASE        A00000
MC68230_GENERAL_CONTROL  A00001
MC68230_GENERAL_CONTROL_  0
MC68230_INTERRUPT_VECTOR  A0000B
MC68230_INTERRUPT_VECTOR_  5
MC68230_PORT_A_ALTERNATE  A00015
MC68230_PORT_A_ALTERNATE_  A
MC68230_PORT_A_CONTROL  A0000D
MC68230_PORT_A_CONTROL_  6
MC68230_PORT_A_DATA  A00011
MC68230_PORT_A_DATA_  8
MC68230_PORT_A_DIRECTION  A00005
MC68230_PORT_A_DIRECTION_  2
MC68230_PORT_B_ALTERNATE  A00017
MC68230_PORT_B_ALTERNATE_  B
MC68230_PORT_B_CONTROL  A0000F
MC68230_PORT_B_CONTROL_  7
MC68230_PORT_B_DATA  A00013
MC68230_PORT_B_DATA_  9
MC68230_PORT_B_DIRECTION  A00007
MC68230_PORT_B_DIRECTION_  3
MC68230_PORT_C_CS   8
MC68230_PORT_C_DATA  A00019
MC68230_PORT_C_DATA_  C
MC68230_PORT_C_DIRECTION  A00009
MC68230_PORT_C_DIRECTION_  4
MC68230_PORT_C_READ  20
MC68230_PORT_C_WRITE  10
MC68230_PORT_DIRECTION_READ  0
MC68230_PORT_DIRECTION_WRITE  FF
MC68230_SERVICE_REQUEST  A00003
MC68230_SERVICE_REQUEST_  1
MC68230_STATUS      A0001B
MC68230_STATUS_     D
NOT_FOUND           2F02
NULL                0
OX                  2EDD
P                   1044
PRINTIT             480
PRINTIT_RTE         2C90
PRINT_CHAR          203
PRINT_CRLF          3A0
PRINT_REG           4E8
PRINT_REG_4BIT      438
PRINT_STR           3CB
PROGRAM             CFE
PROGRAM_VECTOR      D95
PROMPT              2EDA
PROTECT             AF0
R                   4A0
RAM                 200000
RAM_ERROR           2E8B
READ                2E41
READING             2F2A
READ_16             1188
READ_32             13B5
READ_8              E13
READ_CHAR           6DD
READ_IDE_STATUS     1404
RESET               4
ROM                 0
S                   5F2
SEND_COMMAND        1686
SEND_READ_COMMAND_AND_WAIT  16B5
SET_READ_ADDRESS    1524
SPURIOUS            2F78
SPURIOUS_HANDLER    2C8C
STACK               0
STACK_ADDRESS       2E0000
STACK_POINTER       2EEB
START               104
STATUS_REGISTER     2EF0
TAB                 9
TICK                2F0E
TICK_HANDLER        2C7C
TO                  2EE0
UNHANDLED           2F43
UNHANDLED_HANDLER   2C68
UNINITIALISED       2F59
UNINITIALISED_HANDLER  2C72
UNPROTECT           A29
UNREC               2E63
USER                100
V                   47C
VECS                8
VERSION             2F8D
W                   578
WAIT_CHAR           599
WAIT_DRIVE_DRQ      14D4
WAIT_DRIVE_NOT_BUSY  1483
WAIT_DRIVE_READY    1431
WAIT_FOR_COMPLETE_177  FA8
WAIT_FOR_COMPLETE_179  FCA
WAIT_FOR_COMPLETE_180  FDC
WAIT_FOR_COMPLETE_182  100A
WAIT_FOR_COMPLETE_183  101C
WAIT_FOR_COMPLETE_210  11F4
WAIT_FOR_READY_1    1CE
WAIT_FOR_READY_101  A5E
WAIT_FOR_READY_106  AC4
WAIT_FOR_READY_108  AE4
WAIT_FOR_READY_11   274
WAIT_FOR_READY_111  B04
WAIT_FOR_READY_113  B2C
WAIT_FOR_READY_116  B4E
WAIT_FOR_READY_119  B7E
WAIT_FOR_READY_122  B9E
WAIT_FOR_READY_124  BC6
WAIT_FOR_READY_126  BE8
WAIT_FOR_READY_129  C0A
WAIT_FOR_READY_13   29C
WAIT_FOR_READY_131  C32
WAIT_FOR_READY_134  C54
WAIT_FOR_READY_136  CD0
WAIT_FOR_READY_139  CF4
WAIT_FOR_READY_141  D1C
WAIT_FOR_READY_144  D3E
WAIT_FOR_READY_145  D70
WAIT_FOR_READY_147  D8A
WAIT_FOR_READY_151  DD0
WAIT_FOR_READY_154  E40
WAIT_FOR_READY_157  E62
WAIT_FOR_READY_159  E8A
WAIT_FOR_READY_16   2BE
WAIT_FOR_READY_161  EAC
WAIT_FOR_READY_164  ECE
WAIT_FOR_READY_166  EF6
WAIT_FOR_READY_168  F18
WAIT_FOR_READY_171  F38
WAIT_FOR_READY_173  F60
WAIT_FOR_READY_176  F82
WAIT_FOR_READY_18   2DE
WAIT_FOR_READY_185  1050
WAIT_FOR_READY_187  106A
WAIT_FOR_READY_191  10A4
WAIT_FOR_READY_194  1108
WAIT_FOR_READY_197  1128
WAIT_FOR_READY_199  1150
WAIT_FOR_READY_2    1E2
WAIT_FOR_READY_201  1172
WAIT_FOR_READY_204  1194
WAIT_FOR_READY_206  11BC
WAIT_FOR_READY_209  11DE
WAIT_FOR_READY_21   2FE
WAIT_FOR_READY_213  1220
WAIT_FOR_READY_216  1242
WAIT_FOR_READY_218  126A
WAIT_FOR_READY_221  128C
WAIT_FOR_READY_223  12AC
WAIT_FOR_READY_226  12CE
WAIT_FOR_READY_228  12F6
WAIT_FOR_READY_23   350
WAIT_FOR_READY_231  1318
WAIT_FOR_READY_24   364
WAIT_FOR_READY_26   37E
WAIT_FOR_READY_263  1792
WAIT_FOR_READY_265  17B0
WAIT_FOR_READY_272  1902
WAIT_FOR_READY_273  1916
WAIT_FOR_READY_274  192A
WAIT_FOR_READY_275  193E
WAIT_FOR_READY_283  1A9A
WAIT_FOR_READY_286  1ABA
WAIT_FOR_READY_288  1AE2
WAIT_FOR_READY_29   3DC
WAIT_FOR_READY_293  1BA2
WAIT_FOR_READY_296  1BC2
WAIT_FOR_READY_298  1BEA
WAIT_FOR_READY_3    1F6
WAIT_FOR_READY_303  1CAA
WAIT_FOR_READY_306  1CCA
WAIT_FOR_READY_308  1CF2
WAIT_FOR_READY_31   45C
WAIT_FOR_READY_313  1DB2
WAIT_FOR_READY_316  1DD2
WAIT_FOR_READY_318  1DFA
WAIT_FOR_READY_321  1E1C
WAIT_FOR_READY_33   488
WAIT_FOR_READY_356  2350
WAIT_FOR_READY_36   4B2
WAIT_FOR_READY_360  2412
WAIT_FOR_READY_361  2426
WAIT_FOR_READY_362  243A
WAIT_FOR_READY_363  244E
WAIT_FOR_READY_38   4DA
WAIT_FOR_READY_381  27D4
WAIT_FOR_READY_39   4F0
WAIT_FOR_READY_40   506
WAIT_FOR_READY_401  2A4E
WAIT_FOR_READY_405  2AD2
WAIT_FOR_READY_408  2B10
WAIT_FOR_READY_41   51A
WAIT_FOR_READY_410  2B3C
WAIT_FOR_READY_412  2B60
WAIT_FOR_READY_415  2B84
WAIT_FOR_READY_417  2BAC
WAIT_FOR_READY_419  2BCE
WAIT_FOR_READY_42   52E
WAIT_FOR_READY_422  2BF2
WAIT_FOR_READY_424  2C1A
WAIT_FOR_READY_427  2C3C
WAIT_FOR_READY_429  2C98
WAIT_FOR_READY_43   542
WAIT_FOR_READY_46   560
WAIT_FOR_READY_47   582
WAIT_FOR_READY_49   59C
WAIT_FOR_READY_53   5D6
WAIT_FOR_READY_54   5FC
WAIT_FOR_READY_56   636
WAIT_FOR_READY_57   64C
WAIT_FOR_READY_6    22C
WAIT_FOR_READY_60   690
WAIT_FOR_READY_64   712
WAIT_FOR_READY_68   772
WAIT_FOR_READY_72   7DC
WAIT_FOR_READY_76   848
WAIT_FOR_READY_8    24C
WAIT_FOR_READY_80   8BE
WAIT_FOR_READY_84   91E
WAIT_FOR_READY_88   97E
WAIT_FOR_READY_93   9E6
WAIT_FOR_READY_95   A06
WAIT_FOR_READY_96   A1A
WAIT_FOR_READY_99   A38
WAIT_FOR_SRECORD    5FC
WRITE               2B54
WRITE_8             FCC
WRITING             2F33
X                   1214
Z                   C72
_00000000           218
_00000001           3A4
_00000002           3B8
_00000003           6F2
_00000004           A50
_00000005           700
_00000006           8A6
_00000007           82E
_00000008           A50
_00000009           9DA
_0000000A           A50
_0000000B           B66
_0000000C           B72
_0000000D           D52
_0000000E           FB2
_0000000F           FD4
_00000010           FE6
_00000011           1014
_00000012           1026
_00000013           11FE
_00000014           1E36
_00000015           17C4
_00000016           1950
_00000017           1AF8
_00000018           1C00
_00000019           1D08
_0000001A           1E30
_0000001B           1E80
_0000001C           2772
_0000001D           2364
_0000001E           2364
_0000001F           2460
_00000020           2460
_00000021           25A4
_00000022           25A6
_00000023           27BC
_00000024           27EC
_10000000           686
_10000001           6DC
_10000002           708
_10000003           75E
_10000004           768
_10000005           7BE
_10000006           7D2
_10000007           828
_10000008           832
_10000009           8A0
_1000000A           83E
_1000000B           894
_1000000C           8B4
_1000000D           90A
_1000000E           914
_1000000F           96A
_10000010           974
_10000011           9CA
_10000012           A54
_10000013           AAA
_10000014           F96
_10000015           FB8
_10000016           16D4
_10000017           1E84
_10000018           21FA
_10000019           27C0
_1000001A           27F0
_1000001B           2AC6
_20000000           132
_20000001           13E
_20000002           14C
_20000003           158
_20000004           580
_20000005           5C4
_20000006           C84
_20000007           C94
_20000008           CAE
_20000009           D54
_2000000A           D6E
_2000000B           DB2
_2000000C           E2A
_2000000D           E2E
_2000000E           FEE
_2000000F           1028
_20000010           104E
_20000011           1092
_20000012           10F2
_20000013           10F6
_20000014           1862
_20000015           1952
_20000016           236C
_20000017           2462
_20000018           2A68
_20000019           2AB6
