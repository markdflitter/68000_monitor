00000104 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 16/05/2021 16:25:44

00000000                             1  *------------------------------------------------------------
00000000                             2  * Title         MDFmon 
00000000                             3  * Written by    Mark Flitter
00000000                             4  * Date          March 2021
00000000                             5  * Description:  68000 monitor program
00000000                             6  *-----------------------------------------------------------
00000000                             7  
00000000                             8      ORG  $0
00000000                             9  
00000000  =00000000                 10  DEBUG               EQU 0
00000000                            11  
00000000                            12  ; constants
00000000  =00000000                 13  NULL                EQU 0
00000000  =00000009                 14  TAB                 EQU 9
00000000  =0000000D                 15  CR                  EQU 13
00000000  =0000000A                 16  LF                  EQU 10
00000000                            17  
00000000  =00000000                 18  ROM                 EQU $0
00000000  =00200000                 19  RAM                 EQU $200000
00000000  =002E0000                 20  STACK_ADDRESS       EQU $2E0000
00000000                            21  
00000000  =00A00000                 22  MC68230_BASE        EQU $A00000
00000000  =00000000                 23  MC68230_GENERAL_CONTROL_    EQU $0
00000000  =00000001                 24  MC68230_SERVICE_REQUEST_    EQU $1
00000000  =00000002                 25  MC68230_PORT_A_DIRECTION_   EQU $2
00000000  =00000003                 26  MC68230_PORT_B_DIRECTION_   EQU $3
00000000  =00000004                 27  MC68230_PORT_C_DIRECTION_   EQU $4
00000000  =00000005                 28  MC68230_INTERRUPT_VECTOR_   EQU $5
00000000  =00000006                 29  MC68230_PORT_A_CONTROL_     EQU $6
00000000  =00000007                 30  MC68230_PORT_B_CONTROL_     EQU $7
00000000  =00000008                 31  MC68230_PORT_A_DATA_        EQU $8
00000000  =00000009                 32  MC68230_PORT_B_DATA_        EQU $9
00000000  =0000000A                 33  MC68230_PORT_A_ALTERNATE_   EQU $A
00000000  =0000000B                 34  MC68230_PORT_B_ALTERNATE_   EQU $B
00000000  =0000000C                 35  MC68230_PORT_C_DATA_        EQU $C
00000000  =0000000D                 36  MC68230_STATUS_     EQU $D
00000000                            37  
00000000  =00A00001                 38  MC68230_GENERAL_CONTROL     EQU MC68230_BASE+2*MC68230_GENERAL_CONTROL_+1
00000000  =00A00003                 39  MC68230_SERVICE_REQUEST     EQU MC68230_BASE+2*MC68230_SERVICE_REQUEST_+1
00000000  =00A00005                 40  MC68230_PORT_A_DIRECTION    EQU MC68230_BASE+2*MC68230_PORT_A_DIRECTION_+1
00000000  =00A00007                 41  MC68230_PORT_B_DIRECTION    EQU MC68230_BASE+2*MC68230_PORT_B_DIRECTION_+1
00000000  =00A00009                 42  MC68230_PORT_C_DIRECTION    EQU MC68230_BASE+2*MC68230_PORT_C_DIRECTION_+1
00000000  =00A0000B                 43  MC68230_INTERRUPT_VECTOR    EQU MC68230_BASE+2*MC68230_INTERRUPT_VECTOR_+1
00000000  =00A0000D                 44  MC68230_PORT_A_CONTROL      EQU MC68230_BASE+2*MC68230_PORT_A_CONTROL_+1
00000000  =00A0000F                 45  MC68230_PORT_B_CONTROL      EQU MC68230_BASE+2*MC68230_PORT_B_CONTROL_+1
00000000  =00A00011                 46  MC68230_PORT_A_DATA         EQU MC68230_BASE+2*MC68230_PORT_A_DATA_+1
00000000  =00A00013                 47  MC68230_PORT_B_DATA         EQU MC68230_BASE+2*MC68230_PORT_B_DATA_+1
00000000  =00A00015                 48  MC68230_PORT_A_ALTERNATE    EQU MC68230_BASE+2*MC68230_PORT_A_ALTERNATE_+1
00000000  =00A00017                 49  MC68230_PORT_B_ALTERNATE    EQU MC68230_BASE+2*MC68230_PORT_B_ALTERNATE_+1
00000000  =00A00019                 50  MC68230_PORT_C_DATA         EQU MC68230_BASE+2*MC68230_PORT_C_DATA_+1
00000000  =00A0001B                 51  MC68230_STATUS              EQU MC68230_BASE+2*MC68230_STATUS_+1
00000000                            52  
00000000  =00C00000                 53  DUART_BASE          EQU $C00000
00000000  =00000000                 54  DUART_MRA_          EQU $0
00000000  =00000001                 55  DUART_CSRA_         EQU $1
00000000  =00000001                 56  DUART_SRA_          EQU $1
00000000  =00000002                 57  DUART_CRA_          EQU $2
00000000  =00000003                 58  DUART_TXA_          EQU $3
00000000  =00000003                 59  DUART_RXA_          EQU $3
00000000  =00000004                 60  DUART_ACR_          EQU $4
00000000  =00000005                 61  DUART_IMR_          EQU $5
00000000  =00000006                 62  DUART_CTUR_         EQU $6
00000000  =00000007                 63  DUART_CTLR_         EQU $7
00000000  =00000008                 64  DUART_MRB_          EQU $8
00000000  =00000009                 65  DUART_CSRB_         EQU $9
00000000  =00000009                 66  DUART_SRB_          EQU $9
00000000  =0000000A                 67  DUART_CRB_          EQU $A
00000000  =0000000B                 68  DUART_TXB_          EQU $B
00000000  =0000000B                 69  DUART_RXB_          EQU $B
00000000  =0000000C                 70  DUART_IVR_          EQU $C
00000000  =0000000D                 71  DUART_OPCR_         EQU $D
00000000  =0000000E                 72  DUART_SET_OPR_      EQU $E
00000000  =0000000F                 73  DUART_RESET_OPR_    EQU $F
00000000                            74  
00000000  =00C00001                 75  DUART_MRA           EQU DUART_BASE+2*DUART_MRA_+1
00000000  =00C00003                 76  DUART_SRA           EQU DUART_BASE+2*DUART_SRA_+1
00000000  =00C00003                 77  DUART_CSRA          EQU DUART_BASE+2*DUART_CSRA_+1
00000000  =00C00005                 78  DUART_CRA           EQU DUART_BASE+2*DUART_CRA_+1
00000000  =00C00007                 79  DUART_TXA           EQU DUART_BASE+2*DUART_TXA_+1
00000000  =00C00007                 80  DUART_RXA           EQU DUART_BASE+2*DUART_RXA_+1
00000000                            81  
00000000  =00C00011                 82  DUART_MRB           EQU DUART_BASE+2*DUART_MRB_+1
00000000  =00C00013                 83  DUART_SRB           EQU DUART_BASE+2*DUART_SRB_+1
00000000  =00C00013                 84  DUART_CSRB          EQU DUART_BASE+2*DUART_CSRB_+1
00000000  =00C00015                 85  DUART_CRB           EQU DUART_BASE+2*DUART_CRB_+1
00000000  =00C00017                 86  DUART_TXB           EQU DUART_BASE+2*DUART_TXB_+1
00000000  =00C00017                 87  DUART_RXB           EQU DUART_BASE+2*DUART_RXB_+1
00000000                            88  
00000000  =00C00009                 89  DUART_ACR           EQU DUART_BASE+2*DUART_ACR_+1
00000000  =00C0000B                 90  DUART_IMR           EQU DUART_BASE+2*DUART_IMR_+1
00000000  =00C0000D                 91  DUART_CTUR          EQU DUART_BASE+2*DUART_CTUR_+1
00000000  =00C0000F                 92  DUART_CTLR          EQU DUART_BASE+2*DUART_CTLR_+1
00000000  =00C00019                 93  DUART_IVR           EQU DUART_BASE+2*DUART_IVR_+1
00000000  =00C0001B                 94  DUART_OPCR          EQU DUART_BASE+2*DUART_OPCR_+1
00000000  =00C0001D                 95  DUART_SET_OPR       EQU DUART_BASE+2*DUART_SET_OPR_+1
00000000  =00C0001F                 96  DUART_RESET_OPR     EQU DUART_BASE+2*DUART_RESET_OPR_+1
00000000                            97  
00000000  =00E00000                 98  DISPLAY_BASE        EQU $E00000
00000000  =00000000                 99  DISPLAY_            EQU $0
00000000  =00E00001                100  DISPLAY             EQU DISPLAY_BASE+2*DISPLAY_+1
00000000                           101  
00000000                           102  ; macros
00000000                           103  ; convert top 4 bits of input register from binary to a single hex digit
00000000                           104  ; the input register is changed during the process
00000000                           105  ; \1 input data register containing binary number, \2 data register for return value, \3 working address register
00000000                           106  BIN2HEX MACRO
00000000                           107      LEA BIN2HEX_LUT(PC),\3                          ; load the lookup table
00000000                           108      ROL.L #4,\1                                     ; shift the top 4 bits down to bottom of the register the and mask off everything else
00000000                           109      MOVE.B \1,\2
00000000                           110      ANDI.L #$F,\2
00000000                           111      MOVE.B 0(\3,\2),\2                              ; use that as an index into the LUT
00000000                           112      ENDM
00000000                           113  
00000000                           114  ; convert single hex digit to 4 bit binary number in LSbits
00000000                           115  ; the input register is changed during the process
00000000                           116  ; \1 data register containing hex character, \2 data register for return value, \3 working address register
00000000                           117  HEX2BIN MACRO
00000000                           118      LEA HEX2BIN_LUT(PC),\3                          ; load the lookup table
00000000                           119      SUB.B #'0',\1                                   ; work out offset and mask off anything rogue
00000000                           120      AND.L #$FF,\1                                   ; ignore the top 3 bytes
00000000                           121      MOVE.B 0(\3,\1),\2                              ; use that as an index into the LUT   
00000000                           122      ENDM
00000000                           123  
00000000                           124  ; send a single char to the serial port
00000000                           125  ; \1 = char to send, \2 = data register to use for status poll
00000000                           126  ; will stamp on D0 and D1 in debug mode
00000000                           127  PRINT_CHAR MACRO
00000000                           128  WAIT_FOR_READY\@                                    ; wait until the there is space to send
00000000                           129      IFEQ DEBUG
00000000                           130          MOVE.B DUART_SRA,\2                         ; read status register
00000000                           131          BTST #2,\2                                  ; check for space to send
00000000                           132          BEQ WAIT_FOR_READY\@                        ; no space, check again
00000000                           133          MOVE.B \1,DUART_TXA                         ; send the next character
00000000                           134      ENDC
00000000                           135  
00000000                           136      IFNE DEBUG
00000000                           137          MOVE.B \1,D1
00000000                           138          MOVE.L #6,D0   
00000000                           139          TRAP #15                                    ; write to terminal in simulator
00000000                           140      ENDC
00000000                           141  
00000000                           142      ENDM
00000000                           143  
00000000                           144  ; send CR,LF to the serial port
00000000                           145  ; \1 = data register to use for status poll, /2 = working address register
00000000                           146  PRINT_CRLF MACRO
00000000                           147      LEA CRLF(PC),\2
00000000                           148      PRINT_STR \2,\1
00000000                           149      ENDM
00000000                           150  
00000000                           151  ; send C-style, zero terminated string to the serial port
00000000                           152  ; \1 = address register containing address of zero terminated string, \2 = data register to use for status poll, 
00000000                           153  PRINT_STR MACRO
00000000                           154  LOOP\@
00000000                           155      CMP.B #NULL,(\1)                                ; 0 -> done
00000000                           156      BEQ EXIT\@
00000000                           157      PRINT_CHAR (\1)+,\2
00000000                           158      BRA LOOP\@
00000000                           159  EXIT\@
00000000                           160      ENDM
00000000                           161    
00000000                           162  ; send the contents of a data register to the serial port as a 8 digit hex number
00000000                           163  ; \1 = data register containing binary number, \2 = data register to use for status poll, \3 working data register, \4 counter register, \5 working address register
00000000                           164  PRINT_REG MACRO
00000000                           165      LEA ox(PC),\5
00000000                           166      PRINT_STR \5,\2
00000000                           167      MOVE.L #7,\4                                    ; loop round all 8 hex characters of 4 bits each
00000000                           168  LOOP\@
00000000                           169      BIN2HEX \1,\3,\5
00000000                           170      PRINT_CHAR \3,\2
00000000                           171      DBEQ \4,LOOP\@
00000000                           172      ENDM
00000000                           173  
00000000                           174  ; wait for a char from the serial port
00000000                           175  ; \ 1= data register for read char, \2 = register to use for status poll
00000000                           176  ; will stamp on D0 and D1 in debug mode
00000000                           177  WAIT_CHAR MACRO
00000000                           178  WAIT_FOR_READY\@                                    ; wait until the there is space to send
00000000                           179      IFEQ DEBUG
00000000                           180          MOVE.B DUART_SRA,\2                         ; read status register
00000000                           181          BTST #0,\2                                  ; check for character
00000000                           182          BEQ WAIT_FOR_READY\@                        ; nothing, check again
00000000                           183      ENDC
00000000                           184  
00000000                           185      READ_CHAR \1
00000000                           186  
00000000                           187      IFEQ DEBUG
00000000                           188          PRINT_CHAR \1,\2                            ; echo it back
00000000                           189      ENDC
00000000                           190      ENDM
00000000                           191  
00000000                           192  ; read a char from the serial port - assumes that there is one!
00000000                           193  ; \ 1= data register for read char
00000000                           194  ; will stamp on D0 and D1 in debug mode
00000000                           195  READ_CHAR MACRO
00000000                           196      IFEQ DEBUG
00000000                           197          MOVE.B DUART_RXA,\1                         ; got a character, read it
00000000                           198      ENDC
00000000                           199      IFNE DEBUG
00000000                           200          MOVE.L #5,D0    
00000000                           201          TRAP #15                                    ; read from keyboard in simulator
00000000                           202          MOVE.L D1,\1
00000000                           203      ENDC
00000000                           204  
00000000                           205      CMP.B #$1B,\1                                   ; check for escape and go to start
00000000                           206      BEQ START
00000000                           207      ENDM
00000000                           208  
00000000                           209  
00000000                           210  ; read data from the download serial port
00000000                           211  ; \ 1= data register for read char
00000000                           212  DOWNLOAD MACRO
00000000                           213  WAIT_FOR_READY\@                                    ; wait until the there is space to send
00000000                           214  
00000000                           215      MOVE.B DUART_SRA,\1                             ; check for command
00000000                           216      BTST #0,\1                                      ; check for character
00000000                           217      BEQ CONTINUE\@                                  ; nothing, continue
00000000                           218  
00000000                           219      READ_CHAR \1                                    ; we're not going to do anything with it, just check for escape
00000000                           220  CONTINUE\@
00000000                           221      MOVE.B DUART_SRB,\1                             ; read download status register
00000000                           222      BTST #0,\1                                      ; check for character
00000000                           223      BEQ WAIT_FOR_READY\@                            ; nothing, check again
00000000                           224      
00000000                           225      MOVE.B DUART_RXB,\1                             ; got a character, read it
00000000                           226      MOVE.B \1,DISPLAY                               ; echo to the display
00000000                           227  
00000000                           228      ENDM
00000000                           229  
00000000                           230  ; unprotect the EEPROM
00000000                           231  UNPROTECT MACRO
00000000                           232      MOVE.W #$AAAA,$2AAA                             ; remove write protect
00000000                           233      NOP
00000000                           234      MOVE.W #$5555,$1554
00000000                           235      NOP
00000000                           236      MOVE.W #$8080,$2AAA
00000000                           237      NOP
00000000                           238      MOVE.W #$AAAA,$2AAA
00000000                           239      NOP
00000000                           240      MOVE.W #$5555,$1554
00000000                           241      NOP
00000000                           242      MOVE.W #$2020,$2AAA
00000000                           243      ENDM
00000000                           244      
00000000                           245  ; protect the EEPROM
00000000                           246  PROTECT MACRO
00000000                           247      MOVE.W #$AAAA,$2AAA                             ; and write protect
00000000                           248      MOVE.W #$5555,$1554
00000000                           249      MOVE.W #$A0A0,$2AAA
00000000                           250      ENDM
00000000                           251  
00000000                           252  
00000000                           253  ; read two hex digits from the download serial port and convert to a byte
00000000                           254  ; \1 result register, \2 = data register for read char, \3 = register to use for status poll, \4 = working data register, \5 = checksum register, \6 = working address register
00000000                           255  DOWNLOAD_BYTE MACRO
00000000                           256      MOVE.B #2,\4
00000000                           257      WHILE.B \4 <GT> 0 DO
00000000                           258          LSL.L #4,\1                                 ; it's OK to do this first, because we are either starting from 0, 
00000000                           259          DOWNLOAD \2                                 ; or we are reading the next byte along, so need to shift up the previous one
00000000                           260          PRINT_CHAR \2,\3
00000000                           261          HEX2BIN \2,\2,\6
00000000                           262          OR.B \2,\1
00000000                           263          SUB.B #1,\4
00000000                           264      ENDW
00000000                           265  
00000000                           266      MOVE.L #0,\2                                    ; rextract latest byte of address and add into checksum
00000000                           267      MOVE.B \1,\2
00000000                           268      ADD.L \1,\5
00000000                           269  
00000000                           270      ENDM
00000000                           271  
00000000                           272  ; write word to EEPROM
00000000                           273  ; \1 word to write, \2 = target address, \3 = working data register
00000000                           274  PROGRAM MACRO
00000000                           275    MOVE.W \1,\2                                      ; write the data
00000000                           276  
00000000                           277  WAIT_FOR_COMPLETE\@
00000000                           278          MOVE.W \2,\3
00000000                           279  
00000000                           280          IF.W \3 <NE> \1 THEN
00000000                           281              BRA WAIT_FOR_COMPLETE\@
00000000                           282          ENDI
00000000                           283          ENDM
00000000                           284          
00000000                           285  ; program vector to EEPROM
00000000                           286  ; \1 handler address, \2 = target address, \3 = working data register
00000000                           287  PROGRAM_VECTOR MACRO
00000000                           288      ADD.L #2,\2
00000000                           289      PROGRAM \1, (\2), \3                                ; write it
00000000                           290      LSR.L #8,\1
00000000                           291      LSR.L #8,\1
00000000                           292      SUB.L #2,\2
00000000                           293      PROGRAM \1, (\2), \3
00000000                           294      ENDM
00000000                           295  
00000000                           296  ; read an ide register
00000000                           297  ; \1 = register to read, \2 = data register for result, \3 = working data register 
00000000                           298  READ_8 MACRO
00000000                           299      MOVE.B #0, MC68230_PORT_B_DIRECTION
00000000                           300      MOVE.B #$30, \3
00000000                           301      ORI.B \1,\3
00000000                           302      MOVE.B \3,MC68230_PORT_C_DATA
00000000                           303      ANDI.B #$DF,\3
00000000                           304      MOVE.B \3,MC68230_PORT_C_DATA
00000000                           305      MOVE.B MC68230_PORT_B_DATA,\2
00000000                           306      ORI.B #$20,\3
00000000                           307      MOVE.B \3,MC68230_PORT_C_DATA
00000000                           308      MOVE.B #$38,MC68230_PORT_C_DATA
00000000                           309      ENDM
00000000                           310      
00000000                           311  ; write an ide register
00000000                           312  ; \1 = value to write, \2 = register to write, \3 = working data register 
00000000                           313  WRITE_8 MACRO
00000000                           314      MOVE.B #$FF,MC68230_PORT_B_DIRECTION
00000000                           315      MOVE.B #$30, \3
00000000                           316      ORI.B \2,\3
00000000                           317      MOVE.B \3,MC68230_PORT_C_DATA
00000000                           318      ANDI.B #$EF,\3
00000000                           319      MOVE.B \1,MC68230_PORT_B_DATA
00000000                           320      MOVE.B \3,MC68230_PORT_C_DATA
00000000                           321      ORI.B #$10,\3
00000000                           322      MOVE.B \3,MC68230_PORT_C_DATA
00000000                           323      MOVE.B #$38,MC68230_PORT_C_DATA
00000000                           324      ENDM
00000000                           325      
00000000                           326  ; read ide status
00000000                           327  ;\1 = data register for result, \2 = working data register 
00000000                           328  READ_STATUS MACRO   
00000000                           329      READ_8 #$7, \1, \2
00000000                           330      ENDM
00000000                           331  
00000000                           332  ; read ide data
00000000                           333  ; \1 = register to read, \2 = data register for result, \3 = working data register 
00000000                           334  READ_16 MACRO
00000000                           335      MOVE.B #0, MC68230_PORT_B_DIRECTION
00000000                           336      MOVE.B #0, MC68230_PORT_A_DIRECTION
00000000                           337      MOVE.B #$30, \3
00000000                           338      ORI.B \1,\3
00000000                           339      MOVE.B \3,MC68230_PORT_C_DATA
00000000                           340      ANDI.B #$DF,\3
00000000                           341      MOVE.B \3,MC68230_PORT_C_DATA
00000000                           342      MOVE.B MC68230_PORT_A_DATA,\2
00000000                           343      LSL.W #8,\2
00000000                           344      MOVE.B MC68230_PORT_B_DATA,\2
00000000                           345      ORI.B #$20,\3
00000000                           346      MOVE.B \3,MC68230_PORT_C_DATA
00000000                           347      MOVE.B #$38,MC68230_PORT_C_DATA
00000000                           348      ENDM
00000000                           349      
00000000                           350  ; write ide data
00000000                           351  ; \1 = register to write, \2 = value to write, \3 = working data register1, \4 = working data register2 
00000000                           352  WRITE_16 MACRO
00000000                           353      MOVE.B #FF, MC68230_PORT_B_DIRECTION
00000000                           354      MOVE.B #FF, MC68230_PORT_A_DIRECTION
00000000                           355      MOVE.B #$30, \3
00000000                           356      ORI.B \1,\3
00000000                           357      MOVE.B \3,MC68230_PORT_C_DATA
00000000                           358      ANDI.B #$EF,\3
00000000                           359      MOVE.B \3,MC68230_PORT_C_DATA
00000000                           360      MOVE.B \2,MC68230_PORT_A_DATA
00000000                           361      MOVE.W \2,\4
00000000                           362      LSR.W #8,\4
00000000                           363      MOVE.B \4,MC68230_PORT_B_DATA
00000000                           364      ORI.B #$10,\3
00000000                           365      MOVE.B \3,MC68230_PORT_C_DATA
00000000                           366      MOVE.B #$38,MC68230_PORT_C_DATA
00000000                           367      ENDM
00000000                           368          
00000000                           369  ; register catalogue
00000000                           370  ; D0 - used for simulator I/O
00000000                           371  ; D1 - used for simulator I/O
00000000                           372  ; D2 - read character
00000000                           373  ; D3 - serial port status poll / task for TRAP in simulator
00000000                           374  ; D6 - working register used in R/W
00000000                           375  ; D7 - address accumulator, reset by download
00000000                           376  ; A0 - address of string to print 
00000000                           377  
00000000                           378  ; start vector
00000000= 002E0000                 379  STACK   DC.L STACK_ADDRESS                      ; STACK
00000004= 00000104                 380  RESET   DC.L START                              ; RESET
00000008= 00001B62                 381  VECS    DC.L BUS_ERROR_HANDLER                      ; BUS ERROR
0000000C= 00001B62                 382          DC.L BUS_ERROR_HANDLER                  ; ADDRESS ERROR
00000010= 00001CB6                 383          DC.L ILLEGAL_HANDLER                        ; ILLEGAL INSTRUCTION
00000014= 00001CC6                 384          DC.L UNHANDLED_HANDLER
00000018= 00001CC6                 385          DC.L UNHANDLED_HANDLER
0000001C= 00001CC6                 386          DC.L UNHANDLED_HANDLER
00000020= 00001CC6                 387          DC.L UNHANDLED_HANDLER
00000024= 00001CC6                 388          DC.L UNHANDLED_HANDLER
00000028= 00001CC6                 389          DC.L UNHANDLED_HANDLER
0000002C= 00001CC6                 390          DC.L UNHANDLED_HANDLER
00000030= 00001CC6                 391          DC.L UNHANDLED_HANDLER
00000034= 00001CC6                 392          DC.L UNHANDLED_HANDLER
00000038= 00001CC6                 393          DC.L UNHANDLED_HANDLER
0000003C= 00001CC6                 394          DC.L UNHANDLED_HANDLER
00000040= 00001CC6                 395          DC.L UNHANDLED_HANDLER
00000044= 00001CC6                 396          DC.L UNHANDLED_HANDLER
00000048= 00001CC6                 397          DC.L UNHANDLED_HANDLER
0000004C= 00001CC6                 398          DC.L UNHANDLED_HANDLER
00000050= 00001CC6                 399          DC.L UNHANDLED_HANDLER
00000054= 00001CC6                 400          DC.L UNHANDLED_HANDLER
00000058= 00001CC6                 401          DC.L UNHANDLED_HANDLER
0000005C= 00001CC6                 402          DC.L UNHANDLED_HANDLER
00000060= 00001CEA                 403          DC.L SPURIOUS_HANDLER
00000064= 00001CC6                 404          DC.L UNHANDLED_HANDLER
00000068= 00001CC6                 405          DC.L UNHANDLED_HANDLER
0000006C= 00001CC6                 406          DC.L UNHANDLED_HANDLER
00000070= 00001CC6                 407          DC.L UNHANDLED_HANDLER
00000074= 00001CC6                 408          DC.L UNHANDLED_HANDLER
00000078= 00001CC6                 409          DC.L UNHANDLED_HANDLER
0000007C= 00001CC6                 410          DC.L UNHANDLED_HANDLER
00000080= 00001CC6                 411          DC.L UNHANDLED_HANDLER
00000084= 00001CC6                 412          DC.L UNHANDLED_HANDLER
00000088= 00001CC6                 413          DC.L UNHANDLED_HANDLER
0000008C= 00001CC6                 414          DC.L UNHANDLED_HANDLER
00000090= 00001CC6                 415          DC.L UNHANDLED_HANDLER
00000094= 00001CC6                 416          DC.L UNHANDLED_HANDLER
00000098= 00001CC6                 417          DC.L UNHANDLED_HANDLER
0000009C= 00001CC6                 418          DC.L UNHANDLED_HANDLER
000000A0= 00001CC6                 419          DC.L UNHANDLED_HANDLER
000000A4= 00001CC6                 420          DC.L UNHANDLED_HANDLER
000000A8= 00001CC6                 421          DC.L UNHANDLED_HANDLER
000000AC= 00001CC6                 422          DC.L UNHANDLED_HANDLER
000000B0= 00001CC6                 423          DC.L UNHANDLED_HANDLER
000000B4= 00001CC6                 424          DC.L UNHANDLED_HANDLER
000000B8= 00001CC6                 425          DC.L UNHANDLED_HANDLER
000000BC= 00001CC6                 426          DC.L UNHANDLED_HANDLER
000000C0= 00001CC6                 427          DC.L UNHANDLED_HANDLER
000000C4= 00001CC6                 428          DC.L UNHANDLED_HANDLER
000000C8= 00001CC6                 429          DC.L UNHANDLED_HANDLER
000000CC= 00001CC6                 430          DC.L UNHANDLED_HANDLER
000000D0= 00001CC6                 431          DC.L UNHANDLED_HANDLER
000000D4= 00001CC6                 432          DC.L UNHANDLED_HANDLER
000000D8= 00001CC6                 433          DC.L UNHANDLED_HANDLER 
000000DC= 00001CC6                 434          DC.L UNHANDLED_HANDLER
000000E0= 00001CC6                 435          DC.L UNHANDLED_HANDLER
000000E4= 00001CC6                 436          DC.L UNHANDLED_HANDLER 
000000E8= 00001CC6                 437          DC.L UNHANDLED_HANDLER 
000000EC= 00001CC6                 438          DC.L UNHANDLED_HANDLER
000000F0= 00001CC6                 439          DC.L UNHANDLED_HANDLER 
000000F4= 00001CC6                 440          DC.L UNHANDLED_HANDLER 
000000F8= 00001CC6                 441          DC.L UNHANDLED_HANDLER 
000000FC= 00001CC6                 442          DC.L UNHANDLED_HANDLER
00000100= 00001CDA                 443  USER    DC.L TICK_HANDLER
00000104                           444      ; start of program  
00000104                           445  START
00000104  2E7C 002E0000            446      MOVE.L #STACK_ADDRESS,A7
0000010A  13FC 0000 00E00001       447      MOVE.B #0,DISPLAY
00000112                           448  
00000112  7000                     449      MOVE.L #0,D0
00000114  1039 00C00019            450      MOVE.B DUART_IVR,D0                             ; warm start?
0000011A                           451  
0000011A                           452  ; reset the UART in case of warm start
0000011A  13FC 000A 00C00005       453      MOVE.B #$A,DUART_CRA                            ; disable rx & tx
00000122  13FC 000A 00C00015       454      MOVE.B #$A,DUART_CRB                            ; disable rx & tx
0000012A                           455      
0000012A                           456      FOR D1 = #$50 DOWNTO #$10 BY #$10 DO
0000012A  323C 0050                457s     MOVE.W  #$50,D1
0000012E  6000 000E                458s     BRA _20000001
00000132                           459s _20000000
00000132  13C1 00C00005            460          MOVE.B D1,DUART_CRA                         ; reset everyting
00000138  4E71                     461          NOP
0000013A                           462      ENDF
0000013A  0441 0010                463s     SUB.W   #$10,D1
0000013E                           464s _20000001
0000013E  B27C 0010                465s     CMP.W   #$10,D1
00000142  6CEE                     466s     BGE _20000000
00000144                           467  
00000144                           468      FOR D1 = #$50 DOWNTO #$10 BY #$10 DO
00000144  323C 0050                469s     MOVE.W  #$50,D1
00000148  6000 000E                470s     BRA _20000003
0000014C                           471s _20000002
0000014C  13C1 00C00015            472          MOVE.B D1,DUART_CRB                         ; reset everyting
00000152  4E71                     473          NOP
00000154                           474      ENDF
00000154  0441 0010                475s     SUB.W   #$10,D1
00000158                           476s _20000003
00000158  B27C 0010                477s     CMP.W   #$10,D1
0000015C  6CEE                     478s     BGE _20000002
0000015E                           479      
0000015E                           480  ;initialise UART
0000015E  13FC 0000 00C0000B       481      MOVE.B #$0,DUART_IMR                            ; no interrupts, please
00000166  13FC 00FF 00C0000D       482      MOVE.B #$FF,DUART_CTUR
0000016E  13FC 00FF 00C0000F       483      MOVE.B #$FF,DUART_CTLR
00000176  13FC 0070 00C00009       484      MOVE.B #$70,DUART_ACR
0000017E  13FC 0004 00C0001B       485      MOVE.B #$4,DUART_OPCR                           ; enable counter
00000186                           486  
00000186                           487  ; channel A
00000186  13FC 0013 00C00001       488      MOVE.B #$13,DUART_MRA                           ; no flow control, no parity, 8 data bits
0000018E  13FC 0007 00C00001       489      MOVE.B #$07,DUART_MRA                           ; 1 stop bit
00000196  13FC 0066 00C00003       490      MOVE.B #$66,DUART_CSRA                          ; 115K  baud
0000019E  13FC 0005 00C00005       491      MOVE.B #$5,DUART_CRA                            ; enable rx & tx
000001A6                           492  
000001A6                           493  ; channel B
000001A6  13FC 0013 00C00011       494      MOVE.B #$13,DUART_MRB                           ; no flow control, no parity, 8 data bits
000001AE  13FC 0007 00C00011       495      MOVE.B #$07,DUART_MRB                           ; 1 stop bit
000001B6  13FC 0066 00C00013       496      MOVE.B #$66,DUART_CSRB                          ; 115K baud
000001BE  13FC 0005 00C00015       497      MOVE.B #$5,DUART_CRB                            ; enable rx & tx
000001C6  13FC 0040 00C00019       498      MOVE.B #64,DUART_IVR
000001CE                           499  
000001CE                           500m     PRINT_CHAR #0,D1                                ; some non-printing char to flush out the serial port
000001CE                           501m WAIT_FOR_READY_1                                    ; WAIT UNTIL THE THERE IS SPACE TO SEND
000001CE                 TRUE      502m     IFEQ DEBUG
000001CE  1239 00C00003            503m         MOVE.B DUART_SRA,D1                         ; READ STATUS REGISTER
000001D4  0801 0002                504m         BTST #2,D1                                  ; CHECK FOR SPACE TO SEND
000001D8  67F4                     505m         BEQ WAIT_FOR_READY_1                        ; NO SPACE, CHECK AGAIN
000001DA  13FC 0000 00C00007       506m         MOVE.B #0,DUART_TXA                         ; SEND THE NEXT CHARACTER
000001E2                           507m     ENDC
000001E2                           508m 
000001E2                 FALSE     509m     IFNE DEBUG
000001E2                           510m     ENDC
000001E2                           511m 
000001E2                           512m     ENDM
000001E2                           513m     PRINT_CHAR #0,D1
000001E2                           514m WAIT_FOR_READY_2                                    ; WAIT UNTIL THE THERE IS SPACE TO SEND
000001E2                 TRUE      515m     IFEQ DEBUG
000001E2  1239 00C00003            516m         MOVE.B DUART_SRA,D1                         ; READ STATUS REGISTER
000001E8  0801 0002                517m         BTST #2,D1                                  ; CHECK FOR SPACE TO SEND
000001EC  67F4                     518m         BEQ WAIT_FOR_READY_2                        ; NO SPACE, CHECK AGAIN
000001EE  13FC 0000 00C00007       519m         MOVE.B #0,DUART_TXA                         ; SEND THE NEXT CHARACTER
000001F6                           520m     ENDC
000001F6                           521m 
000001F6                 FALSE     522m     IFNE DEBUG
000001F6                           523m     ENDC
000001F6                           524m 
000001F6                           525m     ENDM
000001F6                           526m     PRINT_CHAR #0,D1
000001F6                           527m WAIT_FOR_READY_3                                    ; WAIT UNTIL THE THERE IS SPACE TO SEND
000001F6                 TRUE      528m     IFEQ DEBUG
000001F6  1239 00C00003            529m         MOVE.B DUART_SRA,D1                         ; READ STATUS REGISTER
000001FC  0801 0002                530m         BTST #2,D1                                  ; CHECK FOR SPACE TO SEND
00000200  67F4                     531m         BEQ WAIT_FOR_READY_3                        ; NO SPACE, CHECK AGAIN
00000202  13FC 0000 00C00007       532m         MOVE.B #0,DUART_TXA                         ; SEND THE NEXT CHARACTER
0000020A                           533m     ENDC
0000020A                           534m 
0000020A                 FALSE     535m     IFNE DEBUG
0000020A                           536m     ENDC
0000020A                           537m 
0000020A                           538m     ENDM
0000020A                           539      
0000020A                           540      IF D0 <EQ> #$0F THEN
0000020A  B07C 000F                541s     CMP.W   #$0F,D0
0000020E  6600 0008                542s     BNE _00000000
00000212  1039 00C00005            543          MOVE.B DUART_CRA,D0                         ; BRG test mode
00000218                           544      ENDI
00000218                           545s _00000000
00000218                           546  
00000218  13FC 0001 00E00001       547      MOVE.B #1,DISPLAY
00000220                           548      
00000220                           549m     PRINT_CRLF D1,A0
00000220  41FA 1CF6                550m     LEA CRLF(PC),A0
00000224                           551mm     PRINT_STR A0,D1
00000224                           552mm LOOP_5
00000224  0C10 0000                553mm     CMP.B #NULL,(A0)                                ; 0 -> DONE
00000228  6700 0016                554mm     BEQ EXIT_5
0000022C                           555mmm     PRINT_CHAR (A0)+,D1
0000022C                           556mmm WAIT_FOR_READY_6                                    ; WAIT UNTIL THE THERE IS SPACE TO SEND
0000022C                 TRUE      557mmm     IFEQ DEBUG
0000022C  1239 00C00003            558mmm         MOVE.B DUART_SRA,D1                         ; READ STATUS REGISTER
00000232  0801 0002                559mmm         BTST #2,D1                                  ; CHECK FOR SPACE TO SEND
00000236  67F4                     560mmm         BEQ WAIT_FOR_READY_6                        ; NO SPACE, CHECK AGAIN
00000238  13D8 00C00007            561mmm         MOVE.B (A0)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
0000023E                           562mmm     ENDC
0000023E                           563mmm 
0000023E                 FALSE     564mmm     IFNE DEBUG
0000023E                           565mmm     ENDC
0000023E                           566mmm 
0000023E                           567mmm     ENDM
0000023E  60E4                     568mm     BRA LOOP_5
00000240                           569mm EXIT_5
00000240                           570mm     ENDM
00000240                           571m     ENDM
00000240  41FA 1D74                572      LEA VERSION(PC),A0
00000244                           573m     PRINT_STR A0,D3
00000244                           574m LOOP_7
00000244  0C10 0000                575m     CMP.B #NULL,(A0)                                ; 0 -> DONE
00000248  6700 0016                576m     BEQ EXIT_7
0000024C                           577mm     PRINT_CHAR (A0)+,D3
0000024C                           578mm WAIT_FOR_READY_8                                    ; WAIT UNTIL THE THERE IS SPACE TO SEND
0000024C                 TRUE      579mm     IFEQ DEBUG
0000024C  1639 00C00003            580mm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
00000252  0803 0002                581mm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
00000256  67F4                     582mm         BEQ WAIT_FOR_READY_8                        ; NO SPACE, CHECK AGAIN
00000258  13D8 00C00007            583mm         MOVE.B (A0)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
0000025E                           584mm     ENDC
0000025E                           585mm 
0000025E                 FALSE     586mm     IFNE DEBUG
0000025E                           587mm     ENDC
0000025E                           588mm 
0000025E                           589mm     ENDM
0000025E  60E4                     590m     BRA LOOP_7
00000260                           591m EXIT_7
00000260                           592m     ENDM
00000260                           593  
00000260  41F9 00001FD4            594      LEA END,A0
00000266  2008                     595      MOVE.L A0,D0
00000268                           596m     PRINT_REG D0,D1,D2,D3,A0
00000268  41FA 1CB4                597m     LEA OX(PC),A0
0000026C                           598mm     PRINT_STR A0,D1
0000026C                           599mm LOOP_10
0000026C  0C10 0000                600mm     CMP.B #NULL,(A0)                                ; 0 -> DONE
00000270  6700 0016                601mm     BEQ EXIT_10
00000274                           602mmm     PRINT_CHAR (A0)+,D1
00000274                           603mmm WAIT_FOR_READY_11                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000274                 TRUE      604mmm     IFEQ DEBUG
00000274  1239 00C00003            605mmm         MOVE.B DUART_SRA,D1                         ; READ STATUS REGISTER
0000027A  0801 0002                606mmm         BTST #2,D1                                  ; CHECK FOR SPACE TO SEND
0000027E  67F4                     607mmm         BEQ WAIT_FOR_READY_11                       ; NO SPACE, CHECK AGAIN
00000280  13D8 00C00007            608mmm         MOVE.B (A0)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00000286                           609mmm     ENDC
00000286                           610mmm 
00000286                 FALSE     611mmm     IFNE DEBUG
00000286                           612mmm     ENDC
00000286                           613mmm 
00000286                           614mmm     ENDM
00000286  60E4                     615mm     BRA LOOP_10
00000288                           616mm EXIT_10
00000288                           617mm     ENDM
00000288  7607                     618m     MOVE.L #7,D3                                    ; LOOP ROUND ALL 8 HEX CHARACTERS OF 4 BITS EACH
0000028A                           619m LOOP_9
0000028A                           620mm     BIN2HEX D0,D2,A0
0000028A  41FA 1C51                621mm     LEA BIN2HEX_LUT(PC),A0                          ; LOAD THE LOOKUP TABLE
0000028E  E998                     622mm     ROL.L #4,D0                                     ; SHIFT THE TOP 4 BITS DOWN TO BOTTOM OF THE REGISTER THE AND MASK OFF EVERYTHING ELSE
00000290  1400                     623mm     MOVE.B D0,D2
00000292  0282 0000000F            624mm     ANDI.L #$F,D2
00000298  1430 2000                625mm     MOVE.B 0(A0,D2),D2                              ; USE THAT AS AN INDEX INTO THE LUT
0000029C                           626mm     ENDM
0000029C                           627mm     PRINT_CHAR D2,D1
0000029C                           628mm WAIT_FOR_READY_13                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
0000029C                 TRUE      629mm     IFEQ DEBUG
0000029C  1239 00C00003            630mm         MOVE.B DUART_SRA,D1                         ; READ STATUS REGISTER
000002A2  0801 0002                631mm         BTST #2,D1                                  ; CHECK FOR SPACE TO SEND
000002A6  67F4                     632mm         BEQ WAIT_FOR_READY_13                       ; NO SPACE, CHECK AGAIN
000002A8  13C2 00C00007            633mm         MOVE.B D2,DUART_TXA                         ; SEND THE NEXT CHARACTER
000002AE                           634mm     ENDC
000002AE                           635mm 
000002AE                 FALSE     636mm     IFNE DEBUG
000002AE                           637mm     ENDC
000002AE                           638mm 
000002AE                           639mm     ENDM
000002AE  57CB FFDA                640m     DBEQ D3,LOOP_9
000002B2                           641m     ENDM
000002B2                           642m     PRINT_CRLF D1,A0
000002B2  41FA 1C64                643m     LEA CRLF(PC),A0
000002B6                           644mm     PRINT_STR A0,D1
000002B6                           645mm LOOP_15
000002B6  0C10 0000                646mm     CMP.B #NULL,(A0)                                ; 0 -> DONE
000002BA  6700 0016                647mm     BEQ EXIT_15
000002BE                           648mmm     PRINT_CHAR (A0)+,D1
000002BE                           649mmm WAIT_FOR_READY_16                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
000002BE                 TRUE      650mmm     IFEQ DEBUG
000002BE  1239 00C00003            651mmm         MOVE.B DUART_SRA,D1                         ; READ STATUS REGISTER
000002C4  0801 0002                652mmm         BTST #2,D1                                  ; CHECK FOR SPACE TO SEND
000002C8  67F4                     653mmm         BEQ WAIT_FOR_READY_16                       ; NO SPACE, CHECK AGAIN
000002CA  13D8 00C00007            654mmm         MOVE.B (A0)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
000002D0                           655mmm     ENDC
000002D0                           656mmm 
000002D0                 FALSE     657mmm     IFNE DEBUG
000002D0                           658mmm     ENDC
000002D0                           659mmm 
000002D0                           660mmm     ENDM
000002D0  60E4                     661mm     BRA LOOP_15
000002D2                           662mm EXIT_15
000002D2                           663mm     ENDM
000002D2                           664m     ENDM
000002D2                           665  
000002D2  41FA 1A3C                666      LEA HELPPROMPT(PC),A0
000002D6                           667m     PRINT_STR A0,D3
000002D6                           668m LOOP_17
000002D6  0C10 0000                669m     CMP.B #NULL,(A0)                                ; 0 -> DONE
000002DA  6700 0016                670m     BEQ EXIT_17
000002DE                           671mm     PRINT_CHAR (A0)+,D3
000002DE                           672mm WAIT_FOR_READY_18                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
000002DE                 TRUE      673mm     IFEQ DEBUG
000002DE  1639 00C00003            674mm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
000002E4  0803 0002                675mm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
000002E8  67F4                     676mm         BEQ WAIT_FOR_READY_18                       ; NO SPACE, CHECK AGAIN
000002EA  13D8 00C00007            677mm         MOVE.B (A0)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
000002F0                           678mm     ENDC
000002F0                           679mm 
000002F0                 FALSE     680mm     IFNE DEBUG
000002F0                           681mm     ENDC
000002F0                           682mm 
000002F0                           683mm     ENDM
000002F0  60E4                     684m     BRA LOOP_17
000002F2                           685m EXIT_17
000002F2                           686m     ENDM
000002F2                           687  
000002F2                           688m     PRINT_CRLF D3,A0
000002F2  41FA 1C24                689m     LEA CRLF(PC),A0
000002F6                           690mm     PRINT_STR A0,D3
000002F6                           691mm LOOP_20
000002F6  0C10 0000                692mm     CMP.B #NULL,(A0)                                ; 0 -> DONE
000002FA  6700 0016                693mm     BEQ EXIT_20
000002FE                           694mmm     PRINT_CHAR (A0)+,D3
000002FE                           695mmm WAIT_FOR_READY_21                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
000002FE                 TRUE      696mmm     IFEQ DEBUG
000002FE  1639 00C00003            697mmm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
00000304  0803 0002                698mmm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
00000308  67F4                     699mmm         BEQ WAIT_FOR_READY_21                       ; NO SPACE, CHECK AGAIN
0000030A  13D8 00C00007            700mmm         MOVE.B (A0)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00000310                           701mmm     ENDC
00000310                           702mmm 
00000310                 FALSE     703mmm     IFNE DEBUG
00000310                           704mmm     ENDC
00000310                           705mmm 
00000310                           706mmm     ENDM
00000310  60E4                     707mm     BRA LOOP_20
00000312                           708mm EXIT_20
00000312                           709mm     ENDM
00000312                           710m     ENDM
00000312                           711  
00000312  7E00                     712      MOVE.L #0,D7                                    ; address accumulator
00000314                           713  
00000314  13FC 0002 00E00001       714      MOVE.B #2,DISPLAY
0000031C                           715      
0000031C  13FC 0000 00A00001       716      MOVE.B #$0, MC68230_GENERAL_CONTROL             ; set up the MC68230
00000324  13FC 0040 00A0000D       717      MOVE.B #$40, MC68230_PORT_A_CONTROL
0000032C  13FC 0040 00A0000F       718      MOVE.B #$40, MC68230_PORT_B_CONTROL
00000334  13FC 00FF 00A00009       719      MOVE.B #$FF, MC68230_PORT_C_DIRECTION
0000033C                           720      
0000033C  13FC 0003 00E00001       721      MOVE.B #3,DISPLAY
00000344                           722      
00000344                           723      
00000344                           724  MAIN_LOOP
00000344  41FA 1BD5                725      LEA PROMPT(PC),A0
00000348                           726m     PRINT_STR A0,D3
00000348                           727m LOOP_22
00000348  0C10 0000                728m     CMP.B #NULL,(A0)                                ; 0 -> DONE
0000034C  6700 0016                729m     BEQ EXIT_22
00000350                           730mm     PRINT_CHAR (A0)+,D3
00000350                           731mm WAIT_FOR_READY_23                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000350                 TRUE      732mm     IFEQ DEBUG
00000350  1639 00C00003            733mm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
00000356  0803 0002                734mm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
0000035A  67F4                     735mm         BEQ WAIT_FOR_READY_23                       ; NO SPACE, CHECK AGAIN
0000035C  13D8 00C00007            736mm         MOVE.B (A0)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00000362                           737mm     ENDC
00000362                           738mm 
00000362                 FALSE     739mm     IFNE DEBUG
00000362                           740mm     ENDC
00000362                           741mm 
00000362                           742mm     ENDM
00000362  60E4                     743m     BRA LOOP_22
00000364                           744m EXIT_22
00000364                           745m     ENDM
00000364                           746  
00000364                           747  GET_INPUT
00000364                           748m     WAIT_CHAR D2,D3                                 ; fetch character from serial port -> D2
00000364                           749m WAIT_FOR_READY_24                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000364                 TRUE      750m     IFEQ DEBUG
00000364  1639 00C00003            751m         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
0000036A  0803 0000                752m         BTST #0,D3                                  ; CHECK FOR CHARACTER
0000036E  67F4                     753m         BEQ WAIT_FOR_READY_24                       ; NOTHING, CHECK AGAIN
00000370                           754m     ENDC
00000370                           755m 
00000370                           756mm     READ_CHAR D2
00000370                 TRUE      757mm     IFEQ DEBUG
00000370  1439 00C00007            758mm         MOVE.B DUART_RXA,D2                         ; GOT A CHARACTER, READ IT
00000376                           759mm     ENDC
00000376                 FALSE     760mm     IFNE DEBUG
00000376                           761mm     ENDC
00000376                           762mm 
00000376  B43C 001B                763mm     CMP.B #$1B,D2                                   ; CHECK FOR ESCAPE AND GO TO START
0000037A  6700 FD88                764mm     BEQ START
0000037E                           765mm     ENDM
0000037E                           766m 
0000037E                 TRUE      767m     IFEQ DEBUG
0000037E                           768mm         PRINT_CHAR D2,D3                            ; ECHO IT BACK
0000037E                           769mm WAIT_FOR_READY_26                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
0000037E                 TRUE      770mm     IFEQ DEBUG
0000037E  1639 00C00003            771mm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
00000384  0803 0002                772mm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
00000388  67F4                     773mm         BEQ WAIT_FOR_READY_26                       ; NO SPACE, CHECK AGAIN
0000038A  13C2 00C00007            774mm         MOVE.B D2,DUART_TXA                         ; SEND THE NEXT CHARACTER
00000390                           775mm     ENDC
00000390                           776mm 
00000390                 FALSE     777mm     IFNE DEBUG
00000390                           778mm     ENDC
00000390                           779mm 
00000390                           780mm     ENDM
00000390                           781m     ENDC
00000390                           782m     ENDM
00000390                           783  
00000390                           784      IF.B D2 <GE> #'0' AND.B D2 <LE> #'9' THEN
00000390  B43C 0030                785s     CMP.B   #'0',D2
00000394  6D00 000E                786s     BLT _00000001
00000398  B43C 0039                787s     CMP.B   #'9',D2
0000039C  6E00 0006                788s     BGT _00000001
000003A0  6000 17A6                789          BRA HEX_DIGIT
000003A4                           790      ENDI
000003A4                           791s _00000001
000003A4                           792      IF.B D2 <GE> #'A' AND.B D2 <LE> #'F' THEN
000003A4  B43C 0041                793s     CMP.B   #'A',D2
000003A8  6D00 000E                794s     BLT _00000002
000003AC  B43C 0046                795s     CMP.B   #'F',D2
000003B0  6E00 0006                796s     BGT _00000002
000003B4  6000 1792                797          BRA HEX_DIGIT
000003B8                           798      ENDI
000003B8                           799s _00000002
000003B8                           800  
000003B8  B43C 0077                801      CMP.B #'w',D2
000003BC  6700 01B2                802      BEQ W
000003C0                           803  
000003C0  B43C 006C                804      CMP.B #'l',D2
000003C4  6700 0A48                805      BEQ L 
000003C8                           806  
000003C8  B43C 0070                807      CMP.B #'p',D2
000003CC  6700 0D42                808      BEQ P
000003D0                           809  
000003D0                           810m     PRINT_CRLF D3,A0
000003D0  41FA 1B46                811m     LEA CRLF(PC),A0
000003D4                           812mm     PRINT_STR A0,D3
000003D4                           813mm LOOP_28
000003D4  0C10 0000                814mm     CMP.B #NULL,(A0)                                ; 0 -> DONE
000003D8  6700 0016                815mm     BEQ EXIT_28
000003DC                           816mmm     PRINT_CHAR (A0)+,D3
000003DC                           817mmm WAIT_FOR_READY_29                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
000003DC                 TRUE      818mmm     IFEQ DEBUG
000003DC  1639 00C00003            819mmm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
000003E2  0803 0002                820mmm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
000003E6  67F4                     821mmm         BEQ WAIT_FOR_READY_29                       ; NO SPACE, CHECK AGAIN
000003E8  13D8 00C00007            822mmm         MOVE.B (A0)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
000003EE                           823mmm     ENDC
000003EE                           824mmm 
000003EE                 FALSE     825mmm     IFNE DEBUG
000003EE                           826mmm     ENDC
000003EE                           827mmm 
000003EE                           828mmm     ENDM
000003EE  60E4                     829mm     BRA LOOP_28
000003F0                           830mm EXIT_28
000003F0                           831mm     ENDM
000003F0                           832m     ENDM
000003F0                           833   
000003F0  B43C 003F                834      CMP.B #'?',D2
000003F4  6700 0076                835      BEQ H
000003F8                           836   
000003F8  B43C 0076                837      CMP.B #'v',D2
000003FC  6700 0076                838      BEQ V
00000400                           839      
00000400  B43C 0072                840      CMP.B #'r',D2
00000404  6700 0092                841      BEQ R
00000408                           842  
00000408  B43C 0073                843      CMP.B #'s',D2
0000040C  6700 01DE                844      BEQ S
00000410                           845  
00000410  B43C 0067                846      CMP.B #'g',D2
00000414  6700 0902                847      BEQ G   
00000418                           848  
00000418  B43C 007A                849      CMP.B #'z',D2
0000041C  6700 0900                850      BEQ Z   
00000420                           851  
00000420  B43C 0078                852      CMP.B #'x',D2
00000424  6700 0EBA                853      BEQ X
00000428                           854  
00000428  B43C 0069                855      CMP.B #'i',D2
0000042C  6700 0FCE                856      BEQ I
00000430                           857  
00000430  B43C 006F                858      CMP.B #'o',D2
00000434  6700 0FD6                859      BEQ O
00000438                           860  
00000438  B43C 0023                861      CMP.B #'#',D2
0000043C  6700 0FDE                862      BEQ HASH
00000440                           863  
00000440  B43C 0062                864      CMP.B #'b',D2
00000444  6700 0FEC                865      BEQ B
00000448                           866  
00000448  41FA 1A31                867      LEA HUH(PC),A0
0000044C                           868m     PRINT_STR A0,D3
0000044C                           869m LOOP_30
0000044C  0C10 0000                870m     CMP.B #NULL,(A0)                                ; 0 -> DONE
00000450  6700 0016                871m     BEQ EXIT_30
00000454                           872mm     PRINT_CHAR (A0)+,D3
00000454                           873mm WAIT_FOR_READY_31                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000454                 TRUE      874mm     IFEQ DEBUG
00000454  1639 00C00003            875mm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
0000045A  0803 0002                876mm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
0000045E  67F4                     877mm         BEQ WAIT_FOR_READY_31                       ; NO SPACE, CHECK AGAIN
00000460  13D8 00C00007            878mm         MOVE.B (A0)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00000466                           879mm     ENDC
00000466                           880mm 
00000466                 FALSE     881mm     IFNE DEBUG
00000466                           882mm     ENDC
00000466                           883mm 
00000466                           884mm     ENDM
00000466  60E4                     885m     BRA LOOP_30
00000468                           886m EXIT_30
00000468                           887m     ENDM
00000468                           888  
00000468  6000 FEDA                889      BRA MAIN_LOOP
0000046C                           890  
0000046C                           891  ; commands
0000046C                           892  H
0000046C  41FA 18B5                893      LEA HELP(PC),A0
00000470  6000 0006                894      BRA PRINTIT
00000474                           895  
00000474                           896  V
00000474  41FA 1B40                897      LEA VERSION(PC),A0
00000478                           898  PRINTIT
00000478                           899m     PRINT_STR A0,D3    
00000478                           900m LOOP_32
00000478  0C10 0000                901m     CMP.B #NULL,(A0)                                ; 0 -> DONE
0000047C  6700 0016                902m     BEQ EXIT_32
00000480                           903mm     PRINT_CHAR (A0)+,D3
00000480                           904mm WAIT_FOR_READY_33                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000480                 TRUE      905mm     IFEQ DEBUG
00000480  1639 00C00003            906mm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
00000486  0803 0002                907mm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
0000048A  67F4                     908mm         BEQ WAIT_FOR_READY_33                       ; NO SPACE, CHECK AGAIN
0000048C  13D8 00C00007            909mm         MOVE.B (A0)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00000492                           910mm     ENDC
00000492                           911mm 
00000492                 FALSE     912mm     IFNE DEBUG
00000492                           913mm     ENDC
00000492                           914mm 
00000492                           915mm     ENDM
00000492  60E4                     916m     BRA LOOP_32
00000494                           917m EXIT_32
00000494                           918m     ENDM
00000494  6000 FEAE                919      BRA MAIN_LOOP
00000498                           920  
00000498                           921  R
00000498  2047                     922      MOVE.L D7,A0                                    ; address accumulator -> address register
0000049A  7E00                     923      MOVE.L #0,D7                                    ;clear the now used address accumulator
0000049C  2410                     924      MOVE.L (A0),D2                                  ; read the memory and print it
0000049E                           925m     PRINT_REG D2,D3,D4,D5,A0
0000049E  41FA 1A7E                926m     LEA OX(PC),A0
000004A2                           927mm     PRINT_STR A0,D3
000004A2                           928mm LOOP_35
000004A2  0C10 0000                929mm     CMP.B #NULL,(A0)                                ; 0 -> DONE
000004A6  6700 0016                930mm     BEQ EXIT_35
000004AA                           931mmm     PRINT_CHAR (A0)+,D3
000004AA                           932mmm WAIT_FOR_READY_36                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
000004AA                 TRUE      933mmm     IFEQ DEBUG
000004AA  1639 00C00003            934mmm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
000004B0  0803 0002                935mmm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
000004B4  67F4                     936mmm         BEQ WAIT_FOR_READY_36                       ; NO SPACE, CHECK AGAIN
000004B6  13D8 00C00007            937mmm         MOVE.B (A0)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
000004BC                           938mmm     ENDC
000004BC                           939mmm 
000004BC                 FALSE     940mmm     IFNE DEBUG
000004BC                           941mmm     ENDC
000004BC                           942mmm 
000004BC                           943mmm     ENDM
000004BC  60E4                     944mm     BRA LOOP_35
000004BE                           945mm EXIT_35
000004BE                           946mm     ENDM
000004BE  7A07                     947m     MOVE.L #7,D5                                    ; LOOP ROUND ALL 8 HEX CHARACTERS OF 4 BITS EACH
000004C0                           948m LOOP_34
000004C0                           949mm     BIN2HEX D2,D4,A0
000004C0  41FA 1A1B                950mm     LEA BIN2HEX_LUT(PC),A0                          ; LOAD THE LOOKUP TABLE
000004C4  E99A                     951mm     ROL.L #4,D2                                     ; SHIFT THE TOP 4 BITS DOWN TO BOTTOM OF THE REGISTER THE AND MASK OFF EVERYTHING ELSE
000004C6  1802                     952mm     MOVE.B D2,D4
000004C8  0284 0000000F            953mm     ANDI.L #$F,D4
000004CE  1830 4000                954mm     MOVE.B 0(A0,D4),D4                              ; USE THAT AS AN INDEX INTO THE LUT
000004D2                           955mm     ENDM
000004D2                           956mm     PRINT_CHAR D4,D3
000004D2                           957mm WAIT_FOR_READY_38                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
000004D2                 TRUE      958mm     IFEQ DEBUG
000004D2  1639 00C00003            959mm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
000004D8  0803 0002                960mm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
000004DC  67F4                     961mm         BEQ WAIT_FOR_READY_38                       ; NO SPACE, CHECK AGAIN
000004DE  13C4 00C00007            962mm         MOVE.B D4,DUART_TXA                         ; SEND THE NEXT CHARACTER
000004E4                           963mm     ENDC
000004E4                           964mm 
000004E4                 FALSE     965mm     IFNE DEBUG
000004E4                           966mm     ENDC
000004E4                           967mm 
000004E4                           968mm     ENDM
000004E4  57CD FFDA                969m     DBEQ D5,LOOP_34
000004E8                           970m     ENDM
000004E8                           971      
000004E8                           972m     PRINT_CHAR #32,D3
000004E8                           973m WAIT_FOR_READY_39                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
000004E8                 TRUE      974m     IFEQ DEBUG
000004E8  1639 00C00003            975m         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
000004EE  0803 0002                976m         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
000004F2  67F4                     977m         BEQ WAIT_FOR_READY_39                       ; NO SPACE, CHECK AGAIN
000004F4  13FC 0020 00C00007       978m         MOVE.B #32,DUART_TXA                            ; SEND THE NEXT CHARACTER
000004FC                           979m     ENDC
000004FC                           980m 
000004FC                 FALSE     981m     IFNE DEBUG
000004FC                           982m     ENDC
000004FC                           983m 
000004FC                           984m     ENDM
000004FC                           985  
000004FC  E19A                     986      ROL.L #8,D2
000004FE                           987m     PRINT_CHAR D2,D3
000004FE                           988m WAIT_FOR_READY_40                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
000004FE                 TRUE      989m     IFEQ DEBUG
000004FE  1639 00C00003            990m         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
00000504  0803 0002                991m         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
00000508  67F4                     992m         BEQ WAIT_FOR_READY_40                       ; NO SPACE, CHECK AGAIN
0000050A  13C2 00C00007            993m         MOVE.B D2,DUART_TXA                         ; SEND THE NEXT CHARACTER
00000510                           994m     ENDC
00000510                           995m 
00000510                 FALSE     996m     IFNE DEBUG
00000510                           997m     ENDC
00000510                           998m 
00000510                           999m     ENDM
00000510  E19A                    1000      ROL.L #8,D2
00000512                          1001m     PRINT_CHAR D2,D3
00000512                          1002m WAIT_FOR_READY_41                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000512                 TRUE     1003m     IFEQ DEBUG
00000512  1639 00C00003           1004m         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
00000518  0803 0002               1005m         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
0000051C  67F4                    1006m         BEQ WAIT_FOR_READY_41                       ; NO SPACE, CHECK AGAIN
0000051E  13C2 00C00007           1007m         MOVE.B D2,DUART_TXA                         ; SEND THE NEXT CHARACTER
00000524                          1008m     ENDC
00000524                          1009m 
00000524                 FALSE    1010m     IFNE DEBUG
00000524                          1011m     ENDC
00000524                          1012m 
00000524                          1013m     ENDM
00000524  E19A                    1014      ROL.L #8,D2
00000526                          1015m     PRINT_CHAR D2,D3
00000526                          1016m WAIT_FOR_READY_42                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000526                 TRUE     1017m     IFEQ DEBUG
00000526  1639 00C00003           1018m         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
0000052C  0803 0002               1019m         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
00000530  67F4                    1020m         BEQ WAIT_FOR_READY_42                       ; NO SPACE, CHECK AGAIN
00000532  13C2 00C00007           1021m         MOVE.B D2,DUART_TXA                         ; SEND THE NEXT CHARACTER
00000538                          1022m     ENDC
00000538                          1023m 
00000538                 FALSE    1024m     IFNE DEBUG
00000538                          1025m     ENDC
00000538                          1026m 
00000538                          1027m     ENDM
00000538  E19A                    1028      ROL.L #8,D2
0000053A                          1029m     PRINT_CHAR D2,D3
0000053A                          1030m WAIT_FOR_READY_43                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
0000053A                 TRUE     1031m     IFEQ DEBUG
0000053A  1639 00C00003           1032m         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
00000540  0803 0002               1033m         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
00000544  67F4                    1034m         BEQ WAIT_FOR_READY_43                       ; NO SPACE, CHECK AGAIN
00000546  13C2 00C00007           1035m         MOVE.B D2,DUART_TXA                         ; SEND THE NEXT CHARACTER
0000054C                          1036m     ENDC
0000054C                          1037m 
0000054C                 FALSE    1038m     IFNE DEBUG
0000054C                          1039m     ENDC
0000054C                          1040m 
0000054C                          1041m     ENDM
0000054C                          1042  
0000054C                          1043m     PRINT_CRLF D3,A0
0000054C  41FA 19CA               1044m     LEA CRLF(PC),A0
00000550                          1045mm     PRINT_STR A0,D3
00000550                          1046mm LOOP_45
00000550  0C10 0000               1047mm     CMP.B #NULL,(A0)                                ; 0 -> DONE
00000554  6700 0016               1048mm     BEQ EXIT_45
00000558                          1049mmm     PRINT_CHAR (A0)+,D3
00000558                          1050mmm WAIT_FOR_READY_46                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000558                 TRUE     1051mmm     IFEQ DEBUG
00000558  1639 00C00003           1052mmm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
0000055E  0803 0002               1053mmm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
00000562  67F4                    1054mmm         BEQ WAIT_FOR_READY_46                       ; NO SPACE, CHECK AGAIN
00000564  13D8 00C00007           1055mmm         MOVE.B (A0)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
0000056A                          1056mmm     ENDC
0000056A                          1057mmm 
0000056A                 FALSE    1058mmm     IFNE DEBUG
0000056A                          1059mmm     ENDC
0000056A                          1060mmm 
0000056A                          1061mmm     ENDM
0000056A  60E4                    1062mm     BRA LOOP_45
0000056C                          1063mm EXIT_45
0000056C                          1064mm     ENDM
0000056C                          1065m     ENDM
0000056C                          1066      
0000056C  6000 FDD6               1067      BRA MAIN_LOOP
00000570                          1068  
00000570                          1069  W
00000570                          1070      FOR D6 = #0 TO #7 DO                                ; read 4 bytes
00000570  3C3C 0000               1071s     MOVE.W  #0,D6
00000574  6000 0046               1072s     BRA _20000005
00000578                          1073s _20000004
00000578  E98D                    1074          LSL.L #4,D5                                     ; make what we have so far more significant
0000057A                          1075m         WAIT_CHAR D2,D3                                 ; next character -> D2
0000057A                          1076m WAIT_FOR_READY_47                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
0000057A                 TRUE     1077m     IFEQ DEBUG
0000057A  1639 00C00003           1078m         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
00000580  0803 0000               1079m         BTST #0,D3                                  ; CHECK FOR CHARACTER
00000584  67F4                    1080m         BEQ WAIT_FOR_READY_47                       ; NOTHING, CHECK AGAIN
00000586                          1081m     ENDC
00000586                          1082m 
00000586                          1083mm     READ_CHAR D2
00000586                 TRUE     1084mm     IFEQ DEBUG
00000586  1439 00C00007           1085mm         MOVE.B DUART_RXA,D2                         ; GOT A CHARACTER, READ IT
0000058C                          1086mm     ENDC
0000058C                 FALSE    1087mm     IFNE DEBUG
0000058C                          1088mm     ENDC
0000058C                          1089mm 
0000058C  B43C 001B               1090mm     CMP.B #$1B,D2                                   ; CHECK FOR ESCAPE AND GO TO START
00000590  6700 FB72               1091mm     BEQ START
00000594                          1092mm     ENDM
00000594                          1093m 
00000594                 TRUE     1094m     IFEQ DEBUG
00000594                          1095mm         PRINT_CHAR D2,D3                            ; ECHO IT BACK
00000594                          1096mm WAIT_FOR_READY_49                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000594                 TRUE     1097mm     IFEQ DEBUG
00000594  1639 00C00003           1098mm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
0000059A  0803 0002               1099mm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
0000059E  67F4                    1100mm         BEQ WAIT_FOR_READY_49                       ; NO SPACE, CHECK AGAIN
000005A0  13C2 00C00007           1101mm         MOVE.B D2,DUART_TXA                         ; SEND THE NEXT CHARACTER
000005A6                          1102mm     ENDC
000005A6                          1103mm 
000005A6                 FALSE    1104mm     IFNE DEBUG
000005A6                          1105mm     ENDC
000005A6                          1106mm 
000005A6                          1107mm     ENDM
000005A6                          1108m     ENDC
000005A6                          1109m     ENDM
000005A6                          1110m         HEX2BIN D2,D2,A0                                ; convert to binary -> D2
000005A6  41FA 1945               1111m     LEA HEX2BIN_LUT(PC),A0                          ; LOAD THE LOOKUP TABLE
000005AA  0402 0030               1112m     SUB.B #'0',D2                                   ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
000005AE  C4BC 000000FF           1113m     AND.L #$FF,D2                                   ; IGNORE THE TOP 3 BYTES
000005B4  1430 2000               1114m     MOVE.B 0(A0,D2),D2                              ; USE THAT AS AN INDEX INTO THE LUT   
000005B8                          1115m     ENDM
000005B8  8A02                    1116          OR.B D2,D5
000005BA                          1117      ENDF
000005BA  5246                    1118s     ADD.W   #1,D6
000005BC                          1119s _20000005
000005BC  BC7C 0007               1120s     CMP.W   #7,D6
000005C0  6FB6                    1121s     BLE _20000004
000005C2                          1122  
000005C2                          1123m     PRINT_CRLF D3,A0
000005C2  41FA 1954               1124m     LEA CRLF(PC),A0
000005C6                          1125mm     PRINT_STR A0,D3
000005C6                          1126mm LOOP_52
000005C6  0C10 0000               1127mm     CMP.B #NULL,(A0)                                ; 0 -> DONE
000005CA  6700 0016               1128mm     BEQ EXIT_52
000005CE                          1129mmm     PRINT_CHAR (A0)+,D3
000005CE                          1130mmm WAIT_FOR_READY_53                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
000005CE                 TRUE     1131mmm     IFEQ DEBUG
000005CE  1639 00C00003           1132mmm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
000005D4  0803 0002               1133mmm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
000005D8  67F4                    1134mmm         BEQ WAIT_FOR_READY_53                       ; NO SPACE, CHECK AGAIN
000005DA  13D8 00C00007           1135mmm         MOVE.B (A0)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
000005E0                          1136mmm     ENDC
000005E0                          1137mmm 
000005E0                 FALSE    1138mmm     IFNE DEBUG
000005E0                          1139mmm     ENDC
000005E0                          1140mmm 
000005E0                          1141mmm     ENDM
000005E0  60E4                    1142mm     BRA LOOP_52
000005E2                          1143mm EXIT_52
000005E2                          1144mm     ENDM
000005E2                          1145m     ENDM
000005E2                          1146  
000005E2  2047                    1147      MOVE.L D7,A0                                    ; address accumulator -> address register
000005E4  7E00                    1148      MOVE.L #0,D7                                    ; clear the now used address accumulator
000005E6                          1149  
000005E6  2085                    1150      MOVE.L D5,(A0)                                  ; write the data
000005E8                          1151  
000005E8  6000 FD5A               1152      BRA MAIN_LOOP
000005EC                          1153  
000005EC                          1154  ; register map for S
000005EC                          1155  ; A0 - start address
000005EC                          1156  ; A1 - offset
000005EC                          1157  ; A2 - next address to write
000005EC                          1158  ; A3 - next location (jmp)
000005EC                          1159  ; A4 - Working Address Register
000005EC                          1160  ; D0 - record count
000005EC                          1161  ; D1 - 'S', record type, data byte, done flag (0x00000000 = continue, 0xFFFFFFFF = done)
000005EC                          1162  ; D2 - checksum
000005EC                          1163  ; D3 - data byte count
000005EC                          1164  ; D4 - read address, moved into A2
000005EC                          1165  ; D5 - temp
000005EC                          1166  ; D6 - temp
000005EC                          1167  ; D7 - temp
000005EC                          1168  S
000005EC  2078 0000               1169      MOVE.L 0,A0                                     ; start address -> A0
000005F0  2247                    1170      MOVE.L D7,A1                                    ; grab the address accumulator (offset) into A1
000005F2                          1171      
000005F2  7000                    1172      MOVE.L #0,D0                                    ; count of records read -> D0
000005F4                          1173          
000005F4                          1174  WAIT_FOR_SRECORD                                    ; wait for the start of a record, indicated by 'S'
000005F4                          1175m     DOWNLOAD D1
000005F4                          1176m WAIT_FOR_READY_54                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
000005F4                          1177m 
000005F4  1239 00C00003           1178m     MOVE.B DUART_SRA,D1                             ; CHECK FOR COMMAND
000005FA  0801 0000               1179m     BTST #0,D1                                      ; CHECK FOR CHARACTER
000005FE  6700 0010               1180m     BEQ CONTINUE_54                                 ; NOTHING, CONTINUE
00000602                          1181m 
00000602                          1182mm     READ_CHAR D1                                    ; WE're not going to do anything with it, just check for escape
00000602                 TRUE     1183mm     IFEQ DEBUG
00000602  1239 00C00007           1184mm         MOVE.B DUART_RXA,D1                         ; GOT A CHARACTER, READ IT
00000608                          1185mm     ENDC
00000608                 FALSE    1186mm     IFNE DEBUG
00000608                          1187mm     ENDC
00000608                          1188mm 
00000608  B23C 001B               1189mm     CMP.B #$1B,D1                                   ; CHECK FOR ESCAPE AND GO TO START
0000060C  6700 FAF6               1190mm     BEQ START
00000610                          1191mm     ENDM
00000610                          1192m CONTINUE_54
00000610  1239 00C00013           1193m     MOVE.B DUART_SRB,D1                             ; READ DOWNLOAD STATUS REGISTER
00000616  0801 0000               1194m     BTST #0,D1                                      ; CHECK FOR CHARACTER
0000061A  67D8                    1195m     BEQ WAIT_FOR_READY_54                           ; NOTHING, CHECK AGAIN
0000061C                          1196m     
0000061C  1239 00C00017           1197m     MOVE.B DUART_RXB,D1                             ; GOT A CHARACTER, READ IT
00000622  13C1 00E00001           1198m     MOVE.B D1,DISPLAY                               ; ECHO TO THE DISPLAY
00000628                          1199m 
00000628                          1200m     ENDM
00000628  B23C 0053               1201      CMP.B #'S',D1                                   ; found S?
0000062C  66C6                    1202      BNE WAIT_FOR_SRECORD                            ; nope, keep waiting
0000062E                          1203      
0000062E                          1204m     PRINT_CHAR #'S',D5                              ; print the S
0000062E                          1205m WAIT_FOR_READY_56                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
0000062E                 TRUE     1206m     IFEQ DEBUG
0000062E  1A39 00C00003           1207m         MOVE.B DUART_SRA,D5                         ; READ STATUS REGISTER
00000634  0805 0002               1208m         BTST #2,D5                                  ; CHECK FOR SPACE TO SEND
00000638  67F4                    1209m         BEQ WAIT_FOR_READY_56                       ; NO SPACE, CHECK AGAIN
0000063A  13FC 0053 00C00007      1210m         MOVE.B #'S',DUART_TXA                           ; SEND THE NEXT CHARACTER
00000642                          1211m     ENDC
00000642                          1212m 
00000642                 FALSE    1213m     IFNE DEBUG
00000642                          1214m     ENDC
00000642                          1215m 
00000642                          1216m     ENDM
00000642  5280                    1217      ADD.L #1,D0                                     ; read another S record, increment count
00000644                          1218      
00000644                          1219m     DOWNLOAD D1                                     ; read the record identifier and echo it back
00000644                          1220m WAIT_FOR_READY_57                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000644                          1221m 
00000644  1239 00C00003           1222m     MOVE.B DUART_SRA,D1                             ; CHECK FOR COMMAND
0000064A  0801 0000               1223m     BTST #0,D1                                      ; CHECK FOR CHARACTER
0000064E  6700 0010               1224m     BEQ CONTINUE_57                                 ; NOTHING, CONTINUE
00000652                          1225m 
00000652                          1226mm     READ_CHAR D1                                    ; WE're not going to do anything with it, just check for escape
00000652                 TRUE     1227mm     IFEQ DEBUG
00000652  1239 00C00007           1228mm         MOVE.B DUART_RXA,D1                         ; GOT A CHARACTER, READ IT
00000658                          1229mm     ENDC
00000658                 FALSE    1230mm     IFNE DEBUG
00000658                          1231mm     ENDC
00000658                          1232mm 
00000658  B23C 001B               1233mm     CMP.B #$1B,D1                                   ; CHECK FOR ESCAPE AND GO TO START
0000065C  6700 FAA6               1234mm     BEQ START
00000660                          1235mm     ENDM
00000660                          1236m CONTINUE_57
00000660  1239 00C00013           1237m     MOVE.B DUART_SRB,D1                             ; READ DOWNLOAD STATUS REGISTER
00000666  0801 0000               1238m     BTST #0,D1                                      ; CHECK FOR CHARACTER
0000066A  67D8                    1239m     BEQ WAIT_FOR_READY_57                           ; NOTHING, CHECK AGAIN
0000066C                          1240m     
0000066C  1239 00C00017           1241m     MOVE.B DUART_RXB,D1                             ; GOT A CHARACTER, READ IT
00000672  13C1 00E00001           1242m     MOVE.B D1,DISPLAY                               ; ECHO TO THE DISPLAY
00000678                          1243m 
00000678                          1244m     ENDM
00000678                          1245m     PRINT_CHAR D1,D5
00000678                          1246m WAIT_FOR_READY_59                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000678                 TRUE     1247m     IFEQ DEBUG
00000678  1A39 00C00003           1248m         MOVE.B DUART_SRA,D5                         ; READ STATUS REGISTER
0000067E  0805 0002               1249m         BTST #2,D5                                  ; CHECK FOR SPACE TO SEND
00000682  67F4                    1250m         BEQ WAIT_FOR_READY_59                       ; NO SPACE, CHECK AGAIN
00000684  13C1 00C00007           1251m         MOVE.B D1,DUART_TXA                         ; SEND THE NEXT CHARACTER
0000068A                          1252m     ENDC
0000068A                          1253m 
0000068A                 FALSE    1254m     IFNE DEBUG
0000068A                          1255m     ENDC
0000068A                          1256m 
0000068A                          1257m     ENDM
0000068A                          1258  
0000068A  7400                    1259      MOVE.L #0,D2                                    ; clear the checksum
0000068C                          1260  
0000068C                          1261m     DOWNLOAD_BYTE D3,D5,D6,D7,D2,A4
0000068C  1E3C 0002               1262m     MOVE.B #2,D7
00000690                          1263m     WHILE.B D7 <GT> 0 DO
00000690                          1264ms _10000000
00000690  BE38 0000               1265ms     CMP.B   0,D7
00000694  6F00 0062               1266ms     BLE _10000001
00000698  E98B                    1267m         LSL.L #4,D3                                 ; IT's OK to do this first, because we are either starting from 0, 
0000069A                          1268mm         DOWNLOAD D5                                 ; OR WE ARE READING THE NEXT BYTE ALONG, SO NEED TO SHIFT UP THE PREVIOUS ONE
0000069A                          1269mm WAIT_FOR_READY_61                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
0000069A                          1270mm 
0000069A  1A39 00C00003           1271mm     MOVE.B DUART_SRA,D5                             ; CHECK FOR COMMAND
000006A0  0805 0000               1272mm     BTST #0,D5                                      ; CHECK FOR CHARACTER
000006A4  6700 0010               1273mm     BEQ CONTINUE_61                                 ; NOTHING, CONTINUE
000006A8                          1274mm 
000006A8                          1275mmm     READ_CHAR D5                                    ; WE're not going to do anything with it, just check for escape
000006A8                 TRUE     1276mmm     IFEQ DEBUG
000006A8  1A39 00C00007           1277mmm         MOVE.B DUART_RXA,D5                         ; GOT A CHARACTER, READ IT
000006AE                          1278mmm     ENDC
000006AE                 FALSE    1279mmm     IFNE DEBUG
000006AE                          1280mmm     ENDC
000006AE                          1281mmm 
000006AE  BA3C 001B               1282mmm     CMP.B #$1B,D5                                   ; CHECK FOR ESCAPE AND GO TO START
000006B2  6700 FA50               1283mmm     BEQ START
000006B6                          1284mmm     ENDM
000006B6                          1285mm CONTINUE_61
000006B6  1A39 00C00013           1286mm     MOVE.B DUART_SRB,D5                             ; READ DOWNLOAD STATUS REGISTER
000006BC  0805 0000               1287mm     BTST #0,D5                                      ; CHECK FOR CHARACTER
000006C0  67D8                    1288mm     BEQ WAIT_FOR_READY_61                           ; NOTHING, CHECK AGAIN
000006C2                          1289mm     
000006C2  1A39 00C00017           1290mm     MOVE.B DUART_RXB,D5                             ; GOT A CHARACTER, READ IT
000006C8  13C5 00E00001           1291mm     MOVE.B D5,DISPLAY                               ; ECHO TO THE DISPLAY
000006CE                          1292mm 
000006CE                          1293mm     ENDM
000006CE                          1294mm         PRINT_CHAR D5,D6
000006CE                          1295mm WAIT_FOR_READY_63                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
000006CE                 TRUE     1296mm     IFEQ DEBUG
000006CE  1C39 00C00003           1297mm         MOVE.B DUART_SRA,D6                         ; READ STATUS REGISTER
000006D4  0806 0002               1298mm         BTST #2,D6                                  ; CHECK FOR SPACE TO SEND
000006D8  67F4                    1299mm         BEQ WAIT_FOR_READY_63                       ; NO SPACE, CHECK AGAIN
000006DA  13C5 00C00007           1300mm         MOVE.B D5,DUART_TXA                         ; SEND THE NEXT CHARACTER
000006E0                          1301mm     ENDC
000006E0                          1302mm 
000006E0                 FALSE    1303mm     IFNE DEBUG
000006E0                          1304mm     ENDC
000006E0                          1305mm 
000006E0                          1306mm     ENDM
000006E0                          1307mm         HEX2BIN D5,D5,A4
000006E0  49FA 180B               1308mm     LEA HEX2BIN_LUT(PC),A4                          ; LOAD THE LOOKUP TABLE
000006E4  0405 0030               1309mm     SUB.B #'0',D5                                   ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
000006E8  CABC 000000FF           1310mm     AND.L #$FF,D5                                   ; IGNORE THE TOP 3 BYTES
000006EE  1A34 5000               1311mm     MOVE.B 0(A4,D5),D5                              ; USE THAT AS AN INDEX INTO THE LUT   
000006F2                          1312mm     ENDM
000006F2  8605                    1313m         OR.B D5,D3
000006F4  5307                    1314m         SUB.B #1,D7
000006F6                          1315m     ENDW
000006F6  6098                    1316ms     BRA _10000000
000006F8                          1317ms _10000001
000006F8                          1318m 
000006F8  7A00                    1319m     MOVE.L #0,D5                                    ; REXTRACT LATEST BYTE OF ADDRESS AND ADD INTO CHECKSUM
000006FA  1A03                    1320m     MOVE.B D3,D5
000006FC  D483                    1321m     ADD.L D3,D2
000006FE                          1322m 
000006FE                          1323m     ENDM
000006FE                          1324  
000006FE                          1325      IF.B D1 <EQ> #'0' THEN.L                        ; header, just ignore it
000006FE  B23C 0030               1326s     CMP.B   #'0',D1
00000702  6600 002A               1327s     BNE.L   _00000003
00000706                          1328m         PRINT_CRLF D5,A4
00000706  49FA 1810               1329m     LEA CRLF(PC),A4
0000070A                          1330mm     PRINT_STR A4,D5
0000070A                          1331mm LOOP_66
0000070A  0C14 0000               1332mm     CMP.B #NULL,(A4)                                ; 0 -> DONE
0000070E  6700 0016               1333mm     BEQ EXIT_66
00000712                          1334mmm     PRINT_CHAR (A4)+,D5
00000712                          1335mmm WAIT_FOR_READY_67                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000712                 TRUE     1336mmm     IFEQ DEBUG
00000712  1A39 00C00003           1337mmm         MOVE.B DUART_SRA,D5                         ; READ STATUS REGISTER
00000718  0805 0002               1338mmm         BTST #2,D5                                  ; CHECK FOR SPACE TO SEND
0000071C  67F4                    1339mmm         BEQ WAIT_FOR_READY_67                       ; NO SPACE, CHECK AGAIN
0000071E  13DC 00C00007           1340mmm         MOVE.B (A4)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00000724                          1341mmm     ENDC
00000724                          1342mmm 
00000724                 FALSE    1343mmm     IFNE DEBUG
00000724                          1344mmm     ENDC
00000724                          1345mmm 
00000724                          1346mmm     ENDM
00000724  60E4                    1347mm     BRA LOOP_66
00000726                          1348mm EXIT_66
00000726                          1349mm     ENDM
00000726                          1350m     ENDM
00000726  6000 FECC               1351          BRA WAIT_FOR_SRECORD
0000072A                          1352      ELSE
0000072A  6000 03DE               1353s     BRA _00000004
0000072E                          1354s _00000003
0000072E                          1355          IF.B D1 <EQ> #'1' OR.B D1 <EQ> #'2' THEN.L  ; 16 or 24 bit address data record
0000072E  B23C 0031               1356s     CMP.B   #'1',D1
00000732  6708                    1357s     BEQ.S   _00000005
00000734  B23C 0032               1358s     CMP.B   #'2',D1
00000738  6600 01F0               1359s     BNE.L   _00000006
0000073C                          1360s _00000005
0000073C  5783                    1361              SUB.L #3,D3                             ; subtract three bytes for 16 bit address and 1 byte checksum
0000073E                          1362  
0000073E  7800                    1363              MOVE.L #0,D4                            ; read two bytes of address
00000740                          1364m             DOWNLOAD_BYTE D4,D5,D6,D7,D2,A4         ; first byte                                    
00000740  1E3C 0002               1365m     MOVE.B #2,D7
00000744                          1366m     WHILE.B D7 <GT> 0 DO
00000744                          1367ms _10000002
00000744  BE38 0000               1368ms     CMP.B   0,D7
00000748  6F00 0062               1369ms     BLE _10000003
0000074C  E98C                    1370m         LSL.L #4,D4                                 ; IT's OK to do this first, because we are either starting from 0, 
0000074E                          1371mm         DOWNLOAD D5                                 ; OR WE ARE READING THE NEXT BYTE ALONG, SO NEED TO SHIFT UP THE PREVIOUS ONE
0000074E                          1372mm WAIT_FOR_READY_69                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
0000074E                          1373mm 
0000074E  1A39 00C00003           1374mm     MOVE.B DUART_SRA,D5                             ; CHECK FOR COMMAND
00000754  0805 0000               1375mm     BTST #0,D5                                      ; CHECK FOR CHARACTER
00000758  6700 0010               1376mm     BEQ CONTINUE_69                                 ; NOTHING, CONTINUE
0000075C                          1377mm 
0000075C                          1378mmm     READ_CHAR D5                                    ; WE're not going to do anything with it, just check for escape
0000075C                 TRUE     1379mmm     IFEQ DEBUG
0000075C  1A39 00C00007           1380mmm         MOVE.B DUART_RXA,D5                         ; GOT A CHARACTER, READ IT
00000762                          1381mmm     ENDC
00000762                 FALSE    1382mmm     IFNE DEBUG
00000762                          1383mmm     ENDC
00000762                          1384mmm 
00000762  BA3C 001B               1385mmm     CMP.B #$1B,D5                                   ; CHECK FOR ESCAPE AND GO TO START
00000766  6700 F99C               1386mmm     BEQ START
0000076A                          1387mmm     ENDM
0000076A                          1388mm CONTINUE_69
0000076A  1A39 00C00013           1389mm     MOVE.B DUART_SRB,D5                             ; READ DOWNLOAD STATUS REGISTER
00000770  0805 0000               1390mm     BTST #0,D5                                      ; CHECK FOR CHARACTER
00000774  67D8                    1391mm     BEQ WAIT_FOR_READY_69                           ; NOTHING, CHECK AGAIN
00000776                          1392mm     
00000776  1A39 00C00017           1393mm     MOVE.B DUART_RXB,D5                             ; GOT A CHARACTER, READ IT
0000077C  13C5 00E00001           1394mm     MOVE.B D5,DISPLAY                               ; ECHO TO THE DISPLAY
00000782                          1395mm 
00000782                          1396mm     ENDM
00000782                          1397mm         PRINT_CHAR D5,D6
00000782                          1398mm WAIT_FOR_READY_71                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000782                 TRUE     1399mm     IFEQ DEBUG
00000782  1C39 00C00003           1400mm         MOVE.B DUART_SRA,D6                         ; READ STATUS REGISTER
00000788  0806 0002               1401mm         BTST #2,D6                                  ; CHECK FOR SPACE TO SEND
0000078C  67F4                    1402mm         BEQ WAIT_FOR_READY_71                       ; NO SPACE, CHECK AGAIN
0000078E  13C5 00C00007           1403mm         MOVE.B D5,DUART_TXA                         ; SEND THE NEXT CHARACTER
00000794                          1404mm     ENDC
00000794                          1405mm 
00000794                 FALSE    1406mm     IFNE DEBUG
00000794                          1407mm     ENDC
00000794                          1408mm 
00000794                          1409mm     ENDM
00000794                          1410mm         HEX2BIN D5,D5,A4
00000794  49FA 1757               1411mm     LEA HEX2BIN_LUT(PC),A4                          ; LOAD THE LOOKUP TABLE
00000798  0405 0030               1412mm     SUB.B #'0',D5                                   ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
0000079C  CABC 000000FF           1413mm     AND.L #$FF,D5                                   ; IGNORE THE TOP 3 BYTES
000007A2  1A34 5000               1414mm     MOVE.B 0(A4,D5),D5                              ; USE THAT AS AN INDEX INTO THE LUT   
000007A6                          1415mm     ENDM
000007A6  8805                    1416m         OR.B D5,D4
000007A8  5307                    1417m         SUB.B #1,D7
000007AA                          1418m     ENDW
000007AA  6098                    1419ms     BRA _10000002
000007AC                          1420ms _10000003
000007AC                          1421m 
000007AC  7A00                    1422m     MOVE.L #0,D5                                    ; REXTRACT LATEST BYTE OF ADDRESS AND ADD INTO CHECKSUM
000007AE  1A04                    1423m     MOVE.B D4,D5
000007B0  D484                    1424m     ADD.L D4,D2
000007B2                          1425m 
000007B2                          1426m     ENDM
000007B2                          1427m             DOWNLOAD_BYTE D4,D5,D6,D7,D2,A4         ; second one
000007B2  1E3C 0002               1428m     MOVE.B #2,D7
000007B6                          1429m     WHILE.B D7 <GT> 0 DO
000007B6                          1430ms _10000004
000007B6  BE38 0000               1431ms     CMP.B   0,D7
000007BA  6F00 0062               1432ms     BLE _10000005
000007BE  E98C                    1433m         LSL.L #4,D4                                 ; IT's OK to do this first, because we are either starting from 0, 
000007C0                          1434mm         DOWNLOAD D5                                 ; OR WE ARE READING THE NEXT BYTE ALONG, SO NEED TO SHIFT UP THE PREVIOUS ONE
000007C0                          1435mm WAIT_FOR_READY_74                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
000007C0                          1436mm 
000007C0  1A39 00C00003           1437mm     MOVE.B DUART_SRA,D5                             ; CHECK FOR COMMAND
000007C6  0805 0000               1438mm     BTST #0,D5                                      ; CHECK FOR CHARACTER
000007CA  6700 0010               1439mm     BEQ CONTINUE_74                                 ; NOTHING, CONTINUE
000007CE                          1440mm 
000007CE                          1441mmm     READ_CHAR D5                                    ; WE're not going to do anything with it, just check for escape
000007CE                 TRUE     1442mmm     IFEQ DEBUG
000007CE  1A39 00C00007           1443mmm         MOVE.B DUART_RXA,D5                         ; GOT A CHARACTER, READ IT
000007D4                          1444mmm     ENDC
000007D4                 FALSE    1445mmm     IFNE DEBUG
000007D4                          1446mmm     ENDC
000007D4                          1447mmm 
000007D4  BA3C 001B               1448mmm     CMP.B #$1B,D5                                   ; CHECK FOR ESCAPE AND GO TO START
000007D8  6700 F92A               1449mmm     BEQ START
000007DC                          1450mmm     ENDM
000007DC                          1451mm CONTINUE_74
000007DC  1A39 00C00013           1452mm     MOVE.B DUART_SRB,D5                             ; READ DOWNLOAD STATUS REGISTER
000007E2  0805 0000               1453mm     BTST #0,D5                                      ; CHECK FOR CHARACTER
000007E6  67D8                    1454mm     BEQ WAIT_FOR_READY_74                           ; NOTHING, CHECK AGAIN
000007E8                          1455mm     
000007E8  1A39 00C00017           1456mm     MOVE.B DUART_RXB,D5                             ; GOT A CHARACTER, READ IT
000007EE  13C5 00E00001           1457mm     MOVE.B D5,DISPLAY                               ; ECHO TO THE DISPLAY
000007F4                          1458mm 
000007F4                          1459mm     ENDM
000007F4                          1460mm         PRINT_CHAR D5,D6
000007F4                          1461mm WAIT_FOR_READY_76                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
000007F4                 TRUE     1462mm     IFEQ DEBUG
000007F4  1C39 00C00003           1463mm         MOVE.B DUART_SRA,D6                         ; READ STATUS REGISTER
000007FA  0806 0002               1464mm         BTST #2,D6                                  ; CHECK FOR SPACE TO SEND
000007FE  67F4                    1465mm         BEQ WAIT_FOR_READY_76                       ; NO SPACE, CHECK AGAIN
00000800  13C5 00C00007           1466mm         MOVE.B D5,DUART_TXA                         ; SEND THE NEXT CHARACTER
00000806                          1467mm     ENDC
00000806                          1468mm 
00000806                 FALSE    1469mm     IFNE DEBUG
00000806                          1470mm     ENDC
00000806                          1471mm 
00000806                          1472mm     ENDM
00000806                          1473mm         HEX2BIN D5,D5,A4
00000806  49FA 16E5               1474mm     LEA HEX2BIN_LUT(PC),A4                          ; LOAD THE LOOKUP TABLE
0000080A  0405 0030               1475mm     SUB.B #'0',D5                                   ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
0000080E  CABC 000000FF           1476mm     AND.L #$FF,D5                                   ; IGNORE THE TOP 3 BYTES
00000814  1A34 5000               1477mm     MOVE.B 0(A4,D5),D5                              ; USE THAT AS AN INDEX INTO THE LUT   
00000818                          1478mm     ENDM
00000818  8805                    1479m         OR.B D5,D4
0000081A  5307                    1480m         SUB.B #1,D7
0000081C                          1481m     ENDW
0000081C  6098                    1482ms     BRA _10000004
0000081E                          1483ms _10000005
0000081E                          1484m 
0000081E  7A00                    1485m     MOVE.L #0,D5                                    ; REXTRACT LATEST BYTE OF ADDRESS AND ADD INTO CHECKSUM
00000820  1A04                    1486m     MOVE.B D4,D5
00000822  D484                    1487m     ADD.L D4,D2
00000824                          1488m 
00000824                          1489m     ENDM
00000824                          1490  
00000824                          1491              IF.B D1 <EQ> #'2'  THEN.L               ; 24 bit address data record, read another byte
00000824  B23C 0032               1492s     CMP.B   #'2',D1
00000828  6600 0076               1493s     BNE.L   _00000007
0000082C  5383                    1494                  SUB.L #1,D3                         ; subtract an extra bytes for 24 bit address    
0000082E                          1495m                 DOWNLOAD_BYTE D4,D5,D6,D7,D2,A4     ; 3rd byte
0000082E  1E3C 0002               1496m     MOVE.B #2,D7
00000832                          1497m     WHILE.B D7 <GT> 0 DO
00000832                          1498ms _10000006
00000832  BE38 0000               1499ms     CMP.B   0,D7
00000836  6F00 0062               1500ms     BLE _10000007
0000083A  E98C                    1501m         LSL.L #4,D4                                 ; IT's OK to do this first, because we are either starting from 0, 
0000083C                          1502mm         DOWNLOAD D5                                 ; OR WE ARE READING THE NEXT BYTE ALONG, SO NEED TO SHIFT UP THE PREVIOUS ONE
0000083C                          1503mm WAIT_FOR_READY_79                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
0000083C                          1504mm 
0000083C  1A39 00C00003           1505mm     MOVE.B DUART_SRA,D5                             ; CHECK FOR COMMAND
00000842  0805 0000               1506mm     BTST #0,D5                                      ; CHECK FOR CHARACTER
00000846  6700 0010               1507mm     BEQ CONTINUE_79                                 ; NOTHING, CONTINUE
0000084A                          1508mm 
0000084A                          1509mmm     READ_CHAR D5                                    ; WE're not going to do anything with it, just check for escape
0000084A                 TRUE     1510mmm     IFEQ DEBUG
0000084A  1A39 00C00007           1511mmm         MOVE.B DUART_RXA,D5                         ; GOT A CHARACTER, READ IT
00000850                          1512mmm     ENDC
00000850                 FALSE    1513mmm     IFNE DEBUG
00000850                          1514mmm     ENDC
00000850                          1515mmm 
00000850  BA3C 001B               1516mmm     CMP.B #$1B,D5                                   ; CHECK FOR ESCAPE AND GO TO START
00000854  6700 F8AE               1517mmm     BEQ START
00000858                          1518mmm     ENDM
00000858                          1519mm CONTINUE_79
00000858  1A39 00C00013           1520mm     MOVE.B DUART_SRB,D5                             ; READ DOWNLOAD STATUS REGISTER
0000085E  0805 0000               1521mm     BTST #0,D5                                      ; CHECK FOR CHARACTER
00000862  67D8                    1522mm     BEQ WAIT_FOR_READY_79                           ; NOTHING, CHECK AGAIN
00000864                          1523mm     
00000864  1A39 00C00017           1524mm     MOVE.B DUART_RXB,D5                             ; GOT A CHARACTER, READ IT
0000086A  13C5 00E00001           1525mm     MOVE.B D5,DISPLAY                               ; ECHO TO THE DISPLAY
00000870                          1526mm 
00000870                          1527mm     ENDM
00000870                          1528mm         PRINT_CHAR D5,D6
00000870                          1529mm WAIT_FOR_READY_81                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000870                 TRUE     1530mm     IFEQ DEBUG
00000870  1C39 00C00003           1531mm         MOVE.B DUART_SRA,D6                         ; READ STATUS REGISTER
00000876  0806 0002               1532mm         BTST #2,D6                                  ; CHECK FOR SPACE TO SEND
0000087A  67F4                    1533mm         BEQ WAIT_FOR_READY_81                       ; NO SPACE, CHECK AGAIN
0000087C  13C5 00C00007           1534mm         MOVE.B D5,DUART_TXA                         ; SEND THE NEXT CHARACTER
00000882                          1535mm     ENDC
00000882                          1536mm 
00000882                 FALSE    1537mm     IFNE DEBUG
00000882                          1538mm     ENDC
00000882                          1539mm 
00000882                          1540mm     ENDM
00000882                          1541mm         HEX2BIN D5,D5,A4
00000882  49FA 1669               1542mm     LEA HEX2BIN_LUT(PC),A4                          ; LOAD THE LOOKUP TABLE
00000886  0405 0030               1543mm     SUB.B #'0',D5                                   ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
0000088A  CABC 000000FF           1544mm     AND.L #$FF,D5                                   ; IGNORE THE TOP 3 BYTES
00000890  1A34 5000               1545mm     MOVE.B 0(A4,D5),D5                              ; USE THAT AS AN INDEX INTO THE LUT   
00000894                          1546mm     ENDM
00000894  8805                    1547m         OR.B D5,D4
00000896  5307                    1548m         SUB.B #1,D7
00000898                          1549m     ENDW
00000898  6098                    1550ms     BRA _10000006
0000089A                          1551ms _10000007
0000089A                          1552m 
0000089A  7A00                    1553m     MOVE.L #0,D5                                    ; REXTRACT LATEST BYTE OF ADDRESS AND ADD INTO CHECKSUM
0000089C  1A04                    1554m     MOVE.B D4,D5
0000089E  D484                    1555m     ADD.L D4,D2
000008A0                          1556m 
000008A0                          1557m     ENDM
000008A0                          1558              ENDI
000008A0                          1559s _00000007
000008A0                          1560  
000008A0  2444                    1561              MOVE.L D4,A2                            ; put the address in an address register
000008A2  D5C9                    1562              ADD.L A1,A2                             ; add in the offset
000008A4                          1563  
000008A4                          1564              WHILE.B D3 <GT> #0 DO                   ; read the data bytes
000008A4                          1565s _10000008
000008A4  B63C 0000               1566s     CMP.B   #0,D3
000008A8  6F00 007A               1567s     BLE _10000009
000008AC                          1568m                 DOWNLOAD_BYTE D1,D5,D6,D7,D2,A4     ; read it
000008AC  1E3C 0002               1569m     MOVE.B #2,D7
000008B0                          1570m     WHILE.B D7 <GT> 0 DO
000008B0                          1571ms _1000000A
000008B0  BE38 0000               1572ms     CMP.B   0,D7
000008B4  6F00 0062               1573ms     BLE _1000000B
000008B8  E989                    1574m         LSL.L #4,D1                                 ; IT's OK to do this first, because we are either starting from 0, 
000008BA                          1575mm         DOWNLOAD D5                                 ; OR WE ARE READING THE NEXT BYTE ALONG, SO NEED TO SHIFT UP THE PREVIOUS ONE
000008BA                          1576mm WAIT_FOR_READY_84                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
000008BA                          1577mm 
000008BA  1A39 00C00003           1578mm     MOVE.B DUART_SRA,D5                             ; CHECK FOR COMMAND
000008C0  0805 0000               1579mm     BTST #0,D5                                      ; CHECK FOR CHARACTER
000008C4  6700 0010               1580mm     BEQ CONTINUE_84                                 ; NOTHING, CONTINUE
000008C8                          1581mm 
000008C8                          1582mmm     READ_CHAR D5                                    ; WE're not going to do anything with it, just check for escape
000008C8                 TRUE     1583mmm     IFEQ DEBUG
000008C8  1A39 00C00007           1584mmm         MOVE.B DUART_RXA,D5                         ; GOT A CHARACTER, READ IT
000008CE                          1585mmm     ENDC
000008CE                 FALSE    1586mmm     IFNE DEBUG
000008CE                          1587mmm     ENDC
000008CE                          1588mmm 
000008CE  BA3C 001B               1589mmm     CMP.B #$1B,D5                                   ; CHECK FOR ESCAPE AND GO TO START
000008D2  6700 F830               1590mmm     BEQ START
000008D6                          1591mmm     ENDM
000008D6                          1592mm CONTINUE_84
000008D6  1A39 00C00013           1593mm     MOVE.B DUART_SRB,D5                             ; READ DOWNLOAD STATUS REGISTER
000008DC  0805 0000               1594mm     BTST #0,D5                                      ; CHECK FOR CHARACTER
000008E0  67D8                    1595mm     BEQ WAIT_FOR_READY_84                           ; NOTHING, CHECK AGAIN
000008E2                          1596mm     
000008E2  1A39 00C00017           1597mm     MOVE.B DUART_RXB,D5                             ; GOT A CHARACTER, READ IT
000008E8  13C5 00E00001           1598mm     MOVE.B D5,DISPLAY                               ; ECHO TO THE DISPLAY
000008EE                          1599mm 
000008EE                          1600mm     ENDM
000008EE                          1601mm         PRINT_CHAR D5,D6
000008EE                          1602mm WAIT_FOR_READY_86                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
000008EE                 TRUE     1603mm     IFEQ DEBUG
000008EE  1C39 00C00003           1604mm         MOVE.B DUART_SRA,D6                         ; READ STATUS REGISTER
000008F4  0806 0002               1605mm         BTST #2,D6                                  ; CHECK FOR SPACE TO SEND
000008F8  67F4                    1606mm         BEQ WAIT_FOR_READY_86                       ; NO SPACE, CHECK AGAIN
000008FA  13C5 00C00007           1607mm         MOVE.B D5,DUART_TXA                         ; SEND THE NEXT CHARACTER
00000900                          1608mm     ENDC
00000900                          1609mm 
00000900                 FALSE    1610mm     IFNE DEBUG
00000900                          1611mm     ENDC
00000900                          1612mm 
00000900                          1613mm     ENDM
00000900                          1614mm         HEX2BIN D5,D5,A4
00000900  49FA 15EB               1615mm     LEA HEX2BIN_LUT(PC),A4                          ; LOAD THE LOOKUP TABLE
00000904  0405 0030               1616mm     SUB.B #'0',D5                                   ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
00000908  CABC 000000FF           1617mm     AND.L #$FF,D5                                   ; IGNORE THE TOP 3 BYTES
0000090E  1A34 5000               1618mm     MOVE.B 0(A4,D5),D5                              ; USE THAT AS AN INDEX INTO THE LUT   
00000912                          1619mm     ENDM
00000912  8205                    1620m         OR.B D5,D1
00000914  5307                    1621m         SUB.B #1,D7
00000916                          1622m     ENDW
00000916  6098                    1623ms     BRA _1000000A
00000918                          1624ms _1000000B
00000918                          1625m 
00000918  7A00                    1626m     MOVE.L #0,D5                                    ; REXTRACT LATEST BYTE OF ADDRESS AND ADD INTO CHECKSUM
0000091A  1A01                    1627m     MOVE.B D1,D5
0000091C  D481                    1628m     ADD.L D1,D2
0000091E                          1629m 
0000091E                          1630m     ENDM
0000091E                          1631   
0000091E  14C1                    1632                  MOVE.B D1,(A2)+                     ; store it!
00000920                          1633  
00000920  5303                    1634                  SUB.B #1,D3                         ; 1 less byte to go
00000922                          1635              ENDW
00000922  6080                    1636s     BRA _10000008
00000924                          1637s _10000009
00000924                          1638  
00000924  7200                    1639              MOVE.L #0,D1                            ; not done yet
00000926                          1640          ELSE
00000926  6000 01E2               1641s     BRA _00000008
0000092A                          1642s _00000006
0000092A                          1643              IF.B D1 <EQ> #'8' THEN.L                ; termination record, exit
0000092A  B23C 0038               1644s     CMP.B   #'8',D1
0000092E  6600 0164               1645s     BNE.L   _00000009
00000932  7800                    1646                  MOVE.L #0,D4                        ; read the 24 bit start address
00000934                          1647m                 DOWNLOAD_BYTE D4,D5,D6,D7,D2,A4     ; top byte
00000934  1E3C 0002               1648m     MOVE.B #2,D7
00000938                          1649m     WHILE.B D7 <GT> 0 DO
00000938                          1650ms _1000000C
00000938  BE38 0000               1651ms     CMP.B   0,D7
0000093C  6F00 0062               1652ms     BLE _1000000D
00000940  E98C                    1653m         LSL.L #4,D4                                 ; IT's OK to do this first, because we are either starting from 0, 
00000942                          1654mm         DOWNLOAD D5                                 ; OR WE ARE READING THE NEXT BYTE ALONG, SO NEED TO SHIFT UP THE PREVIOUS ONE
00000942                          1655mm WAIT_FOR_READY_89                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000942                          1656mm 
00000942  1A39 00C00003           1657mm     MOVE.B DUART_SRA,D5                             ; CHECK FOR COMMAND
00000948  0805 0000               1658mm     BTST #0,D5                                      ; CHECK FOR CHARACTER
0000094C  6700 0010               1659mm     BEQ CONTINUE_89                                 ; NOTHING, CONTINUE
00000950                          1660mm 
00000950                          1661mmm     READ_CHAR D5                                    ; WE're not going to do anything with it, just check for escape
00000950                 TRUE     1662mmm     IFEQ DEBUG
00000950  1A39 00C00007           1663mmm         MOVE.B DUART_RXA,D5                         ; GOT A CHARACTER, READ IT
00000956                          1664mmm     ENDC
00000956                 FALSE    1665mmm     IFNE DEBUG
00000956                          1666mmm     ENDC
00000956                          1667mmm 
00000956  BA3C 001B               1668mmm     CMP.B #$1B,D5                                   ; CHECK FOR ESCAPE AND GO TO START
0000095A  6700 F7A8               1669mmm     BEQ START
0000095E                          1670mmm     ENDM
0000095E                          1671mm CONTINUE_89
0000095E  1A39 00C00013           1672mm     MOVE.B DUART_SRB,D5                             ; READ DOWNLOAD STATUS REGISTER
00000964  0805 0000               1673mm     BTST #0,D5                                      ; CHECK FOR CHARACTER
00000968  67D8                    1674mm     BEQ WAIT_FOR_READY_89                           ; NOTHING, CHECK AGAIN
0000096A                          1675mm     
0000096A  1A39 00C00017           1676mm     MOVE.B DUART_RXB,D5                             ; GOT A CHARACTER, READ IT
00000970  13C5 00E00001           1677mm     MOVE.B D5,DISPLAY                               ; ECHO TO THE DISPLAY
00000976                          1678mm 
00000976                          1679mm     ENDM
00000976                          1680mm         PRINT_CHAR D5,D6
00000976                          1681mm WAIT_FOR_READY_91                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000976                 TRUE     1682mm     IFEQ DEBUG
00000976  1C39 00C00003           1683mm         MOVE.B DUART_SRA,D6                         ; READ STATUS REGISTER
0000097C  0806 0002               1684mm         BTST #2,D6                                  ; CHECK FOR SPACE TO SEND
00000980  67F4                    1685mm         BEQ WAIT_FOR_READY_91                       ; NO SPACE, CHECK AGAIN
00000982  13C5 00C00007           1686mm         MOVE.B D5,DUART_TXA                         ; SEND THE NEXT CHARACTER
00000988                          1687mm     ENDC
00000988                          1688mm 
00000988                 FALSE    1689mm     IFNE DEBUG
00000988                          1690mm     ENDC
00000988                          1691mm 
00000988                          1692mm     ENDM
00000988                          1693mm         HEX2BIN D5,D5,A4
00000988  49FA 1563               1694mm     LEA HEX2BIN_LUT(PC),A4                          ; LOAD THE LOOKUP TABLE
0000098C  0405 0030               1695mm     SUB.B #'0',D5                                   ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
00000990  CABC 000000FF           1696mm     AND.L #$FF,D5                                   ; IGNORE THE TOP 3 BYTES
00000996  1A34 5000               1697mm     MOVE.B 0(A4,D5),D5                              ; USE THAT AS AN INDEX INTO THE LUT   
0000099A                          1698mm     ENDM
0000099A  8805                    1699m         OR.B D5,D4
0000099C  5307                    1700m         SUB.B #1,D7
0000099E                          1701m     ENDW
0000099E  6098                    1702ms     BRA _1000000C
000009A0                          1703ms _1000000D
000009A0                          1704m 
000009A0  7A00                    1705m     MOVE.L #0,D5                                    ; REXTRACT LATEST BYTE OF ADDRESS AND ADD INTO CHECKSUM
000009A2  1A04                    1706m     MOVE.B D4,D5
000009A4  D484                    1707m     ADD.L D4,D2
000009A6                          1708m 
000009A6                          1709m     ENDM
000009A6                          1710m                 DOWNLOAD_BYTE D4,D5,D6,D7,D2,A4     ; middle byte
000009A6  1E3C 0002               1711m     MOVE.B #2,D7
000009AA                          1712m     WHILE.B D7 <GT> 0 DO
000009AA                          1713ms _1000000E
000009AA  BE38 0000               1714ms     CMP.B   0,D7
000009AE  6F00 0062               1715ms     BLE _1000000F
000009B2  E98C                    1716m         LSL.L #4,D4                                 ; IT's OK to do this first, because we are either starting from 0, 
000009B4                          1717mm         DOWNLOAD D5                                 ; OR WE ARE READING THE NEXT BYTE ALONG, SO NEED TO SHIFT UP THE PREVIOUS ONE
000009B4                          1718mm WAIT_FOR_READY_94                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
000009B4                          1719mm 
000009B4  1A39 00C00003           1720mm     MOVE.B DUART_SRA,D5                             ; CHECK FOR COMMAND
000009BA  0805 0000               1721mm     BTST #0,D5                                      ; CHECK FOR CHARACTER
000009BE  6700 0010               1722mm     BEQ CONTINUE_94                                 ; NOTHING, CONTINUE
000009C2                          1723mm 
000009C2                          1724mmm     READ_CHAR D5                                    ; WE're not going to do anything with it, just check for escape
000009C2                 TRUE     1725mmm     IFEQ DEBUG
000009C2  1A39 00C00007           1726mmm         MOVE.B DUART_RXA,D5                         ; GOT A CHARACTER, READ IT
000009C8                          1727mmm     ENDC
000009C8                 FALSE    1728mmm     IFNE DEBUG
000009C8                          1729mmm     ENDC
000009C8                          1730mmm 
000009C8  BA3C 001B               1731mmm     CMP.B #$1B,D5                                   ; CHECK FOR ESCAPE AND GO TO START
000009CC  6700 F736               1732mmm     BEQ START
000009D0                          1733mmm     ENDM
000009D0                          1734mm CONTINUE_94
000009D0  1A39 00C00013           1735mm     MOVE.B DUART_SRB,D5                             ; READ DOWNLOAD STATUS REGISTER
000009D6  0805 0000               1736mm     BTST #0,D5                                      ; CHECK FOR CHARACTER
000009DA  67D8                    1737mm     BEQ WAIT_FOR_READY_94                           ; NOTHING, CHECK AGAIN
000009DC                          1738mm     
000009DC  1A39 00C00017           1739mm     MOVE.B DUART_RXB,D5                             ; GOT A CHARACTER, READ IT
000009E2  13C5 00E00001           1740mm     MOVE.B D5,DISPLAY                               ; ECHO TO THE DISPLAY
000009E8                          1741mm 
000009E8                          1742mm     ENDM
000009E8                          1743mm         PRINT_CHAR D5,D6
000009E8                          1744mm WAIT_FOR_READY_96                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
000009E8                 TRUE     1745mm     IFEQ DEBUG
000009E8  1C39 00C00003           1746mm         MOVE.B DUART_SRA,D6                         ; READ STATUS REGISTER
000009EE  0806 0002               1747mm         BTST #2,D6                                  ; CHECK FOR SPACE TO SEND
000009F2  67F4                    1748mm         BEQ WAIT_FOR_READY_96                       ; NO SPACE, CHECK AGAIN
000009F4  13C5 00C00007           1749mm         MOVE.B D5,DUART_TXA                         ; SEND THE NEXT CHARACTER
000009FA                          1750mm     ENDC
000009FA                          1751mm 
000009FA                 FALSE    1752mm     IFNE DEBUG
000009FA                          1753mm     ENDC
000009FA                          1754mm 
000009FA                          1755mm     ENDM
000009FA                          1756mm         HEX2BIN D5,D5,A4
000009FA  49FA 14F1               1757mm     LEA HEX2BIN_LUT(PC),A4                          ; LOAD THE LOOKUP TABLE
000009FE  0405 0030               1758mm     SUB.B #'0',D5                                   ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
00000A02  CABC 000000FF           1759mm     AND.L #$FF,D5                                   ; IGNORE THE TOP 3 BYTES
00000A08  1A34 5000               1760mm     MOVE.B 0(A4,D5),D5                              ; USE THAT AS AN INDEX INTO THE LUT   
00000A0C                          1761mm     ENDM
00000A0C  8805                    1762m         OR.B D5,D4
00000A0E  5307                    1763m         SUB.B #1,D7
00000A10                          1764m     ENDW
00000A10  6098                    1765ms     BRA _1000000E
00000A12                          1766ms _1000000F
00000A12                          1767m 
00000A12  7A00                    1768m     MOVE.L #0,D5                                    ; REXTRACT LATEST BYTE OF ADDRESS AND ADD INTO CHECKSUM
00000A14  1A04                    1769m     MOVE.B D4,D5
00000A16  D484                    1770m     ADD.L D4,D2
00000A18                          1771m 
00000A18                          1772m     ENDM
00000A18                          1773m                 DOWNLOAD_BYTE D4,D5,D6,D7,D2,A4     ; bottom byte
00000A18  1E3C 0002               1774m     MOVE.B #2,D7
00000A1C                          1775m     WHILE.B D7 <GT> 0 DO
00000A1C                          1776ms _10000010
00000A1C  BE38 0000               1777ms     CMP.B   0,D7
00000A20  6F00 0062               1778ms     BLE _10000011
00000A24  E98C                    1779m         LSL.L #4,D4                                 ; IT's OK to do this first, because we are either starting from 0, 
00000A26                          1780mm         DOWNLOAD D5                                 ; OR WE ARE READING THE NEXT BYTE ALONG, SO NEED TO SHIFT UP THE PREVIOUS ONE
00000A26                          1781mm WAIT_FOR_READY_99                                   ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000A26                          1782mm 
00000A26  1A39 00C00003           1783mm     MOVE.B DUART_SRA,D5                             ; CHECK FOR COMMAND
00000A2C  0805 0000               1784mm     BTST #0,D5                                      ; CHECK FOR CHARACTER
00000A30  6700 0010               1785mm     BEQ CONTINUE_99                                 ; NOTHING, CONTINUE
00000A34                          1786mm 
00000A34                          1787mmm     READ_CHAR D5                                    ; WE're not going to do anything with it, just check for escape
00000A34                 TRUE     1788mmm     IFEQ DEBUG
00000A34  1A39 00C00007           1789mmm         MOVE.B DUART_RXA,D5                         ; GOT A CHARACTER, READ IT
00000A3A                          1790mmm     ENDC
00000A3A                 FALSE    1791mmm     IFNE DEBUG
00000A3A                          1792mmm     ENDC
00000A3A                          1793mmm 
00000A3A  BA3C 001B               1794mmm     CMP.B #$1B,D5                                   ; CHECK FOR ESCAPE AND GO TO START
00000A3E  6700 F6C4               1795mmm     BEQ START
00000A42                          1796mmm     ENDM
00000A42                          1797mm CONTINUE_99
00000A42  1A39 00C00013           1798mm     MOVE.B DUART_SRB,D5                             ; READ DOWNLOAD STATUS REGISTER
00000A48  0805 0000               1799mm     BTST #0,D5                                      ; CHECK FOR CHARACTER
00000A4C  67D8                    1800mm     BEQ WAIT_FOR_READY_99                           ; NOTHING, CHECK AGAIN
00000A4E                          1801mm     
00000A4E  1A39 00C00017           1802mm     MOVE.B DUART_RXB,D5                             ; GOT A CHARACTER, READ IT
00000A54  13C5 00E00001           1803mm     MOVE.B D5,DISPLAY                               ; ECHO TO THE DISPLAY
00000A5A                          1804mm 
00000A5A                          1805mm     ENDM
00000A5A                          1806mm         PRINT_CHAR D5,D6
00000A5A                          1807mm WAIT_FOR_READY_101                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000A5A                 TRUE     1808mm     IFEQ DEBUG
00000A5A  1C39 00C00003           1809mm         MOVE.B DUART_SRA,D6                         ; READ STATUS REGISTER
00000A60  0806 0002               1810mm         BTST #2,D6                                  ; CHECK FOR SPACE TO SEND
00000A64  67F4                    1811mm         BEQ WAIT_FOR_READY_101                      ; NO SPACE, CHECK AGAIN
00000A66  13C5 00C00007           1812mm         MOVE.B D5,DUART_TXA                         ; SEND THE NEXT CHARACTER
00000A6C                          1813mm     ENDC
00000A6C                          1814mm 
00000A6C                 FALSE    1815mm     IFNE DEBUG
00000A6C                          1816mm     ENDC
00000A6C                          1817mm 
00000A6C                          1818mm     ENDM
00000A6C                          1819mm         HEX2BIN D5,D5,A4
00000A6C  49FA 147F               1820mm     LEA HEX2BIN_LUT(PC),A4                          ; LOAD THE LOOKUP TABLE
00000A70  0405 0030               1821mm     SUB.B #'0',D5                                   ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
00000A74  CABC 000000FF           1822mm     AND.L #$FF,D5                                   ; IGNORE THE TOP 3 BYTES
00000A7A  1A34 5000               1823mm     MOVE.B 0(A4,D5),D5                              ; USE THAT AS AN INDEX INTO THE LUT   
00000A7E                          1824mm     ENDM
00000A7E  8805                    1825m         OR.B D5,D4
00000A80  5307                    1826m         SUB.B #1,D7
00000A82                          1827m     ENDW
00000A82  6098                    1828ms     BRA _10000010
00000A84                          1829ms _10000011
00000A84                          1830m 
00000A84  7A00                    1831m     MOVE.L #0,D5                                    ; REXTRACT LATEST BYTE OF ADDRESS AND ADD INTO CHECKSUM
00000A86  1A04                    1832m     MOVE.B D4,D5
00000A88  D484                    1833m     ADD.L D4,D2
00000A8A                          1834m 
00000A8A                          1835m     ENDM
00000A8A                          1836  
00000A8A  2044                    1837                  MOVE.L D4,A0                        ; start address -> A0
00000A8C  D1C9                    1838                  ADD.L A1,A0                         ; add in the offset
00000A8E                          1839  
00000A8E  72FF                    1840                  MOVE.L #$FFFFFFFF,D1                ; done
00000A90                          1841              ELSE
00000A90  6000 0078               1842s     BRA _0000000A
00000A94                          1843s _00000009
00000A94                          1844m                 PRINT_CRLF D5,A4
00000A94  49FA 1482               1845m     LEA CRLF(PC),A4
00000A98                          1846mm     PRINT_STR A4,D5
00000A98                          1847mm LOOP_104
00000A98  0C14 0000               1848mm     CMP.B #NULL,(A4)                                ; 0 -> DONE
00000A9C  6700 0016               1849mm     BEQ EXIT_104
00000AA0                          1850mmm     PRINT_CHAR (A4)+,D5
00000AA0                          1851mmm WAIT_FOR_READY_105                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000AA0                 TRUE     1852mmm     IFEQ DEBUG
00000AA0  1A39 00C00003           1853mmm         MOVE.B DUART_SRA,D5                         ; READ STATUS REGISTER
00000AA6  0805 0002               1854mmm         BTST #2,D5                                  ; CHECK FOR SPACE TO SEND
00000AAA  67F4                    1855mmm         BEQ WAIT_FOR_READY_105                      ; NO SPACE, CHECK AGAIN
00000AAC  13DC 00C00007           1856mmm         MOVE.B (A4)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00000AB2                          1857mmm     ENDC
00000AB2                          1858mmm 
00000AB2                 FALSE    1859mmm     IFNE DEBUG
00000AB2                          1860mmm     ENDC
00000AB2                          1861mmm 
00000AB2                          1862mmm     ENDM
00000AB2  60E4                    1863mm     BRA LOOP_104
00000AB4                          1864mm EXIT_104
00000AB4                          1865mm     ENDM
00000AB4                          1866m     ENDM
00000AB4                          1867  
00000AB4  49FA 13EE               1868                  LEA UNREC(PC),A4                    ; warn for unrecognised type
00000AB8                          1869m                 PRINT_STR A4,D5
00000AB8                          1870m LOOP_106
00000AB8  0C14 0000               1871m     CMP.B #NULL,(A4)                                ; 0 -> DONE
00000ABC  6700 0016               1872m     BEQ EXIT_106
00000AC0                          1873mm     PRINT_CHAR (A4)+,D5
00000AC0                          1874mm WAIT_FOR_READY_107                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000AC0                 TRUE     1875mm     IFEQ DEBUG
00000AC0  1A39 00C00003           1876mm         MOVE.B DUART_SRA,D5                         ; READ STATUS REGISTER
00000AC6  0805 0002               1877mm         BTST #2,D5                                  ; CHECK FOR SPACE TO SEND
00000ACA  67F4                    1878mm         BEQ WAIT_FOR_READY_107                      ; NO SPACE, CHECK AGAIN
00000ACC  13DC 00C00007           1879mm         MOVE.B (A4)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00000AD2                          1880mm     ENDC
00000AD2                          1881mm 
00000AD2                 FALSE    1882mm     IFNE DEBUG
00000AD2                          1883mm     ENDC
00000AD2                          1884mm 
00000AD2                          1885mm     ENDM
00000AD2  60E4                    1886m     BRA LOOP_106
00000AD4                          1887m EXIT_106
00000AD4                          1888m     ENDM
00000AD4                          1889m                 PRINT_CHAR D1,D5
00000AD4                          1890m WAIT_FOR_READY_108                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000AD4                 TRUE     1891m     IFEQ DEBUG
00000AD4  1A39 00C00003           1892m         MOVE.B DUART_SRA,D5                         ; READ STATUS REGISTER
00000ADA  0805 0002               1893m         BTST #2,D5                                  ; CHECK FOR SPACE TO SEND
00000ADE  67F4                    1894m         BEQ WAIT_FOR_READY_108                      ; NO SPACE, CHECK AGAIN
00000AE0  13C1 00C00007           1895m         MOVE.B D1,DUART_TXA                         ; SEND THE NEXT CHARACTER
00000AE6                          1896m     ENDC
00000AE6                          1897m 
00000AE6                 FALSE    1898m     IFNE DEBUG
00000AE6                          1899m     ENDC
00000AE6                          1900m 
00000AE6                          1901m     ENDM
00000AE6                          1902m                 PRINT_CRLF D5,A4
00000AE6  49FA 1430               1903m     LEA CRLF(PC),A4
00000AEA                          1904mm     PRINT_STR A4,D5
00000AEA                          1905mm LOOP_110
00000AEA  0C14 0000               1906mm     CMP.B #NULL,(A4)                                ; 0 -> DONE
00000AEE  6700 0016               1907mm     BEQ EXIT_110
00000AF2                          1908mmm     PRINT_CHAR (A4)+,D5
00000AF2                          1909mmm WAIT_FOR_READY_111                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000AF2                 TRUE     1910mmm     IFEQ DEBUG
00000AF2  1A39 00C00003           1911mmm         MOVE.B DUART_SRA,D5                         ; READ STATUS REGISTER
00000AF8  0805 0002               1912mmm         BTST #2,D5                                  ; CHECK FOR SPACE TO SEND
00000AFC  67F4                    1913mmm         BEQ WAIT_FOR_READY_111                      ; NO SPACE, CHECK AGAIN
00000AFE  13DC 00C00007           1914mmm         MOVE.B (A4)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00000B04                          1915mmm     ENDC
00000B04                          1916mmm 
00000B04                 FALSE    1917mmm     IFNE DEBUG
00000B04                          1918mmm     ENDC
00000B04                          1919mmm 
00000B04                          1920mmm     ENDM
00000B04  60E4                    1921mm     BRA LOOP_110
00000B06                          1922mm EXIT_110
00000B06                          1923mm     ENDM
00000B06                          1924m     ENDM
00000B06                          1925  
00000B06  6000 FAEC               1926                  BRA WAIT_FOR_SRECORD                ; ignore any other type 
00000B0A                          1927              ENDI
00000B0A                          1928s _0000000A
00000B0A                          1929          ENDI
00000B0A                          1930s _00000008
00000B0A                          1931      ENDI
00000B0A                          1932s _00000004
00000B0A                          1933  
00000B0A                          1934m     DOWNLOAD_BYTE D4,D5,D6,D7,D2,A4
00000B0A  1E3C 0002               1935m     MOVE.B #2,D7
00000B0E                          1936m     WHILE.B D7 <GT> 0 DO
00000B0E                          1937ms _10000012
00000B0E  BE38 0000               1938ms     CMP.B   0,D7
00000B12  6F00 0062               1939ms     BLE _10000013
00000B16  E98C                    1940m         LSL.L #4,D4                                 ; IT's OK to do this first, because we are either starting from 0, 
00000B18                          1941mm         DOWNLOAD D5                                 ; OR WE ARE READING THE NEXT BYTE ALONG, SO NEED TO SHIFT UP THE PREVIOUS ONE
00000B18                          1942mm WAIT_FOR_READY_113                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000B18                          1943mm 
00000B18  1A39 00C00003           1944mm     MOVE.B DUART_SRA,D5                             ; CHECK FOR COMMAND
00000B1E  0805 0000               1945mm     BTST #0,D5                                      ; CHECK FOR CHARACTER
00000B22  6700 0010               1946mm     BEQ CONTINUE_113                                    ; NOTHING, CONTINUE
00000B26                          1947mm 
00000B26                          1948mmm     READ_CHAR D5                                    ; WE're not going to do anything with it, just check for escape
00000B26                 TRUE     1949mmm     IFEQ DEBUG
00000B26  1A39 00C00007           1950mmm         MOVE.B DUART_RXA,D5                         ; GOT A CHARACTER, READ IT
00000B2C                          1951mmm     ENDC
00000B2C                 FALSE    1952mmm     IFNE DEBUG
00000B2C                          1953mmm     ENDC
00000B2C                          1954mmm 
00000B2C  BA3C 001B               1955mmm     CMP.B #$1B,D5                                   ; CHECK FOR ESCAPE AND GO TO START
00000B30  6700 F5D2               1956mmm     BEQ START
00000B34                          1957mmm     ENDM
00000B34                          1958mm CONTINUE_113
00000B34  1A39 00C00013           1959mm     MOVE.B DUART_SRB,D5                             ; READ DOWNLOAD STATUS REGISTER
00000B3A  0805 0000               1960mm     BTST #0,D5                                      ; CHECK FOR CHARACTER
00000B3E  67D8                    1961mm     BEQ WAIT_FOR_READY_113                          ; NOTHING, CHECK AGAIN
00000B40                          1962mm     
00000B40  1A39 00C00017           1963mm     MOVE.B DUART_RXB,D5                             ; GOT A CHARACTER, READ IT
00000B46  13C5 00E00001           1964mm     MOVE.B D5,DISPLAY                               ; ECHO TO THE DISPLAY
00000B4C                          1965mm 
00000B4C                          1966mm     ENDM
00000B4C                          1967mm         PRINT_CHAR D5,D6
00000B4C                          1968mm WAIT_FOR_READY_115                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000B4C                 TRUE     1969mm     IFEQ DEBUG
00000B4C  1C39 00C00003           1970mm         MOVE.B DUART_SRA,D6                         ; READ STATUS REGISTER
00000B52  0806 0002               1971mm         BTST #2,D6                                  ; CHECK FOR SPACE TO SEND
00000B56  67F4                    1972mm         BEQ WAIT_FOR_READY_115                      ; NO SPACE, CHECK AGAIN
00000B58  13C5 00C00007           1973mm         MOVE.B D5,DUART_TXA                         ; SEND THE NEXT CHARACTER
00000B5E                          1974mm     ENDC
00000B5E                          1975mm 
00000B5E                 FALSE    1976mm     IFNE DEBUG
00000B5E                          1977mm     ENDC
00000B5E                          1978mm 
00000B5E                          1979mm     ENDM
00000B5E                          1980mm         HEX2BIN D5,D5,A4
00000B5E  49FA 138D               1981mm     LEA HEX2BIN_LUT(PC),A4                          ; LOAD THE LOOKUP TABLE
00000B62  0405 0030               1982mm     SUB.B #'0',D5                                   ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
00000B66  CABC 000000FF           1983mm     AND.L #$FF,D5                                   ; IGNORE THE TOP 3 BYTES
00000B6C  1A34 5000               1984mm     MOVE.B 0(A4,D5),D5                              ; USE THAT AS AN INDEX INTO THE LUT   
00000B70                          1985mm     ENDM
00000B70  8805                    1986m         OR.B D5,D4
00000B72  5307                    1987m         SUB.B #1,D7
00000B74                          1988m     ENDW
00000B74  6098                    1989ms     BRA _10000012
00000B76                          1990ms _10000013
00000B76                          1991m 
00000B76  7A00                    1992m     MOVE.L #0,D5                                    ; REXTRACT LATEST BYTE OF ADDRESS AND ADD INTO CHECKSUM
00000B78  1A04                    1993m     MOVE.B D4,D5
00000B7A  D484                    1994m     ADD.L D4,D2
00000B7C                          1995m 
00000B7C                          1996m     ENDM
00000B7C                          1997m     PRINT_CRLF D5,A4
00000B7C  49FA 139A               1998m     LEA CRLF(PC),A4
00000B80                          1999mm     PRINT_STR A4,D5
00000B80                          2000mm LOOP_118
00000B80  0C14 0000               2001mm     CMP.B #NULL,(A4)                                ; 0 -> DONE
00000B84  6700 0016               2002mm     BEQ EXIT_118
00000B88                          2003mmm     PRINT_CHAR (A4)+,D5
00000B88                          2004mmm WAIT_FOR_READY_119                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000B88                 TRUE     2005mmm     IFEQ DEBUG
00000B88  1A39 00C00003           2006mmm         MOVE.B DUART_SRA,D5                         ; READ STATUS REGISTER
00000B8E  0805 0002               2007mmm         BTST #2,D5                                  ; CHECK FOR SPACE TO SEND
00000B92  67F4                    2008mmm         BEQ WAIT_FOR_READY_119                      ; NO SPACE, CHECK AGAIN
00000B94  13DC 00C00007           2009mmm         MOVE.B (A4)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00000B9A                          2010mmm     ENDC
00000B9A                          2011mmm 
00000B9A                 FALSE    2012mmm     IFNE DEBUG
00000B9A                          2013mmm     ENDC
00000B9A                          2014mmm 
00000B9A                          2015mmm     ENDM
00000B9A  60E4                    2016mm     BRA LOOP_118
00000B9C                          2017mm EXIT_118
00000B9C                          2018mm     ENDM
00000B9C                          2019m     ENDM
00000B9C                          2020  
00000B9C                          2021      IF.B D2 <NE> #$FF THEN.L
00000B9C  B43C 00FF               2022s     CMP.B   #$FF,D2
00000BA0  6700 0090               2023s     BEQ.L   _0000000B
00000BA4  49FA 1315               2024          LEA CS_FAILURE(PC),A4                       ; warn for mismatched checksum
00000BA8                          2025m         PRINT_STR A4,D5
00000BA8                          2026m LOOP_120
00000BA8  0C14 0000               2027m     CMP.B #NULL,(A4)                                ; 0 -> DONE
00000BAC  6700 0016               2028m     BEQ EXIT_120
00000BB0                          2029mm     PRINT_CHAR (A4)+,D5
00000BB0                          2030mm WAIT_FOR_READY_121                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000BB0                 TRUE     2031mm     IFEQ DEBUG
00000BB0  1A39 00C00003           2032mm         MOVE.B DUART_SRA,D5                         ; READ STATUS REGISTER
00000BB6  0805 0002               2033mm         BTST #2,D5                                  ; CHECK FOR SPACE TO SEND
00000BBA  67F4                    2034mm         BEQ WAIT_FOR_READY_121                      ; NO SPACE, CHECK AGAIN
00000BBC  13DC 00C00007           2035mm         MOVE.B (A4)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00000BC2                          2036mm     ENDC
00000BC2                          2037mm 
00000BC2                 FALSE    2038mm     IFNE DEBUG
00000BC2                          2039mm     ENDC
00000BC2                          2040mm 
00000BC2                          2041mm     ENDM
00000BC2  60E4                    2042m     BRA LOOP_120
00000BC4                          2043m EXIT_120
00000BC4                          2044m     ENDM
00000BC4                          2045m         PRINT_REG D0,D5,D3,D6,A4
00000BC4  49FA 1358               2046m     LEA OX(PC),A4
00000BC8                          2047mm     PRINT_STR A4,D5
00000BC8                          2048mm LOOP_123
00000BC8  0C14 0000               2049mm     CMP.B #NULL,(A4)                                ; 0 -> DONE
00000BCC  6700 0016               2050mm     BEQ EXIT_123
00000BD0                          2051mmm     PRINT_CHAR (A4)+,D5
00000BD0                          2052mmm WAIT_FOR_READY_124                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000BD0                 TRUE     2053mmm     IFEQ DEBUG
00000BD0  1A39 00C00003           2054mmm         MOVE.B DUART_SRA,D5                         ; READ STATUS REGISTER
00000BD6  0805 0002               2055mmm         BTST #2,D5                                  ; CHECK FOR SPACE TO SEND
00000BDA  67F4                    2056mmm         BEQ WAIT_FOR_READY_124                      ; NO SPACE, CHECK AGAIN
00000BDC  13DC 00C00007           2057mmm         MOVE.B (A4)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00000BE2                          2058mmm     ENDC
00000BE2                          2059mmm 
00000BE2                 FALSE    2060mmm     IFNE DEBUG
00000BE2                          2061mmm     ENDC
00000BE2                          2062mmm 
00000BE2                          2063mmm     ENDM
00000BE2  60E4                    2064mm     BRA LOOP_123
00000BE4                          2065mm EXIT_123
00000BE4                          2066mm     ENDM
00000BE4  7C07                    2067m     MOVE.L #7,D6                                    ; LOOP ROUND ALL 8 HEX CHARACTERS OF 4 BITS EACH
00000BE6                          2068m LOOP_122
00000BE6                          2069mm     BIN2HEX D0,D3,A4
00000BE6  49FA 12F5               2070mm     LEA BIN2HEX_LUT(PC),A4                          ; LOAD THE LOOKUP TABLE
00000BEA  E998                    2071mm     ROL.L #4,D0                                     ; SHIFT THE TOP 4 BITS DOWN TO BOTTOM OF THE REGISTER THE AND MASK OFF EVERYTHING ELSE
00000BEC  1600                    2072mm     MOVE.B D0,D3
00000BEE  0283 0000000F           2073mm     ANDI.L #$F,D3
00000BF4  1634 3000               2074mm     MOVE.B 0(A4,D3),D3                              ; USE THAT AS AN INDEX INTO THE LUT
00000BF8                          2075mm     ENDM
00000BF8                          2076mm     PRINT_CHAR D3,D5
00000BF8                          2077mm WAIT_FOR_READY_126                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000BF8                 TRUE     2078mm     IFEQ DEBUG
00000BF8  1A39 00C00003           2079mm         MOVE.B DUART_SRA,D5                         ; READ STATUS REGISTER
00000BFE  0805 0002               2080mm         BTST #2,D5                                  ; CHECK FOR SPACE TO SEND
00000C02  67F4                    2081mm         BEQ WAIT_FOR_READY_126                      ; NO SPACE, CHECK AGAIN
00000C04  13C3 00C00007           2082mm         MOVE.B D3,DUART_TXA                         ; SEND THE NEXT CHARACTER
00000C0A                          2083mm     ENDC
00000C0A                          2084mm 
00000C0A                 FALSE    2085mm     IFNE DEBUG
00000C0A                          2086mm     ENDC
00000C0A                          2087mm 
00000C0A                          2088mm     ENDM
00000C0A  57CE FFDA               2089m     DBEQ D6,LOOP_122
00000C0E                          2090m     ENDM
00000C0E                          2091m         PRINT_CRLF D5,A4
00000C0E  49FA 1308               2092m     LEA CRLF(PC),A4
00000C12                          2093mm     PRINT_STR A4,D5
00000C12                          2094mm LOOP_128
00000C12  0C14 0000               2095mm     CMP.B #NULL,(A4)                                ; 0 -> DONE
00000C16  6700 0016               2096mm     BEQ EXIT_128
00000C1A                          2097mmm     PRINT_CHAR (A4)+,D5
00000C1A                          2098mmm WAIT_FOR_READY_129                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000C1A                 TRUE     2099mmm     IFEQ DEBUG
00000C1A  1A39 00C00003           2100mmm         MOVE.B DUART_SRA,D5                         ; READ STATUS REGISTER
00000C20  0805 0002               2101mmm         BTST #2,D5                                  ; CHECK FOR SPACE TO SEND
00000C24  67F4                    2102mmm         BEQ WAIT_FOR_READY_129                      ; NO SPACE, CHECK AGAIN
00000C26  13DC 00C00007           2103mmm         MOVE.B (A4)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00000C2C                          2104mmm     ENDC
00000C2C                          2105mmm 
00000C2C                 FALSE    2106mmm     IFNE DEBUG
00000C2C                          2107mmm     ENDC
00000C2C                          2108mmm 
00000C2C                          2109mmm     ENDM
00000C2C  60E4                    2110mm     BRA LOOP_128
00000C2E                          2111mm EXIT_128
00000C2E                          2112mm     ENDM
00000C2E                          2113m     ENDM
00000C2E                          2114          
00000C2E  6000 F714               2115          BRA MAIN_LOOP
00000C32                          2116      ENDI
00000C32                          2117s _0000000B
00000C32                          2118  
00000C32                          2119      IF D1 <EQ> #0 THEN
00000C32  B27C 0000               2120s     CMP.W   #0,D1
00000C36  6600 0006               2121s     BNE _0000000C
00000C3A  6000 F9B8               2122        BRA WAIT_FOR_SRECORD
00000C3E                          2123      ENDI
00000C3E                          2124s _0000000C
00000C3E                          2125  DOWNLOAD_DONE
00000C3E                          2126m     PRINT_REG D0,D5,D6,D2,A1                        ; print out number of Srecords read
00000C3E  43FA 12DE               2127m     LEA OX(PC),A1
00000C42                          2128mm     PRINT_STR A1,D5
00000C42                          2129mm LOOP_131
00000C42  0C11 0000               2130mm     CMP.B #NULL,(A1)                                ; 0 -> DONE
00000C46  6700 0016               2131mm     BEQ EXIT_131
00000C4A                          2132mmm     PRINT_CHAR (A1)+,D5
00000C4A                          2133mmm WAIT_FOR_READY_132                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000C4A                 TRUE     2134mmm     IFEQ DEBUG
00000C4A  1A39 00C00003           2135mmm         MOVE.B DUART_SRA,D5                         ; READ STATUS REGISTER
00000C50  0805 0002               2136mmm         BTST #2,D5                                  ; CHECK FOR SPACE TO SEND
00000C54  67F4                    2137mmm         BEQ WAIT_FOR_READY_132                      ; NO SPACE, CHECK AGAIN
00000C56  13D9 00C00007           2138mmm         MOVE.B (A1)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00000C5C                          2139mmm     ENDC
00000C5C                          2140mmm 
00000C5C                 FALSE    2141mmm     IFNE DEBUG
00000C5C                          2142mmm     ENDC
00000C5C                          2143mmm 
00000C5C                          2144mmm     ENDM
00000C5C  60E4                    2145mm     BRA LOOP_131
00000C5E                          2146mm EXIT_131
00000C5E                          2147mm     ENDM
00000C5E  7407                    2148m     MOVE.L #7,D2                                    ; LOOP ROUND ALL 8 HEX CHARACTERS OF 4 BITS EACH
00000C60                          2149m LOOP_130
00000C60                          2150mm     BIN2HEX D0,D6,A1
00000C60  43FA 127B               2151mm     LEA BIN2HEX_LUT(PC),A1                          ; LOAD THE LOOKUP TABLE
00000C64  E998                    2152mm     ROL.L #4,D0                                     ; SHIFT THE TOP 4 BITS DOWN TO BOTTOM OF THE REGISTER THE AND MASK OFF EVERYTHING ELSE
00000C66  1C00                    2153mm     MOVE.B D0,D6
00000C68  0286 0000000F           2154mm     ANDI.L #$F,D6
00000C6E  1C31 6000               2155mm     MOVE.B 0(A1,D6),D6                              ; USE THAT AS AN INDEX INTO THE LUT
00000C72                          2156mm     ENDM
00000C72                          2157mm     PRINT_CHAR D6,D5
00000C72                          2158mm WAIT_FOR_READY_134                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000C72                 TRUE     2159mm     IFEQ DEBUG
00000C72  1A39 00C00003           2160mm         MOVE.B DUART_SRA,D5                         ; READ STATUS REGISTER
00000C78  0805 0002               2161mm         BTST #2,D5                                  ; CHECK FOR SPACE TO SEND
00000C7C  67F4                    2162mm         BEQ WAIT_FOR_READY_134                      ; NO SPACE, CHECK AGAIN
00000C7E  13C6 00C00007           2163mm         MOVE.B D6,DUART_TXA                         ; SEND THE NEXT CHARACTER
00000C84                          2164mm     ENDC
00000C84                          2165mm 
00000C84                 FALSE    2166mm     IFNE DEBUG
00000C84                          2167mm     ENDC
00000C84                          2168mm 
00000C84                          2169mm     ENDM
00000C84  57CA FFDA               2170m     DBEQ D2,LOOP_130
00000C88                          2171m     ENDM
00000C88  43FA 11F8               2172      LEA READ(PC),A1
00000C8C                          2173m     PRINT_STR A1,D5
00000C8C                          2174m LOOP_135
00000C8C  0C11 0000               2175m     CMP.B #NULL,(A1)                                ; 0 -> DONE
00000C90  6700 0016               2176m     BEQ EXIT_135
00000C94                          2177mm     PRINT_CHAR (A1)+,D5
00000C94                          2178mm WAIT_FOR_READY_136                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000C94                 TRUE     2179mm     IFEQ DEBUG
00000C94  1A39 00C00003           2180mm         MOVE.B DUART_SRA,D5                         ; READ STATUS REGISTER
00000C9A  0805 0002               2181mm         BTST #2,D5                                  ; CHECK FOR SPACE TO SEND
00000C9E  67F4                    2182mm         BEQ WAIT_FOR_READY_136                      ; NO SPACE, CHECK AGAIN
00000CA0  13D9 00C00007           2183mm         MOVE.B (A1)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00000CA6                          2184mm     ENDC
00000CA6                          2185mm 
00000CA6                 FALSE    2186mm     IFNE DEBUG
00000CA6                          2187mm     ENDC
00000CA6                          2188mm 
00000CA6                          2189mm     ENDM
00000CA6  60E4                    2190m     BRA LOOP_135
00000CA8                          2191m EXIT_135
00000CA8                          2192m     ENDM
00000CA8  2E08                    2193      MOVE.L A0,D7                                    ; set address accumulator to start address
00000CAA                          2194m     PRINT_REG D7,D5,D6,D2,A1                        ; print out start address
00000CAA  43FA 1272               2195m     LEA OX(PC),A1
00000CAE                          2196mm     PRINT_STR A1,D5
00000CAE                          2197mm LOOP_138
00000CAE  0C11 0000               2198mm     CMP.B #NULL,(A1)                                ; 0 -> DONE
00000CB2  6700 0016               2199mm     BEQ EXIT_138
00000CB6                          2200mmm     PRINT_CHAR (A1)+,D5
00000CB6                          2201mmm WAIT_FOR_READY_139                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000CB6                 TRUE     2202mmm     IFEQ DEBUG
00000CB6  1A39 00C00003           2203mmm         MOVE.B DUART_SRA,D5                         ; READ STATUS REGISTER
00000CBC  0805 0002               2204mmm         BTST #2,D5                                  ; CHECK FOR SPACE TO SEND
00000CC0  67F4                    2205mmm         BEQ WAIT_FOR_READY_139                      ; NO SPACE, CHECK AGAIN
00000CC2  13D9 00C00007           2206mmm         MOVE.B (A1)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00000CC8                          2207mmm     ENDC
00000CC8                          2208mmm 
00000CC8                 FALSE    2209mmm     IFNE DEBUG
00000CC8                          2210mmm     ENDC
00000CC8                          2211mmm 
00000CC8                          2212mmm     ENDM
00000CC8  60E4                    2213mm     BRA LOOP_138
00000CCA                          2214mm EXIT_138
00000CCA                          2215mm     ENDM
00000CCA  7407                    2216m     MOVE.L #7,D2                                    ; LOOP ROUND ALL 8 HEX CHARACTERS OF 4 BITS EACH
00000CCC                          2217m LOOP_137
00000CCC                          2218mm     BIN2HEX D7,D6,A1
00000CCC  43FA 120F               2219mm     LEA BIN2HEX_LUT(PC),A1                          ; LOAD THE LOOKUP TABLE
00000CD0  E99F                    2220mm     ROL.L #4,D7                                     ; SHIFT THE TOP 4 BITS DOWN TO BOTTOM OF THE REGISTER THE AND MASK OFF EVERYTHING ELSE
00000CD2  1C07                    2221mm     MOVE.B D7,D6
00000CD4  0286 0000000F           2222mm     ANDI.L #$F,D6
00000CDA  1C31 6000               2223mm     MOVE.B 0(A1,D6),D6                              ; USE THAT AS AN INDEX INTO THE LUT
00000CDE                          2224mm     ENDM
00000CDE                          2225mm     PRINT_CHAR D6,D5
00000CDE                          2226mm WAIT_FOR_READY_141                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000CDE                 TRUE     2227mm     IFEQ DEBUG
00000CDE  1A39 00C00003           2228mm         MOVE.B DUART_SRA,D5                         ; READ STATUS REGISTER
00000CE4  0805 0002               2229mm         BTST #2,D5                                  ; CHECK FOR SPACE TO SEND
00000CE8  67F4                    2230mm         BEQ WAIT_FOR_READY_141                      ; NO SPACE, CHECK AGAIN
00000CEA  13C6 00C00007           2231mm         MOVE.B D6,DUART_TXA                         ; SEND THE NEXT CHARACTER
00000CF0                          2232mm     ENDC
00000CF0                          2233mm 
00000CF0                 FALSE    2234mm     IFNE DEBUG
00000CF0                          2235mm     ENDC
00000CF0                          2236mm 
00000CF0                          2237mm     ENDM
00000CF0  57CA FFDA               2238m     DBEQ D2,LOOP_137
00000CF4                          2239m     ENDM
00000CF4                          2240m     PRINT_CRLF D5,A4
00000CF4  49FA 1222               2241m     LEA CRLF(PC),A4
00000CF8                          2242mm     PRINT_STR A4,D5
00000CF8                          2243mm LOOP_143
00000CF8  0C14 0000               2244mm     CMP.B #NULL,(A4)                                ; 0 -> DONE
00000CFC  6700 0016               2245mm     BEQ EXIT_143
00000D00                          2246mmm     PRINT_CHAR (A4)+,D5
00000D00                          2247mmm WAIT_FOR_READY_144                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000D00                 TRUE     2248mmm     IFEQ DEBUG
00000D00  1A39 00C00003           2249mmm         MOVE.B DUART_SRA,D5                         ; READ STATUS REGISTER
00000D06  0805 0002               2250mmm         BTST #2,D5                                  ; CHECK FOR SPACE TO SEND
00000D0A  67F4                    2251mmm         BEQ WAIT_FOR_READY_144                      ; NO SPACE, CHECK AGAIN
00000D0C  13DC 00C00007           2252mmm         MOVE.B (A4)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00000D12                          2253mmm     ENDC
00000D12                          2254mmm 
00000D12                 FALSE    2255mmm     IFNE DEBUG
00000D12                          2256mmm     ENDC
00000D12                          2257mmm 
00000D12                          2258mmm     ENDM
00000D12  60E4                    2259mm     BRA LOOP_143
00000D14                          2260mm EXIT_143
00000D14                          2261mm     ENDM
00000D14                          2262m     ENDM
00000D14                          2263  
00000D14  6000 F62E               2264      BRA MAIN_LOOP
00000D18                          2265  
00000D18                          2266  G
00000D18  2047                    2267      MOVE.L D7,A0                                    ; grab the address accumulator and then clear it
00000D1A  7E00                    2268      MOVE.L #0,D7
00000D1C                          2269  
00000D1C  4ED0                    2270      JMP (A0)
00000D1E                          2271          
00000D1E                          2272  Z
00000D1E  207C 00200000           2273      MOVE.L #RAM,A0                                  ; address of RAM
00000D24  D1FC 00100000           2274      ADD.L #$100000,A0
00000D2A                          2275  
00000D2A                          2276      FOR.L D0 = #0 TO #$FFFFC BY #4 DO               ; write
00000D2A  7000                    2277s     MOVE.L  #0,D0
00000D2C  6000 0012               2278s     BRA _20000007
00000D30                          2279s _20000006
00000D30  2200                    2280          MOVE.L D0,D1                                ; progress update
00000D32  E089                    2281          LSR.L #8,D1 
00000D34  E089                    2282          LSR.L #8,D1
00000D36  13C1 00E00001           2283          MOVE.B D1,DISPLAY
00000D3C                          2284          
00000D3C  2108                    2285          MOVE.L A0,-(A0)
00000D3E                          2286      ENDF
00000D3E  5880                    2287s     ADD.L   #4,D0
00000D40                          2288s _20000007
00000D40  B0BC 000FFFFC           2289s     CMP.L   #$FFFFC,D0
00000D46  6FE8                    2290s     BLE _20000006
00000D48                          2291  
00000D48  207C 00200000           2292      MOVE.L #RAM,A0                                  ; address of RAM
00000D4E  D1FC 00100000           2293      ADD.L #$100000,A0
00000D54                          2294  
00000D54                          2295      FOR.L D0 = #0 TO #$FFFFC BY #4 DO               ; read back and check 
00000D54  7000                    2296s     MOVE.L  #0,D0
00000D56  6000 00A8               2297s     BRA _20000009
00000D5A                          2298s _20000008
00000D5A  2200                    2299          MOVE.L D0,D1                                ; progress update
00000D5C  E089                    2300          LSR.L #8,D1
00000D5E  E089                    2301          LSR.L #8,D1
00000D60  13C1 00E00001           2302          MOVE.B D1,DISPLAY
00000D66                          2303  
00000D66  2408                    2304          MOVE.L A0,D2
00000D68  2220                    2305          MOVE.L -(A0),D1
00000D6A                          2306  
00000D6A                          2307          IF.L D2 <NE> D1 THEN
00000D6A  B481                    2308s     CMP.L   D1,D2
00000D6C  6700 0090               2309s     BEQ _0000000D
00000D70  43FA 115A               2310              LEA RAM_ERROR(PC),A1
00000D74                          2311m             PRINT_STR A1,D1
00000D74                          2312m LOOP_145
00000D74  0C11 0000               2313m     CMP.B #NULL,(A1)                                ; 0 -> DONE
00000D78  6700 0016               2314m     BEQ EXIT_145
00000D7C                          2315mm     PRINT_CHAR (A1)+,D1
00000D7C                          2316mm WAIT_FOR_READY_146                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000D7C                 TRUE     2317mm     IFEQ DEBUG
00000D7C  1239 00C00003           2318mm         MOVE.B DUART_SRA,D1                         ; READ STATUS REGISTER
00000D82  0801 0002               2319mm         BTST #2,D1                                  ; CHECK FOR SPACE TO SEND
00000D86  67F4                    2320mm         BEQ WAIT_FOR_READY_146                      ; NO SPACE, CHECK AGAIN
00000D88  13D9 00C00007           2321mm         MOVE.B (A1)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00000D8E                          2322mm     ENDC
00000D8E                          2323mm 
00000D8E                 FALSE    2324mm     IFNE DEBUG
00000D8E                          2325mm     ENDC
00000D8E                          2326mm 
00000D8E                          2327mm     ENDM
00000D8E  60E4                    2328m     BRA LOOP_145
00000D90                          2329m EXIT_145
00000D90                          2330m     ENDM
00000D90  2208                    2331              MOVE.L A0,D1
00000D92  5981                    2332              SUB.L #4,D1
00000D94                          2333m             PRINT_REG D1,D3,D2,D6,A1                ; print out failure address
00000D94  43FA 1188               2334m     LEA OX(PC),A1
00000D98                          2335mm     PRINT_STR A1,D3
00000D98                          2336mm LOOP_148
00000D98  0C11 0000               2337mm     CMP.B #NULL,(A1)                                ; 0 -> DONE
00000D9C  6700 0016               2338mm     BEQ EXIT_148
00000DA0                          2339mmm     PRINT_CHAR (A1)+,D3
00000DA0                          2340mmm WAIT_FOR_READY_149                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000DA0                 TRUE     2341mmm     IFEQ DEBUG
00000DA0  1639 00C00003           2342mmm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
00000DA6  0803 0002               2343mmm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
00000DAA  67F4                    2344mmm         BEQ WAIT_FOR_READY_149                      ; NO SPACE, CHECK AGAIN
00000DAC  13D9 00C00007           2345mmm         MOVE.B (A1)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00000DB2                          2346mmm     ENDC
00000DB2                          2347mmm 
00000DB2                 FALSE    2348mmm     IFNE DEBUG
00000DB2                          2349mmm     ENDC
00000DB2                          2350mmm 
00000DB2                          2351mmm     ENDM
00000DB2  60E4                    2352mm     BRA LOOP_148
00000DB4                          2353mm EXIT_148
00000DB4                          2354mm     ENDM
00000DB4  7C07                    2355m     MOVE.L #7,D6                                    ; LOOP ROUND ALL 8 HEX CHARACTERS OF 4 BITS EACH
00000DB6                          2356m LOOP_147
00000DB6                          2357mm     BIN2HEX D1,D2,A1
00000DB6  43FA 1125               2358mm     LEA BIN2HEX_LUT(PC),A1                          ; LOAD THE LOOKUP TABLE
00000DBA  E999                    2359mm     ROL.L #4,D1                                     ; SHIFT THE TOP 4 BITS DOWN TO BOTTOM OF THE REGISTER THE AND MASK OFF EVERYTHING ELSE
00000DBC  1401                    2360mm     MOVE.B D1,D2
00000DBE  0282 0000000F           2361mm     ANDI.L #$F,D2
00000DC4  1431 2000               2362mm     MOVE.B 0(A1,D2),D2                              ; USE THAT AS AN INDEX INTO THE LUT
00000DC8                          2363mm     ENDM
00000DC8                          2364mm     PRINT_CHAR D2,D3
00000DC8                          2365mm WAIT_FOR_READY_151                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000DC8                 TRUE     2366mm     IFEQ DEBUG
00000DC8  1639 00C00003           2367mm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
00000DCE  0803 0002               2368mm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
00000DD2  67F4                    2369mm         BEQ WAIT_FOR_READY_151                      ; NO SPACE, CHECK AGAIN
00000DD4  13C2 00C00007           2370mm         MOVE.B D2,DUART_TXA                         ; SEND THE NEXT CHARACTER
00000DDA                          2371mm     ENDC
00000DDA                          2372mm 
00000DDA                 FALSE    2373mm     IFNE DEBUG
00000DDA                          2374mm     ENDC
00000DDA                          2375mm 
00000DDA                          2376mm     ENDM
00000DDA  57CE FFDA               2377m     DBEQ D6,LOOP_147
00000DDE                          2378m     ENDM
00000DDE                          2379m             PRINT_CRLF D3,A1
00000DDE  43FA 1138               2380m     LEA CRLF(PC),A1
00000DE2                          2381mm     PRINT_STR A1,D3
00000DE2                          2382mm LOOP_153
00000DE2  0C11 0000               2383mm     CMP.B #NULL,(A1)                                ; 0 -> DONE
00000DE6  6700 0016               2384mm     BEQ EXIT_153
00000DEA                          2385mmm     PRINT_CHAR (A1)+,D3
00000DEA                          2386mmm WAIT_FOR_READY_154                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000DEA                 TRUE     2387mmm     IFEQ DEBUG
00000DEA  1639 00C00003           2388mmm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
00000DF0  0803 0002               2389mmm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
00000DF4  67F4                    2390mmm         BEQ WAIT_FOR_READY_154                      ; NO SPACE, CHECK AGAIN
00000DF6  13D9 00C00007           2391mmm         MOVE.B (A1)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00000DFC                          2392mmm     ENDC
00000DFC                          2393mmm 
00000DFC                 FALSE    2394mmm     IFNE DEBUG
00000DFC                          2395mmm     ENDC
00000DFC                          2396mmm 
00000DFC                          2397mmm     ENDM
00000DFC  60E4                    2398mm     BRA LOOP_153
00000DFE                          2399mm EXIT_153
00000DFE                          2400mm     ENDM
00000DFE                          2401m     ENDM
00000DFE                          2402          ENDI 
00000DFE                          2403s _0000000D
00000DFE                          2404      ENDF
00000DFE  5880                    2405s     ADD.L   #4,D0
00000E00                          2406s _20000009
00000E00  B0BC 000FFFFC           2407s     CMP.L   #$FFFFC,D0
00000E06  6F00 FF52               2408s     BLE _20000008
00000E0A                          2409  
00000E0A  6000 F538               2410      BRA MAIN_LOOP
00000E0E                          2411  
00000E0E                          2412  L
00000E0E  7000                    2413      MOVE.L #0,D0                                    ; D0 will be the length to write               
00000E10  7200                    2414      MOVE.L #0,D1                                    ; D1 will be the address to write 
00000E12                          2415  
00000E12                          2416      FOR D2 = #0 TO #7 DO                            ; read 4 bytes, we'll split into 2 byte address (MS) and 2 byte length (LS)
00000E12  343C 0000               2417s     MOVE.W  #0,D2
00000E16  6000 0046               2418s     BRA _2000000B
00000E1A                          2419s _2000000A
00000E1A  E989                    2420          LSL.L #4,D1                                 ; make what we have so far more significant
00000E1C                          2421m         WAIT_CHAR D3,D4                             ; next character -> D2
00000E1C                          2422m WAIT_FOR_READY_155                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000E1C                 TRUE     2423m     IFEQ DEBUG
00000E1C  1839 00C00003           2424m         MOVE.B DUART_SRA,D4                         ; READ STATUS REGISTER
00000E22  0804 0000               2425m         BTST #0,D4                                  ; CHECK FOR CHARACTER
00000E26  67F4                    2426m         BEQ WAIT_FOR_READY_155                      ; NOTHING, CHECK AGAIN
00000E28                          2427m     ENDC
00000E28                          2428m 
00000E28                          2429mm     READ_CHAR D3
00000E28                 TRUE     2430mm     IFEQ DEBUG
00000E28  1639 00C00007           2431mm         MOVE.B DUART_RXA,D3                         ; GOT A CHARACTER, READ IT
00000E2E                          2432mm     ENDC
00000E2E                 FALSE    2433mm     IFNE DEBUG
00000E2E                          2434mm     ENDC
00000E2E                          2435mm 
00000E2E  B63C 001B               2436mm     CMP.B #$1B,D3                                   ; CHECK FOR ESCAPE AND GO TO START
00000E32  6700 F2D0               2437mm     BEQ START
00000E36                          2438mm     ENDM
00000E36                          2439m 
00000E36                 TRUE     2440m     IFEQ DEBUG
00000E36                          2441mm         PRINT_CHAR D3,D4                            ; ECHO IT BACK
00000E36                          2442mm WAIT_FOR_READY_157                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000E36                 TRUE     2443mm     IFEQ DEBUG
00000E36  1839 00C00003           2444mm         MOVE.B DUART_SRA,D4                         ; READ STATUS REGISTER
00000E3C  0804 0002               2445mm         BTST #2,D4                                  ; CHECK FOR SPACE TO SEND
00000E40  67F4                    2446mm         BEQ WAIT_FOR_READY_157                      ; NO SPACE, CHECK AGAIN
00000E42  13C3 00C00007           2447mm         MOVE.B D3,DUART_TXA                         ; SEND THE NEXT CHARACTER
00000E48                          2448mm     ENDC
00000E48                          2449mm 
00000E48                 FALSE    2450mm     IFNE DEBUG
00000E48                          2451mm     ENDC
00000E48                          2452mm 
00000E48                          2453mm     ENDM
00000E48                          2454m     ENDC
00000E48                          2455m     ENDM
00000E48                          2456m         HEX2BIN D3,D3,A0                            ; convert to binary -> D2
00000E48  41FA 10A3               2457m     LEA HEX2BIN_LUT(PC),A0                          ; LOAD THE LOOKUP TABLE
00000E4C  0403 0030               2458m     SUB.B #'0',D3                                   ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
00000E50  C6BC 000000FF           2459m     AND.L #$FF,D3                                   ; IGNORE THE TOP 3 BYTES
00000E56  1630 3000               2460m     MOVE.B 0(A0,D3),D3                              ; USE THAT AS AN INDEX INTO THE LUT   
00000E5A                          2461m     ENDM
00000E5A  8203                    2462          OR.B D3,D1
00000E5C                          2463      ENDF
00000E5C  5242                    2464s     ADD.W   #1,D2
00000E5E                          2465s _2000000B
00000E5E  B47C 0007               2466s     CMP.W   #7,D2
00000E62  6FB6                    2467s     BLE _2000000A
00000E64                          2468  
00000E64  3001                    2469      MOVE.W D1,D0                                    ; extract the LSword for the length 
00000E66  0480 00000104           2470      SUB.L #START,D0                                 ; remove the vector table from the length
00000E6C  E089                    2471      LSR.L #8,D1                                     ; extract the MSword for the address
00000E6E  E089                    2472      LSR.L #8,D1
00000E70                          2473  
00000E70                          2474m     PRINT_CRLF D2,A1
00000E70  43FA 10A6               2475m     LEA CRLF(PC),A1
00000E74                          2476mm     PRINT_STR A1,D2
00000E74                          2477mm LOOP_160
00000E74  0C11 0000               2478mm     CMP.B #NULL,(A1)                                ; 0 -> DONE
00000E78  6700 0016               2479mm     BEQ EXIT_160
00000E7C                          2480mmm     PRINT_CHAR (A1)+,D2
00000E7C                          2481mmm WAIT_FOR_READY_161                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000E7C                 TRUE     2482mmm     IFEQ DEBUG
00000E7C  1439 00C00003           2483mmm         MOVE.B DUART_SRA,D2                         ; READ STATUS REGISTER
00000E82  0802 0002               2484mmm         BTST #2,D2                                  ; CHECK FOR SPACE TO SEND
00000E86  67F4                    2485mmm         BEQ WAIT_FOR_READY_161                      ; NO SPACE, CHECK AGAIN
00000E88  13D9 00C00007           2486mmm         MOVE.B (A1)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00000E8E                          2487mmm     ENDC
00000E8E                          2488mmm 
00000E8E                 FALSE    2489mmm     IFNE DEBUG
00000E8E                          2490mmm     ENDC
00000E8E                          2491mmm 
00000E8E                          2492mmm     ENDM
00000E8E  60E4                    2493mm     BRA LOOP_160
00000E90                          2494mm EXIT_160
00000E90                          2495mm     ENDM
00000E90                          2496m     ENDM
00000E90                          2497  
00000E90  2041                    2498      MOVE.L D1,A0                                    ; target address
00000E92  2641                    2499      MOVE.L D1,A3                                    ; keep a copy for later
00000E94                          2500  
00000E94  2247                    2501      MOVE.L D7,A1                                    ; address accumulator -> address register
00000E96  D3FC 00000104           2502      ADD.L #START,A1                                 ; skip the vectors
00000E9C  2847                    2503      MOVE.L D7,A4                                    ; keep a clean copy for later
00000E9E  7E00                    2504      MOVE.L #0,D7                                    ; clear the now used address accumulator
00000EA0                          2505  
00000EA0                          2506m     UNPROTECT                                       ; important to only unprotect when we are fully committed (ie, can't escape)
00000EA0  31FC AAAA 2AAA          2507m     MOVE.W #$AAAA,$2AAA                             ; REMOVE WRITE PROTECT
00000EA6  4E71                    2508m     NOP
00000EA8  31FC 5555 1554          2509m     MOVE.W #$5555,$1554
00000EAE  4E71                    2510m     NOP
00000EB0  31FC 8080 2AAA          2511m     MOVE.W #$8080,$2AAA
00000EB6  4E71                    2512m     NOP
00000EB8  31FC AAAA 2AAA          2513m     MOVE.W #$AAAA,$2AAA
00000EBE  4E71                    2514m     NOP
00000EC0  31FC 5555 1554          2515m     MOVE.W #$5555,$1554
00000EC6  4E71                    2516m     NOP
00000EC8  31FC 2020 2AAA          2517m     MOVE.W #$2020,$2AAA
00000ECE                          2518m     ENDM
00000ECE                          2519                      
00000ECE                          2520      FOR D7 = #$0 TO #$FFFFFFFF DO                   ; dead timing loop to wait for unprotect
00000ECE  3E3C 0000               2521s     MOVE.W  #$0,D7
00000ED2  6000 0006               2522s     BRA _2000000D
00000ED6                          2523s _2000000C
00000ED6  4E71                    2524          NOP
00000ED8                          2525      ENDF
00000ED8  5247                    2526s     ADD.W   #1,D7
00000EDA                          2527s _2000000D
00000EDA  BE7C FFFF               2528s     CMP.W   #$FFFFFFFF,D7
00000EDE  6FF6                    2529s     BLE _2000000C
00000EE0                          2530                  
00000EE0  45FA 1022               2531      LEA LOADING(PC),A2
00000EE4                          2532m     PRINT_STR A2,D2
00000EE4                          2533m LOOP_163
00000EE4  0C12 0000               2534m     CMP.B #NULL,(A2)                                ; 0 -> DONE
00000EE8  6700 0016               2535m     BEQ EXIT_163
00000EEC                          2536mm     PRINT_CHAR (A2)+,D2
00000EEC                          2537mm WAIT_FOR_READY_164                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000EEC                 TRUE     2538mm     IFEQ DEBUG
00000EEC  1439 00C00003           2539mm         MOVE.B DUART_SRA,D2                         ; READ STATUS REGISTER
00000EF2  0802 0002               2540mm         BTST #2,D2                                  ; CHECK FOR SPACE TO SEND
00000EF6  67F4                    2541mm         BEQ WAIT_FOR_READY_164                      ; NO SPACE, CHECK AGAIN
00000EF8  13DA 00C00007           2542mm         MOVE.B (A2)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00000EFE                          2543mm     ENDC
00000EFE                          2544mm 
00000EFE                 FALSE    2545mm     IFNE DEBUG
00000EFE                          2546mm     ENDC
00000EFE                          2547mm 
00000EFE                          2548mm     ENDM
00000EFE  60E4                    2549m     BRA LOOP_163
00000F00                          2550m EXIT_163
00000F00                          2551m     ENDM
00000F00  45FA 1002               2552      LEA LOADING(PC),A2
00000F04                          2553m     PRINT_STR A2,D2
00000F04                          2554m LOOP_165
00000F04  0C12 0000               2555m     CMP.B #NULL,(A2)                                ; 0 -> DONE
00000F08  6700 0016               2556m     BEQ EXIT_165
00000F0C                          2557mm     PRINT_CHAR (A2)+,D2
00000F0C                          2558mm WAIT_FOR_READY_166                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000F0C                 TRUE     2559mm     IFEQ DEBUG
00000F0C  1439 00C00003           2560mm         MOVE.B DUART_SRA,D2                         ; READ STATUS REGISTER
00000F12  0802 0002               2561mm         BTST #2,D2                                  ; CHECK FOR SPACE TO SEND
00000F16  67F4                    2562mm         BEQ WAIT_FOR_READY_166                      ; NO SPACE, CHECK AGAIN
00000F18  13DA 00C00007           2563mm         MOVE.B (A2)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00000F1E                          2564mm     ENDC
00000F1E                          2565mm 
00000F1E                 FALSE    2566mm     IFNE DEBUG
00000F1E                          2567mm     ENDC
00000F1E                          2568mm 
00000F1E                          2569mm     ENDM
00000F1E  60E4                    2570m     BRA LOOP_165
00000F20                          2571m EXIT_165
00000F20                          2572m     ENDM
00000F20                          2573          
00000F20  2409                    2574      MOVE.L A1,D2
00000F22                          2575m     PRINT_REG D2,D3,D4,D5,A2
00000F22  45FA 0FFA               2576m     LEA OX(PC),A2
00000F26                          2577mm     PRINT_STR A2,D3
00000F26                          2578mm LOOP_168
00000F26  0C12 0000               2579mm     CMP.B #NULL,(A2)                                ; 0 -> DONE
00000F2A  6700 0016               2580mm     BEQ EXIT_168
00000F2E                          2581mmm     PRINT_CHAR (A2)+,D3
00000F2E                          2582mmm WAIT_FOR_READY_169                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000F2E                 TRUE     2583mmm     IFEQ DEBUG
00000F2E  1639 00C00003           2584mmm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
00000F34  0803 0002               2585mmm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
00000F38  67F4                    2586mmm         BEQ WAIT_FOR_READY_169                      ; NO SPACE, CHECK AGAIN
00000F3A  13DA 00C00007           2587mmm         MOVE.B (A2)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00000F40                          2588mmm     ENDC
00000F40                          2589mmm 
00000F40                 FALSE    2590mmm     IFNE DEBUG
00000F40                          2591mmm     ENDC
00000F40                          2592mmm 
00000F40                          2593mmm     ENDM
00000F40  60E4                    2594mm     BRA LOOP_168
00000F42                          2595mm EXIT_168
00000F42                          2596mm     ENDM
00000F42  7A07                    2597m     MOVE.L #7,D5                                    ; LOOP ROUND ALL 8 HEX CHARACTERS OF 4 BITS EACH
00000F44                          2598m LOOP_167
00000F44                          2599mm     BIN2HEX D2,D4,A2
00000F44  45FA 0F97               2600mm     LEA BIN2HEX_LUT(PC),A2                          ; LOAD THE LOOKUP TABLE
00000F48  E99A                    2601mm     ROL.L #4,D2                                     ; SHIFT THE TOP 4 BITS DOWN TO BOTTOM OF THE REGISTER THE AND MASK OFF EVERYTHING ELSE
00000F4A  1802                    2602mm     MOVE.B D2,D4
00000F4C  0284 0000000F           2603mm     ANDI.L #$F,D4
00000F52  1832 4000               2604mm     MOVE.B 0(A2,D4),D4                              ; USE THAT AS AN INDEX INTO THE LUT
00000F56                          2605mm     ENDM
00000F56                          2606mm     PRINT_CHAR D4,D3
00000F56                          2607mm WAIT_FOR_READY_171                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000F56                 TRUE     2608mm     IFEQ DEBUG
00000F56  1639 00C00003           2609mm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
00000F5C  0803 0002               2610mm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
00000F60  67F4                    2611mm         BEQ WAIT_FOR_READY_171                      ; NO SPACE, CHECK AGAIN
00000F62  13C4 00C00007           2612mm         MOVE.B D4,DUART_TXA                         ; SEND THE NEXT CHARACTER
00000F68                          2613mm     ENDC
00000F68                          2614mm 
00000F68                 FALSE    2615mm     IFNE DEBUG
00000F68                          2616mm     ENDC
00000F68                          2617mm 
00000F68                          2618mm     ENDM
00000F68  57CD FFDA               2619m     DBEQ D5,LOOP_167
00000F6C                          2620m     ENDM
00000F6C                          2621  
00000F6C  45FA 0FB3               2622      LEA TO(PC),A2
00000F70                          2623m     PRINT_STR A2,D3
00000F70                          2624m LOOP_172
00000F70  0C12 0000               2625m     CMP.B #NULL,(A2)                                ; 0 -> DONE
00000F74  6700 0016               2626m     BEQ EXIT_172
00000F78                          2627mm     PRINT_CHAR (A2)+,D3
00000F78                          2628mm WAIT_FOR_READY_173                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000F78                 TRUE     2629mm     IFEQ DEBUG
00000F78  1639 00C00003           2630mm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
00000F7E  0803 0002               2631mm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
00000F82  67F4                    2632mm         BEQ WAIT_FOR_READY_173                      ; NO SPACE, CHECK AGAIN
00000F84  13DA 00C00007           2633mm         MOVE.B (A2)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00000F8A                          2634mm     ENDC
00000F8A                          2635mm 
00000F8A                 FALSE    2636mm     IFNE DEBUG
00000F8A                          2637mm     ENDC
00000F8A                          2638mm 
00000F8A                          2639mm     ENDM
00000F8A  60E4                    2640m     BRA LOOP_172
00000F8C                          2641m EXIT_172
00000F8C                          2642m     ENDM
00000F8C                          2643  
00000F8C  2408                    2644      MOVE.L A0,D2
00000F8E                          2645m     PRINT_REG D2,D3,D4,D5,A2
00000F8E  45FA 0F8E               2646m     LEA OX(PC),A2
00000F92                          2647mm     PRINT_STR A2,D3
00000F92                          2648mm LOOP_175
00000F92  0C12 0000               2649mm     CMP.B #NULL,(A2)                                ; 0 -> DONE
00000F96  6700 0016               2650mm     BEQ EXIT_175
00000F9A                          2651mmm     PRINT_CHAR (A2)+,D3
00000F9A                          2652mmm WAIT_FOR_READY_176                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000F9A                 TRUE     2653mmm     IFEQ DEBUG
00000F9A  1639 00C00003           2654mmm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
00000FA0  0803 0002               2655mmm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
00000FA4  67F4                    2656mmm         BEQ WAIT_FOR_READY_176                      ; NO SPACE, CHECK AGAIN
00000FA6  13DA 00C00007           2657mmm         MOVE.B (A2)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00000FAC                          2658mmm     ENDC
00000FAC                          2659mmm 
00000FAC                 FALSE    2660mmm     IFNE DEBUG
00000FAC                          2661mmm     ENDC
00000FAC                          2662mmm 
00000FAC                          2663mmm     ENDM
00000FAC  60E4                    2664mm     BRA LOOP_175
00000FAE                          2665mm EXIT_175
00000FAE                          2666mm     ENDM
00000FAE  7A07                    2667m     MOVE.L #7,D5                                    ; LOOP ROUND ALL 8 HEX CHARACTERS OF 4 BITS EACH
00000FB0                          2668m LOOP_174
00000FB0                          2669mm     BIN2HEX D2,D4,A2
00000FB0  45FA 0F2B               2670mm     LEA BIN2HEX_LUT(PC),A2                          ; LOAD THE LOOKUP TABLE
00000FB4  E99A                    2671mm     ROL.L #4,D2                                     ; SHIFT THE TOP 4 BITS DOWN TO BOTTOM OF THE REGISTER THE AND MASK OFF EVERYTHING ELSE
00000FB6  1802                    2672mm     MOVE.B D2,D4
00000FB8  0284 0000000F           2673mm     ANDI.L #$F,D4
00000FBE  1832 4000               2674mm     MOVE.B 0(A2,D4),D4                              ; USE THAT AS AN INDEX INTO THE LUT
00000FC2                          2675mm     ENDM
00000FC2                          2676mm     PRINT_CHAR D4,D3
00000FC2                          2677mm WAIT_FOR_READY_178                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000FC2                 TRUE     2678mm     IFEQ DEBUG
00000FC2  1639 00C00003           2679mm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
00000FC8  0803 0002               2680mm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
00000FCC  67F4                    2681mm         BEQ WAIT_FOR_READY_178                      ; NO SPACE, CHECK AGAIN
00000FCE  13C4 00C00007           2682mm         MOVE.B D4,DUART_TXA                         ; SEND THE NEXT CHARACTER
00000FD4                          2683mm     ENDC
00000FD4                          2684mm 
00000FD4                 FALSE    2685mm     IFNE DEBUG
00000FD4                          2686mm     ENDC
00000FD4                          2687mm 
00000FD4                          2688mm     ENDM
00000FD4  57CD FFDA               2689m     DBEQ D5,LOOP_174
00000FD8                          2690m     ENDM
00000FD8                          2691  
00000FD8  45FA 0F4C               2692      LEA FOR(PC),A2
00000FDC                          2693m     PRINT_STR A2,D3
00000FDC                          2694m LOOP_179
00000FDC  0C12 0000               2695m     CMP.B #NULL,(A2)                                ; 0 -> DONE
00000FE0  6700 0016               2696m     BEQ EXIT_179
00000FE4                          2697mm     PRINT_CHAR (A2)+,D3
00000FE4                          2698mm WAIT_FOR_READY_180                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000FE4                 TRUE     2699mm     IFEQ DEBUG
00000FE4  1639 00C00003           2700mm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
00000FEA  0803 0002               2701mm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
00000FEE  67F4                    2702mm         BEQ WAIT_FOR_READY_180                      ; NO SPACE, CHECK AGAIN
00000FF0  13DA 00C00007           2703mm         MOVE.B (A2)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00000FF6                          2704mm     ENDC
00000FF6                          2705mm 
00000FF6                 FALSE    2706mm     IFNE DEBUG
00000FF6                          2707mm     ENDC
00000FF6                          2708mm 
00000FF6                          2709mm     ENDM
00000FF6  60E4                    2710m     BRA LOOP_179
00000FF8                          2711m EXIT_179
00000FF8                          2712m     ENDM
00000FF8                          2713m     PRINT_REG D0,D3,D4,D5,A2
00000FF8  45FA 0F24               2714m     LEA OX(PC),A2
00000FFC                          2715mm     PRINT_STR A2,D3
00000FFC                          2716mm LOOP_182
00000FFC  0C12 0000               2717mm     CMP.B #NULL,(A2)                                ; 0 -> DONE
00001000  6700 0016               2718mm     BEQ EXIT_182
00001004                          2719mmm     PRINT_CHAR (A2)+,D3
00001004                          2720mmm WAIT_FOR_READY_183                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00001004                 TRUE     2721mmm     IFEQ DEBUG
00001004  1639 00C00003           2722mmm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
0000100A  0803 0002               2723mmm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
0000100E  67F4                    2724mmm         BEQ WAIT_FOR_READY_183                      ; NO SPACE, CHECK AGAIN
00001010  13DA 00C00007           2725mmm         MOVE.B (A2)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00001016                          2726mmm     ENDC
00001016                          2727mmm 
00001016                 FALSE    2728mmm     IFNE DEBUG
00001016                          2729mmm     ENDC
00001016                          2730mmm 
00001016                          2731mmm     ENDM
00001016  60E4                    2732mm     BRA LOOP_182
00001018                          2733mm EXIT_182
00001018                          2734mm     ENDM
00001018  7A07                    2735m     MOVE.L #7,D5                                    ; LOOP ROUND ALL 8 HEX CHARACTERS OF 4 BITS EACH
0000101A                          2736m LOOP_181
0000101A                          2737mm     BIN2HEX D0,D4,A2
0000101A  45FA 0EC1               2738mm     LEA BIN2HEX_LUT(PC),A2                          ; LOAD THE LOOKUP TABLE
0000101E  E998                    2739mm     ROL.L #4,D0                                     ; SHIFT THE TOP 4 BITS DOWN TO BOTTOM OF THE REGISTER THE AND MASK OFF EVERYTHING ELSE
00001020  1800                    2740mm     MOVE.B D0,D4
00001022  0284 0000000F           2741mm     ANDI.L #$F,D4
00001028  1832 4000               2742mm     MOVE.B 0(A2,D4),D4                              ; USE THAT AS AN INDEX INTO THE LUT
0000102C                          2743mm     ENDM
0000102C                          2744mm     PRINT_CHAR D4,D3
0000102C                          2745mm WAIT_FOR_READY_185                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
0000102C                 TRUE     2746mm     IFEQ DEBUG
0000102C  1639 00C00003           2747mm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
00001032  0803 0002               2748mm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
00001036  67F4                    2749mm         BEQ WAIT_FOR_READY_185                      ; NO SPACE, CHECK AGAIN
00001038  13C4 00C00007           2750mm         MOVE.B D4,DUART_TXA                         ; SEND THE NEXT CHARACTER
0000103E                          2751mm     ENDC
0000103E                          2752mm 
0000103E                 FALSE    2753mm     IFNE DEBUG
0000103E                          2754mm     ENDC
0000103E                          2755mm 
0000103E                          2756mm     ENDM
0000103E  57CD FFDA               2757m     DBEQ D5,LOOP_181
00001042                          2758m     ENDM
00001042                          2759  
00001042                          2760m     PRINT_CRLF D3,A2
00001042  45FA 0ED4               2761m     LEA CRLF(PC),A2
00001046                          2762mm     PRINT_STR A2,D3
00001046                          2763mm LOOP_187
00001046  0C12 0000               2764mm     CMP.B #NULL,(A2)                                ; 0 -> DONE
0000104A  6700 0016               2765mm     BEQ EXIT_187
0000104E                          2766mmm     PRINT_CHAR (A2)+,D3
0000104E                          2767mmm WAIT_FOR_READY_188                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
0000104E                 TRUE     2768mmm     IFEQ DEBUG
0000104E  1639 00C00003           2769mmm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
00001054  0803 0002               2770mmm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
00001058  67F4                    2771mmm         BEQ WAIT_FOR_READY_188                      ; NO SPACE, CHECK AGAIN
0000105A  13DA 00C00007           2772mmm         MOVE.B (A2)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00001060                          2773mmm     ENDC
00001060                          2774mmm 
00001060                 FALSE    2775mmm     IFNE DEBUG
00001060                          2776mmm     ENDC
00001060                          2777mmm 
00001060                          2778mmm     ENDM
00001060  60E4                    2779mm     BRA LOOP_187
00001062                          2780mm EXIT_187
00001062                          2781mm     ENDM
00001062                          2782m     ENDM
00001062                          2783  
00001062                          2784      WHILE D0 <GT> #0 DO
00001062                          2785s _10000014
00001062  B07C 0000               2786s     CMP.W   #0,D0
00001066  6F00 001C               2787s     BLE _10000015
0000106A  5580                    2788          SUB.L #2,D0
0000106C                          2789  
0000106C  13D1 00E00001           2790          MOVE.B (A1),DISPLAY
00001072                          2791m         PROGRAM (A1),(A0),D2
00001072  3091                    2792m   MOVE.W (A1),(A0)                                      ; WRITE THE DATA
00001074                          2793m 
00001074                          2794m WAIT_FOR_COMPLETE_189
00001074  3410                    2795m         MOVE.W (A0),D2
00001076                          2796m 
00001076                          2797m         IF.W D2 <NE> (A1) THEN
00001076  B451                    2798ms     CMP.W   (A1),D2
00001078  6700 0004               2799ms     BEQ _0000000E
0000107C  60F6                    2800m             BRA WAIT_FOR_COMPLETE_189
0000107E                          2801m         ENDI
0000107E                          2802ms _0000000E
0000107E                          2803m         ENDM
0000107E                          2804                  
0000107E  5488                    2805          ADD.L #2,A0
00001080  5489                    2806          ADD.L #2,A1
00001082                          2807      ENDW
00001082  60DE                    2808s     BRA _10000014
00001084                          2809s _10000015
00001084                          2810      
00001084  41F8 0000               2811      LEA STACK,A0
00001088  D1CC                    2812      ADD.L A4,A0
0000108A  2010                    2813      MOVE.L (A0),D0
0000108C                          2814      
0000108C  207C 00000000           2815      MOVE.L #0,A0
00001092                          2816m     PROGRAM_VECTOR D0,A0,D2
00001092  5488                    2817m     ADD.L #2,A0
00001094                          2818mm     PROGRAM D0, (A0), D2                                ; WRITE IT
00001094  3080                    2819mm   MOVE.W D0,(A0)                                        ; WRITE THE DATA
00001096                          2820mm 
00001096                          2821mm WAIT_FOR_COMPLETE_191
00001096  3410                    2822mm         MOVE.W (A0),D2
00001098                          2823mm 
00001098                          2824mm         IF.W D2 <NE> D0 THEN
00001098  B440                    2825mms     CMP.W   D0,D2
0000109A  6700 0004               2826mms     BEQ _0000000F
0000109E  60F6                    2827mm             BRA WAIT_FOR_COMPLETE_191
000010A0                          2828mm         ENDI
000010A0                          2829mms _0000000F
000010A0                          2830mm         ENDM
000010A0  E088                    2831m     LSR.L #8,D0
000010A2  E088                    2832m     LSR.L #8,D0
000010A4  5588                    2833m     SUB.L #2,A0
000010A6                          2834mm     PROGRAM D0, (A0), D2
000010A6  3080                    2835mm   MOVE.W D0,(A0)                                        ; WRITE THE DATA
000010A8                          2836mm 
000010A8                          2837mm WAIT_FOR_COMPLETE_192
000010A8  3410                    2838mm         MOVE.W (A0),D2
000010AA                          2839mm 
000010AA                          2840mm         IF.W D2 <NE> D0 THEN
000010AA  B440                    2841mms     CMP.W   D0,D2
000010AC  6700 0004               2842mms     BEQ _00000010
000010B0  60F6                    2843mm             BRA WAIT_FOR_COMPLETE_192
000010B2                          2844mm         ENDI
000010B2                          2845mms _00000010
000010B2                          2846mm         ENDM
000010B2                          2847m     ENDM
000010B2                          2848      
000010B2                          2849      FOR A0 = #RESET TO #START-4 BY #4 DO
000010B2  307C 0004               2850s     MOVE.W  #RESET,A0
000010B6  6000 003C               2851s     BRA _2000000F
000010BA                          2852s _2000000E
000010BA                          2853  
000010BA  2248                    2854          MOVE.L A0,A1
000010BC  D3CC                    2855          ADD.L A4,A1
000010BE                          2856              
000010BE  2011                    2857          MOVE.L (A1),D0  
000010C0  D081                    2858          ADD.L D1,D0
000010C2  0480 00000104           2859          SUB.L #START,D0
000010C8                          2860  
000010C8  2408                    2861          MOVE.L A0,D2
000010CA                          2862          
000010CA  2408                    2863          MOVE.L A0,D2
000010CC  13C2 00E00001           2864          MOVE.B D2,DISPLAY
000010D2                          2865m         PROGRAM_VECTOR D0,A0,D2
000010D2  5488                    2866m     ADD.L #2,A0
000010D4                          2867mm     PROGRAM D0, (A0), D2                                ; WRITE IT
000010D4  3080                    2868mm   MOVE.W D0,(A0)                                        ; WRITE THE DATA
000010D6                          2869mm 
000010D6                          2870mm WAIT_FOR_COMPLETE_194
000010D6  3410                    2871mm         MOVE.W (A0),D2
000010D8                          2872mm 
000010D8                          2873mm         IF.W D2 <NE> D0 THEN
000010D8  B440                    2874mms     CMP.W   D0,D2
000010DA  6700 0004               2875mms     BEQ _00000011
000010DE  60F6                    2876mm             BRA WAIT_FOR_COMPLETE_194
000010E0                          2877mm         ENDI
000010E0                          2878mms _00000011
000010E0                          2879mm         ENDM
000010E0  E088                    2880m     LSR.L #8,D0
000010E2  E088                    2881m     LSR.L #8,D0
000010E4  5588                    2882m     SUB.L #2,A0
000010E6                          2883mm     PROGRAM D0, (A0), D2
000010E6  3080                    2884mm   MOVE.W D0,(A0)                                        ; WRITE THE DATA
000010E8                          2885mm 
000010E8                          2886mm WAIT_FOR_COMPLETE_195
000010E8  3410                    2887mm         MOVE.W (A0),D2
000010EA                          2888mm 
000010EA                          2889mm         IF.W D2 <NE> D0 THEN
000010EA  B440                    2890mms     CMP.W   D0,D2
000010EC  6700 0004               2891mms     BEQ _00000012
000010F0  60F6                    2892mm             BRA WAIT_FOR_COMPLETE_195
000010F2                          2893mm         ENDI
000010F2                          2894mms _00000012
000010F2                          2895mm         ENDM
000010F2                          2896m     ENDM
000010F2                          2897      ENDF
000010F2  5848                    2898s     ADD.W   #4,A0
000010F4                          2899s _2000000F
000010F4  B0FC 0100               2900s     CMP.W   #START-4,A0
000010F8  6FC0                    2901s     BLE _2000000E
000010FA                          2902                                          
000010FA                          2903m     PROTECT
000010FA  31FC AAAA 2AAA          2904m     MOVE.W #$AAAA,$2AAA                             ; AND WRITE PROTECT
00001100  31FC 5555 1554          2905m     MOVE.W #$5555,$1554
00001106  31FC A0A0 2AAA          2906m     MOVE.W #$A0A0,$2AAA
0000110C                          2907m     ENDM
0000110C                          2908  
0000110C  6000 F236               2909      BRA MAIN_LOOP
00001110                          2910      
00001110                          2911  P
00001110  7000                    2912      MOVE.L #0,D0                                    ; D0 will be the data to write
00001112                          2913  
00001112                          2914      FOR D1 = #0 TO #3 DO                            ; read 2 bytes
00001112  323C 0000               2915s     MOVE.W  #0,D1
00001116  6000 0046               2916s     BRA _20000011
0000111A                          2917s _20000010
0000111A  E988                    2918          LSL.L #4,D0                                 ; make what we have so far more significant
0000111C                          2919m         WAIT_CHAR D2,D3                             ; next character -> D2
0000111C                          2920m WAIT_FOR_READY_197                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
0000111C                 TRUE     2921m     IFEQ DEBUG
0000111C  1639 00C00003           2922m         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
00001122  0803 0000               2923m         BTST #0,D3                                  ; CHECK FOR CHARACTER
00001126  67F4                    2924m         BEQ WAIT_FOR_READY_197                      ; NOTHING, CHECK AGAIN
00001128                          2925m     ENDC
00001128                          2926m 
00001128                          2927mm     READ_CHAR D2
00001128                 TRUE     2928mm     IFEQ DEBUG
00001128  1439 00C00007           2929mm         MOVE.B DUART_RXA,D2                         ; GOT A CHARACTER, READ IT
0000112E                          2930mm     ENDC
0000112E                 FALSE    2931mm     IFNE DEBUG
0000112E                          2932mm     ENDC
0000112E                          2933mm 
0000112E  B43C 001B               2934mm     CMP.B #$1B,D2                                   ; CHECK FOR ESCAPE AND GO TO START
00001132  6700 EFD0               2935mm     BEQ START
00001136                          2936mm     ENDM
00001136                          2937m 
00001136                 TRUE     2938m     IFEQ DEBUG
00001136                          2939mm         PRINT_CHAR D2,D3                            ; ECHO IT BACK
00001136                          2940mm WAIT_FOR_READY_199                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00001136                 TRUE     2941mm     IFEQ DEBUG
00001136  1639 00C00003           2942mm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
0000113C  0803 0002               2943mm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
00001140  67F4                    2944mm         BEQ WAIT_FOR_READY_199                      ; NO SPACE, CHECK AGAIN
00001142  13C2 00C00007           2945mm         MOVE.B D2,DUART_TXA                         ; SEND THE NEXT CHARACTER
00001148                          2946mm     ENDC
00001148                          2947mm 
00001148                 FALSE    2948mm     IFNE DEBUG
00001148                          2949mm     ENDC
00001148                          2950mm 
00001148                          2951mm     ENDM
00001148                          2952m     ENDC
00001148                          2953m     ENDM
00001148                          2954m         HEX2BIN D2,D2,A0                            ; convert to binary -> D2
00001148  41FA 0DA3               2955m     LEA HEX2BIN_LUT(PC),A0                          ; LOAD THE LOOKUP TABLE
0000114C  0402 0030               2956m     SUB.B #'0',D2                                   ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
00001150  C4BC 000000FF           2957m     AND.L #$FF,D2                                   ; IGNORE THE TOP 3 BYTES
00001156  1430 2000               2958m     MOVE.B 0(A0,D2),D2                              ; USE THAT AS AN INDEX INTO THE LUT   
0000115A                          2959m     ENDM
0000115A  8002                    2960          OR.B D2,D0
0000115C                          2961      ENDF
0000115C  5241                    2962s     ADD.W   #1,D1
0000115E                          2963s _20000011
0000115E  B27C 0003               2964s     CMP.W   #3,D1
00001162  6FB6                    2965s     BLE _20000010
00001164                          2966  
00001164                          2967m     PRINT_CRLF D2,A1
00001164  43FA 0DB2               2968m     LEA CRLF(PC),A1
00001168                          2969mm     PRINT_STR A1,D2
00001168                          2970mm LOOP_202
00001168  0C11 0000               2971mm     CMP.B #NULL,(A1)                                ; 0 -> DONE
0000116C  6700 0016               2972mm     BEQ EXIT_202
00001170                          2973mmm     PRINT_CHAR (A1)+,D2
00001170                          2974mmm WAIT_FOR_READY_203                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00001170                 TRUE     2975mmm     IFEQ DEBUG
00001170  1439 00C00003           2976mmm         MOVE.B DUART_SRA,D2                         ; READ STATUS REGISTER
00001176  0802 0002               2977mmm         BTST #2,D2                                  ; CHECK FOR SPACE TO SEND
0000117A  67F4                    2978mmm         BEQ WAIT_FOR_READY_203                      ; NO SPACE, CHECK AGAIN
0000117C  13D9 00C00007           2979mmm         MOVE.B (A1)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00001182                          2980mmm     ENDC
00001182                          2981mmm 
00001182                 FALSE    2982mmm     IFNE DEBUG
00001182                          2983mmm     ENDC
00001182                          2984mmm 
00001182                          2985mmm     ENDM
00001182  60E4                    2986mm     BRA LOOP_202
00001184                          2987mm EXIT_202
00001184                          2988mm     ENDM
00001184                          2989m     ENDM
00001184                          2990  
00001184  2047                    2991      MOVE.L D7,A0                                    ; address accumulator -> target address register
00001186  7E00                    2992      MOVE.L #0,D7                                    ; clear the now used address accumulator
00001188                          2993  
00001188                          2994m     UNPROTECT                                       ; important to only unprotect when we are fully committed (ie, can't escape)
00001188  31FC AAAA 2AAA          2995m     MOVE.W #$AAAA,$2AAA                             ; REMOVE WRITE PROTECT
0000118E  4E71                    2996m     NOP
00001190  31FC 5555 1554          2997m     MOVE.W #$5555,$1554
00001196  4E71                    2998m     NOP
00001198  31FC 8080 2AAA          2999m     MOVE.W #$8080,$2AAA
0000119E  4E71                    3000m     NOP
000011A0  31FC AAAA 2AAA          3001m     MOVE.W #$AAAA,$2AAA
000011A6  4E71                    3002m     NOP
000011A8  31FC 5555 1554          3003m     MOVE.W #$5555,$1554
000011AE  4E71                    3004m     NOP
000011B0  31FC 2020 2AAA          3005m     MOVE.W #$2020,$2AAA
000011B6                          3006m     ENDM
000011B6                          3007                              
000011B6                          3008      FOR D7 = #$0 TO #$FFFFFFFF DO                   ; dead timing loop to wait for unprotect
000011B6  3E3C 0000               3009s     MOVE.W  #$0,D7
000011BA  6000 0006               3010s     BRA _20000013
000011BE                          3011s _20000012
000011BE  4E71                    3012          NOP
000011C0                          3013      ENDF
000011C0  5247                    3014s     ADD.W   #1,D7
000011C2                          3015s _20000013
000011C2  BE7C FFFF               3016s     CMP.W   #$FFFFFFFF,D7
000011C6  6FF6                    3017s     BLE _20000012
000011C8                          3018               
000011C8  45FA 0D3A               3019      LEA LOADING(PC),A2                              ; the prints seem to be important for timing to unprotect the EEPROM
000011CC                          3020m     PRINT_STR A2,D2
000011CC                          3021m LOOP_205
000011CC  0C12 0000               3022m     CMP.B #NULL,(A2)                                ; 0 -> DONE
000011D0  6700 0016               3023m     BEQ EXIT_205
000011D4                          3024mm     PRINT_CHAR (A2)+,D2
000011D4                          3025mm WAIT_FOR_READY_206                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
000011D4                 TRUE     3026mm     IFEQ DEBUG
000011D4  1439 00C00003           3027mm         MOVE.B DUART_SRA,D2                         ; READ STATUS REGISTER
000011DA  0802 0002               3028mm         BTST #2,D2                                  ; CHECK FOR SPACE TO SEND
000011DE  67F4                    3029mm         BEQ WAIT_FOR_READY_206                      ; NO SPACE, CHECK AGAIN
000011E0  13DA 00C00007           3030mm         MOVE.B (A2)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
000011E6                          3031mm     ENDC
000011E6                          3032mm 
000011E6                 FALSE    3033mm     IFNE DEBUG
000011E6                          3034mm     ENDC
000011E6                          3035mm 
000011E6                          3036mm     ENDM
000011E6  60E4                    3037m     BRA LOOP_205
000011E8                          3038m EXIT_205
000011E8                          3039m     ENDM
000011E8                          3040  
000011E8                          3041m     PRINT_REG D0,D3,D4,D5,A2
000011E8  45FA 0D34               3042m     LEA OX(PC),A2
000011EC                          3043mm     PRINT_STR A2,D3
000011EC                          3044mm LOOP_208
000011EC  0C12 0000               3045mm     CMP.B #NULL,(A2)                                ; 0 -> DONE
000011F0  6700 0016               3046mm     BEQ EXIT_208
000011F4                          3047mmm     PRINT_CHAR (A2)+,D3
000011F4                          3048mmm WAIT_FOR_READY_209                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
000011F4                 TRUE     3049mmm     IFEQ DEBUG
000011F4  1639 00C00003           3050mmm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
000011FA  0803 0002               3051mmm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
000011FE  67F4                    3052mmm         BEQ WAIT_FOR_READY_209                      ; NO SPACE, CHECK AGAIN
00001200  13DA 00C00007           3053mmm         MOVE.B (A2)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00001206                          3054mmm     ENDC
00001206                          3055mmm 
00001206                 FALSE    3056mmm     IFNE DEBUG
00001206                          3057mmm     ENDC
00001206                          3058mmm 
00001206                          3059mmm     ENDM
00001206  60E4                    3060mm     BRA LOOP_208
00001208                          3061mm EXIT_208
00001208                          3062mm     ENDM
00001208  7A07                    3063m     MOVE.L #7,D5                                    ; LOOP ROUND ALL 8 HEX CHARACTERS OF 4 BITS EACH
0000120A                          3064m LOOP_207
0000120A                          3065mm     BIN2HEX D0,D4,A2
0000120A  45FA 0CD1               3066mm     LEA BIN2HEX_LUT(PC),A2                          ; LOAD THE LOOKUP TABLE
0000120E  E998                    3067mm     ROL.L #4,D0                                     ; SHIFT THE TOP 4 BITS DOWN TO BOTTOM OF THE REGISTER THE AND MASK OFF EVERYTHING ELSE
00001210  1800                    3068mm     MOVE.B D0,D4
00001212  0284 0000000F           3069mm     ANDI.L #$F,D4
00001218  1832 4000               3070mm     MOVE.B 0(A2,D4),D4                              ; USE THAT AS AN INDEX INTO THE LUT
0000121C                          3071mm     ENDM
0000121C                          3072mm     PRINT_CHAR D4,D3
0000121C                          3073mm WAIT_FOR_READY_211                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
0000121C                 TRUE     3074mm     IFEQ DEBUG
0000121C  1639 00C00003           3075mm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
00001222  0803 0002               3076mm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
00001226  67F4                    3077mm         BEQ WAIT_FOR_READY_211                      ; NO SPACE, CHECK AGAIN
00001228  13C4 00C00007           3078mm         MOVE.B D4,DUART_TXA                         ; SEND THE NEXT CHARACTER
0000122E                          3079mm     ENDC
0000122E                          3080mm 
0000122E                 FALSE    3081mm     IFNE DEBUG
0000122E                          3082mm     ENDC
0000122E                          3083mm 
0000122E                          3084mm     ENDM
0000122E  57CD FFDA               3085m     DBEQ D5,LOOP_207
00001232                          3086m     ENDM
00001232                          3087  
00001232  45FA 0CED               3088      LEA TO(PC),A2
00001236                          3089m     PRINT_STR A2,D3
00001236                          3090m LOOP_212
00001236  0C12 0000               3091m     CMP.B #NULL,(A2)                                ; 0 -> DONE
0000123A  6700 0016               3092m     BEQ EXIT_212
0000123E                          3093mm     PRINT_CHAR (A2)+,D3
0000123E                          3094mm WAIT_FOR_READY_213                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
0000123E                 TRUE     3095mm     IFEQ DEBUG
0000123E  1639 00C00003           3096mm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
00001244  0803 0002               3097mm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
00001248  67F4                    3098mm         BEQ WAIT_FOR_READY_213                      ; NO SPACE, CHECK AGAIN
0000124A  13DA 00C00007           3099mm         MOVE.B (A2)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00001250                          3100mm     ENDC
00001250                          3101mm 
00001250                 FALSE    3102mm     IFNE DEBUG
00001250                          3103mm     ENDC
00001250                          3104mm 
00001250                          3105mm     ENDM
00001250  60E4                    3106m     BRA LOOP_212
00001252                          3107m EXIT_212
00001252                          3108m     ENDM
00001252                          3109  
00001252  2408                    3110      MOVE.L A0,D2
00001254                          3111m     PRINT_REG D2,D3,D4,D5,A2
00001254  45FA 0CC8               3112m     LEA OX(PC),A2
00001258                          3113mm     PRINT_STR A2,D3
00001258                          3114mm LOOP_215
00001258  0C12 0000               3115mm     CMP.B #NULL,(A2)                                ; 0 -> DONE
0000125C  6700 0016               3116mm     BEQ EXIT_215
00001260                          3117mmm     PRINT_CHAR (A2)+,D3
00001260                          3118mmm WAIT_FOR_READY_216                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00001260                 TRUE     3119mmm     IFEQ DEBUG
00001260  1639 00C00003           3120mmm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
00001266  0803 0002               3121mmm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
0000126A  67F4                    3122mmm         BEQ WAIT_FOR_READY_216                      ; NO SPACE, CHECK AGAIN
0000126C  13DA 00C00007           3123mmm         MOVE.B (A2)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00001272                          3124mmm     ENDC
00001272                          3125mmm 
00001272                 FALSE    3126mmm     IFNE DEBUG
00001272                          3127mmm     ENDC
00001272                          3128mmm 
00001272                          3129mmm     ENDM
00001272  60E4                    3130mm     BRA LOOP_215
00001274                          3131mm EXIT_215
00001274                          3132mm     ENDM
00001274  7A07                    3133m     MOVE.L #7,D5                                    ; LOOP ROUND ALL 8 HEX CHARACTERS OF 4 BITS EACH
00001276                          3134m LOOP_214
00001276                          3135mm     BIN2HEX D2,D4,A2
00001276  45FA 0C65               3136mm     LEA BIN2HEX_LUT(PC),A2                          ; LOAD THE LOOKUP TABLE
0000127A  E99A                    3137mm     ROL.L #4,D2                                     ; SHIFT THE TOP 4 BITS DOWN TO BOTTOM OF THE REGISTER THE AND MASK OFF EVERYTHING ELSE
0000127C  1802                    3138mm     MOVE.B D2,D4
0000127E  0284 0000000F           3139mm     ANDI.L #$F,D4
00001284  1832 4000               3140mm     MOVE.B 0(A2,D4),D4                              ; USE THAT AS AN INDEX INTO THE LUT
00001288                          3141mm     ENDM
00001288                          3142mm     PRINT_CHAR D4,D3
00001288                          3143mm WAIT_FOR_READY_218                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00001288                 TRUE     3144mm     IFEQ DEBUG
00001288  1639 00C00003           3145mm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
0000128E  0803 0002               3146mm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
00001292  67F4                    3147mm         BEQ WAIT_FOR_READY_218                      ; NO SPACE, CHECK AGAIN
00001294  13C4 00C00007           3148mm         MOVE.B D4,DUART_TXA                         ; SEND THE NEXT CHARACTER
0000129A                          3149mm     ENDC
0000129A                          3150mm 
0000129A                 FALSE    3151mm     IFNE DEBUG
0000129A                          3152mm     ENDC
0000129A                          3153mm 
0000129A                          3154mm     ENDM
0000129A  57CD FFDA               3155m     DBEQ D5,LOOP_214
0000129E                          3156m     ENDM
0000129E                          3157  
0000129E                          3158m     PRINT_CRLF D3,A2
0000129E  45FA 0C78               3159m     LEA CRLF(PC),A2
000012A2                          3160mm     PRINT_STR A2,D3
000012A2                          3161mm LOOP_220
000012A2  0C12 0000               3162mm     CMP.B #NULL,(A2)                                ; 0 -> DONE
000012A6  6700 0016               3163mm     BEQ EXIT_220
000012AA                          3164mmm     PRINT_CHAR (A2)+,D3
000012AA                          3165mmm WAIT_FOR_READY_221                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
000012AA                 TRUE     3166mmm     IFEQ DEBUG
000012AA  1639 00C00003           3167mmm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
000012B0  0803 0002               3168mmm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
000012B4  67F4                    3169mmm         BEQ WAIT_FOR_READY_221                      ; NO SPACE, CHECK AGAIN
000012B6  13DA 00C00007           3170mmm         MOVE.B (A2)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
000012BC                          3171mmm     ENDC
000012BC                          3172mmm 
000012BC                 FALSE    3173mmm     IFNE DEBUG
000012BC                          3174mmm     ENDC
000012BC                          3175mmm 
000012BC                          3176mmm     ENDM
000012BC  60E4                    3177mm     BRA LOOP_220
000012BE                          3178mm EXIT_220
000012BE                          3179mm     ENDM
000012BE                          3180m     ENDM
000012BE                          3181  
000012BE                          3182m     PROGRAM D0,(A0),D2
000012BE  3080                    3183m   MOVE.W D0,(A0)                                        ; WRITE THE DATA
000012C0                          3184m 
000012C0                          3185m WAIT_FOR_COMPLETE_222
000012C0  3410                    3186m         MOVE.W (A0),D2
000012C2                          3187m 
000012C2                          3188m         IF.W D2 <NE> D0 THEN
000012C2  B440                    3189ms     CMP.W   D0,D2
000012C4  6700 0004               3190ms     BEQ _00000013
000012C8  60F6                    3191m             BRA WAIT_FOR_COMPLETE_222
000012CA                          3192m         ENDI
000012CA                          3193ms _00000013
000012CA                          3194m         ENDM
000012CA                          3195  
000012CA                          3196m     PROTECT
000012CA  31FC AAAA 2AAA          3197m     MOVE.W #$AAAA,$2AAA                             ; AND WRITE PROTECT
000012D0  31FC 5555 1554          3198m     MOVE.W #$5555,$1554
000012D6  31FC A0A0 2AAA          3199m     MOVE.W #$A0A0,$2AAA
000012DC                          3200m     ENDM
000012DC                          3201  
000012DC  6000 F066               3202      BRA MAIN_LOOP
000012E0                          3203      
000012E0                          3204  X
000012E0  45FA 0C4F               3205      LEA STATUS_REGISTER(PC),A2
000012E4                          3206m     PRINT_STR A2,D3
000012E4                          3207m LOOP_224
000012E4  0C12 0000               3208m     CMP.B #NULL,(A2)                                ; 0 -> DONE
000012E8  6700 0016               3209m     BEQ EXIT_224
000012EC                          3210mm     PRINT_CHAR (A2)+,D3
000012EC                          3211mm WAIT_FOR_READY_225                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
000012EC                 TRUE     3212mm     IFEQ DEBUG
000012EC  1639 00C00003           3213mm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
000012F2  0803 0002               3214mm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
000012F6  67F4                    3215mm         BEQ WAIT_FOR_READY_225                      ; NO SPACE, CHECK AGAIN
000012F8  13DA 00C00007           3216mm         MOVE.B (A2)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
000012FE                          3217mm     ENDC
000012FE                          3218mm 
000012FE                 FALSE    3219mm     IFNE DEBUG
000012FE                          3220mm     ENDC
000012FE                          3221mm 
000012FE                          3222mm     ENDM
000012FE  60E4                    3223m     BRA LOOP_224
00001300                          3224m EXIT_224
00001300                          3225m     ENDM
00001300                          3226  
00001300  40C0                    3227      MOVE SR,D0
00001302                          3228m     PRINT_REG D0,D3,D4,D5,A2
00001302  45FA 0C1A               3229m     LEA OX(PC),A2
00001306                          3230mm     PRINT_STR A2,D3
00001306                          3231mm LOOP_227
00001306  0C12 0000               3232mm     CMP.B #NULL,(A2)                                ; 0 -> DONE
0000130A  6700 0016               3233mm     BEQ EXIT_227
0000130E                          3234mmm     PRINT_CHAR (A2)+,D3
0000130E                          3235mmm WAIT_FOR_READY_228                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
0000130E                 TRUE     3236mmm     IFEQ DEBUG
0000130E  1639 00C00003           3237mmm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
00001314  0803 0002               3238mmm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
00001318  67F4                    3239mmm         BEQ WAIT_FOR_READY_228                      ; NO SPACE, CHECK AGAIN
0000131A  13DA 00C00007           3240mmm         MOVE.B (A2)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00001320                          3241mmm     ENDC
00001320                          3242mmm 
00001320                 FALSE    3243mmm     IFNE DEBUG
00001320                          3244mmm     ENDC
00001320                          3245mmm 
00001320                          3246mmm     ENDM
00001320  60E4                    3247mm     BRA LOOP_227
00001322                          3248mm EXIT_227
00001322                          3249mm     ENDM
00001322  7A07                    3250m     MOVE.L #7,D5                                    ; LOOP ROUND ALL 8 HEX CHARACTERS OF 4 BITS EACH
00001324                          3251m LOOP_226
00001324                          3252mm     BIN2HEX D0,D4,A2
00001324  45FA 0BB7               3253mm     LEA BIN2HEX_LUT(PC),A2                          ; LOAD THE LOOKUP TABLE
00001328  E998                    3254mm     ROL.L #4,D0                                     ; SHIFT THE TOP 4 BITS DOWN TO BOTTOM OF THE REGISTER THE AND MASK OFF EVERYTHING ELSE
0000132A  1800                    3255mm     MOVE.B D0,D4
0000132C  0284 0000000F           3256mm     ANDI.L #$F,D4
00001332  1832 4000               3257mm     MOVE.B 0(A2,D4),D4                              ; USE THAT AS AN INDEX INTO THE LUT
00001336                          3258mm     ENDM
00001336                          3259mm     PRINT_CHAR D4,D3
00001336                          3260mm WAIT_FOR_READY_230                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00001336                 TRUE     3261mm     IFEQ DEBUG
00001336  1639 00C00003           3262mm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
0000133C  0803 0002               3263mm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
00001340  67F4                    3264mm         BEQ WAIT_FOR_READY_230                      ; NO SPACE, CHECK AGAIN
00001342  13C4 00C00007           3265mm         MOVE.B D4,DUART_TXA                         ; SEND THE NEXT CHARACTER
00001348                          3266mm     ENDC
00001348                          3267mm 
00001348                 FALSE    3268mm     IFNE DEBUG
00001348                          3269mm     ENDC
00001348                          3270mm 
00001348                          3271mm     ENDM
00001348  57CD FFDA               3272m     DBEQ D5,LOOP_226
0000134C                          3273m     ENDM
0000134C                          3274m     PRINT_CRLF D3,A2
0000134C  45FA 0BCA               3275m     LEA CRLF(PC),A2
00001350                          3276mm     PRINT_STR A2,D3
00001350                          3277mm LOOP_232
00001350  0C12 0000               3278mm     CMP.B #NULL,(A2)                                ; 0 -> DONE
00001354  6700 0016               3279mm     BEQ EXIT_232
00001358                          3280mmm     PRINT_CHAR (A2)+,D3
00001358                          3281mmm WAIT_FOR_READY_233                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00001358                 TRUE     3282mmm     IFEQ DEBUG
00001358  1639 00C00003           3283mmm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
0000135E  0803 0002               3284mmm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
00001362  67F4                    3285mmm         BEQ WAIT_FOR_READY_233                      ; NO SPACE, CHECK AGAIN
00001364  13DA 00C00007           3286mmm         MOVE.B (A2)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
0000136A                          3287mmm     ENDC
0000136A                          3288mmm 
0000136A                 FALSE    3289mmm     IFNE DEBUG
0000136A                          3290mmm     ENDC
0000136A                          3291mmm 
0000136A                          3292mmm     ENDM
0000136A  60E4                    3293mm     BRA LOOP_232
0000136C                          3294mm EXIT_232
0000136C                          3295mm     ENDM
0000136C                          3296m     ENDM
0000136C                          3297  
0000136C  45FA 0BBE               3298      LEA STACK_POINTER(PC),A2
00001370                          3299m     PRINT_STR A2,D3
00001370                          3300m LOOP_234
00001370  0C12 0000               3301m     CMP.B #NULL,(A2)                                ; 0 -> DONE
00001374  6700 0016               3302m     BEQ EXIT_234
00001378                          3303mm     PRINT_CHAR (A2)+,D3
00001378                          3304mm WAIT_FOR_READY_235                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00001378                 TRUE     3305mm     IFEQ DEBUG
00001378  1639 00C00003           3306mm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
0000137E  0803 0002               3307mm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
00001382  67F4                    3308mm         BEQ WAIT_FOR_READY_235                      ; NO SPACE, CHECK AGAIN
00001384  13DA 00C00007           3309mm         MOVE.B (A2)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
0000138A                          3310mm     ENDC
0000138A                          3311mm 
0000138A                 FALSE    3312mm     IFNE DEBUG
0000138A                          3313mm     ENDC
0000138A                          3314mm 
0000138A                          3315mm     ENDM
0000138A  60E4                    3316m     BRA LOOP_234
0000138C                          3317m EXIT_234
0000138C                          3318m     ENDM
0000138C                          3319  
0000138C  200F                    3320      MOVE.L SP,D0
0000138E                          3321m     PRINT_REG D0,D3,D4,D5,A2
0000138E  45FA 0B8E               3322m     LEA OX(PC),A2
00001392                          3323mm     PRINT_STR A2,D3
00001392                          3324mm LOOP_237
00001392  0C12 0000               3325mm     CMP.B #NULL,(A2)                                ; 0 -> DONE
00001396  6700 0016               3326mm     BEQ EXIT_237
0000139A                          3327mmm     PRINT_CHAR (A2)+,D3
0000139A                          3328mmm WAIT_FOR_READY_238                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
0000139A                 TRUE     3329mmm     IFEQ DEBUG
0000139A  1639 00C00003           3330mmm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
000013A0  0803 0002               3331mmm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
000013A4  67F4                    3332mmm         BEQ WAIT_FOR_READY_238                      ; NO SPACE, CHECK AGAIN
000013A6  13DA 00C00007           3333mmm         MOVE.B (A2)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
000013AC                          3334mmm     ENDC
000013AC                          3335mmm 
000013AC                 FALSE    3336mmm     IFNE DEBUG
000013AC                          3337mmm     ENDC
000013AC                          3338mmm 
000013AC                          3339mmm     ENDM
000013AC  60E4                    3340mm     BRA LOOP_237
000013AE                          3341mm EXIT_237
000013AE                          3342mm     ENDM
000013AE  7A07                    3343m     MOVE.L #7,D5                                    ; LOOP ROUND ALL 8 HEX CHARACTERS OF 4 BITS EACH
000013B0                          3344m LOOP_236
000013B0                          3345mm     BIN2HEX D0,D4,A2
000013B0  45FA 0B2B               3346mm     LEA BIN2HEX_LUT(PC),A2                          ; LOAD THE LOOKUP TABLE
000013B4  E998                    3347mm     ROL.L #4,D0                                     ; SHIFT THE TOP 4 BITS DOWN TO BOTTOM OF THE REGISTER THE AND MASK OFF EVERYTHING ELSE
000013B6  1800                    3348mm     MOVE.B D0,D4
000013B8  0284 0000000F           3349mm     ANDI.L #$F,D4
000013BE  1832 4000               3350mm     MOVE.B 0(A2,D4),D4                              ; USE THAT AS AN INDEX INTO THE LUT
000013C2                          3351mm     ENDM
000013C2                          3352mm     PRINT_CHAR D4,D3
000013C2                          3353mm WAIT_FOR_READY_240                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
000013C2                 TRUE     3354mm     IFEQ DEBUG
000013C2  1639 00C00003           3355mm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
000013C8  0803 0002               3356mm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
000013CC  67F4                    3357mm         BEQ WAIT_FOR_READY_240                      ; NO SPACE, CHECK AGAIN
000013CE  13C4 00C00007           3358mm         MOVE.B D4,DUART_TXA                         ; SEND THE NEXT CHARACTER
000013D4                          3359mm     ENDC
000013D4                          3360mm 
000013D4                 FALSE    3361mm     IFNE DEBUG
000013D4                          3362mm     ENDC
000013D4                          3363mm 
000013D4                          3364mm     ENDM
000013D4  57CD FFDA               3365m     DBEQ D5,LOOP_236
000013D8                          3366m     ENDM
000013D8                          3367m     PRINT_CRLF D3,A2
000013D8  45FA 0B3E               3368m     LEA CRLF(PC),A2
000013DC                          3369mm     PRINT_STR A2,D3
000013DC                          3370mm LOOP_242
000013DC  0C12 0000               3371mm     CMP.B #NULL,(A2)                                ; 0 -> DONE
000013E0  6700 0016               3372mm     BEQ EXIT_242
000013E4                          3373mmm     PRINT_CHAR (A2)+,D3
000013E4                          3374mmm WAIT_FOR_READY_243                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
000013E4                 TRUE     3375mmm     IFEQ DEBUG
000013E4  1639 00C00003           3376mmm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
000013EA  0803 0002               3377mmm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
000013EE  67F4                    3378mmm         BEQ WAIT_FOR_READY_243                      ; NO SPACE, CHECK AGAIN
000013F0  13DA 00C00007           3379mmm         MOVE.B (A2)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
000013F6                          3380mmm     ENDC
000013F6                          3381mmm 
000013F6                 FALSE    3382mmm     IFNE DEBUG
000013F6                          3383mmm     ENDC
000013F6                          3384mmm 
000013F6                          3385mmm     ENDM
000013F6  60E4                    3386mm     BRA LOOP_242
000013F8                          3387mm EXIT_242
000013F8                          3388mm     ENDM
000013F8                          3389m     ENDM
000013F8                          3390  
000013F8  6000 EF4A               3391      BRA MAIN_LOOP
000013FC                          3392          
000013FC                          3393  I
000013FC  13FC 0008 00C0000B      3394      MOVE.B #8,DUART_IMR
00001404  027C F8FF               3395      AND.W #$F8FF,SR
00001408  6000 EF3A               3396      BRA MAIN_LOOP
0000140C                          3397      
0000140C                          3398  O
0000140C  13FC 0000 00C0000B      3399      MOVE.B #0,DUART_IMR
00001414  007C 0700               3400      OR.W #$0700,SR
00001418  6000 EF2A               3401      BRA MAIN_LOOP
0000141C                          3402          
0000141C                          3403  HASH
0000141C                          3404m     PROTECT
0000141C  31FC AAAA 2AAA          3405m     MOVE.W #$AAAA,$2AAA                             ; AND WRITE PROTECT
00001422  31FC 5555 1554          3406m     MOVE.W #$5555,$1554
00001428  31FC A0A0 2AAA          3407m     MOVE.W #$A0A0,$2AAA
0000142E                          3408m     ENDM
0000142E  6000 EF14               3409      BRA MAIN_LOOP
00001432                          3410      
00001432                          3411  B
00001432  13FC 0038 00A00019      3412      MOVE.B #$38,MC68230_PORT_C_DATA
0000143A                          3413  
0000143A                          3414m     WRITE_8 #$E0,#$6,D0     
0000143A  13FC 00FF 00A00007      3415m     MOVE.B #$FF,MC68230_PORT_B_DIRECTION
00001442  103C 0030               3416m     MOVE.B #$30, D0
00001446  0000 0006               3417m     ORI.B #$6,D0
0000144A  13C0 00A00019           3418m     MOVE.B D0,MC68230_PORT_C_DATA
00001450  0200 00EF               3419m     ANDI.B #$EF,D0
00001454  13FC 00E0 00A00013      3420m     MOVE.B #$E0,MC68230_PORT_B_DATA
0000145C  13C0 00A00019           3421m     MOVE.B D0,MC68230_PORT_C_DATA
00001462  0000 0010               3422m     ORI.B #$10,D0
00001466  13C0 00A00019           3423m     MOVE.B D0,MC68230_PORT_C_DATA
0000146C  13FC 0038 00A00019      3424m     MOVE.B #$38,MC68230_PORT_C_DATA
00001474                          3425m     ENDM
00001474                          3426  WAIT_DRIVE_READY
00001474                          3427m     READ_8 #$7,D0,D1
00001474  13FC 0000 00A00007      3428m     MOVE.B #0, MC68230_PORT_B_DIRECTION
0000147C  123C 0030               3429m     MOVE.B #$30, D1
00001480  0001 0007               3430m     ORI.B #$7,D1
00001484  13C1 00A00019           3431m     MOVE.B D1,MC68230_PORT_C_DATA
0000148A  0201 00DF               3432m     ANDI.B #$DF,D1
0000148E  13C1 00A00019           3433m     MOVE.B D1,MC68230_PORT_C_DATA
00001494  1039 00A00013           3434m     MOVE.B MC68230_PORT_B_DATA,D0
0000149A  0001 0020               3435m     ORI.B #$20,D1
0000149E  13C1 00A00019           3436m     MOVE.B D1,MC68230_PORT_C_DATA
000014A4  13FC 0038 00A00019      3437m     MOVE.B #$38,MC68230_PORT_C_DATA
000014AC                          3438m     ENDM
000014AC  0800 0006               3439      BTST #6,D0
000014B0  67C2                    3440      BEQ WAIT_DRIVE_READY
000014B2                          3441      
000014B2                          3442  WAIT_NOT_BUSY
000014B2                          3443m     READ_8 #$7,D0,D1
000014B2  13FC 0000 00A00007      3444m     MOVE.B #0, MC68230_PORT_B_DIRECTION
000014BA  123C 0030               3445m     MOVE.B #$30, D1
000014BE  0001 0007               3446m     ORI.B #$7,D1
000014C2  13C1 00A00019           3447m     MOVE.B D1,MC68230_PORT_C_DATA
000014C8  0201 00DF               3448m     ANDI.B #$DF,D1
000014CC  13C1 00A00019           3449m     MOVE.B D1,MC68230_PORT_C_DATA
000014D2  1039 00A00013           3450m     MOVE.B MC68230_PORT_B_DATA,D0
000014D8  0001 0020               3451m     ORI.B #$20,D1
000014DC  13C1 00A00019           3452m     MOVE.B D1,MC68230_PORT_C_DATA
000014E2  13FC 0038 00A00019      3453m     MOVE.B #$38,MC68230_PORT_C_DATA
000014EA                          3454m     ENDM
000014EA  0800 0007               3455      BTST #7,D0
000014EE  66C2                    3456      BNE WAIT_NOT_BUSY
000014F0                          3457      
000014F0  7401                    3458      MOVE.L #1,D2
000014F2                          3459      
000014F2                          3460m     WRITE_8 #1,#$2,D0       ; read 1 sector
000014F2  13FC 00FF 00A00007      3461m     MOVE.B #$FF,MC68230_PORT_B_DIRECTION
000014FA  103C 0030               3462m     MOVE.B #$30, D0
000014FE  0000 0002               3463m     ORI.B #$2,D0
00001502  13C0 00A00019           3464m     MOVE.B D0,MC68230_PORT_C_DATA
00001508  0200 00EF               3465m     ANDI.B #$EF,D0
0000150C  13FC 0001 00A00013      3466m     MOVE.B #1,MC68230_PORT_B_DATA
00001514  13C0 00A00019           3467m     MOVE.B D0,MC68230_PORT_C_DATA
0000151A  0000 0010               3468m     ORI.B #$10,D0
0000151E  13C0 00A00019           3469m     MOVE.B D0,MC68230_PORT_C_DATA
00001524  13FC 0038 00A00019      3470m     MOVE.B #$38,MC68230_PORT_C_DATA
0000152C                          3471m     ENDM
0000152C                          3472m     WRITE_8 D2,#$3,D0       ; block 513
0000152C  13FC 00FF 00A00007      3473m     MOVE.B #$FF,MC68230_PORT_B_DIRECTION
00001534  103C 0030               3474m     MOVE.B #$30, D0
00001538  0000 0003               3475m     ORI.B #$3,D0
0000153C  13C0 00A00019           3476m     MOVE.B D0,MC68230_PORT_C_DATA
00001542  0200 00EF               3477m     ANDI.B #$EF,D0
00001546  13C2 00A00013           3478m     MOVE.B D2,MC68230_PORT_B_DATA
0000154C  13C0 00A00019           3479m     MOVE.B D0,MC68230_PORT_C_DATA
00001552  0000 0010               3480m     ORI.B #$10,D0
00001556  13C0 00A00019           3481m     MOVE.B D0,MC68230_PORT_C_DATA
0000155C  13FC 0038 00A00019      3482m     MOVE.B #$38,MC68230_PORT_C_DATA
00001564                          3483m     ENDM
00001564                          3484m     WRITE_8 #2,#$4,D0
00001564  13FC 00FF 00A00007      3485m     MOVE.B #$FF,MC68230_PORT_B_DIRECTION
0000156C  103C 0030               3486m     MOVE.B #$30, D0
00001570  0000 0004               3487m     ORI.B #$4,D0
00001574  13C0 00A00019           3488m     MOVE.B D0,MC68230_PORT_C_DATA
0000157A  0200 00EF               3489m     ANDI.B #$EF,D0
0000157E  13FC 0002 00A00013      3490m     MOVE.B #2,MC68230_PORT_B_DATA
00001586  13C0 00A00019           3491m     MOVE.B D0,MC68230_PORT_C_DATA
0000158C  0000 0010               3492m     ORI.B #$10,D0
00001590  13C0 00A00019           3493m     MOVE.B D0,MC68230_PORT_C_DATA
00001596  13FC 0038 00A00019      3494m     MOVE.B #$38,MC68230_PORT_C_DATA
0000159E                          3495m     ENDM
0000159E                          3496m     WRITE_8 #0,#$5,D0   
0000159E  13FC 00FF 00A00007      3497m     MOVE.B #$FF,MC68230_PORT_B_DIRECTION
000015A6  103C 0030               3498m     MOVE.B #$30, D0
000015AA  0000 0005               3499m     ORI.B #$5,D0
000015AE  13C0 00A00019           3500m     MOVE.B D0,MC68230_PORT_C_DATA
000015B4  0200 00EF               3501m     ANDI.B #$EF,D0
000015B8  13FC 0000 00A00013      3502m     MOVE.B #0,MC68230_PORT_B_DATA
000015C0  13C0 00A00019           3503m     MOVE.B D0,MC68230_PORT_C_DATA
000015C6  0000 0010               3504m     ORI.B #$10,D0
000015CA  13C0 00A00019           3505m     MOVE.B D0,MC68230_PORT_C_DATA
000015D0  13FC 0038 00A00019      3506m     MOVE.B #$38,MC68230_PORT_C_DATA
000015D8                          3507m     ENDM
000015D8                          3508m     WRITE_8 #$20,#$7,D0
000015D8  13FC 00FF 00A00007      3509m     MOVE.B #$FF,MC68230_PORT_B_DIRECTION
000015E0  103C 0030               3510m     MOVE.B #$30, D0
000015E4  0000 0007               3511m     ORI.B #$7,D0
000015E8  13C0 00A00019           3512m     MOVE.B D0,MC68230_PORT_C_DATA
000015EE  0200 00EF               3513m     ANDI.B #$EF,D0
000015F2  13FC 0020 00A00013      3514m     MOVE.B #$20,MC68230_PORT_B_DATA
000015FA  13C0 00A00019           3515m     MOVE.B D0,MC68230_PORT_C_DATA
00001600  0000 0010               3516m     ORI.B #$10,D0
00001604  13C0 00A00019           3517m     MOVE.B D0,MC68230_PORT_C_DATA
0000160A  13FC 0038 00A00019      3518m     MOVE.B #$38,MC68230_PORT_C_DATA
00001612                          3519m     ENDM
00001612                          3520      
00001612                          3521  WAIT_NOT_BUSY_AGAIN
00001612                          3522m     READ_STATUS D0,D1
00001612                          3523mm     READ_8 #$7, D0, D1
00001612  13FC 0000 00A00007      3524mm     MOVE.B #0, MC68230_PORT_B_DIRECTION
0000161A  123C 0030               3525mm     MOVE.B #$30, D1
0000161E  0001 0007               3526mm     ORI.B #$7,D1
00001622  13C1 00A00019           3527mm     MOVE.B D1,MC68230_PORT_C_DATA
00001628  0201 00DF               3528mm     ANDI.B #$DF,D1
0000162C  13C1 00A00019           3529mm     MOVE.B D1,MC68230_PORT_C_DATA
00001632  1039 00A00013           3530mm     MOVE.B MC68230_PORT_B_DATA,D0
00001638  0001 0020               3531mm     ORI.B #$20,D1
0000163C  13C1 00A00019           3532mm     MOVE.B D1,MC68230_PORT_C_DATA
00001642  13FC 0038 00A00019      3533mm     MOVE.B #$38,MC68230_PORT_C_DATA
0000164A                          3534mm     ENDM
0000164A                          3535m     ENDM
0000164A  0800 0007               3536      BTST #7,D0
0000164E  66C2                    3537      BNE WAIT_NOT_BUSY_AGAIN
00001650                          3538  
00001650                          3539  WAIT_DRQ
00001650                          3540m     READ_STATUS D0,D1
00001650                          3541mm     READ_8 #$7, D0, D1
00001650  13FC 0000 00A00007      3542mm     MOVE.B #0, MC68230_PORT_B_DIRECTION
00001658  123C 0030               3543mm     MOVE.B #$30, D1
0000165C  0001 0007               3544mm     ORI.B #$7,D1
00001660  13C1 00A00019           3545mm     MOVE.B D1,MC68230_PORT_C_DATA
00001666  0201 00DF               3546mm     ANDI.B #$DF,D1
0000166A  13C1 00A00019           3547mm     MOVE.B D1,MC68230_PORT_C_DATA
00001670  1039 00A00013           3548mm     MOVE.B MC68230_PORT_B_DATA,D0
00001676  0001 0020               3549mm     ORI.B #$20,D1
0000167A  13C1 00A00019           3550mm     MOVE.B D1,MC68230_PORT_C_DATA
00001680  13FC 0038 00A00019      3551mm     MOVE.B #$38,MC68230_PORT_C_DATA
00001688                          3552mm     ENDM
00001688                          3553m     ENDM
00001688  0800 0003               3554      BTST #3,D0
0000168C  67C2                    3555      BEQ WAIT_DRQ
0000168E                          3556  
0000168E  7000                    3557      MOVE.L #0,D0
00001690                          3558m     READ_16 #0,D0,D1
00001690  13FC 0000 00A00007      3559m     MOVE.B #0, MC68230_PORT_B_DIRECTION
00001698  13FC 0000 00A00005      3560m     MOVE.B #0, MC68230_PORT_A_DIRECTION
000016A0  123C 0030               3561m     MOVE.B #$30, D1
000016A4  0001 0000               3562m     ORI.B #0,D1
000016A8  13C1 00A00019           3563m     MOVE.B D1,MC68230_PORT_C_DATA
000016AE  0201 00DF               3564m     ANDI.B #$DF,D1
000016B2  13C1 00A00019           3565m     MOVE.B D1,MC68230_PORT_C_DATA
000016B8  1039 00A00011           3566m     MOVE.B MC68230_PORT_A_DATA,D0
000016BE  E148                    3567m     LSL.W #8,D0
000016C0  1039 00A00013           3568m     MOVE.B MC68230_PORT_B_DATA,D0
000016C6  0001 0020               3569m     ORI.B #$20,D1
000016CA  13C1 00A00019           3570m     MOVE.B D1,MC68230_PORT_C_DATA
000016D0  13FC 0038 00A00019      3571m     MOVE.B #$38,MC68230_PORT_C_DATA
000016D8                          3572m     ENDM
000016D8  E188                    3573      LSL.L #8,D0
000016DA  E188                    3574      LSL.L #8,D0
000016DC                          3575m     READ_16 #0,D0,D1
000016DC  13FC 0000 00A00007      3576m     MOVE.B #0, MC68230_PORT_B_DIRECTION
000016E4  13FC 0000 00A00005      3577m     MOVE.B #0, MC68230_PORT_A_DIRECTION
000016EC  123C 0030               3578m     MOVE.B #$30, D1
000016F0  0001 0000               3579m     ORI.B #0,D1
000016F4  13C1 00A00019           3580m     MOVE.B D1,MC68230_PORT_C_DATA
000016FA  0201 00DF               3581m     ANDI.B #$DF,D1
000016FE  13C1 00A00019           3582m     MOVE.B D1,MC68230_PORT_C_DATA
00001704  1039 00A00011           3583m     MOVE.B MC68230_PORT_A_DATA,D0
0000170A  E148                    3584m     LSL.W #8,D0
0000170C  1039 00A00013           3585m     MOVE.B MC68230_PORT_B_DATA,D0
00001712  0001 0020               3586m     ORI.B #$20,D1
00001716  13C1 00A00019           3587m     MOVE.B D1,MC68230_PORT_C_DATA
0000171C  13FC 0038 00A00019      3588m     MOVE.B #$38,MC68230_PORT_C_DATA
00001724                          3589m     ENDM
00001724                          3590      ;PRINT_REG D0,D3,D4,D5,A2
00001724                          3591      ;PRINT_CRLF D3,A2
00001724  2040                    3592      MOVE.L D0,A0            ; start
00001726                          3593      
00001726  7000                    3594      MOVE.L #0,D0
00001728                          3595m     READ_16 #0,D0,D1
00001728  13FC 0000 00A00007      3596m     MOVE.B #0, MC68230_PORT_B_DIRECTION
00001730  13FC 0000 00A00005      3597m     MOVE.B #0, MC68230_PORT_A_DIRECTION
00001738  123C 0030               3598m     MOVE.B #$30, D1
0000173C  0001 0000               3599m     ORI.B #0,D1
00001740  13C1 00A00019           3600m     MOVE.B D1,MC68230_PORT_C_DATA
00001746  0201 00DF               3601m     ANDI.B #$DF,D1
0000174A  13C1 00A00019           3602m     MOVE.B D1,MC68230_PORT_C_DATA
00001750  1039 00A00011           3603m     MOVE.B MC68230_PORT_A_DATA,D0
00001756  E148                    3604m     LSL.W #8,D0
00001758  1039 00A00013           3605m     MOVE.B MC68230_PORT_B_DATA,D0
0000175E  0001 0020               3606m     ORI.B #$20,D1
00001762  13C1 00A00019           3607m     MOVE.B D1,MC68230_PORT_C_DATA
00001768  13FC 0038 00A00019      3608m     MOVE.B #$38,MC68230_PORT_C_DATA
00001770                          3609m     ENDM
00001770  E188                    3610      LSL.L #8,D0
00001772  E188                    3611      LSL.L #8,D0
00001774                          3612m     READ_16 #0,D0,D1
00001774  13FC 0000 00A00007      3613m     MOVE.B #0, MC68230_PORT_B_DIRECTION
0000177C  13FC 0000 00A00005      3614m     MOVE.B #0, MC68230_PORT_A_DIRECTION
00001784  123C 0030               3615m     MOVE.B #$30, D1
00001788  0001 0000               3616m     ORI.B #0,D1
0000178C  13C1 00A00019           3617m     MOVE.B D1,MC68230_PORT_C_DATA
00001792  0201 00DF               3618m     ANDI.B #$DF,D1
00001796  13C1 00A00019           3619m     MOVE.B D1,MC68230_PORT_C_DATA
0000179C  1039 00A00011           3620m     MOVE.B MC68230_PORT_A_DATA,D0
000017A2  E148                    3621m     LSL.W #8,D0
000017A4  1039 00A00013           3622m     MOVE.B MC68230_PORT_B_DATA,D0
000017AA  0001 0020               3623m     ORI.B #$20,D1
000017AE  13C1 00A00019           3624m     MOVE.B D1,MC68230_PORT_C_DATA
000017B4  13FC 0038 00A00019      3625m     MOVE.B #$38,MC68230_PORT_C_DATA
000017BC                          3626m     ENDM
000017BC                          3627      ;PRINT_REG D0,D3,D4,D5,A2
000017BC                          3628      ;PRINT_CRLF D3,A2
000017BC  2240                    3629      MOVE.L D0,A1            ; end
000017BE                          3630  
000017BE  7000                    3631      MOVE.L #0,D0
000017C0                          3632m     READ_16 #0,D0,D1
000017C0  13FC 0000 00A00007      3633m     MOVE.B #0, MC68230_PORT_B_DIRECTION
000017C8  13FC 0000 00A00005      3634m     MOVE.B #0, MC68230_PORT_A_DIRECTION
000017D0  123C 0030               3635m     MOVE.B #$30, D1
000017D4  0001 0000               3636m     ORI.B #0,D1
000017D8  13C1 00A00019           3637m     MOVE.B D1,MC68230_PORT_C_DATA
000017DE  0201 00DF               3638m     ANDI.B #$DF,D1
000017E2  13C1 00A00019           3639m     MOVE.B D1,MC68230_PORT_C_DATA
000017E8  1039 00A00011           3640m     MOVE.B MC68230_PORT_A_DATA,D0
000017EE  E148                    3641m     LSL.W #8,D0
000017F0  1039 00A00013           3642m     MOVE.B MC68230_PORT_B_DATA,D0
000017F6  0001 0020               3643m     ORI.B #$20,D1
000017FA  13C1 00A00019           3644m     MOVE.B D1,MC68230_PORT_C_DATA
00001800  13FC 0038 00A00019      3645m     MOVE.B #$38,MC68230_PORT_C_DATA
00001808                          3646m     ENDM
00001808  E188                    3647      LSL.L #8,D0
0000180A  E188                    3648      LSL.L #8,D0
0000180C                          3649m     READ_16 #0,D0,D1
0000180C  13FC 0000 00A00007      3650m     MOVE.B #0, MC68230_PORT_B_DIRECTION
00001814  13FC 0000 00A00005      3651m     MOVE.B #0, MC68230_PORT_A_DIRECTION
0000181C  123C 0030               3652m     MOVE.B #$30, D1
00001820  0001 0000               3653m     ORI.B #0,D1
00001824  13C1 00A00019           3654m     MOVE.B D1,MC68230_PORT_C_DATA
0000182A  0201 00DF               3655m     ANDI.B #$DF,D1
0000182E  13C1 00A00019           3656m     MOVE.B D1,MC68230_PORT_C_DATA
00001834  1039 00A00011           3657m     MOVE.B MC68230_PORT_A_DATA,D0
0000183A  E148                    3658m     LSL.W #8,D0
0000183C  1039 00A00013           3659m     MOVE.B MC68230_PORT_B_DATA,D0
00001842  0001 0020               3660m     ORI.B #$20,D1
00001846  13C1 00A00019           3661m     MOVE.B D1,MC68230_PORT_C_DATA
0000184C  13FC 0038 00A00019      3662m     MOVE.B #$38,MC68230_PORT_C_DATA
00001854                          3663m     ENDM
00001854                          3664      ;PRINT_REG D0,D3,D4,D5,A2
00001854                          3665      ;PRINT_CRLF D3,A2
00001854  2440                    3666      MOVE.L D0,A2            ; entry
00001856                          3667  
00001856                          3668m     PRINT_CHAR #'.',D1
00001856                          3669m WAIT_FOR_READY_263                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00001856                 TRUE     3670m     IFEQ DEBUG
00001856  1239 00C00003           3671m         MOVE.B DUART_SRA,D1                         ; READ STATUS REGISTER
0000185C  0801 0002               3672m         BTST #2,D1                                  ; CHECK FOR SPACE TO SEND
00001860  67F4                    3673m         BEQ WAIT_FOR_READY_263                      ; NO SPACE, CHECK AGAIN
00001862  13FC 002E 00C00007      3674m         MOVE.B #'.',DUART_TXA                           ; SEND THE NEXT CHARACTER
0000186A                          3675m     ENDC
0000186A                          3676m 
0000186A                 FALSE    3677m     IFNE DEBUG
0000186A                          3678m     ENDC
0000186A                          3679m 
0000186A                          3680m     ENDM
0000186A                          3681      FOR D7 = #6 TO #255 DO
0000186A  3E3C 0006               3682s     MOVE.W  #6,D7
0000186E  6000 004E               3683s     BRA _20000015
00001872                          3684s _20000014
00001872                          3685m         READ_16 #0,D0,D1    
00001872  13FC 0000 00A00007      3686m     MOVE.B #0, MC68230_PORT_B_DIRECTION
0000187A  13FC 0000 00A00005      3687m     MOVE.B #0, MC68230_PORT_A_DIRECTION
00001882  123C 0030               3688m     MOVE.B #$30, D1
00001886  0001 0000               3689m     ORI.B #0,D1
0000188A  13C1 00A00019           3690m     MOVE.B D1,MC68230_PORT_C_DATA
00001890  0201 00DF               3691m     ANDI.B #$DF,D1
00001894  13C1 00A00019           3692m     MOVE.B D1,MC68230_PORT_C_DATA
0000189A  1039 00A00011           3693m     MOVE.B MC68230_PORT_A_DATA,D0
000018A0  E148                    3694m     LSL.W #8,D0
000018A2  1039 00A00013           3695m     MOVE.B MC68230_PORT_B_DATA,D0
000018A8  0001 0020               3696m     ORI.B #$20,D1
000018AC  13C1 00A00019           3697m     MOVE.B D1,MC68230_PORT_C_DATA
000018B2  13FC 0038 00A00019      3698m     MOVE.B #$38,MC68230_PORT_C_DATA
000018BA                          3699m     ENDM
000018BA  30C0                    3700          MOVE.W D0,(A0)+
000018BC                          3701      ENDF
000018BC  5247                    3702s     ADD.W   #1,D7
000018BE                          3703s _20000015
000018BE  BE7C 00FF               3704s     CMP.W   #255,D7
000018C2  6FAE                    3705s     BLE _20000014
000018C4  5282                    3706      ADD.L #1,D2
000018C6                          3707      
000018C6  2608                    3708      MOVE.L A0,D3
000018C8  2809                    3709      MOVE.L A1,D4
000018CA                          3710  
000018CA                          3711      WHILE D3 <LT> D4 DO
000018CA                          3712s _10000016
000018CA  B644                    3713s     CMP.W   D4,D3
000018CC  6C00 0254               3714s     BGE _10000017
000018D0                          3715  WAIT_NOT_BUSY2
000018D0                          3716m     READ_8 #$7,D0,D1
000018D0  13FC 0000 00A00007      3717m     MOVE.B #0, MC68230_PORT_B_DIRECTION
000018D8  123C 0030               3718m     MOVE.B #$30, D1
000018DC  0001 0007               3719m     ORI.B #$7,D1
000018E0  13C1 00A00019           3720m     MOVE.B D1,MC68230_PORT_C_DATA
000018E6  0201 00DF               3721m     ANDI.B #$DF,D1
000018EA  13C1 00A00019           3722m     MOVE.B D1,MC68230_PORT_C_DATA
000018F0  1039 00A00013           3723m     MOVE.B MC68230_PORT_B_DATA,D0
000018F6  0001 0020               3724m     ORI.B #$20,D1
000018FA  13C1 00A00019           3725m     MOVE.B D1,MC68230_PORT_C_DATA
00001900  13FC 0038 00A00019      3726m     MOVE.B #$38,MC68230_PORT_C_DATA
00001908                          3727m     ENDM
00001908  0800 0007               3728      BTST #7,D0
0000190C  66C2                    3729      BNE WAIT_NOT_BUSY2
0000190E                          3730      
0000190E                          3731m     WRITE_8 #1,#$2,D0       ; read 1 sector - this is important, otherwise the disk transfer doesn't finish
0000190E  13FC 00FF 00A00007      3732m     MOVE.B #$FF,MC68230_PORT_B_DIRECTION
00001916  103C 0030               3733m     MOVE.B #$30, D0
0000191A  0000 0002               3734m     ORI.B #$2,D0
0000191E  13C0 00A00019           3735m     MOVE.B D0,MC68230_PORT_C_DATA
00001924  0200 00EF               3736m     ANDI.B #$EF,D0
00001928  13FC 0001 00A00013      3737m     MOVE.B #1,MC68230_PORT_B_DATA
00001930  13C0 00A00019           3738m     MOVE.B D0,MC68230_PORT_C_DATA
00001936  0000 0010               3739m     ORI.B #$10,D0
0000193A  13C0 00A00019           3740m     MOVE.B D0,MC68230_PORT_C_DATA
00001940  13FC 0038 00A00019      3741m     MOVE.B #$38,MC68230_PORT_C_DATA
00001948                          3742m     ENDM
00001948                          3743m     WRITE_8 D2,#$3,D0       ; block next
00001948  13FC 00FF 00A00007      3744m     MOVE.B #$FF,MC68230_PORT_B_DIRECTION
00001950  103C 0030               3745m     MOVE.B #$30, D0
00001954  0000 0003               3746m     ORI.B #$3,D0
00001958  13C0 00A00019           3747m     MOVE.B D0,MC68230_PORT_C_DATA
0000195E  0200 00EF               3748m     ANDI.B #$EF,D0
00001962  13C2 00A00013           3749m     MOVE.B D2,MC68230_PORT_B_DATA
00001968  13C0 00A00019           3750m     MOVE.B D0,MC68230_PORT_C_DATA
0000196E  0000 0010               3751m     ORI.B #$10,D0
00001972  13C0 00A00019           3752m     MOVE.B D0,MC68230_PORT_C_DATA
00001978  13FC 0038 00A00019      3753m     MOVE.B #$38,MC68230_PORT_C_DATA
00001980                          3754m     ENDM
00001980                          3755m     WRITE_8 #2,#$4,D0       ; skip these to save space
00001980  13FC 00FF 00A00007      3756m     MOVE.B #$FF,MC68230_PORT_B_DIRECTION
00001988  103C 0030               3757m     MOVE.B #$30, D0
0000198C  0000 0004               3758m     ORI.B #$4,D0
00001990  13C0 00A00019           3759m     MOVE.B D0,MC68230_PORT_C_DATA
00001996  0200 00EF               3760m     ANDI.B #$EF,D0
0000199A  13FC 0002 00A00013      3761m     MOVE.B #2,MC68230_PORT_B_DATA
000019A2  13C0 00A00019           3762m     MOVE.B D0,MC68230_PORT_C_DATA
000019A8  0000 0010               3763m     ORI.B #$10,D0
000019AC  13C0 00A00019           3764m     MOVE.B D0,MC68230_PORT_C_DATA
000019B2  13FC 0038 00A00019      3765m     MOVE.B #$38,MC68230_PORT_C_DATA
000019BA                          3766m     ENDM
000019BA                          3767m     WRITE_8 #0,#$5,D0   
000019BA  13FC 00FF 00A00007      3768m     MOVE.B #$FF,MC68230_PORT_B_DIRECTION
000019C2  103C 0030               3769m     MOVE.B #$30, D0
000019C6  0000 0005               3770m     ORI.B #$5,D0
000019CA  13C0 00A00019           3771m     MOVE.B D0,MC68230_PORT_C_DATA
000019D0  0200 00EF               3772m     ANDI.B #$EF,D0
000019D4  13FC 0000 00A00013      3773m     MOVE.B #0,MC68230_PORT_B_DATA
000019DC  13C0 00A00019           3774m     MOVE.B D0,MC68230_PORT_C_DATA
000019E2  0000 0010               3775m     ORI.B #$10,D0
000019E6  13C0 00A00019           3776m     MOVE.B D0,MC68230_PORT_C_DATA
000019EC  13FC 0038 00A00019      3777m     MOVE.B #$38,MC68230_PORT_C_DATA
000019F4                          3778m     ENDM
000019F4                          3779m     WRITE_8 #$20,#$7,D0
000019F4  13FC 00FF 00A00007      3780m     MOVE.B #$FF,MC68230_PORT_B_DIRECTION
000019FC  103C 0030               3781m     MOVE.B #$30, D0
00001A00  0000 0007               3782m     ORI.B #$7,D0
00001A04  13C0 00A00019           3783m     MOVE.B D0,MC68230_PORT_C_DATA
00001A0A  0200 00EF               3784m     ANDI.B #$EF,D0
00001A0E  13FC 0020 00A00013      3785m     MOVE.B #$20,MC68230_PORT_B_DATA
00001A16  13C0 00A00019           3786m     MOVE.B D0,MC68230_PORT_C_DATA
00001A1C  0000 0010               3787m     ORI.B #$10,D0
00001A20  13C0 00A00019           3788m     MOVE.B D0,MC68230_PORT_C_DATA
00001A26  13FC 0038 00A00019      3789m     MOVE.B #$38,MC68230_PORT_C_DATA
00001A2E                          3790m     ENDM
00001A2E                          3791  
00001A2E                          3792  WAIT_NOT_BUSY_AGAIN2
00001A2E                          3793m     READ_STATUS D0,D1
00001A2E                          3794mm     READ_8 #$7, D0, D1
00001A2E  13FC 0000 00A00007      3795mm     MOVE.B #0, MC68230_PORT_B_DIRECTION
00001A36  123C 0030               3796mm     MOVE.B #$30, D1
00001A3A  0001 0007               3797mm     ORI.B #$7,D1
00001A3E  13C1 00A00019           3798mm     MOVE.B D1,MC68230_PORT_C_DATA
00001A44  0201 00DF               3799mm     ANDI.B #$DF,D1
00001A48  13C1 00A00019           3800mm     MOVE.B D1,MC68230_PORT_C_DATA
00001A4E  1039 00A00013           3801mm     MOVE.B MC68230_PORT_B_DATA,D0
00001A54  0001 0020               3802mm     ORI.B #$20,D1
00001A58  13C1 00A00019           3803mm     MOVE.B D1,MC68230_PORT_C_DATA
00001A5E  13FC 0038 00A00019      3804mm     MOVE.B #$38,MC68230_PORT_C_DATA
00001A66                          3805mm     ENDM
00001A66                          3806m     ENDM
00001A66  0800 0007               3807      BTST #7,D0
00001A6A  66C2                    3808      BNE WAIT_NOT_BUSY_AGAIN2
00001A6C                          3809  
00001A6C                          3810  WAIT_DRQ2
00001A6C                          3811m     READ_STATUS D0,D1
00001A6C                          3812mm     READ_8 #$7, D0, D1
00001A6C  13FC 0000 00A00007      3813mm     MOVE.B #0, MC68230_PORT_B_DIRECTION
00001A74  123C 0030               3814mm     MOVE.B #$30, D1
00001A78  0001 0007               3815mm     ORI.B #$7,D1
00001A7C  13C1 00A00019           3816mm     MOVE.B D1,MC68230_PORT_C_DATA
00001A82  0201 00DF               3817mm     ANDI.B #$DF,D1
00001A86  13C1 00A00019           3818mm     MOVE.B D1,MC68230_PORT_C_DATA
00001A8C  1039 00A00013           3819mm     MOVE.B MC68230_PORT_B_DATA,D0
00001A92  0001 0020               3820mm     ORI.B #$20,D1
00001A96  13C1 00A00019           3821mm     MOVE.B D1,MC68230_PORT_C_DATA
00001A9C  13FC 0038 00A00019      3822mm     MOVE.B #$38,MC68230_PORT_C_DATA
00001AA4                          3823mm     ENDM
00001AA4                          3824m     ENDM
00001AA4  0800 0003               3825      BTST #3,D0
00001AA8  67C2                    3826      BEQ WAIT_DRQ2
00001AAA                          3827  
00001AAA                          3828m     PRINT_CHAR #'.',D1
00001AAA                          3829m WAIT_FOR_READY_275                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00001AAA                 TRUE     3830m     IFEQ DEBUG
00001AAA  1239 00C00003           3831m         MOVE.B DUART_SRA,D1                         ; READ STATUS REGISTER
00001AB0  0801 0002               3832m         BTST #2,D1                                  ; CHECK FOR SPACE TO SEND
00001AB4  67F4                    3833m         BEQ WAIT_FOR_READY_275                      ; NO SPACE, CHECK AGAIN
00001AB6  13FC 002E 00C00007      3834m         MOVE.B #'.',DUART_TXA                           ; SEND THE NEXT CHARACTER
00001ABE                          3835m     ENDC
00001ABE                          3836m 
00001ABE                 FALSE    3837m     IFNE DEBUG
00001ABE                          3838m     ENDC
00001ABE                          3839m 
00001ABE                          3840m     ENDM
00001ABE  2043                    3841      MOVE.L D3,A0
00001AC0                          3842      FOR D7 = #$0 TO #255 DO
00001AC0  3E3C 0000               3843s     MOVE.W  #$0,D7
00001AC4  6000 004E               3844s     BRA _20000017
00001AC8                          3845s _20000016
00001AC8                          3846m         READ_16 #0,D0,D1
00001AC8  13FC 0000 00A00007      3847m     MOVE.B #0, MC68230_PORT_B_DIRECTION
00001AD0  13FC 0000 00A00005      3848m     MOVE.B #0, MC68230_PORT_A_DIRECTION
00001AD8  123C 0030               3849m     MOVE.B #$30, D1
00001ADC  0001 0000               3850m     ORI.B #0,D1
00001AE0  13C1 00A00019           3851m     MOVE.B D1,MC68230_PORT_C_DATA
00001AE6  0201 00DF               3852m     ANDI.B #$DF,D1
00001AEA  13C1 00A00019           3853m     MOVE.B D1,MC68230_PORT_C_DATA
00001AF0  1039 00A00011           3854m     MOVE.B MC68230_PORT_A_DATA,D0
00001AF6  E148                    3855m     LSL.W #8,D0
00001AF8  1039 00A00013           3856m     MOVE.B MC68230_PORT_B_DATA,D0
00001AFE  0001 0020               3857m     ORI.B #$20,D1
00001B02  13C1 00A00019           3858m     MOVE.B D1,MC68230_PORT_C_DATA
00001B08  13FC 0038 00A00019      3859m     MOVE.B #$38,MC68230_PORT_C_DATA
00001B10                          3860m     ENDM
00001B10  30C0                    3861          MOVE.W D0,(A0)+
00001B12                          3862      ENDF
00001B12  5247                    3863s     ADD.W   #1,D7
00001B14                          3864s _20000017
00001B14  BE7C 00FF               3865s     CMP.W   #255,D7
00001B18  6FAE                    3866s     BLE _20000016
00001B1A  2608                    3867      MOVE.L A0,D3
00001B1C                          3868          
00001B1C  5282                    3869      ADD.L #1,D2
00001B1E                          3870  
00001B1E                          3871      ENDW
00001B1E  6000 FDAA               3872s     BRA _10000016
00001B22                          3873s _10000017
00001B22                          3874  
00001B22                          3875m     PRINT_CRLF D3,A3
00001B22  47FA 03F4               3876m     LEA CRLF(PC),A3
00001B26                          3877mm     PRINT_STR A3,D3
00001B26                          3878mm LOOP_278
00001B26  0C13 0000               3879mm     CMP.B #NULL,(A3)                                ; 0 -> DONE
00001B2A  6700 0016               3880mm     BEQ EXIT_278
00001B2E                          3881mmm     PRINT_CHAR (A3)+,D3
00001B2E                          3882mmm WAIT_FOR_READY_279                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00001B2E                 TRUE     3883mmm     IFEQ DEBUG
00001B2E  1639 00C00003           3884mmm         MOVE.B DUART_SRA,D3                         ; READ STATUS REGISTER
00001B34  0803 0002               3885mmm         BTST #2,D3                                  ; CHECK FOR SPACE TO SEND
00001B38  67F4                    3886mmm         BEQ WAIT_FOR_READY_279                      ; NO SPACE, CHECK AGAIN
00001B3A  13DB 00C00007           3887mmm         MOVE.B (A3)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00001B40                          3888mmm     ENDC
00001B40                          3889mmm 
00001B40                 FALSE    3890mmm     IFNE DEBUG
00001B40                          3891mmm     ENDC
00001B40                          3892mmm 
00001B40                          3893mmm     ENDM
00001B40  60E4                    3894mm     BRA LOOP_278
00001B42                          3895mm EXIT_278
00001B42                          3896mm     ENDM
00001B42                          3897m     ENDM
00001B42                          3898      
00001B42  2E0A                    3899      MOVE.L A2,D7
00001B44                          3900  
00001B44  6000 E7FE               3901      BRA MAIN_LOOP
00001B48                          3902  
00001B48                          3903  HEX_DIGIT
00001B48  E98F                    3904      LSL.L #4,D7                                         ; add the next digit in the next 4 bits
00001B4A                          3905m     HEX2BIN D2,D2,A0
00001B4A  41FA 03A1               3906m     LEA HEX2BIN_LUT(PC),A0                          ; LOAD THE LOOKUP TABLE
00001B4E  0402 0030               3907m     SUB.B #'0',D2                                   ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
00001B52  C4BC 000000FF           3908m     AND.L #$FF,D2                                   ; IGNORE THE TOP 3 BYTES
00001B58  1430 2000               3909m     MOVE.B 0(A0,D2),D2                              ; USE THAT AS AN INDEX INTO THE LUT   
00001B5C                          3910m     ENDM
00001B5C  8E02                    3911      OR.B D2,D7  
00001B5E  6000 E804               3912      BRA GET_INPUT
00001B62                          3913  
00001B62                          3914  ; exceptions    
00001B62                          3915  BUS_ERROR_HANDLER
00001B62                          3916  
00001B62  41FA 03D9               3917      LEA BUS_ERROR(PC),A0
00001B66                          3918m     PRINT_STR A0,D1
00001B66                          3919m LOOP_281
00001B66  0C10 0000               3920m     CMP.B #NULL,(A0)                                ; 0 -> DONE
00001B6A  6700 0016               3921m     BEQ EXIT_281
00001B6E                          3922mm     PRINT_CHAR (A0)+,D1
00001B6E                          3923mm WAIT_FOR_READY_282                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00001B6E                 TRUE     3924mm     IFEQ DEBUG
00001B6E  1239 00C00003           3925mm         MOVE.B DUART_SRA,D1                         ; READ STATUS REGISTER
00001B74  0801 0002               3926mm         BTST #2,D1                                  ; CHECK FOR SPACE TO SEND
00001B78  67F4                    3927mm         BEQ WAIT_FOR_READY_282                      ; NO SPACE, CHECK AGAIN
00001B7A  13D8 00C00007           3928mm         MOVE.B (A0)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00001B80                          3929mm     ENDC
00001B80                          3930mm 
00001B80                 FALSE    3931mm     IFNE DEBUG
00001B80                          3932mm     ENDC
00001B80                          3933mm 
00001B80                          3934mm     ENDM
00001B80  60E4                    3935m     BRA LOOP_281
00001B82                          3936m EXIT_281
00001B82                          3937m     ENDM
00001B82                          3938  
00001B82  7000                    3939      MOVE.L #0,D0
00001B84  3017                    3940      MOVE.W (SP),D0
00001B86                          3941  
00001B86  0800 0004               3942      BTST #4,D0
00001B8A  6700 0026               3943      BEQ WRITE
00001B8E                          3944      
00001B8E  41FA 03C2               3945      LEA READING(PC),A0
00001B92                          3946m     PRINT_STR A0,D1
00001B92                          3947m LOOP_283
00001B92  0C10 0000               3948m     CMP.B #NULL,(A0)                                ; 0 -> DONE
00001B96  6700 0016               3949m     BEQ EXIT_283
00001B9A                          3950mm     PRINT_CHAR (A0)+,D1
00001B9A                          3951mm WAIT_FOR_READY_284                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00001B9A                 TRUE     3952mm     IFEQ DEBUG
00001B9A  1239 00C00003           3953mm         MOVE.B DUART_SRA,D1                         ; READ STATUS REGISTER
00001BA0  0801 0002               3954mm         BTST #2,D1                                  ; CHECK FOR SPACE TO SEND
00001BA4  67F4                    3955mm         BEQ WAIT_FOR_READY_284                      ; NO SPACE, CHECK AGAIN
00001BA6  13D8 00C00007           3956mm         MOVE.B (A0)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00001BAC                          3957mm     ENDC
00001BAC                          3958mm 
00001BAC                 FALSE    3959mm     IFNE DEBUG
00001BAC                          3960mm     ENDC
00001BAC                          3961mm 
00001BAC                          3962mm     ENDM
00001BAC  60E4                    3963m     BRA LOOP_283
00001BAE                          3964m EXIT_283
00001BAE                          3965m     ENDM
00001BAE                          3966  
00001BAE  6000 0022               3967      BRA CONTINUE    
00001BB2                          3968  WRITE
00001BB2  41FA 03A7               3969      LEA WRITING(PC),A0
00001BB6                          3970m     PRINT_STR A0,D1
00001BB6                          3971m LOOP_285
00001BB6  0C10 0000               3972m     CMP.B #NULL,(A0)                                ; 0 -> DONE
00001BBA  6700 0016               3973m     BEQ EXIT_285
00001BBE                          3974mm     PRINT_CHAR (A0)+,D1
00001BBE                          3975mm WAIT_FOR_READY_286                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00001BBE                 TRUE     3976mm     IFEQ DEBUG
00001BBE  1239 00C00003           3977mm         MOVE.B DUART_SRA,D1                         ; READ STATUS REGISTER
00001BC4  0801 0002               3978mm         BTST #2,D1                                  ; CHECK FOR SPACE TO SEND
00001BC8  67F4                    3979mm         BEQ WAIT_FOR_READY_286                      ; NO SPACE, CHECK AGAIN
00001BCA  13D8 00C00007           3980mm         MOVE.B (A0)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00001BD0                          3981mm     ENDC
00001BD0                          3982mm 
00001BD0                 FALSE    3983mm     IFNE DEBUG
00001BD0                          3984mm     ENDC
00001BD0                          3985mm 
00001BD0                          3986mm     ENDM
00001BD0  60E4                    3987m     BRA LOOP_285
00001BD2                          3988m EXIT_285
00001BD2                          3989m     ENDM
00001BD2                          3990  
00001BD2                          3991  CONTINUE
00001BD2  222F 0002               3992      MOVE.L 2(SP),D1
00001BD6                          3993m     PRINT_REG D1,D2,D3,D4,A0
00001BD6  41FA 0346               3994m     LEA OX(PC),A0
00001BDA                          3995mm     PRINT_STR A0,D2
00001BDA                          3996mm LOOP_288
00001BDA  0C10 0000               3997mm     CMP.B #NULL,(A0)                                ; 0 -> DONE
00001BDE  6700 0016               3998mm     BEQ EXIT_288
00001BE2                          3999mmm     PRINT_CHAR (A0)+,D2
00001BE2                          4000mmm WAIT_FOR_READY_289                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00001BE2                 TRUE     4001mmm     IFEQ DEBUG
00001BE2  1439 00C00003           4002mmm         MOVE.B DUART_SRA,D2                         ; READ STATUS REGISTER
00001BE8  0802 0002               4003mmm         BTST #2,D2                                  ; CHECK FOR SPACE TO SEND
00001BEC  67F4                    4004mmm         BEQ WAIT_FOR_READY_289                      ; NO SPACE, CHECK AGAIN
00001BEE  13D8 00C00007           4005mmm         MOVE.B (A0)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00001BF4                          4006mmm     ENDC
00001BF4                          4007mmm 
00001BF4                 FALSE    4008mmm     IFNE DEBUG
00001BF4                          4009mmm     ENDC
00001BF4                          4010mmm 
00001BF4                          4011mmm     ENDM
00001BF4  60E4                    4012mm     BRA LOOP_288
00001BF6                          4013mm EXIT_288
00001BF6                          4014mm     ENDM
00001BF6  7807                    4015m     MOVE.L #7,D4                                    ; LOOP ROUND ALL 8 HEX CHARACTERS OF 4 BITS EACH
00001BF8                          4016m LOOP_287
00001BF8                          4017mm     BIN2HEX D1,D3,A0
00001BF8  41FA 02E3               4018mm     LEA BIN2HEX_LUT(PC),A0                          ; LOAD THE LOOKUP TABLE
00001BFC  E999                    4019mm     ROL.L #4,D1                                     ; SHIFT THE TOP 4 BITS DOWN TO BOTTOM OF THE REGISTER THE AND MASK OFF EVERYTHING ELSE
00001BFE  1601                    4020mm     MOVE.B D1,D3
00001C00  0283 0000000F           4021mm     ANDI.L #$F,D3
00001C06  1630 3000               4022mm     MOVE.B 0(A0,D3),D3                              ; USE THAT AS AN INDEX INTO THE LUT
00001C0A                          4023mm     ENDM
00001C0A                          4024mm     PRINT_CHAR D3,D2
00001C0A                          4025mm WAIT_FOR_READY_291                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00001C0A                 TRUE     4026mm     IFEQ DEBUG
00001C0A  1439 00C00003           4027mm         MOVE.B DUART_SRA,D2                         ; READ STATUS REGISTER
00001C10  0802 0002               4028mm         BTST #2,D2                                  ; CHECK FOR SPACE TO SEND
00001C14  67F4                    4029mm         BEQ WAIT_FOR_READY_291                      ; NO SPACE, CHECK AGAIN
00001C16  13C3 00C00007           4030mm         MOVE.B D3,DUART_TXA                         ; SEND THE NEXT CHARACTER
00001C1C                          4031mm     ENDC
00001C1C                          4032mm 
00001C1C                 FALSE    4033mm     IFNE DEBUG
00001C1C                          4034mm     ENDC
00001C1C                          4035mm 
00001C1C                          4036mm     ENDM
00001C1C  57CC FFDA               4037m     DBEQ D4,LOOP_287
00001C20                          4038m     ENDM
00001C20                          4039  
00001C20  41FA 0342               4040      LEA FROM(PC),A0
00001C24                          4041m     PRINT_STR A0,D0
00001C24                          4042m LOOP_292
00001C24  0C10 0000               4043m     CMP.B #NULL,(A0)                                ; 0 -> DONE
00001C28  6700 0016               4044m     BEQ EXIT_292
00001C2C                          4045mm     PRINT_CHAR (A0)+,D0
00001C2C                          4046mm WAIT_FOR_READY_293                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00001C2C                 TRUE     4047mm     IFEQ DEBUG
00001C2C  1039 00C00003           4048mm         MOVE.B DUART_SRA,D0                         ; READ STATUS REGISTER
00001C32  0800 0002               4049mm         BTST #2,D0                                  ; CHECK FOR SPACE TO SEND
00001C36  67F4                    4050mm         BEQ WAIT_FOR_READY_293                      ; NO SPACE, CHECK AGAIN
00001C38  13D8 00C00007           4051mm         MOVE.B (A0)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00001C3E                          4052mm     ENDC
00001C3E                          4053mm 
00001C3E                 FALSE    4054mm     IFNE DEBUG
00001C3E                          4055mm     ENDC
00001C3E                          4056mm 
00001C3E                          4057mm     ENDM
00001C3E  60E4                    4058m     BRA LOOP_292
00001C40                          4059m EXIT_292
00001C40                          4060m     ENDM
00001C40                          4061  
00001C40  222F 000A               4062      MOVE.L 10(SP),D1
00001C44                          4063m     PRINT_REG D1,D2,D3,D4,A0
00001C44  41FA 02D8               4064m     LEA OX(PC),A0
00001C48                          4065mm     PRINT_STR A0,D2
00001C48                          4066mm LOOP_295
00001C48  0C10 0000               4067mm     CMP.B #NULL,(A0)                                ; 0 -> DONE
00001C4C  6700 0016               4068mm     BEQ EXIT_295
00001C50                          4069mmm     PRINT_CHAR (A0)+,D2
00001C50                          4070mmm WAIT_FOR_READY_296                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00001C50                 TRUE     4071mmm     IFEQ DEBUG
00001C50  1439 00C00003           4072mmm         MOVE.B DUART_SRA,D2                         ; READ STATUS REGISTER
00001C56  0802 0002               4073mmm         BTST #2,D2                                  ; CHECK FOR SPACE TO SEND
00001C5A  67F4                    4074mmm         BEQ WAIT_FOR_READY_296                      ; NO SPACE, CHECK AGAIN
00001C5C  13D8 00C00007           4075mmm         MOVE.B (A0)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00001C62                          4076mmm     ENDC
00001C62                          4077mmm 
00001C62                 FALSE    4078mmm     IFNE DEBUG
00001C62                          4079mmm     ENDC
00001C62                          4080mmm 
00001C62                          4081mmm     ENDM
00001C62  60E4                    4082mm     BRA LOOP_295
00001C64                          4083mm EXIT_295
00001C64                          4084mm     ENDM
00001C64  7807                    4085m     MOVE.L #7,D4                                    ; LOOP ROUND ALL 8 HEX CHARACTERS OF 4 BITS EACH
00001C66                          4086m LOOP_294
00001C66                          4087mm     BIN2HEX D1,D3,A0
00001C66  41FA 0275               4088mm     LEA BIN2HEX_LUT(PC),A0                          ; LOAD THE LOOKUP TABLE
00001C6A  E999                    4089mm     ROL.L #4,D1                                     ; SHIFT THE TOP 4 BITS DOWN TO BOTTOM OF THE REGISTER THE AND MASK OFF EVERYTHING ELSE
00001C6C  1601                    4090mm     MOVE.B D1,D3
00001C6E  0283 0000000F           4091mm     ANDI.L #$F,D3
00001C74  1630 3000               4092mm     MOVE.B 0(A0,D3),D3                              ; USE THAT AS AN INDEX INTO THE LUT
00001C78                          4093mm     ENDM
00001C78                          4094mm     PRINT_CHAR D3,D2
00001C78                          4095mm WAIT_FOR_READY_298                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00001C78                 TRUE     4096mm     IFEQ DEBUG
00001C78  1439 00C00003           4097mm         MOVE.B DUART_SRA,D2                         ; READ STATUS REGISTER
00001C7E  0802 0002               4098mm         BTST #2,D2                                  ; CHECK FOR SPACE TO SEND
00001C82  67F4                    4099mm         BEQ WAIT_FOR_READY_298                      ; NO SPACE, CHECK AGAIN
00001C84  13C3 00C00007           4100mm         MOVE.B D3,DUART_TXA                         ; SEND THE NEXT CHARACTER
00001C8A                          4101mm     ENDC
00001C8A                          4102mm 
00001C8A                 FALSE    4103mm     IFNE DEBUG
00001C8A                          4104mm     ENDC
00001C8A                          4105mm 
00001C8A                          4106mm     ENDM
00001C8A  57CC FFDA               4107m     DBEQ D4,LOOP_294
00001C8E                          4108m     ENDM
00001C8E                          4109m     PRINT_CRLF D0,A0
00001C8E  41FA 0288               4110m     LEA CRLF(PC),A0
00001C92                          4111mm     PRINT_STR A0,D0
00001C92                          4112mm LOOP_300
00001C92  0C10 0000               4113mm     CMP.B #NULL,(A0)                                ; 0 -> DONE
00001C96  6700 0016               4114mm     BEQ EXIT_300
00001C9A                          4115mmm     PRINT_CHAR (A0)+,D0
00001C9A                          4116mmm WAIT_FOR_READY_301                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00001C9A                 TRUE     4117mmm     IFEQ DEBUG
00001C9A  1039 00C00003           4118mmm         MOVE.B DUART_SRA,D0                         ; READ STATUS REGISTER
00001CA0  0800 0002               4119mmm         BTST #2,D0                                  ; CHECK FOR SPACE TO SEND
00001CA4  67F4                    4120mmm         BEQ WAIT_FOR_READY_301                      ; NO SPACE, CHECK AGAIN
00001CA6  13D8 00C00007           4121mmm         MOVE.B (A0)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00001CAC                          4122mmm     ENDC
00001CAC                          4123mmm 
00001CAC                 FALSE    4124mmm     IFNE DEBUG
00001CAC                          4125mmm     ENDC
00001CAC                          4126mmm 
00001CAC                          4127mmm     ENDM
00001CAC  60E4                    4128mm     BRA LOOP_300
00001CAE                          4129mm EXIT_300
00001CAE                          4130mm     ENDM
00001CAE                          4131m     ENDM
00001CAE                          4132      
00001CAE  207C 00000004           4133      MOVE.L #4,A0
00001CB4  4ED0                    4134      JMP (A0)
00001CB6                          4135          
00001CB6                          4136  ILLEGAL_HANDLER
00001CB6  13FC 0007 00E00001      4137      MOVE.B #7,DISPLAY   
00001CBE                          4138      
00001CBE  207C 00000004           4139      MOVE.L #4,A0
00001CC4  4ED0                    4140      JMP (A0)
00001CC6                          4141          
00001CC6                          4142  UNHANDLED_HANDLER
00001CC6  41FA 02A3               4143      LEA UNHANDLED(PC),A0
00001CCA  4EF9 00001CEE           4144      JMP PRINTIT_RTE
00001CD0                          4145      
00001CD0                          4146  UNINITIALISED_HANDLER
00001CD0  41FA 02AF               4147      LEA UNINITIALISED(PC),A0
00001CD4  4EF9 00001CEE           4148      JMP PRINTIT_RTE
00001CDA                          4149  
00001CDA                          4150  TICK_HANDLER
00001CDA  1039 00C0001F           4151      MOVE.B DUART_RESET_OPR,D0
00001CE0  41FA 0254               4152      LEA TICK(PC),A0
00001CE4  4EF9 00001CEE           4153      JMP PRINTIT_RTE
00001CEA                          4154  
00001CEA                          4155  SPURIOUS_HANDLER
00001CEA  41FA 02B5               4156      LEA SPURIOUS(PC),A0
00001CEE                          4157  PRINTIT_RTE
00001CEE                          4158m     PRINT_STR A0,D1
00001CEE                          4159m LOOP_302
00001CEE  0C10 0000               4160m     CMP.B #NULL,(A0)                                ; 0 -> DONE
00001CF2  6700 0016               4161m     BEQ EXIT_302
00001CF6                          4162mm     PRINT_CHAR (A0)+,D1
00001CF6                          4163mm WAIT_FOR_READY_303                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00001CF6                 TRUE     4164mm     IFEQ DEBUG
00001CF6  1239 00C00003           4165mm         MOVE.B DUART_SRA,D1                         ; READ STATUS REGISTER
00001CFC  0801 0002               4166mm         BTST #2,D1                                  ; CHECK FOR SPACE TO SEND
00001D00  67F4                    4167mm         BEQ WAIT_FOR_READY_303                      ; NO SPACE, CHECK AGAIN
00001D02  13D8 00C00007           4168mm         MOVE.B (A0)+,DUART_TXA                          ; SEND THE NEXT CHARACTER
00001D08                          4169mm     ENDC
00001D08                          4170mm 
00001D08                 FALSE    4171mm     IFNE DEBUG
00001D08                          4172mm     ENDC
00001D08                          4173mm 
00001D08                          4174mm     ENDM
00001D08  60E4                    4175m     BRA LOOP_302
00001D0A                          4176m EXIT_302
00001D0A                          4177m     ENDM
00001D0A  4E73                    4178      RTE 
00001D0C                          4179      
00001D0C  FFFF FFFF               4180      SIMHALT                                             ; halt simulator
00001D10                          4181  
00001D10                          4182  ; strings
00001D10= 50 72 65 73 73 20 ...   4183  HELPPROMPT DC.B 'Press ? for help',CR,LF,NULL
00001D23= 5B 3F 5D 09 09 09 ...   4184  HELP    DC.B '[?]',TAB,TAB,TAB,'help',CR,LF
00001D2F= 5B 76 5D 09 09 09 ...   4185          DC.B '[v]',TAB,TAB,TAB,'version',CR,LF
00001D3E= 78 78 78 78 78 78 ...   4186          DC.B 'xxxxxxxx[r]',TAB,TAB,'read long',CR,LF
00001D56= 78 78 78 78 78 78 ...   4187          DC.B 'xxxxxxxx[w]xxxxxxxx',TAB,'write long',CR,LF
00001D76= 78 78 78 78 78 78 ...   4188          DC.B 'xxxxxxxx[s]',TAB,TAB,'download S records',CR,LF
00001D97= 78 78 78 78 78 78 ...   4189          DC.B 'xxxxxxxx[g]',TAB,TAB,'go',CR,LF
00001DA8= 5B 7A 5D 09 09 09 ...   4190          DC.B '[z]',TAB,TAB,TAB,'zap memory',CR,LF
00001DBA= 78 78 78 78 78 78 ...   4191          DC.B 'xxxxxxxx[l]xxxxxxxx',TAB,'load to EEPROM',CR,LF
00001DDE= 78 78 78 78 78 78 ...   4192          DC.B 'xxxxxxxx[p]xxxxxxxx',TAB,'patch EEPROM',CR,LF
00001E00= 23 09 09 09 77 72 ...   4193          DC.B '#',TAB,TAB,TAB,'write protect EEPROM',CR,LF
00001E1A= 5B 78 5D 09 09 09 ...   4194          DC.B '[x]',TAB,TAB,TAB,'print registers',CR,LF
00001E31= 5B 69 5D 09 09 09 ...   4195          DC.B '[i]',TAB,TAB,TAB,'enable interrupts',CR,LF
00001E4A= 5B 6F 5D 09 09 09 ...   4196          DC.B '[o]',TAB,TAB,TAB,'disable interrupts',CR,LF
00001E64= 5B 62 5D 09 09 09 ...   4197          DC.B '[b]',TAB,TAB,TAB,'boot from disk',CR,LF,NULL
00001E7B= 48 75 68 3F 0D 0A 00    4198  HUH  DC.B 'Huh?',CR,LF,NULL
00001E82= 20 53 20 72 65 63 ...   4199  READ    DC.B ' S records read, start address = ',NULL
00001EA4= 57 3A 20 55 6E 6B ...   4200  UNREC   DC.B 'W: Unknown Srec type: ',NULL
00001EBB= 21 20 43 53 20 66 ...   4201  CS_FAILURE  DC.B '! CS failure at ',NULL
00001ECC= 21 20 52 41 4D 20 ...   4202  RAM_ERROR   DC.B '! RAM error at: ',NULL
00001EDD= 30 31 32 33 34 35 ...   4203  BIN2HEX_LUT DC.B '0123456789ABCDEF'
00001EED= 00 01 02 03 04 05 ...   4204  HEX2BIN_LUT DC.B 0,1,2,3,4,5,6,7,8,9,0,0,0,0,0,0,0,$A,$B,$C,$D,$E,$F
00001F04= 4C 6F 61 64 69 6E ...   4205  LOADING DC.B 'Loading EEPROM...',CR,LF,NULL
00001F18= 0D 0A 00                4206  CRLF    DC.B CR,LF,NULL
00001F1B= 3E 20 00                4207  PROMPT  DC.B '> ',NULL
00001F1E= 30 78 00                4208  ox      DC.B '0x',NULL
00001F21= 20 2D 3E 20 00          4209  to      DC.B ' -> ',NULL
00001F26= 20 66 6F 72 20 00       4210  for     DC.B ' for ',NULL
00001F2C= 53 50 3A 20 00          4211  STACK_POINTER DC.B 'SP: ',NULL
00001F31= 53 52 3A 20 00          4212  STATUS_REGISTER DC.B 'SR: ',NULL
00001F36= 74 69 63 6B 0D 0A 00    4213  TICK DC.B 'tick',CR,LF,NULL
00001F3D= 2A 20 42 75 73 2F ...   4214  BUS_ERROR DC.B '* Bus/address error ',NULL
00001F52= 72 65 61 64 69 6E ...   4215  READING DC.B 'reading ',NULL
00001F5B= 77 72 69 74 69 6E ...   4216  WRITING DC.B 'writing ',NULL
00001F64= 20 66 72 6F 6D 20 00    4217  FROM DC.B ' from ',NULL
00001F6B= 2A 20 55 6E 68 61 ...   4218  UNHANDLED DC.B '* Unhandled interrupt',NULL
00001F81= 2A 20 20 55 6E 69 ...   4219  UNINITIALISED DC.B '*  Unitialised interrupt vector',NULL
00001FA1= 2A 20 53 70 75 72 ...   4220  SPURIOUS DC.B '* Spurious interrupt',NULL
00001FB6= 4D 44 46 2D 6D 6F ...   4221  VERSION DC.B 'MDF-mon V1.134 (16/05/2021)',CR,LF,NULL   ; this is the last line on purpose, so if it prints, we can be sure we got it all
00001FD4= 00                      4222  END     DC.B 0
00001FD5                          4223      END START                                           ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
B                   1432
BIN2HEX             0
BIN2HEX_LUT         1EDD
BUS_ERROR           1F3D
BUS_ERROR_HANDLER   1B62
CONTINUE            1BD2
CONTINUE_113        B34
CONTINUE_54         610
CONTINUE_57         660
CONTINUE_61         6B6
CONTINUE_69         76A
CONTINUE_74         7DC
CONTINUE_79         858
CONTINUE_84         8D6
CONTINUE_89         95E
CONTINUE_94         9D0
CONTINUE_99         A42
CR                  D
CRLF                1F18
CS_FAILURE          1EBB
DEBUG               0
DISPLAY             E00001
DISPLAY_            0
DISPLAY_BASE        E00000
DOWNLOAD            734
DOWNLOAD_BYTE       AA4
DOWNLOAD_DONE       C3E
DUART_ACR           C00009
DUART_ACR_          4
DUART_BASE          C00000
DUART_CRA           C00005
DUART_CRA_          2
DUART_CRB           C00015
DUART_CRB_          A
DUART_CSRA          C00003
DUART_CSRA_         1
DUART_CSRB          C00013
DUART_CSRB_         9
DUART_CTLR          C0000F
DUART_CTLR_         7
DUART_CTUR          C0000D
DUART_CTUR_         6
DUART_IMR           C0000B
DUART_IMR_          5
DUART_IVR           C00019
DUART_IVR_          C
DUART_MRA           C00001
DUART_MRA_          0
DUART_MRB           C00011
DUART_MRB_          8
DUART_OPCR          C0001B
DUART_OPCR_         D
DUART_RESET_OPR     C0001F
DUART_RESET_OPR_    F
DUART_RXA           C00007
DUART_RXA_          3
DUART_RXB           C00017
DUART_RXB_          B
DUART_SET_OPR       C0001D
DUART_SET_OPR_      E
DUART_SRA           C00003
DUART_SRA_          1
DUART_SRB           C00013
DUART_SRB_          9
DUART_TXA           C00007
DUART_TXA_          3
DUART_TXB           C00017
DUART_TXB_          B
END                 1FD4
EXIT_10             288
EXIT_104            AB4
EXIT_106            AD4
EXIT_110            B06
EXIT_118            B9C
EXIT_120            BC4
EXIT_123            BE4
EXIT_128            C2E
EXIT_131            C5E
EXIT_135            CA8
EXIT_138            CCA
EXIT_143            D14
EXIT_145            D90
EXIT_148            DB4
EXIT_15             2D2
EXIT_153            DFE
EXIT_160            E90
EXIT_163            F00
EXIT_165            F20
EXIT_168            F42
EXIT_17             2F2
EXIT_172            F8C
EXIT_175            FAE
EXIT_179            FF8
EXIT_182            1018
EXIT_187            1062
EXIT_20             312
EXIT_202            1184
EXIT_205            11E8
EXIT_208            1208
EXIT_212            1252
EXIT_215            1274
EXIT_22             364
EXIT_220            12BE
EXIT_224            1300
EXIT_227            1322
EXIT_232            136C
EXIT_234            138C
EXIT_237            13AE
EXIT_242            13F8
EXIT_278            1B42
EXIT_28             3F0
EXIT_281            1B82
EXIT_283            1BAE
EXIT_285            1BD2
EXIT_288            1BF6
EXIT_292            1C40
EXIT_295            1C64
EXIT_30             468
EXIT_300            1CAE
EXIT_302            1D0A
EXIT_32             494
EXIT_35             4BE
EXIT_45             56C
EXIT_5              240
EXIT_52             5E2
EXIT_66             726
EXIT_7              260
FOR                 1F26
FROM                1F64
G                   D18
GET_INPUT           364
H                   46C
HASH                141C
HELP                1D23
HELPPROMPT          1D10
HEX2BIN             10B
HEX2BIN_LUT         1EED
HEX_DIGIT           1B48
HUH                 1E7B
I                   13FC
ILLEGAL_HANDLER     1CB6
L                   E0E
LF                  A
LOADING             1F04
LOOP_10             26C
LOOP_104            A98
LOOP_106            AB8
LOOP_110            AEA
LOOP_118            B80
LOOP_120            BA8
LOOP_122            BE6
LOOP_123            BC8
LOOP_128            C12
LOOP_130            C60
LOOP_131            C42
LOOP_135            C8C
LOOP_137            CCC
LOOP_138            CAE
LOOP_143            CF8
LOOP_145            D74
LOOP_147            DB6
LOOP_148            D98
LOOP_15             2B6
LOOP_153            DE2
LOOP_160            E74
LOOP_163            EE4
LOOP_165            F04
LOOP_167            F44
LOOP_168            F26
LOOP_17             2D6
LOOP_172            F70
LOOP_174            FB0
LOOP_175            F92
LOOP_179            FDC
LOOP_181            101A
LOOP_182            FFC
LOOP_187            1046
LOOP_20             2F6
LOOP_202            1168
LOOP_205            11CC
LOOP_207            120A
LOOP_208            11EC
LOOP_212            1236
LOOP_214            1276
LOOP_215            1258
LOOP_22             348
LOOP_220            12A2
LOOP_224            12E4
LOOP_226            1324
LOOP_227            1306
LOOP_232            1350
LOOP_234            1370
LOOP_236            13B0
LOOP_237            1392
LOOP_242            13DC
LOOP_278            1B26
LOOP_28             3D4
LOOP_281            1B66
LOOP_283            1B92
LOOP_285            1BB6
LOOP_287            1BF8
LOOP_288            1BDA
LOOP_292            1C24
LOOP_294            1C66
LOOP_295            1C48
LOOP_30             44C
LOOP_300            1C92
LOOP_302            1CEE
LOOP_32             478
LOOP_34             4C0
LOOP_35             4A2
LOOP_45             550
LOOP_5              224
LOOP_52             5C6
LOOP_66             70A
LOOP_7              244
LOOP_9              28A
MAIN_LOOP           344
MC68230_BASE        A00000
MC68230_GENERAL_CONTROL  A00001
MC68230_GENERAL_CONTROL_  0
MC68230_INTERRUPT_VECTOR  A0000B
MC68230_INTERRUPT_VECTOR_  5
MC68230_PORT_A_ALTERNATE  A00015
MC68230_PORT_A_ALTERNATE_  A
MC68230_PORT_A_CONTROL  A0000D
MC68230_PORT_A_CONTROL_  6
MC68230_PORT_A_DATA  A00011
MC68230_PORT_A_DATA_  8
MC68230_PORT_A_DIRECTION  A00005
MC68230_PORT_A_DIRECTION_  2
MC68230_PORT_B_ALTERNATE  A00017
MC68230_PORT_B_ALTERNATE_  B
MC68230_PORT_B_CONTROL  A0000F
MC68230_PORT_B_CONTROL_  7
MC68230_PORT_B_DATA  A00013
MC68230_PORT_B_DATA_  9
MC68230_PORT_B_DIRECTION  A00007
MC68230_PORT_B_DIRECTION_  3
MC68230_PORT_C_DATA  A00019
MC68230_PORT_C_DATA_  C
MC68230_PORT_C_DIRECTION  A00009
MC68230_PORT_C_DIRECTION_  4
MC68230_SERVICE_REQUEST  A00003
MC68230_SERVICE_REQUEST_  1
MC68230_STATUS      A0001B
MC68230_STATUS_     D
NULL                0
O                   140C
OX                  1F1E
P                   1110
PRINTIT             478
PRINTIT_RTE         1CEE
PRINT_CHAR          203
PRINT_CRLF          3A0
PRINT_REG           438
PRINT_STR           3CB
PROGRAM             C4D
PROGRAM_VECTOR      CE4
PROMPT              1F1B
PROTECT             A40
R                   498
RAM                 200000
RAM_ERROR           1ECC
READ                1E82
READING             1F52
READ_16             FA0
READ_8              D63
READ_CHAR           62D
READ_STATUS         F84
RESET               4
ROM                 0
S                   5EC
SPURIOUS            1FA1
SPURIOUS_HANDLER    1CEA
STACK               0
STACK_ADDRESS       2E0000
STACK_POINTER       1F2C
START               104
STATUS_REGISTER     1F31
TAB                 9
TICK                1F36
TICK_HANDLER        1CDA
TO                  1F21
UNHANDLED           1F6B
UNHANDLED_HANDLER   1CC6
UNINITIALISED       1F81
UNINITIALISED_HANDLER  1CD0
UNPROTECT           979
UNREC               1EA4
USER                100
V                   474
VECS                8
VERSION             1FB6
W                   570
WAIT_CHAR           4E9
WAIT_DRIVE_READY    1474
WAIT_DRQ            1650
WAIT_DRQ2           1A6C
WAIT_FOR_COMPLETE_189  1074
WAIT_FOR_COMPLETE_191  1096
WAIT_FOR_COMPLETE_192  10A8
WAIT_FOR_COMPLETE_194  10D6
WAIT_FOR_COMPLETE_195  10E8
WAIT_FOR_COMPLETE_222  12C0
WAIT_FOR_READY_1    1CE
WAIT_FOR_READY_101  A5A
WAIT_FOR_READY_105  AA0
WAIT_FOR_READY_107  AC0
WAIT_FOR_READY_108  AD4
WAIT_FOR_READY_11   274
WAIT_FOR_READY_111  AF2
WAIT_FOR_READY_113  B18
WAIT_FOR_READY_115  B4C
WAIT_FOR_READY_119  B88
WAIT_FOR_READY_121  BB0
WAIT_FOR_READY_124  BD0
WAIT_FOR_READY_126  BF8
WAIT_FOR_READY_129  C1A
WAIT_FOR_READY_13   29C
WAIT_FOR_READY_132  C4A
WAIT_FOR_READY_134  C72
WAIT_FOR_READY_136  C94
WAIT_FOR_READY_139  CB6
WAIT_FOR_READY_141  CDE
WAIT_FOR_READY_144  D00
WAIT_FOR_READY_146  D7C
WAIT_FOR_READY_149  DA0
WAIT_FOR_READY_151  DC8
WAIT_FOR_READY_154  DEA
WAIT_FOR_READY_155  E1C
WAIT_FOR_READY_157  E36
WAIT_FOR_READY_16   2BE
WAIT_FOR_READY_161  E7C
WAIT_FOR_READY_164  EEC
WAIT_FOR_READY_166  F0C
WAIT_FOR_READY_169  F2E
WAIT_FOR_READY_171  F56
WAIT_FOR_READY_173  F78
WAIT_FOR_READY_176  F9A
WAIT_FOR_READY_178  FC2
WAIT_FOR_READY_18   2DE
WAIT_FOR_READY_180  FE4
WAIT_FOR_READY_183  1004
WAIT_FOR_READY_185  102C
WAIT_FOR_READY_188  104E
WAIT_FOR_READY_197  111C
WAIT_FOR_READY_199  1136
WAIT_FOR_READY_2    1E2
WAIT_FOR_READY_203  1170
WAIT_FOR_READY_206  11D4
WAIT_FOR_READY_209  11F4
WAIT_FOR_READY_21   2FE
WAIT_FOR_READY_211  121C
WAIT_FOR_READY_213  123E
WAIT_FOR_READY_216  1260
WAIT_FOR_READY_218  1288
WAIT_FOR_READY_221  12AA
WAIT_FOR_READY_225  12EC
WAIT_FOR_READY_228  130E
WAIT_FOR_READY_23   350
WAIT_FOR_READY_230  1336
WAIT_FOR_READY_233  1358
WAIT_FOR_READY_235  1378
WAIT_FOR_READY_238  139A
WAIT_FOR_READY_24   364
WAIT_FOR_READY_240  13C2
WAIT_FOR_READY_243  13E4
WAIT_FOR_READY_26   37E
WAIT_FOR_READY_263  1856
WAIT_FOR_READY_275  1AAA
WAIT_FOR_READY_279  1B2E
WAIT_FOR_READY_282  1B6E
WAIT_FOR_READY_284  1B9A
WAIT_FOR_READY_286  1BBE
WAIT_FOR_READY_289  1BE2
WAIT_FOR_READY_29   3DC
WAIT_FOR_READY_291  1C0A
WAIT_FOR_READY_293  1C2C
WAIT_FOR_READY_296  1C50
WAIT_FOR_READY_298  1C78
WAIT_FOR_READY_3    1F6
WAIT_FOR_READY_301  1C9A
WAIT_FOR_READY_303  1CF6
WAIT_FOR_READY_31   454
WAIT_FOR_READY_33   480
WAIT_FOR_READY_36   4AA
WAIT_FOR_READY_38   4D2
WAIT_FOR_READY_39   4E8
WAIT_FOR_READY_40   4FE
WAIT_FOR_READY_41   512
WAIT_FOR_READY_42   526
WAIT_FOR_READY_43   53A
WAIT_FOR_READY_46   558
WAIT_FOR_READY_47   57A
WAIT_FOR_READY_49   594
WAIT_FOR_READY_53   5CE
WAIT_FOR_READY_54   5F4
WAIT_FOR_READY_56   62E
WAIT_FOR_READY_57   644
WAIT_FOR_READY_59   678
WAIT_FOR_READY_6    22C
WAIT_FOR_READY_61   69A
WAIT_FOR_READY_63   6CE
WAIT_FOR_READY_67   712
WAIT_FOR_READY_69   74E
WAIT_FOR_READY_71   782
WAIT_FOR_READY_74   7C0
WAIT_FOR_READY_76   7F4
WAIT_FOR_READY_79   83C
WAIT_FOR_READY_8    24C
WAIT_FOR_READY_81   870
WAIT_FOR_READY_84   8BA
WAIT_FOR_READY_86   8EE
WAIT_FOR_READY_89   942
WAIT_FOR_READY_91   976
WAIT_FOR_READY_94   9B4
WAIT_FOR_READY_96   9E8
WAIT_FOR_READY_99   A26
WAIT_FOR_SRECORD    5F4
WAIT_NOT_BUSY       14B2
WAIT_NOT_BUSY2      18D0
WAIT_NOT_BUSY_AGAIN  1612
WAIT_NOT_BUSY_AGAIN2  1A2E
WRITE               1BB2
WRITE_16            1104
WRITE_8             E73
WRITING             1F5B
X                   12E0
Z                   D1E
_00000000           218
_00000001           3A4
_00000002           3B8
_00000003           72E
_00000004           B0A
_00000005           73C
_00000006           92A
_00000007           8A0
_00000008           B0A
_00000009           A94
_0000000A           B0A
_0000000B           C32
_0000000C           C3E
_0000000D           DFE
_0000000E           107E
_0000000F           10A0
_00000010           10B2
_00000011           10E0
_00000012           10F2
_00000013           12CA
_10000000           690
_10000001           6F8
_10000002           744
_10000003           7AC
_10000004           7B6
_10000005           81E
_10000006           832
_10000007           89A
_10000008           8A4
_10000009           924
_1000000A           8B0
_1000000B           918
_1000000C           938
_1000000D           9A0
_1000000E           9AA
_1000000F           A12
_10000010           A1C
_10000011           A84
_10000012           B0E
_10000013           B76
_10000014           1062
_10000015           1084
_10000016           18CA
_10000017           1B22
_20000000           132
_20000001           13E
_20000002           14C
_20000003           158
_20000004           578
_20000005           5BC
_20000006           D30
_20000007           D40
_20000008           D5A
_20000009           E00
_2000000A           E1A
_2000000B           E5E
_2000000C           ED6
_2000000D           EDA
_2000000E           10BA
_2000000F           10F4
_20000010           111A
_20000011           115E
_20000012           11BE
_20000013           11C2
_20000014           1872
_20000015           18BE
_20000016           1AC8
_20000017           1B14
