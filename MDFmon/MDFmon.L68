00000008 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 09/04/2021 08:14:14

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : MDFmon 
00000000                             3  * Written by : Mark Flitter
00000000                             4  * Date       : March 2021
00000000                             5  * Description: 68000 monitor program
00000000                             6  *-----------------------------------------------------------
00000000                             7  ; to do
00000000                             8  ; startup / check monitor
00000000                             9  ; add LDS and UDS with an OR gate and test
00000000                            10    ; might need to implement byte write in W
00000000                            11  ; revert write to byte
00000000                            12  ; remove the odd byte handling in the downloads
00000000                            13  ; implement DOWNLOAD_BYTE to remove repeated code and shorten the gap between S1 and S2
00000000                            14  ; stop using two registers in download
00000000                            15  ; lots of repeated code in download between the two S record types (S1 and S2)
00000000                            16  ; add simpler .W and .B variants of PRINT_REG, will reduce code a bit
00000000                            17  ; burn EEPROM to alternative location ($1000) and update the start vector as the very last operation
00000000                            18  ; if the EEPROM programming getas stuck, print out value read back and retry write eventually? 
00000000                            19  
00000000                            20  ; make the monitor relocatable, so it can run in RAM and ROM
00000000                            21  ; keep track of highest address hit during srec download
00000000                            22  ; fix the reset vector so that it jumps to the start
00000000                            23  ; Replace JMP -> BRA
00000000                            24  ; implement backspace
00000000                            25  ; check for escape during Z and L?  Not sure if W is a good idea either
00000000                            26  ; fix being able to enter random chars when W'ing
00000000                            27  ; ram check at startup?  Not sure if this is a good idea!
00000000                            28  
00000000                            29      ORG  $0
00000000                            30      ;ORG  $200000
00000000                            31  
00000000  =00000000                 32  DEBUG               EQU 0
00000000                            33  
00000000                            34  ; constants
00000000  =00000000                 35  ROM                 EQU $0
00000000  =00200000                 36  RAM                 EQU $200000
00000000                            37     
00000000  =00C00000                 38  DUART_BASE          EQU $C00000
00000000  =00000000                 39  DUART_MRA_          EQU $0
00000000  =00000001                 40  DUART_CSRA_         EQU $1
00000000  =00000001                 41  DUART_SRA_          EQU $1
00000000  =00000002                 42  DUART_CRA_          EQU $2
00000000  =00000003                 43  DUART_TXA_          EQU $3
00000000  =00000003                 44  DUART_RXA_          EQU $3
00000000  =00000004                 45  DUART_ACR_          EQU $4
00000000  =00000005                 46  DUART_IMR_          EQU $5
00000000  =00000008                 47  DUART_MRB_          EQU $8
00000000  =00000009                 48  DUART_CSRB_         EQU $9
00000000  =00000009                 49  DUART_SRB_          EQU $9
00000000  =0000000A                 50  DUART_CRB_          EQU $A
00000000  =0000000B                 51  DUART_TXB_          EQU $B
00000000  =0000000B                 52  DUART_RXB_          EQU $B
00000000  =0000000C                 53  DUART_IVR_          EQU $C
00000000  =0000000D                 54  DUART_OPCR_         EQU $D
00000000  =0000000E                 55  DUART_SET_OPR_      EQU $E
00000000  =0000000F                 56  DUART_RESET_OPR_    EQU $F
00000000                            57  
00000000  =00C00001                 58  DUART_MRA           EQU DUART_BASE+2*DUART_MRA_+1
00000000  =00C00003                 59  DUART_SRA           EQU DUART_BASE+2*DUART_SRA_+1
00000000  =00C00003                 60  DUART_CSRA          EQU DUART_BASE+2*DUART_CSRA_+1
00000000  =00C00005                 61  DUART_CRA           EQU DUART_BASE+2*DUART_CRA_+1
00000000  =00C00007                 62  DUART_TXA           EQU DUART_BASE+2*DUART_TXA_+1
00000000  =00C00007                 63  DUART_RXA           EQU DUART_BASE+2*DUART_RXA_+1
00000000                            64  
00000000  =00C00011                 65  DUART_MRB           EQU DUART_BASE+2*DUART_MRB_+1
00000000  =00C00013                 66  DUART_SRB           EQU DUART_BASE+2*DUART_SRB_+1
00000000  =00C00013                 67  DUART_CSRB          EQU DUART_BASE+2*DUART_CSRB_+1
00000000  =00C00015                 68  DUART_CRB           EQU DUART_BASE+2*DUART_CRB_+1
00000000  =00C00017                 69  DUART_TXB           EQU DUART_BASE+2*DUART_TXB_+1
00000000  =00C00017                 70  DUART_RXB           EQU DUART_BASE+2*DUART_RXB_+1
00000000                            71  
00000000  =00C00009                 72  DUART_ACR           EQU DUART_BASE+2*DUART_ACR_+1
00000000  =00C0000B                 73  DUART_IMR           EQU DUART_BASE+2*DUART_IMR_+1
00000000  =00C00019                 74  DUART_IVR           EQU DUART_BASE+2*DUART_IVR_+1
00000000  =00C0001B                 75  DUART_OPCR          EQU DUART_BASE+2*DUART_OPCR_+1
00000000  =00C0001D                 76  DUART_SET_OPR       EQU DUART_BASE+2*DUART_SET_OPR_+1
00000000  =00C0001F                 77  DUART_RESET_OPR     EQU DUART_BASE+2*DUART_RESET_OPR_+1
00000000                            78  
00000000  =00E00000                 79  DISPLAY_BASE        EQU $E00000
00000000  =00000000                 80  DISPLAY_            EQU $0
00000000  =00E00001                 81  DISPLAY             EQU DISPLAY_BASE+2*DISPLAY_+1
00000000                            82  
00000000                            83  ; macros
00000000                            84  ; convert top 4 bits of input register from binary to a single hex digit
00000000                            85  ; the input register is changed during the process
00000000                            86  ; \1 input data register containing binary number,  \2 data register for return value, \3 working address register
00000000                            87  BIN2HEX MACRO
00000000                            88      LEA BIN2HEX_LUT,\3                          ; load the lookup table
00000000                            89      ROL.L #4,\1                                 ; shift the top 4 bits down to bottom of the register the and mask off everything else
00000000                            90      MOVE.B \1,\2
00000000                            91      ANDI.L #$F,\2
00000000                            92      MOVE.B 0(\3,\2),\2                          ; use that as an index into the LUT
00000000                            93      ENDM
00000000                            94  
00000000                            95  ; convert single hex digit to 4 bit binary number in LSbits
00000000                            96  ; the input register is changed during the process
00000000                            97  ; \1 data register containing hex character, \2 data register for return value, \3 working address register
00000000                            98  HEX2BIN MACRO
00000000                            99      LEA HEX2BIN_LUT,\3                          ; load the lookup table
00000000                           100      SUB.B #'0',\1                               ; work out offset and mask off anything rogue
00000000                           101      AND.L #$FF,\1                               ; ignore the top 3 bytes
00000000                           102      MOVE.B 0(\3,\1),\2                          ; use that as an index into the LUT      
00000000                           103      ENDM
00000000                           104  
00000000                           105  ; send a single char to the serial port
00000000                           106  ; \1 = char to send, \2 = data register to use for status poll
00000000                           107  ; will stamp on D0 and D1 in debug mode
00000000                           108  PRINT_CHAR MACRO
00000000                           109  WAIT_FOR_READY\@                                ; wait until the there is space to send
00000000                           110      IFEQ DEBUG
00000000                           111          MOVE.B DUART_SRA,\2                     ; read status register
00000000                           112          BTST #2,\2                              ; check for space to send
00000000                           113          BEQ WAIT_FOR_READY\@                    ; no space, check again
00000000                           114          MOVE.B \1,DUART_TXA                     ; send the next character
00000000                           115      ENDC
00000000                           116      
00000000                           117      IFNE DEBUG
00000000                           118          MOVE.B \1,D1
00000000                           119          MOVE.L #6,D0   
00000000                           120          TRAP #15                                ; write to terminal in simulator
00000000                           121      ENDC
00000000                           122  
00000000                           123      ENDM
00000000                           124  
00000000                           125  ; send CR,LF to the serial port
00000000                           126  ; \1 = data register to use for status poll
00000000                           127  PRINT_CRLF MACRO
00000000                           128      PRINT_CHAR #13,\1                           ; CR
00000000                           129      PRINT_CHAR #10,\1                           ; LF
00000000                           130      ENDM
00000000                           131  
00000000                           132  ; send C-style, zero terminated string to the serial port
00000000                           133  ; \1 = address register containing address of zero terminated string, \2 = data register to use for status poll, 
00000000                           134  PRINT_STR MACRO
00000000                           135  LOOP\@
00000000                           136      CMP.B #0,(\1)                               ; 0 -> done
00000000                           137      BEQ EXIT\@
00000000                           138      PRINT_CHAR (\1)+,\2
00000000                           139      JMP LOOP\@
00000000                           140  EXIT\@
00000000                           141      ENDM
00000000                           142    
00000000                           143  ; send the contents of a data register to the serial port as a 8 digit hex number
00000000                           144  ; \1 = data register containing binary number, \2 = data register to use for status poll, \3 working data register, \4 counter register, \5 working address register, 
00000000                           145  PRINT_REG MACRO
00000000                           146      PRINT_CHAR #'0',\2                          ;0x header
00000000                           147      PRINT_CHAR #'x',\2
00000000                           148      MOVE.L #7,\4                                ; loop round all 8 hex characters of 4 bits each
00000000                           149  LOOP\@
00000000                           150      BIN2HEX \1,\3,\5
00000000                           151      PRINT_CHAR \3,\2
00000000                           152      DBEQ \4,LOOP\@
00000000                           153      ENDM
00000000                           154    
00000000                           155  ; wait for a char from the serial port
00000000                           156  ; \ 1= data register for read char, \2 = register to use for status poll
00000000                           157  ; will stamp on D0 and D1 in debug mode
00000000                           158  WAIT_CHAR MACRO
00000000                           159  WAIT_FOR_READY\@                                ; wait until the there is space to send
00000000                           160  
00000000                           161      IFEQ DEBUG
00000000                           162          MOVE.B DUART_SRA,\2                     ; read status register
00000000                           163          BTST #0,\2                              ; check for character
00000000                           164          BEQ WAIT_FOR_READY\@                    ; nothing, check again
00000000                           165      ENDC
00000000                           166      
00000000                           167      READ_CHAR \1
00000000                           168  
00000000                           169      IFEQ DEBUG
00000000                           170          PRINT_CHAR \1,\2                        ; echo it back
00000000                           171      ENDC
00000000                           172      ENDM
00000000                           173      
00000000                           174  ; read a char from the serial port - assumes that there is one!
00000000                           175  ; \ 1= data register for read char
00000000                           176  ; will stamp on D0 and D1 in debug mode
00000000                           177  READ_CHAR MACRO
00000000                           178      IFEQ DEBUG
00000000                           179          MOVE.B DUART_RXA,\1                     ; got a character, read it
00000000                           180      ENDC
00000000                           181      IFNE DEBUG
00000000                           182          MOVE.L #5,D0    
00000000                           183          TRAP #15                                ; read from keyboard in simulator
00000000                           184          MOVE.L D1,\1
00000000                           185      ENDC
00000000                           186       
00000000                           187      CMP.B #$1B,\1                               ; check for escape and go to start
00000000                           188      BEQ START
00000000                           189      ENDM
00000000                           190      
00000000                           191      
00000000                           192  ; read data from the download serial port
00000000                           193  ; \ 1= data register for read char, \2 = register to use for status poll
00000000                           194  DOWNLOAD MACRO
00000000                           195  WAIT_FOR_READY\@                                ; wait until the there is space to send
00000000                           196  
00000000                           197      MOVE.B DUART_SRA,\2                         ; check for command
00000000                           198      BTST #0,\2                                  ; check for character
00000000                           199      BEQ CONTINUE\@                              ; nothing, continue
00000000                           200   
00000000                           201      READ_CHAR \1
00000000                           202  CONTINUE\@
00000000                           203      MOVE.B DUART_SRB,\2                         ; read status register
00000000                           204      BTST #0,\2                                  ; check for character
00000000                           205      BEQ WAIT_FOR_READY\@                        ; nothing, check again
00000000                           206      
00000000                           207      MOVE.B DUART_RXB,\1                         ; got a character, read it
00000000                           208      MOVE.B \1,DISPLAY                           ; echo to the display
00000000                           209      
00000000                           210      ENDM
00000000                           211  
00000000                           212  ; register catalogue
00000000                           213  ; D0 - used for simulator I/O
00000000                           214  ; D1 - used for simulator I/O
00000000                           215  ; D2 - read character
00000000                           216  ; D3 - serial port status poll / task for TRAP in simulator
00000000                           217  ; D4 - count of S records read
00000000                           218  ; D5 - data to write / data read / byte count for S record load
00000000                           219  ; D6 - working register used in R/W and download
00000000                           220  ; D7 - address accumulator / reset by download
00000000                           221  ; A0 - address of string to print 
00000000                           222  
00000000                           223  ; start vector
00000000= 00000000                 224  STACK    DC.L $00000000                         ; STACK
00000004= 00000008                 225  RESET    DC.L START                             ; RESET
00000008                           226      
00000008                           227  ; start of program  
00000008                           228  START
00000008  13FC 0000 00E00001       229      MOVE.B #0,DISPLAY
00000010                           230  
00000010                           231  ; reset the UART in case of warm start
00000010  13FC 000A 00C00005       232      MOVE.B #$A,DUART_CRA                        ; disable rx & tx
00000018  13FC 0050 00C00005       233      MOVE.B #$50,DUART_CRA                       ; reset everyting
00000020  4E71                     234      NOP
00000022  13FC 0040 00C00005       235      MOVE.B #$40,DUART_CRA           
0000002A  4E71                     236      NOP
0000002C  13FC 0030 00C00005       237      MOVE.B #$30,DUART_CRA
00000034  4E71                     238      NOP
00000036  13FC 0020 00C00005       239      MOVE.B #$20,DUART_CRA
0000003E  4E71                     240      NOP
00000040  13FC 0010 00C00005       241      MOVE.B #$10,DUART_CRA   
00000048                           242  
00000048  13FC 000A 00C00015       243      MOVE.B #$A,DUART_CRB                        ; disable rx & tx
00000050  13FC 0050 00C00015       244      MOVE.B #$50,DUART_CRB                       ; reset everyting
00000058  4E71                     245      NOP
0000005A  13FC 0040 00C00015       246      MOVE.B #$40,DUART_CRB           
00000062  4E71                     247      NOP
00000064  13FC 0030 00C00015       248      MOVE.B #$30,DUART_CRB
0000006C  4E71                     249      NOP
0000006E  13FC 0020 00C00015       250      MOVE.B #$20,DUART_CRB
00000076  4E71                     251      NOP
00000078  13FC 0010 00C00015       252      MOVE.B #$10,DUART_CRB   
00000080                           253  
00000080                           254  ;initialise UART
00000080  13FC 0000 00C00009       255      MOVE.B #$0,DUART_ACR            
00000088  13FC 0000 00C0000B       256      MOVE.B #$0,DUART_IMR                        ; no interrupts, please            
00000090  13FC 0000 00C0001B       257      MOVE.B #$0,DUART_OPCR                       ; enable all outputs
00000098                           258  
00000098                           259  ; channel A
00000098  13FC 0013 00C00001       260      MOVE.B #$13,DUART_MRA                       ; no flow control, no parity, 8 data bits
000000A0  13FC 0007 00C00001       261      MOVE.B #$07,DUART_MRA                       ; 1 stop bit
000000A8  13FC 00CC 00C00003       262      MOVE.B #$CC,DUART_CSRA                      ; 9600 baud
000000B0  13FC 0005 00C00005       263      MOVE.B #$5,DUART_CRA                        ; enable rx & tx
000000B8                           264  
000000B8                           265  ; channel B
000000B8  13FC 0013 00C00011       266      MOVE.B #$13,DUART_MRB                       ; no flow control, no parity, 8 data bits
000000C0  13FC 0007 00C00011       267      MOVE.B #$07,DUART_MRB                       ; 1 stop bit
000000C8  13FC 00CC 00C00013       268      MOVE.B #$CC,DUART_CSRB                      ; 9600 baud
000000D0  13FC 0005 00C00015       269      MOVE.B #$5,DUART_CRB                        ; enable rx & tx
000000D8                           270  
000000D8                           271m     PRINT_CHAR '.',D3                           ; give the serial port chance to settle after reset
000000D8                           272m WAIT_FOR_READY_1                                ; WAIT UNTIL THE THERE IS SPACE TO SEND
000000D8                 TRUE      273m     IFEQ DEBUG
000000D8  1639 00C00003            274m         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
000000DE  0803 0002                275m         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
000000E2  67F4                     276m         BEQ WAIT_FOR_READY_1                    ; NO SPACE, CHECK AGAIN
000000E4  13F8 002E 00C00007       277m         MOVE.B '.',DUART_TXA                    ; SEND THE NEXT CHARACTER
000000EC                           278m     ENDC
000000EC                           279m     
000000EC                 FALSE     280m     IFNE DEBUG
000000EC                           281m     ENDC
000000EC                           282m 
000000EC                           283m     ENDM
000000EC                           284  
000000EC  13FC 0001 00E00001       285      MOVE.B #1,DISPLAY
000000F4                           286         
000000F4                           287m     PRINT_CRLF D3
000000F4                           288mm     PRINT_CHAR #13,D3                           ; CR
000000F4                           289mm WAIT_FOR_READY_3                                ; WAIT UNTIL THE THERE IS SPACE TO SEND
000000F4                 TRUE      290mm     IFEQ DEBUG
000000F4  1639 00C00003            291mm         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
000000FA  0803 0002                292mm         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
000000FE  67F4                     293mm         BEQ WAIT_FOR_READY_3                    ; NO SPACE, CHECK AGAIN
00000100  13FC 000D 00C00007       294mm         MOVE.B #13,DUART_TXA                    ; SEND THE NEXT CHARACTER
00000108                           295mm     ENDC
00000108                           296mm     
00000108                 FALSE     297mm     IFNE DEBUG
00000108                           298mm     ENDC
00000108                           299mm 
00000108                           300mm     ENDM
00000108                           301mm     PRINT_CHAR #10,D3                           ; LF
00000108                           302mm WAIT_FOR_READY_4                                ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000108                 TRUE      303mm     IFEQ DEBUG
00000108  1639 00C00003            304mm         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
0000010E  0803 0002                305mm         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
00000112  67F4                     306mm         BEQ WAIT_FOR_READY_4                    ; NO SPACE, CHECK AGAIN
00000114  13FC 000A 00C00007       307mm         MOVE.B #10,DUART_TXA                    ; SEND THE NEXT CHARACTER
0000011C                           308mm     ENDC
0000011C                           309mm     
0000011C                 FALSE     310mm     IFNE DEBUG
0000011C                           311mm     ENDC
0000011C                           312mm 
0000011C                           313mm     ENDM
0000011C                           314m     ENDM
0000011C                           315  
0000011C  41F9 00001794            316      LEA VERSION,A0
00000122                           317m     PRINT_STR A0,D3
00000122                           318m LOOP_5
00000122  0C10 0000                319m     CMP.B #0,(A0)                               ; 0 -> DONE
00000126  6700 0018                320m     BEQ EXIT_5
0000012A                           321mm     PRINT_CHAR (A0)+,D3
0000012A                           322mm WAIT_FOR_READY_6                                ; WAIT UNTIL THE THERE IS SPACE TO SEND
0000012A                 TRUE      323mm     IFEQ DEBUG
0000012A  1639 00C00003            324mm         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
00000130  0803 0002                325mm         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
00000134  67F4                     326mm         BEQ WAIT_FOR_READY_6                    ; NO SPACE, CHECK AGAIN
00000136  13D8 00C00007            327mm         MOVE.B (A0)+,DUART_TXA                      ; SEND THE NEXT CHARACTER
0000013C                           328mm     ENDC
0000013C                           329mm     
0000013C                 FALSE     330mm     IFNE DEBUG
0000013C                           331mm     ENDC
0000013C                           332mm 
0000013C                           333mm     ENDM
0000013C  4EF8 0122                334m     JMP LOOP_5
00000140                           335m EXIT_5
00000140                           336m     ENDM
00000140                           337m     PRINT_CRLF D3
00000140                           338mm     PRINT_CHAR #13,D3                           ; CR
00000140                           339mm WAIT_FOR_READY_8                                ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000140                 TRUE      340mm     IFEQ DEBUG
00000140  1639 00C00003            341mm         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
00000146  0803 0002                342mm         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
0000014A  67F4                     343mm         BEQ WAIT_FOR_READY_8                    ; NO SPACE, CHECK AGAIN
0000014C  13FC 000D 00C00007       344mm         MOVE.B #13,DUART_TXA                    ; SEND THE NEXT CHARACTER
00000154                           345mm     ENDC
00000154                           346mm     
00000154                 FALSE     347mm     IFNE DEBUG
00000154                           348mm     ENDC
00000154                           349mm 
00000154                           350mm     ENDM
00000154                           351mm     PRINT_CHAR #10,D3                           ; LF
00000154                           352mm WAIT_FOR_READY_9                                ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000154                 TRUE      353mm     IFEQ DEBUG
00000154  1639 00C00003            354mm         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
0000015A  0803 0002                355mm         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
0000015E  67F4                     356mm         BEQ WAIT_FOR_READY_9                    ; NO SPACE, CHECK AGAIN
00000160  13FC 000A 00C00007       357mm         MOVE.B #10,DUART_TXA                    ; SEND THE NEXT CHARACTER
00000168                           358mm     ENDC
00000168                           359mm     
00000168                 FALSE     360mm     IFNE DEBUG
00000168                           361mm     ENDC
00000168                           362mm 
00000168                           363mm     ENDM
00000168                           364m     ENDM
00000168                           365m     PRINT_CHAR #7,D3
00000168                           366m WAIT_FOR_READY_10                               ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000168                 TRUE      367m     IFEQ DEBUG
00000168  1639 00C00003            368m         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
0000016E  0803 0002                369m         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
00000172  67F4                     370m         BEQ WAIT_FOR_READY_10                   ; NO SPACE, CHECK AGAIN
00000174  13FC 0007 00C00007       371m         MOVE.B #7,DUART_TXA                     ; SEND THE NEXT CHARACTER
0000017C                           372m     ENDC
0000017C                           373m     
0000017C                 FALSE     374m     IFNE DEBUG
0000017C                           375m     ENDC
0000017C                           376m 
0000017C                           377m     ENDM
0000017C                           378  
0000017C  7E00                     379      MOVE.L #0,D7                                ; address accumulator
0000017E                           380  
0000017E  13FC 0002 00E00001       381      MOVE.B #2,DISPLAY
00000186                           382  MAIN_LOOP
00000186                           383m     PRINT_CHAR #'>',D3                          ; prompt
00000186                           384m WAIT_FOR_READY_11                               ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000186                 TRUE      385m     IFEQ DEBUG
00000186  1639 00C00003            386m         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
0000018C  0803 0002                387m         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
00000190  67F4                     388m         BEQ WAIT_FOR_READY_11                   ; NO SPACE, CHECK AGAIN
00000192  13FC 003E 00C00007       389m         MOVE.B #'>',DUART_TXA                       ; SEND THE NEXT CHARACTER
0000019A                           390m     ENDC
0000019A                           391m     
0000019A                 FALSE     392m     IFNE DEBUG
0000019A                           393m     ENDC
0000019A                           394m 
0000019A                           395m     ENDM
0000019A                           396m     PRINT_CHAR #32,D3                           ; space
0000019A                           397m WAIT_FOR_READY_12                               ; WAIT UNTIL THE THERE IS SPACE TO SEND
0000019A                 TRUE      398m     IFEQ DEBUG
0000019A  1639 00C00003            399m         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
000001A0  0803 0002                400m         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
000001A4  67F4                     401m         BEQ WAIT_FOR_READY_12                   ; NO SPACE, CHECK AGAIN
000001A6  13FC 0020 00C00007       402m         MOVE.B #32,DUART_TXA                    ; SEND THE NEXT CHARACTER
000001AE                           403m     ENDC
000001AE                           404m     
000001AE                 FALSE     405m     IFNE DEBUG
000001AE                           406m     ENDC
000001AE                           407m 
000001AE                           408m     ENDM
000001AE                           409      
000001AE                           410  GET_INPUT
000001AE                           411m     WAIT_CHAR D2,D3                             ; fetch character from serial port -> D2
000001AE                           412m WAIT_FOR_READY_13                               ; WAIT UNTIL THE THERE IS SPACE TO SEND
000001AE                           413m 
000001AE                 TRUE      414m     IFEQ DEBUG
000001AE  1639 00C00003            415m         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
000001B4  0803 0000                416m         BTST #0,D3                              ; CHECK FOR CHARACTER
000001B8  67F4                     417m         BEQ WAIT_FOR_READY_13                   ; NOTHING, CHECK AGAIN
000001BA                           418m     ENDC
000001BA                           419m     
000001BA                           420mm     READ_CHAR D2
000001BA                 TRUE      421mm     IFEQ DEBUG
000001BA  1439 00C00007            422mm         MOVE.B DUART_RXA,D2                     ; GOT A CHARACTER, READ IT
000001C0                           423mm     ENDC
000001C0                 FALSE     424mm     IFNE DEBUG
000001C0                           425mm     ENDC
000001C0                           426mm      
000001C0  B43C 001B                427mm     CMP.B #$1B,D2                               ; CHECK FOR ESCAPE AND GO TO START
000001C4  6700 FE42                428mm     BEQ START
000001C8                           429mm     ENDM
000001C8                           430m 
000001C8                 TRUE      431m     IFEQ DEBUG
000001C8                           432mm         PRINT_CHAR D2,D3                        ; ECHO IT BACK
000001C8                           433mm WAIT_FOR_READY_15                               ; WAIT UNTIL THE THERE IS SPACE TO SEND
000001C8                 TRUE      434mm     IFEQ DEBUG
000001C8  1639 00C00003            435mm         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
000001CE  0803 0002                436mm         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
000001D2  67F4                     437mm         BEQ WAIT_FOR_READY_15                   ; NO SPACE, CHECK AGAIN
000001D4  13C2 00C00007            438mm         MOVE.B D2,DUART_TXA                     ; SEND THE NEXT CHARACTER
000001DA                           439mm     ENDC
000001DA                           440mm     
000001DA                 FALSE     441mm     IFNE DEBUG
000001DA                           442mm     ENDC
000001DA                           443mm 
000001DA                           444mm     ENDM
000001DA                           445m     ENDC
000001DA                           446m     ENDM
000001DA                           447      
000001DA  B43C 0030                448      CMP.B #'0',D2
000001DE  6700 1594                449      BEQ HEX_DIGIT
000001E2  B43C 0031                450      CMP.B #'1',D2
000001E6  6700 158C                451      BEQ HEX_DIGIT
000001EA  B43C 0032                452      CMP.B #'2',D2
000001EE  6700 1584                453      BEQ HEX_DIGIT
000001F2  B43C 0033                454      CMP.B #'3',D2
000001F6  6700 157C                455      BEQ HEX_DIGIT
000001FA  B43C 0034                456      CMP.B #'4',D2
000001FE  6700 1574                457      BEQ HEX_DIGIT
00000202  B43C 0035                458      CMP.B #'5',D2
00000206  6700 156C                459      BEQ HEX_DIGIT
0000020A  B43C 0036                460      CMP.B #'6',D2
0000020E  6700 1564                461      BEQ HEX_DIGIT
00000212  B43C 0037                462      CMP.B #'7',D2
00000216  6700 155C                463      BEQ HEX_DIGIT
0000021A  B43C 0038                464      CMP.B #'8',D2
0000021E  6700 1554                465      BEQ HEX_DIGIT
00000222  B43C 0039                466      CMP.B #'9',D2
00000226  6700 154C                467      BEQ HEX_DIGIT
0000022A  B43C 0041                468      CMP.B #'A',D2
0000022E  6700 1544                469      BEQ HEX_DIGIT
00000232  B43C 0042                470      CMP.B #'B',D2
00000236  6700 153C                471      BEQ HEX_DIGIT
0000023A  B43C 0043                472      CMP.B #'C',D2
0000023E  6700 1534                473      BEQ HEX_DIGIT
00000242  B43C 0044                474      CMP.B #'D',D2
00000246  6700 152C                475      BEQ HEX_DIGIT
0000024A  B43C 0045                476      CMP.B #'E',D2
0000024E  6700 1524                477      BEQ HEX_DIGIT
00000252  B43C 0046                478      CMP.B #'F',D2
00000256  6700 151C                479      BEQ HEX_DIGIT
0000025A                           480      
0000025A  B43C 0057                481      CMP.B #'W',D2
0000025E  6700 0160                482      BEQ W
00000262                           483      
00000262  B43C 004C                484      CMP.B #'L',D2
00000266  6700 139C                485      BEQ L 
0000026A                           486  
0000026A                           487m     PRINT_CRLF D3
0000026A                           488mm     PRINT_CHAR #13,D3                           ; CR
0000026A                           489mm WAIT_FOR_READY_17                               ; WAIT UNTIL THE THERE IS SPACE TO SEND
0000026A                 TRUE      490mm     IFEQ DEBUG
0000026A  1639 00C00003            491mm         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
00000270  0803 0002                492mm         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
00000274  67F4                     493mm         BEQ WAIT_FOR_READY_17                   ; NO SPACE, CHECK AGAIN
00000276  13FC 000D 00C00007       494mm         MOVE.B #13,DUART_TXA                    ; SEND THE NEXT CHARACTER
0000027E                           495mm     ENDC
0000027E                           496mm     
0000027E                 FALSE     497mm     IFNE DEBUG
0000027E                           498mm     ENDC
0000027E                           499mm 
0000027E                           500mm     ENDM
0000027E                           501mm     PRINT_CHAR #10,D3                           ; LF
0000027E                           502mm WAIT_FOR_READY_18                               ; WAIT UNTIL THE THERE IS SPACE TO SEND
0000027E                 TRUE      503mm     IFEQ DEBUG
0000027E  1639 00C00003            504mm         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
00000284  0803 0002                505mm         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
00000288  67F4                     506mm         BEQ WAIT_FOR_READY_18                   ; NO SPACE, CHECK AGAIN
0000028A  13FC 000A 00C00007       507mm         MOVE.B #10,DUART_TXA                    ; SEND THE NEXT CHARACTER
00000292                           508mm     ENDC
00000292                           509mm     
00000292                 FALSE     510mm     IFNE DEBUG
00000292                           511mm     ENDC
00000292                           512mm 
00000292                           513mm     ENDM
00000292                           514m     ENDM
00000292                           515   
00000292  B43C 003F                516      CMP.B #'?',D2
00000296  6700 0052                517      BEQ H
0000029A                           518  
0000029A  B43C 0056                519      CMP.B #'V',D2
0000029E  6700 0072                520      BEQ V
000002A2                           521      
000002A2  B43C 0052                522      CMP.B #'R',D2
000002A6  6700 0092                523      BEQ R
000002AA                           524  
000002AA  B43C 0053                525      CMP.B #'S',D2
000002AE  6700 01D6                526      BEQ S
000002B2                           527  
000002B2  B43C 0047                528      CMP.B #'G',D2
000002B6  6700 123C                529      BEQ G   
000002BA                           530  
000002BA  B43C 005A                531      CMP.B #'Z',D2
000002BE  6700 123C                532      BEQ Z   
000002C2                           533  
000002C2  41F9 00001848            534      LEA HUH,A0
000002C8                           535m     PRINT_STR A0,D3
000002C8                           536m LOOP_19
000002C8  0C10 0000                537m     CMP.B #0,(A0)                               ; 0 -> DONE
000002CC  6700 0018                538m     BEQ EXIT_19
000002D0                           539mm     PRINT_CHAR (A0)+,D3
000002D0                           540mm WAIT_FOR_READY_20                               ; WAIT UNTIL THE THERE IS SPACE TO SEND
000002D0                 TRUE      541mm     IFEQ DEBUG
000002D0  1639 00C00003            542mm         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
000002D6  0803 0002                543mm         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
000002DA  67F4                     544mm         BEQ WAIT_FOR_READY_20                   ; NO SPACE, CHECK AGAIN
000002DC  13D8 00C00007            545mm         MOVE.B (A0)+,DUART_TXA                      ; SEND THE NEXT CHARACTER
000002E2                           546mm     ENDC
000002E2                           547mm     
000002E2                 FALSE     548mm     IFNE DEBUG
000002E2                           549mm     ENDC
000002E2                           550mm 
000002E2                           551mm     ENDM
000002E2  4EF8 02C8                552m     JMP LOOP_19
000002E6                           553m EXIT_19
000002E6                           554m     ENDM
000002E6                           555                         
000002E6  4EF8 0186                556      JMP MAIN_LOOP
000002EA                           557      
000002EA                           558  ; commands
000002EA                           559  H   
000002EA  41F9 000017B1            560      LEA HELP,A0
000002F0                           561m     PRINT_STR A0,D3
000002F0                           562m LOOP_21
000002F0  0C10 0000                563m     CMP.B #0,(A0)                               ; 0 -> DONE
000002F4  6700 0018                564m     BEQ EXIT_21
000002F8                           565mm     PRINT_CHAR (A0)+,D3
000002F8                           566mm WAIT_FOR_READY_22                               ; WAIT UNTIL THE THERE IS SPACE TO SEND
000002F8                 TRUE      567mm     IFEQ DEBUG
000002F8  1639 00C00003            568mm         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
000002FE  0803 0002                569mm         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
00000302  67F4                     570mm         BEQ WAIT_FOR_READY_22                   ; NO SPACE, CHECK AGAIN
00000304  13D8 00C00007            571mm         MOVE.B (A0)+,DUART_TXA                      ; SEND THE NEXT CHARACTER
0000030A                           572mm     ENDC
0000030A                           573mm     
0000030A                 FALSE     574mm     IFNE DEBUG
0000030A                           575mm     ENDC
0000030A                           576mm 
0000030A                           577mm     ENDM
0000030A  4EF8 02F0                578m     JMP LOOP_21
0000030E                           579m EXIT_21
0000030E                           580m     ENDM
0000030E  4EF8 0186                581      JMP MAIN_LOOP
00000312                           582  
00000312                           583  V   
00000312  41F9 00001794            584      LEA VERSION,A0
00000318                           585m     PRINT_STR A0,D3       
00000318                           586m LOOP_23
00000318  0C10 0000                587m     CMP.B #0,(A0)                               ; 0 -> DONE
0000031C  6700 0018                588m     BEQ EXIT_23
00000320                           589mm     PRINT_CHAR (A0)+,D3
00000320                           590mm WAIT_FOR_READY_24                               ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000320                 TRUE      591mm     IFEQ DEBUG
00000320  1639 00C00003            592mm         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
00000326  0803 0002                593mm         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
0000032A  67F4                     594mm         BEQ WAIT_FOR_READY_24                   ; NO SPACE, CHECK AGAIN
0000032C  13D8 00C00007            595mm         MOVE.B (A0)+,DUART_TXA                      ; SEND THE NEXT CHARACTER
00000332                           596mm     ENDC
00000332                           597mm     
00000332                 FALSE     598mm     IFNE DEBUG
00000332                           599mm     ENDC
00000332                           600mm 
00000332                           601mm     ENDM
00000332  4EF8 0318                602m     JMP LOOP_23
00000336                           603m EXIT_23
00000336                           604m     ENDM
00000336  4EF8 0186                605      JMP MAIN_LOOP
0000033A                           606      
0000033A                           607  R   
0000033A  2047                     608      MOVE.L D7,A0                                ; address accumulator -> address register
0000033C  2A10                     609      MOVE.L (A0),D5                              ; read the memory and print it
0000033E                           610m     PRINT_REG D5,D3,D7,D6,A0
0000033E                           611mm     PRINT_CHAR #'0',D3                          ;0X HEADER
0000033E                           612mm WAIT_FOR_READY_26                               ; WAIT UNTIL THE THERE IS SPACE TO SEND
0000033E                 TRUE      613mm     IFEQ DEBUG
0000033E  1639 00C00003            614mm         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
00000344  0803 0002                615mm         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
00000348  67F4                     616mm         BEQ WAIT_FOR_READY_26                   ; NO SPACE, CHECK AGAIN
0000034A  13FC 0030 00C00007       617mm         MOVE.B #'0',DUART_TXA                       ; SEND THE NEXT CHARACTER
00000352                           618mm     ENDC
00000352                           619mm     
00000352                 FALSE     620mm     IFNE DEBUG
00000352                           621mm     ENDC
00000352                           622mm 
00000352                           623mm     ENDM
00000352                           624mm     PRINT_CHAR #'x',D3
00000352                           625mm WAIT_FOR_READY_27                               ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000352                 TRUE      626mm     IFEQ DEBUG
00000352  1639 00C00003            627mm         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
00000358  0803 0002                628mm         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
0000035C  67F4                     629mm         BEQ WAIT_FOR_READY_27                   ; NO SPACE, CHECK AGAIN
0000035E  13FC 0078 00C00007       630mm         MOVE.B #'x',DUART_TXA                       ; SEND THE NEXT CHARACTER
00000366                           631mm     ENDC
00000366                           632mm     
00000366                 FALSE     633mm     IFNE DEBUG
00000366                           634mm     ENDC
00000366                           635mm 
00000366                           636mm     ENDM
00000366  7C07                     637m     MOVE.L #7,D6                                ; LOOP ROUND ALL 8 HEX CHARACTERS OF 4 BITS EACH
00000368                           638m LOOP_25
00000368                           639mm     BIN2HEX D5,D7,A0
00000368  41F9 000018AC            640mm     LEA BIN2HEX_LUT,A0                          ; LOAD THE LOOKUP TABLE
0000036E  E99D                     641mm     ROL.L #4,D5                                 ; SHIFT THE TOP 4 BITS DOWN TO BOTTOM OF THE REGISTER THE AND MASK OFF EVERYTHING ELSE
00000370  1E05                     642mm     MOVE.B D5,D7
00000372  0287 0000000F            643mm     ANDI.L #$F,D7
00000378  1E30 7000                644mm     MOVE.B 0(A0,D7),D7                          ; USE THAT AS AN INDEX INTO THE LUT
0000037C                           645mm     ENDM
0000037C                           646mm     PRINT_CHAR D7,D3
0000037C                           647mm WAIT_FOR_READY_29                               ; WAIT UNTIL THE THERE IS SPACE TO SEND
0000037C                 TRUE      648mm     IFEQ DEBUG
0000037C  1639 00C00003            649mm         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
00000382  0803 0002                650mm         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
00000386  67F4                     651mm         BEQ WAIT_FOR_READY_29                   ; NO SPACE, CHECK AGAIN
00000388  13C7 00C00007            652mm         MOVE.B D7,DUART_TXA                     ; SEND THE NEXT CHARACTER
0000038E                           653mm     ENDC
0000038E                           654mm     
0000038E                 FALSE     655mm     IFNE DEBUG
0000038E                           656mm     ENDC
0000038E                           657mm 
0000038E                           658mm     ENDM
0000038E  57CE FFD8                659m     DBEQ D6,LOOP_25
00000392                           660m     ENDM
00000392                           661m     PRINT_CRLF D3
00000392                           662mm     PRINT_CHAR #13,D3                           ; CR
00000392                           663mm WAIT_FOR_READY_31                               ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000392                 TRUE      664mm     IFEQ DEBUG
00000392  1639 00C00003            665mm         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
00000398  0803 0002                666mm         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
0000039C  67F4                     667mm         BEQ WAIT_FOR_READY_31                   ; NO SPACE, CHECK AGAIN
0000039E  13FC 000D 00C00007       668mm         MOVE.B #13,DUART_TXA                    ; SEND THE NEXT CHARACTER
000003A6                           669mm     ENDC
000003A6                           670mm     
000003A6                 FALSE     671mm     IFNE DEBUG
000003A6                           672mm     ENDC
000003A6                           673mm 
000003A6                           674mm     ENDM
000003A6                           675mm     PRINT_CHAR #10,D3                           ; LF
000003A6                           676mm WAIT_FOR_READY_32                               ; WAIT UNTIL THE THERE IS SPACE TO SEND
000003A6                 TRUE      677mm     IFEQ DEBUG
000003A6  1639 00C00003            678mm         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
000003AC  0803 0002                679mm         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
000003B0  67F4                     680mm         BEQ WAIT_FOR_READY_32                   ; NO SPACE, CHECK AGAIN
000003B2  13FC 000A 00C00007       681mm         MOVE.B #10,DUART_TXA                    ; SEND THE NEXT CHARACTER
000003BA                           682mm     ENDC
000003BA                           683mm     
000003BA                 FALSE     684mm     IFNE DEBUG
000003BA                           685mm     ENDC
000003BA                           686mm 
000003BA                           687mm     ENDM
000003BA                           688m     ENDM
000003BA  7E00                     689      MOVE.L #0,D7                                ; clear the now used address accumulator
000003BC  4EF8 0186                690      JMP MAIN_LOOP
000003C0                           691  
000003C0                           692  W
000003C0  7A00                     693      MOVE.L #0,D5                                ; D5 will be the value to write            
000003C2                           694  
000003C2                           695m     WAIT_CHAR D2,D3                             ; read most significant character -> D2
000003C2                           696m WAIT_FOR_READY_33                               ; WAIT UNTIL THE THERE IS SPACE TO SEND
000003C2                           697m 
000003C2                 TRUE      698m     IFEQ DEBUG
000003C2  1639 00C00003            699m         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
000003C8  0803 0000                700m         BTST #0,D3                              ; CHECK FOR CHARACTER
000003CC  67F4                     701m         BEQ WAIT_FOR_READY_33                   ; NOTHING, CHECK AGAIN
000003CE                           702m     ENDC
000003CE                           703m     
000003CE                           704mm     READ_CHAR D2
000003CE                 TRUE      705mm     IFEQ DEBUG
000003CE  1439 00C00007            706mm         MOVE.B DUART_RXA,D2                     ; GOT A CHARACTER, READ IT
000003D4                           707mm     ENDC
000003D4                 FALSE     708mm     IFNE DEBUG
000003D4                           709mm     ENDC
000003D4                           710mm      
000003D4  B43C 001B                711mm     CMP.B #$1B,D2                               ; CHECK FOR ESCAPE AND GO TO START
000003D8  6700 FC2E                712mm     BEQ START
000003DC                           713mm     ENDM
000003DC                           714m 
000003DC                 TRUE      715m     IFEQ DEBUG
000003DC                           716mm         PRINT_CHAR D2,D3                        ; ECHO IT BACK
000003DC                           717mm WAIT_FOR_READY_35                               ; WAIT UNTIL THE THERE IS SPACE TO SEND
000003DC                 TRUE      718mm     IFEQ DEBUG
000003DC  1639 00C00003            719mm         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
000003E2  0803 0002                720mm         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
000003E6  67F4                     721mm         BEQ WAIT_FOR_READY_35                   ; NO SPACE, CHECK AGAIN
000003E8  13C2 00C00007            722mm         MOVE.B D2,DUART_TXA                     ; SEND THE NEXT CHARACTER
000003EE                           723mm     ENDC
000003EE                           724mm     
000003EE                 FALSE     725mm     IFNE DEBUG
000003EE                           726mm     ENDC
000003EE                           727mm 
000003EE                           728mm     ENDM
000003EE                           729m     ENDC
000003EE                           730m     ENDM
000003EE                           731m     HEX2BIN D2,D2,A0                            ; convert to binary -> D2
000003EE  41F9 000018BC            732m     LEA HEX2BIN_LUT,A0                          ; LOAD THE LOOKUP TABLE
000003F4  0402 0030                733m     SUB.B #'0',D2                               ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
000003F8  C4BC 000000FF            734m     AND.L #$FF,D2                               ; IGNORE THE TOP 3 BYTES
000003FE  1430 2000                735m     MOVE.B 0(A0,D2),D2                          ; USE THAT AS AN INDEX INTO THE LUT      
00000402                           736m     ENDM
00000402  1A02                     737      MOVE.B D2,D5                                ; put at bottom of D5
00000404                           738  
00000404                           739      ;MOVE #6,D6                                 ; 7 bytes left to read
00000404  3C3C 0001                740      MOVE #1,D6                                  ; 1 bytes left to read
00000408                           741      
00000408                           742  READ_DATA_TO_POKE
00000408  E98D                     743      LSL.L #4,D5                                 ; make what we have so far more significant
0000040A                           744m     WAIT_CHAR D2,D3                             ; next character -> D2
0000040A                           745m WAIT_FOR_READY_37                               ; WAIT UNTIL THE THERE IS SPACE TO SEND
0000040A                           746m 
0000040A                 TRUE      747m     IFEQ DEBUG
0000040A  1639 00C00003            748m         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
00000410  0803 0000                749m         BTST #0,D3                              ; CHECK FOR CHARACTER
00000414  67F4                     750m         BEQ WAIT_FOR_READY_37                   ; NOTHING, CHECK AGAIN
00000416                           751m     ENDC
00000416                           752m     
00000416                           753mm     READ_CHAR D2
00000416                 TRUE      754mm     IFEQ DEBUG
00000416  1439 00C00007            755mm         MOVE.B DUART_RXA,D2                     ; GOT A CHARACTER, READ IT
0000041C                           756mm     ENDC
0000041C                 FALSE     757mm     IFNE DEBUG
0000041C                           758mm     ENDC
0000041C                           759mm      
0000041C  B43C 001B                760mm     CMP.B #$1B,D2                               ; CHECK FOR ESCAPE AND GO TO START
00000420  6700 FBE6                761mm     BEQ START
00000424                           762mm     ENDM
00000424                           763m 
00000424                 TRUE      764m     IFEQ DEBUG
00000424                           765mm         PRINT_CHAR D2,D3                        ; ECHO IT BACK
00000424                           766mm WAIT_FOR_READY_39                               ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000424                 TRUE      767mm     IFEQ DEBUG
00000424  1639 00C00003            768mm         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
0000042A  0803 0002                769mm         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
0000042E  67F4                     770mm         BEQ WAIT_FOR_READY_39                   ; NO SPACE, CHECK AGAIN
00000430  13C2 00C00007            771mm         MOVE.B D2,DUART_TXA                     ; SEND THE NEXT CHARACTER
00000436                           772mm     ENDC
00000436                           773mm     
00000436                 FALSE     774mm     IFNE DEBUG
00000436                           775mm     ENDC
00000436                           776mm 
00000436                           777mm     ENDM
00000436                           778m     ENDC
00000436                           779m     ENDM
00000436                           780m     HEX2BIN D2,D2,A0                            ; convert to binary -> D2
00000436  41F9 000018BC            781m     LEA HEX2BIN_LUT,A0                          ; LOAD THE LOOKUP TABLE
0000043C  0402 0030                782m     SUB.B #'0',D2                               ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
00000440  C4BC 000000FF            783m     AND.L #$FF,D2                               ; IGNORE THE TOP 3 BYTES
00000446  1430 2000                784m     MOVE.B 0(A0,D2),D2                          ; USE THAT AS AN INDEX INTO THE LUT      
0000044A                           785m     ENDM
0000044A  8A02                     786      OR.B D2,D5
0000044C  023C 00FB                787      ANDI #$FB,CCR                               ; clear the Z bit if set (from the OR above)
00000450  57CE FFB6                788      DBEQ D6,READ_DATA_TO_POKE
00000454                           789      
00000454  2047                     790      MOVE.L D7,A0                                ; address accumulator -> address register
00000456  7E00                     791      MOVE.L #0,D7                                ; clear the now used address accumulator
00000458                           792      
00000458  1085                     793      MOVE.B D5,(A0)                              ; write the data
0000045A                           794  
0000045A                           795m     PRINT_CRLF D3
0000045A                           796mm     PRINT_CHAR #13,D3                           ; CR
0000045A                           797mm WAIT_FOR_READY_42                               ; WAIT UNTIL THE THERE IS SPACE TO SEND
0000045A                 TRUE      798mm     IFEQ DEBUG
0000045A  1639 00C00003            799mm         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
00000460  0803 0002                800mm         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
00000464  67F4                     801mm         BEQ WAIT_FOR_READY_42                   ; NO SPACE, CHECK AGAIN
00000466  13FC 000D 00C00007       802mm         MOVE.B #13,DUART_TXA                    ; SEND THE NEXT CHARACTER
0000046E                           803mm     ENDC
0000046E                           804mm     
0000046E                 FALSE     805mm     IFNE DEBUG
0000046E                           806mm     ENDC
0000046E                           807mm 
0000046E                           808mm     ENDM
0000046E                           809mm     PRINT_CHAR #10,D3                           ; LF
0000046E                           810mm WAIT_FOR_READY_43                               ; WAIT UNTIL THE THERE IS SPACE TO SEND
0000046E                 TRUE      811mm     IFEQ DEBUG
0000046E  1639 00C00003            812mm         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
00000474  0803 0002                813mm         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
00000478  67F4                     814mm         BEQ WAIT_FOR_READY_43                   ; NO SPACE, CHECK AGAIN
0000047A  13FC 000A 00C00007       815mm         MOVE.B #10,DUART_TXA                    ; SEND THE NEXT CHARACTER
00000482                           816mm     ENDC
00000482                           817mm     
00000482                 FALSE     818mm     IFNE DEBUG
00000482                           819mm     ENDC
00000482                           820mm 
00000482                           821mm     ENDM
00000482                           822m     ENDM
00000482  4EF8 0186                823      JMP MAIN_LOOP
00000486                           824  
00000486                           825          
00000486                           826  S
00000486  2647                     827      MOVE.L D7,A3                                ; grab the address accumulator
00000488  7800                     828      MOVE.L #0,D4                                ; count of records read -> D4
0000048A  2478 0000                829      MOVE.L 0,A2                                 ; start address -> A2
0000048E                           830      
0000048E                           831  WAIT_FOR_SRECORD                                ; wait for the start of a record, indicated by 'S'
0000048E                           832m     DOWNLOAD D2,D3                  
0000048E                           833m WAIT_FOR_READY_44                               ; WAIT UNTIL THE THERE IS SPACE TO SEND
0000048E                           834m 
0000048E  1639 00C00003            835m     MOVE.B DUART_SRA,D3                         ; CHECK FOR COMMAND
00000494  0803 0000                836m     BTST #0,D3                                  ; CHECK FOR CHARACTER
00000498  6700 0010                837m     BEQ CONTINUE_44                             ; NOTHING, CONTINUE
0000049C                           838m  
0000049C                           839mm     READ_CHAR D2
0000049C                 TRUE      840mm     IFEQ DEBUG
0000049C  1439 00C00007            841mm         MOVE.B DUART_RXA,D2                     ; GOT A CHARACTER, READ IT
000004A2                           842mm     ENDC
000004A2                 FALSE     843mm     IFNE DEBUG
000004A2                           844mm     ENDC
000004A2                           845mm      
000004A2  B43C 001B                846mm     CMP.B #$1B,D2                               ; CHECK FOR ESCAPE AND GO TO START
000004A6  6700 FB60                847mm     BEQ START
000004AA                           848mm     ENDM
000004AA                           849m CONTINUE_44
000004AA  1639 00C00013            850m     MOVE.B DUART_SRB,D3                         ; READ STATUS REGISTER
000004B0  0803 0000                851m     BTST #0,D3                                  ; CHECK FOR CHARACTER
000004B4  67D8                     852m     BEQ WAIT_FOR_READY_44                       ; NOTHING, CHECK AGAIN
000004B6                           853m     
000004B6  1439 00C00017            854m     MOVE.B DUART_RXB,D2                         ; GOT A CHARACTER, READ IT
000004BC  13C2 00E00001            855m     MOVE.B D2,DISPLAY                           ; ECHO TO THE DISPLAY
000004C2                           856m     
000004C2                           857m     ENDM
000004C2  B43C 0053                858      CMP.B #'S',D2                               ; found S?    
000004C6  66C6                     859      BNE WAIT_FOR_SRECORD                        ; nope, keep waiting
000004C8                           860      
000004C8  5284                     861      ADD.L #1,D4                                 ; read another S record, increment count
000004CA                           862      
000004CA                           863m     DOWNLOAD D7,D3                              ; read the record digit
000004CA                           864m WAIT_FOR_READY_46                               ; WAIT UNTIL THE THERE IS SPACE TO SEND
000004CA                           865m 
000004CA  1639 00C00003            866m     MOVE.B DUART_SRA,D3                         ; CHECK FOR COMMAND
000004D0  0803 0000                867m     BTST #0,D3                                  ; CHECK FOR CHARACTER
000004D4  6700 0010                868m     BEQ CONTINUE_46                             ; NOTHING, CONTINUE
000004D8                           869m  
000004D8                           870mm     READ_CHAR D7
000004D8                 TRUE      871mm     IFEQ DEBUG
000004D8  1E39 00C00007            872mm         MOVE.B DUART_RXA,D7                     ; GOT A CHARACTER, READ IT
000004DE                           873mm     ENDC
000004DE                 FALSE     874mm     IFNE DEBUG
000004DE                           875mm     ENDC
000004DE                           876mm      
000004DE  BE3C 001B                877mm     CMP.B #$1B,D7                               ; CHECK FOR ESCAPE AND GO TO START
000004E2  6700 FB24                878mm     BEQ START
000004E6                           879mm     ENDM
000004E6                           880m CONTINUE_46
000004E6  1639 00C00013            881m     MOVE.B DUART_SRB,D3                         ; READ STATUS REGISTER
000004EC  0803 0000                882m     BTST #0,D3                                  ; CHECK FOR CHARACTER
000004F0  67D8                     883m     BEQ WAIT_FOR_READY_46                       ; NOTHING, CHECK AGAIN
000004F2                           884m     
000004F2  1E39 00C00017            885m     MOVE.B DUART_RXB,D7                         ; GOT A CHARACTER, READ IT
000004F8  13C7 00E00001            886m     MOVE.B D7,DISPLAY                           ; ECHO TO THE DISPLAY
000004FE                           887m     
000004FE                           888m     ENDM
000004FE                           889  
000004FE  7C00                     890      MOVE.L #0,D6                                ; checksum
00000500                           891  
00000500  7A00                     892      MOVE.L #0,D5                                ; read the 2 digit byte count -> D5
00000502                           893m     DOWNLOAD D2,D3              
00000502                           894m WAIT_FOR_READY_48                               ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000502                           895m 
00000502  1639 00C00003            896m     MOVE.B DUART_SRA,D3                         ; CHECK FOR COMMAND
00000508  0803 0000                897m     BTST #0,D3                                  ; CHECK FOR CHARACTER
0000050C  6700 0010                898m     BEQ CONTINUE_48                             ; NOTHING, CONTINUE
00000510                           899m  
00000510                           900mm     READ_CHAR D2
00000510                 TRUE      901mm     IFEQ DEBUG
00000510  1439 00C00007            902mm         MOVE.B DUART_RXA,D2                     ; GOT A CHARACTER, READ IT
00000516                           903mm     ENDC
00000516                 FALSE     904mm     IFNE DEBUG
00000516                           905mm     ENDC
00000516                           906mm      
00000516  B43C 001B                907mm     CMP.B #$1B,D2                               ; CHECK FOR ESCAPE AND GO TO START
0000051A  6700 FAEC                908mm     BEQ START
0000051E                           909mm     ENDM
0000051E                           910m CONTINUE_48
0000051E  1639 00C00013            911m     MOVE.B DUART_SRB,D3                         ; READ STATUS REGISTER
00000524  0803 0000                912m     BTST #0,D3                                  ; CHECK FOR CHARACTER
00000528  67D8                     913m     BEQ WAIT_FOR_READY_48                       ; NOTHING, CHECK AGAIN
0000052A                           914m     
0000052A  1439 00C00017            915m     MOVE.B DUART_RXB,D2                         ; GOT A CHARACTER, READ IT
00000530  13C2 00E00001            916m     MOVE.B D2,DISPLAY                           ; ECHO TO THE DISPLAY
00000536                           917m     
00000536                           918m     ENDM
00000536                           919m     HEX2BIN D2,D2,A0
00000536  41F9 000018BC            920m     LEA HEX2BIN_LUT,A0                          ; LOAD THE LOOKUP TABLE
0000053C  0402 0030                921m     SUB.B #'0',D2                               ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
00000540  C4BC 000000FF            922m     AND.L #$FF,D2                               ; IGNORE THE TOP 3 BYTES
00000546  1430 2000                923m     MOVE.B 0(A0,D2),D2                          ; USE THAT AS AN INDEX INTO THE LUT      
0000054A                           924m     ENDM
0000054A  8A82                     925      OR.L D2,D5
0000054C  E98D                     926      LSL.L #4,D5    
0000054E                           927m     DOWNLOAD D2,D3
0000054E                           928m WAIT_FOR_READY_51                               ; WAIT UNTIL THE THERE IS SPACE TO SEND
0000054E                           929m 
0000054E  1639 00C00003            930m     MOVE.B DUART_SRA,D3                         ; CHECK FOR COMMAND
00000554  0803 0000                931m     BTST #0,D3                                  ; CHECK FOR CHARACTER
00000558  6700 0010                932m     BEQ CONTINUE_51                             ; NOTHING, CONTINUE
0000055C                           933m  
0000055C                           934mm     READ_CHAR D2
0000055C                 TRUE      935mm     IFEQ DEBUG
0000055C  1439 00C00007            936mm         MOVE.B DUART_RXA,D2                     ; GOT A CHARACTER, READ IT
00000562                           937mm     ENDC
00000562                 FALSE     938mm     IFNE DEBUG
00000562                           939mm     ENDC
00000562                           940mm      
00000562  B43C 001B                941mm     CMP.B #$1B,D2                               ; CHECK FOR ESCAPE AND GO TO START
00000566  6700 FAA0                942mm     BEQ START
0000056A                           943mm     ENDM
0000056A                           944m CONTINUE_51
0000056A  1639 00C00013            945m     MOVE.B DUART_SRB,D3                         ; READ STATUS REGISTER
00000570  0803 0000                946m     BTST #0,D3                                  ; CHECK FOR CHARACTER
00000574  67D8                     947m     BEQ WAIT_FOR_READY_51                       ; NOTHING, CHECK AGAIN
00000576                           948m     
00000576  1439 00C00017            949m     MOVE.B DUART_RXB,D2                         ; GOT A CHARACTER, READ IT
0000057C  13C2 00E00001            950m     MOVE.B D2,DISPLAY                           ; ECHO TO THE DISPLAY
00000582                           951m     
00000582                           952m     ENDM
00000582                           953m     HEX2BIN D2,D2,A0  
00000582  41F9 000018BC            954m     LEA HEX2BIN_LUT,A0                          ; LOAD THE LOOKUP TABLE
00000588  0402 0030                955m     SUB.B #'0',D2                               ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
0000058C  C4BC 000000FF            956m     AND.L #$FF,D2                               ; IGNORE THE TOP 3 BYTES
00000592  1430 2000                957m     MOVE.B 0(A0,D2),D2                          ; USE THAT AS AN INDEX INTO THE LUT      
00000596                           958m     ENDM
00000596  8A82                     959      OR.L D2,D5
00000598                           960                  
00000598  DC85                     961      ADD.L D5,D6                                 ; add byte count into checksum
0000059A                           962  
0000059A                           963      IF.B D7 <EQ> #'0' THEN.L                    ; header, just ignore it
0000059A  BE3C 0030                964s     CMP.B   #'0',D7
0000059E  6600 000A                965s     BNE.L   _00000000
000005A2  6000 FEEA                966          BRA WAIT_FOR_SRECORD
000005A6                           967      ELSE
000005A6  6000 0D06                968s     BRA _00000001
000005AA                           969s _00000000
000005AA                           970          IF.B D7 <EQ> #'1' THEN.L                ; 16 bit address data record
000005AA  BE3C 0031                971s     CMP.B   #'1',D7
000005AE  6600 04F4                972s     BNE.L   _00000002
000005B2  7E00                     973              MOVE.L #0,D7                        ; read the 16 bit address, we'll stomp on D7 for this since it's sort of like the address accumulator
000005B4                           974m             DOWNLOAD D2,D3                      ; top byte
000005B4                           975m WAIT_FOR_READY_54                               ; WAIT UNTIL THE THERE IS SPACE TO SEND
000005B4                           976m 
000005B4  1639 00C00003            977m     MOVE.B DUART_SRA,D3                         ; CHECK FOR COMMAND
000005BA  0803 0000                978m     BTST #0,D3                                  ; CHECK FOR CHARACTER
000005BE  6700 0010                979m     BEQ CONTINUE_54                             ; NOTHING, CONTINUE
000005C2                           980m  
000005C2                           981mm     READ_CHAR D2
000005C2                 TRUE      982mm     IFEQ DEBUG
000005C2  1439 00C00007            983mm         MOVE.B DUART_RXA,D2                     ; GOT A CHARACTER, READ IT
000005C8                           984mm     ENDC
000005C8                 FALSE     985mm     IFNE DEBUG
000005C8                           986mm     ENDC
000005C8                           987mm      
000005C8  B43C 001B                988mm     CMP.B #$1B,D2                               ; CHECK FOR ESCAPE AND GO TO START
000005CC  6700 FA3A                989mm     BEQ START
000005D0                           990mm     ENDM
000005D0                           991m CONTINUE_54
000005D0  1639 00C00013            992m     MOVE.B DUART_SRB,D3                         ; READ STATUS REGISTER
000005D6  0803 0000                993m     BTST #0,D3                                  ; CHECK FOR CHARACTER
000005DA  67D8                     994m     BEQ WAIT_FOR_READY_54                       ; NOTHING, CHECK AGAIN
000005DC                           995m     
000005DC  1439 00C00017            996m     MOVE.B DUART_RXB,D2                         ; GOT A CHARACTER, READ IT
000005E2  13C2 00E00001            997m     MOVE.B D2,DISPLAY                           ; ECHO TO THE DISPLAY
000005E8                           998m     
000005E8                           999m     ENDM
000005E8                          1000m             PRINT_CHAR D2,D3
000005E8                          1001m WAIT_FOR_READY_56                               ; WAIT UNTIL THE THERE IS SPACE TO SEND
000005E8                 TRUE     1002m     IFEQ DEBUG
000005E8  1639 00C00003           1003m         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
000005EE  0803 0002               1004m         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
000005F2  67F4                    1005m         BEQ WAIT_FOR_READY_56                   ; NO SPACE, CHECK AGAIN
000005F4  13C2 00C00007           1006m         MOVE.B D2,DUART_TXA                     ; SEND THE NEXT CHARACTER
000005FA                          1007m     ENDC
000005FA                          1008m     
000005FA                 FALSE    1009m     IFNE DEBUG
000005FA                          1010m     ENDC
000005FA                          1011m 
000005FA                          1012m     ENDM
000005FA                          1013m             HEX2BIN D2,D2,A0
000005FA  41F9 000018BC           1014m     LEA HEX2BIN_LUT,A0                          ; LOAD THE LOOKUP TABLE
00000600  0402 0030               1015m     SUB.B #'0',D2                               ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
00000604  C4BC 000000FF           1016m     AND.L #$FF,D2                               ; IGNORE THE TOP 3 BYTES
0000060A  1430 2000               1017m     MOVE.B 0(A0,D2),D2                          ; USE THAT AS AN INDEX INTO THE LUT      
0000060E                          1018m     ENDM
0000060E  8E82                    1019              OR.L D2,D7
00000610  E98F                    1020              LSL.L #4,D7
00000612                          1021m             DOWNLOAD D2,D3         
00000612                          1022m WAIT_FOR_READY_58                               ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000612                          1023m 
00000612  1639 00C00003           1024m     MOVE.B DUART_SRA,D3                         ; CHECK FOR COMMAND
00000618  0803 0000               1025m     BTST #0,D3                                  ; CHECK FOR CHARACTER
0000061C  6700 0010               1026m     BEQ CONTINUE_58                             ; NOTHING, CONTINUE
00000620                          1027m  
00000620                          1028mm     READ_CHAR D2
00000620                 TRUE     1029mm     IFEQ DEBUG
00000620  1439 00C00007           1030mm         MOVE.B DUART_RXA,D2                     ; GOT A CHARACTER, READ IT
00000626                          1031mm     ENDC
00000626                 FALSE    1032mm     IFNE DEBUG
00000626                          1033mm     ENDC
00000626                          1034mm      
00000626  B43C 001B               1035mm     CMP.B #$1B,D2                               ; CHECK FOR ESCAPE AND GO TO START
0000062A  6700 F9DC               1036mm     BEQ START
0000062E                          1037mm     ENDM
0000062E                          1038m CONTINUE_58
0000062E  1639 00C00013           1039m     MOVE.B DUART_SRB,D3                         ; READ STATUS REGISTER
00000634  0803 0000               1040m     BTST #0,D3                                  ; CHECK FOR CHARACTER
00000638  67D8                    1041m     BEQ WAIT_FOR_READY_58                       ; NOTHING, CHECK AGAIN
0000063A                          1042m     
0000063A  1439 00C00017           1043m     MOVE.B DUART_RXB,D2                         ; GOT A CHARACTER, READ IT
00000640  13C2 00E00001           1044m     MOVE.B D2,DISPLAY                           ; ECHO TO THE DISPLAY
00000646                          1045m     
00000646                          1046m     ENDM
00000646                          1047m             PRINT_CHAR D2,D3
00000646                          1048m WAIT_FOR_READY_60                               ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000646                 TRUE     1049m     IFEQ DEBUG
00000646  1639 00C00003           1050m         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
0000064C  0803 0002               1051m         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
00000650  67F4                    1052m         BEQ WAIT_FOR_READY_60                   ; NO SPACE, CHECK AGAIN
00000652  13C2 00C00007           1053m         MOVE.B D2,DUART_TXA                     ; SEND THE NEXT CHARACTER
00000658                          1054m     ENDC
00000658                          1055m     
00000658                 FALSE    1056m     IFNE DEBUG
00000658                          1057m     ENDC
00000658                          1058m 
00000658                          1059m     ENDM
00000658                          1060m             HEX2BIN D2,D2,A0
00000658  41F9 000018BC           1061m     LEA HEX2BIN_LUT,A0                          ; LOAD THE LOOKUP TABLE
0000065E  0402 0030               1062m     SUB.B #'0',D2                               ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
00000662  C4BC 000000FF           1063m     AND.L #$FF,D2                               ; IGNORE THE TOP 3 BYTES
00000668  1430 2000               1064m     MOVE.B 0(A0,D2),D2                          ; USE THAT AS AN INDEX INTO THE LUT      
0000066C                          1065m     ENDM
0000066C  8E82                    1066              OR.L D2,D7
0000066E                          1067          
0000066E  DC87                    1068              ADD.L D7,D6                         ; add top byte of address into checksum
00000670                          1069  
00000670  E98F                    1070              LSL.L #4,D7                         ; bottom byte
00000672                          1071m             DOWNLOAD D2,D3
00000672                          1072m WAIT_FOR_READY_62                               ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000672                          1073m 
00000672  1639 00C00003           1074m     MOVE.B DUART_SRA,D3                         ; CHECK FOR COMMAND
00000678  0803 0000               1075m     BTST #0,D3                                  ; CHECK FOR CHARACTER
0000067C  6700 0010               1076m     BEQ CONTINUE_62                             ; NOTHING, CONTINUE
00000680                          1077m  
00000680                          1078mm     READ_CHAR D2
00000680                 TRUE     1079mm     IFEQ DEBUG
00000680  1439 00C00007           1080mm         MOVE.B DUART_RXA,D2                     ; GOT A CHARACTER, READ IT
00000686                          1081mm     ENDC
00000686                 FALSE    1082mm     IFNE DEBUG
00000686                          1083mm     ENDC
00000686                          1084mm      
00000686  B43C 001B               1085mm     CMP.B #$1B,D2                               ; CHECK FOR ESCAPE AND GO TO START
0000068A  6700 F97C               1086mm     BEQ START
0000068E                          1087mm     ENDM
0000068E                          1088m CONTINUE_62
0000068E  1639 00C00013           1089m     MOVE.B DUART_SRB,D3                         ; READ STATUS REGISTER
00000694  0803 0000               1090m     BTST #0,D3                                  ; CHECK FOR CHARACTER
00000698  67D8                    1091m     BEQ WAIT_FOR_READY_62                       ; NOTHING, CHECK AGAIN
0000069A                          1092m     
0000069A  1439 00C00017           1093m     MOVE.B DUART_RXB,D2                         ; GOT A CHARACTER, READ IT
000006A0  13C2 00E00001           1094m     MOVE.B D2,DISPLAY                           ; ECHO TO THE DISPLAY
000006A6                          1095m     
000006A6                          1096m     ENDM
000006A6                          1097m             PRINT_CHAR D2,D3
000006A6                          1098m WAIT_FOR_READY_64                               ; WAIT UNTIL THE THERE IS SPACE TO SEND
000006A6                 TRUE     1099m     IFEQ DEBUG
000006A6  1639 00C00003           1100m         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
000006AC  0803 0002               1101m         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
000006B0  67F4                    1102m         BEQ WAIT_FOR_READY_64                   ; NO SPACE, CHECK AGAIN
000006B2  13C2 00C00007           1103m         MOVE.B D2,DUART_TXA                     ; SEND THE NEXT CHARACTER
000006B8                          1104m     ENDC
000006B8                          1105m     
000006B8                 FALSE    1106m     IFNE DEBUG
000006B8                          1107m     ENDC
000006B8                          1108m 
000006B8                          1109m     ENDM
000006B8                          1110m             HEX2BIN D2,D2,A0
000006B8  41F9 000018BC           1111m     LEA HEX2BIN_LUT,A0                          ; LOAD THE LOOKUP TABLE
000006BE  0402 0030               1112m     SUB.B #'0',D2                               ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
000006C2  C4BC 000000FF           1113m     AND.L #$FF,D2                               ; IGNORE THE TOP 3 BYTES
000006C8  1430 2000               1114m     MOVE.B 0(A0,D2),D2                          ; USE THAT AS AN INDEX INTO THE LUT      
000006CC                          1115m     ENDM
000006CC  8E82                    1116              OR.L D2,D7
000006CE  E98F                    1117              LSL.L #4,D7        
000006D0                          1118m             DOWNLOAD D2,D3
000006D0                          1119m WAIT_FOR_READY_66                               ; WAIT UNTIL THE THERE IS SPACE TO SEND
000006D0                          1120m 
000006D0  1639 00C00003           1121m     MOVE.B DUART_SRA,D3                         ; CHECK FOR COMMAND
000006D6  0803 0000               1122m     BTST #0,D3                                  ; CHECK FOR CHARACTER
000006DA  6700 0010               1123m     BEQ CONTINUE_66                             ; NOTHING, CONTINUE
000006DE                          1124m  
000006DE                          1125mm     READ_CHAR D2
000006DE                 TRUE     1126mm     IFEQ DEBUG
000006DE  1439 00C00007           1127mm         MOVE.B DUART_RXA,D2                     ; GOT A CHARACTER, READ IT
000006E4                          1128mm     ENDC
000006E4                 FALSE    1129mm     IFNE DEBUG
000006E4                          1130mm     ENDC
000006E4                          1131mm      
000006E4  B43C 001B               1132mm     CMP.B #$1B,D2                               ; CHECK FOR ESCAPE AND GO TO START
000006E8  6700 F91E               1133mm     BEQ START
000006EC                          1134mm     ENDM
000006EC                          1135m CONTINUE_66
000006EC  1639 00C00013           1136m     MOVE.B DUART_SRB,D3                         ; READ STATUS REGISTER
000006F2  0803 0000               1137m     BTST #0,D3                                  ; CHECK FOR CHARACTER
000006F6  67D8                    1138m     BEQ WAIT_FOR_READY_66                       ; NOTHING, CHECK AGAIN
000006F8                          1139m     
000006F8  1439 00C00017           1140m     MOVE.B DUART_RXB,D2                         ; GOT A CHARACTER, READ IT
000006FE  13C2 00E00001           1141m     MOVE.B D2,DISPLAY                           ; ECHO TO THE DISPLAY
00000704                          1142m     
00000704                          1143m     ENDM
00000704                          1144m             PRINT_CHAR D2,D3
00000704                          1145m WAIT_FOR_READY_68                               ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000704                 TRUE     1146m     IFEQ DEBUG
00000704  1639 00C00003           1147m         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
0000070A  0803 0002               1148m         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
0000070E  67F4                    1149m         BEQ WAIT_FOR_READY_68                   ; NO SPACE, CHECK AGAIN
00000710  13C2 00C00007           1150m         MOVE.B D2,DUART_TXA                     ; SEND THE NEXT CHARACTER
00000716                          1151m     ENDC
00000716                          1152m     
00000716                 FALSE    1153m     IFNE DEBUG
00000716                          1154m     ENDC
00000716                          1155m 
00000716                          1156m     ENDM
00000716                          1157m             HEX2BIN D2,D2,A0
00000716  41F9 000018BC           1158m     LEA HEX2BIN_LUT,A0                          ; LOAD THE LOOKUP TABLE
0000071C  0402 0030               1159m     SUB.B #'0',D2                               ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
00000720  C4BC 000000FF           1160m     AND.L #$FF,D2                               ; IGNORE THE TOP 3 BYTES
00000726  1430 2000               1161m     MOVE.B 0(A0,D2),D2                          ; USE THAT AS AN INDEX INTO THE LUT      
0000072A                          1162m     ENDM
0000072A  8E82                    1163              OR.L D2,D7
0000072C                          1164          
0000072C  7400                    1165              MOVE.L #0,D2                        ; rextract bottom byte of address and add into checksum
0000072E  1407                    1166              MOVE.B D7,D2
00000730  DC82                    1167              ADD.L D2,D6
00000732                          1168          
00000732  DE8B                    1169              ADD.L A3,D7                         ; add in the offset
00000734                          1170          
00000734  5785                    1171              SUB.L #3,D5                         ; subtract three bytes for 16 bit address and 1 byte checksum
00000736                          1172          
00000736  0807 0000               1173              BTST #0,D7                          ; deal with odd addresses
0000073A                          1174  
0000073A  2247                    1175              MOVE.L D7,A1                        ; put the address in an address register, and we can now re-use D7
0000073C  6700 00D0               1176              BEQ EVEN
00000740                          1177                  
00000740  5385                    1178              SUB.L #1,D5
00000742  5389                    1179              SUB.L #1,A1
00000744                          1180          
00000744  7E00                    1181              MOVE.L #0,D7
00000746                          1182m             DOWNLOAD D2,D3                      ; MS 4 bits
00000746                          1183m WAIT_FOR_READY_70                               ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000746                          1184m 
00000746  1639 00C00003           1185m     MOVE.B DUART_SRA,D3                         ; CHECK FOR COMMAND
0000074C  0803 0000               1186m     BTST #0,D3                                  ; CHECK FOR CHARACTER
00000750  6700 0010               1187m     BEQ CONTINUE_70                             ; NOTHING, CONTINUE
00000754                          1188m  
00000754                          1189mm     READ_CHAR D2
00000754                 TRUE     1190mm     IFEQ DEBUG
00000754  1439 00C00007           1191mm         MOVE.B DUART_RXA,D2                     ; GOT A CHARACTER, READ IT
0000075A                          1192mm     ENDC
0000075A                 FALSE    1193mm     IFNE DEBUG
0000075A                          1194mm     ENDC
0000075A                          1195mm      
0000075A  B43C 001B               1196mm     CMP.B #$1B,D2                               ; CHECK FOR ESCAPE AND GO TO START
0000075E  6700 F8A8               1197mm     BEQ START
00000762                          1198mm     ENDM
00000762                          1199m CONTINUE_70
00000762  1639 00C00013           1200m     MOVE.B DUART_SRB,D3                         ; READ STATUS REGISTER
00000768  0803 0000               1201m     BTST #0,D3                                  ; CHECK FOR CHARACTER
0000076C  67D8                    1202m     BEQ WAIT_FOR_READY_70                       ; NOTHING, CHECK AGAIN
0000076E                          1203m     
0000076E  1439 00C00017           1204m     MOVE.B DUART_RXB,D2                         ; GOT A CHARACTER, READ IT
00000774  13C2 00E00001           1205m     MOVE.B D2,DISPLAY                           ; ECHO TO THE DISPLAY
0000077A                          1206m     
0000077A                          1207m     ENDM
0000077A                          1208m             PRINT_CHAR D2,D3
0000077A                          1209m WAIT_FOR_READY_72                               ; WAIT UNTIL THE THERE IS SPACE TO SEND
0000077A                 TRUE     1210m     IFEQ DEBUG
0000077A  1639 00C00003           1211m         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
00000780  0803 0002               1212m         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
00000784  67F4                    1213m         BEQ WAIT_FOR_READY_72                   ; NO SPACE, CHECK AGAIN
00000786  13C2 00C00007           1214m         MOVE.B D2,DUART_TXA                     ; SEND THE NEXT CHARACTER
0000078C                          1215m     ENDC
0000078C                          1216m     
0000078C                 FALSE    1217m     IFNE DEBUG
0000078C                          1218m     ENDC
0000078C                          1219m 
0000078C                          1220m     ENDM
0000078C                          1221m             HEX2BIN D2,D2,A0
0000078C  41F9 000018BC           1222m     LEA HEX2BIN_LUT,A0                          ; LOAD THE LOOKUP TABLE
00000792  0402 0030               1223m     SUB.B #'0',D2                               ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
00000796  C4BC 000000FF           1224m     AND.L #$FF,D2                               ; IGNORE THE TOP 3 BYTES
0000079C  1430 2000               1225m     MOVE.B 0(A0,D2),D2                          ; USE THAT AS AN INDEX INTO THE LUT      
000007A0                          1226m     ENDM
000007A0  8E82                    1227              OR.L D2,D7
000007A2  E98F                    1228              LSL.L #4,D7
000007A4                          1229               
000007A4                          1230m             DOWNLOAD D2,D3                      ; LS 4 bits    
000007A4                          1231m WAIT_FOR_READY_74                               ; WAIT UNTIL THE THERE IS SPACE TO SEND
000007A4                          1232m 
000007A4  1639 00C00003           1233m     MOVE.B DUART_SRA,D3                         ; CHECK FOR COMMAND
000007AA  0803 0000               1234m     BTST #0,D3                                  ; CHECK FOR CHARACTER
000007AE  6700 0010               1235m     BEQ CONTINUE_74                             ; NOTHING, CONTINUE
000007B2                          1236m  
000007B2                          1237mm     READ_CHAR D2
000007B2                 TRUE     1238mm     IFEQ DEBUG
000007B2  1439 00C00007           1239mm         MOVE.B DUART_RXA,D2                     ; GOT A CHARACTER, READ IT
000007B8                          1240mm     ENDC
000007B8                 FALSE    1241mm     IFNE DEBUG
000007B8                          1242mm     ENDC
000007B8                          1243mm      
000007B8  B43C 001B               1244mm     CMP.B #$1B,D2                               ; CHECK FOR ESCAPE AND GO TO START
000007BC  6700 F84A               1245mm     BEQ START
000007C0                          1246mm     ENDM
000007C0                          1247m CONTINUE_74
000007C0  1639 00C00013           1248m     MOVE.B DUART_SRB,D3                         ; READ STATUS REGISTER
000007C6  0803 0000               1249m     BTST #0,D3                                  ; CHECK FOR CHARACTER
000007CA  67D8                    1250m     BEQ WAIT_FOR_READY_74                       ; NOTHING, CHECK AGAIN
000007CC                          1251m     
000007CC  1439 00C00017           1252m     MOVE.B DUART_RXB,D2                         ; GOT A CHARACTER, READ IT
000007D2  13C2 00E00001           1253m     MOVE.B D2,DISPLAY                           ; ECHO TO THE DISPLAY
000007D8                          1254m     
000007D8                          1255m     ENDM
000007D8                          1256m             PRINT_CHAR D2,D3
000007D8                          1257m WAIT_FOR_READY_76                               ; WAIT UNTIL THE THERE IS SPACE TO SEND
000007D8                 TRUE     1258m     IFEQ DEBUG
000007D8  1639 00C00003           1259m         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
000007DE  0803 0002               1260m         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
000007E2  67F4                    1261m         BEQ WAIT_FOR_READY_76                   ; NO SPACE, CHECK AGAIN
000007E4  13C2 00C00007           1262m         MOVE.B D2,DUART_TXA                     ; SEND THE NEXT CHARACTER
000007EA                          1263m     ENDC
000007EA                          1264m     
000007EA                 FALSE    1265m     IFNE DEBUG
000007EA                          1266m     ENDC
000007EA                          1267m 
000007EA                          1268m     ENDM
000007EA                          1269m             HEX2BIN D2,D2,A0
000007EA  41F9 000018BC           1270m     LEA HEX2BIN_LUT,A0                          ; LOAD THE LOOKUP TABLE
000007F0  0402 0030               1271m     SUB.B #'0',D2                               ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
000007F4  C4BC 000000FF           1272m     AND.L #$FF,D2                               ; IGNORE THE TOP 3 BYTES
000007FA  1430 2000               1273m     MOVE.B 0(A0,D2),D2                          ; USE THAT AS AN INDEX INTO THE LUT      
000007FE                          1274m     ENDM
000007FE  8E82                    1275              OR.L D2,D7
00000800                          1276                          
00000800  DC87                    1277              ADD.L D7,D6                         ; add into checksum
00000802                          1278                        
00000802  3611                    1279              MOVE.W (A1),D3                      ; get the current data and replace the bottom byte
00000804                          1280          
00000804  0243 FF00               1281              ANDI.W #$FF00,D3
00000808  8647                    1282              OR.W D7,D3
0000080A                          1283          
0000080A  3283                    1284              MOVE.W D3,(A1)                      ; store it!
0000080C  5489                    1285              ADD.L #2,A1
0000080E                          1286  EVEN        
0000080E                          1287              WHILE.L D5 <GE> #2 DO               ; read the data bytes
0000080E                          1288s _10000000
0000080E  BABC 00000002           1289s     CMP.L   #2,D5
00000814  6D00 018A               1290s     BLT _10000001
00000818  5585                    1291                  SUB.L #2,D5
0000081A  7E00                    1292                  MOVE.L #0,D7                    ; D7 holds the word
0000081C                          1293              
0000081C                          1294m                 DOWNLOAD D2,D3                  ; MS 4 bits
0000081C                          1295m WAIT_FOR_READY_78                               ; WAIT UNTIL THE THERE IS SPACE TO SEND
0000081C                          1296m 
0000081C  1639 00C00003           1297m     MOVE.B DUART_SRA,D3                         ; CHECK FOR COMMAND
00000822  0803 0000               1298m     BTST #0,D3                                  ; CHECK FOR CHARACTER
00000826  6700 0010               1299m     BEQ CONTINUE_78                             ; NOTHING, CONTINUE
0000082A                          1300m  
0000082A                          1301mm     READ_CHAR D2
0000082A                 TRUE     1302mm     IFEQ DEBUG
0000082A  1439 00C00007           1303mm         MOVE.B DUART_RXA,D2                     ; GOT A CHARACTER, READ IT
00000830                          1304mm     ENDC
00000830                 FALSE    1305mm     IFNE DEBUG
00000830                          1306mm     ENDC
00000830                          1307mm      
00000830  B43C 001B               1308mm     CMP.B #$1B,D2                               ; CHECK FOR ESCAPE AND GO TO START
00000834  6700 F7D2               1309mm     BEQ START
00000838                          1310mm     ENDM
00000838                          1311m CONTINUE_78
00000838  1639 00C00013           1312m     MOVE.B DUART_SRB,D3                         ; READ STATUS REGISTER
0000083E  0803 0000               1313m     BTST #0,D3                                  ; CHECK FOR CHARACTER
00000842  67D8                    1314m     BEQ WAIT_FOR_READY_78                       ; NOTHING, CHECK AGAIN
00000844                          1315m     
00000844  1439 00C00017           1316m     MOVE.B DUART_RXB,D2                         ; GOT A CHARACTER, READ IT
0000084A  13C2 00E00001           1317m     MOVE.B D2,DISPLAY                           ; ECHO TO THE DISPLAY
00000850                          1318m     
00000850                          1319m     ENDM
00000850                          1320m                 PRINT_CHAR D2,D3
00000850                          1321m WAIT_FOR_READY_80                               ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000850                 TRUE     1322m     IFEQ DEBUG
00000850  1639 00C00003           1323m         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
00000856  0803 0002               1324m         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
0000085A  67F4                    1325m         BEQ WAIT_FOR_READY_80                   ; NO SPACE, CHECK AGAIN
0000085C  13C2 00C00007           1326m         MOVE.B D2,DUART_TXA                     ; SEND THE NEXT CHARACTER
00000862                          1327m     ENDC
00000862                          1328m     
00000862                 FALSE    1329m     IFNE DEBUG
00000862                          1330m     ENDC
00000862                          1331m 
00000862                          1332m     ENDM
00000862                          1333m                 HEX2BIN D2,D2,A0
00000862  41F9 000018BC           1334m     LEA HEX2BIN_LUT,A0                          ; LOAD THE LOOKUP TABLE
00000868  0402 0030               1335m     SUB.B #'0',D2                               ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
0000086C  C4BC 000000FF           1336m     AND.L #$FF,D2                               ; IGNORE THE TOP 3 BYTES
00000872  1430 2000               1337m     MOVE.B 0(A0,D2),D2                          ; USE THAT AS AN INDEX INTO THE LUT      
00000876                          1338m     ENDM
00000876  8E82                    1339                  OR.L D2,D7
00000878  E98F                    1340                  LSL.L #4,D7
0000087A                          1341               
0000087A                          1342m                 DOWNLOAD D2,D3                  ; LS 4 bits    
0000087A                          1343m WAIT_FOR_READY_82                               ; WAIT UNTIL THE THERE IS SPACE TO SEND
0000087A                          1344m 
0000087A  1639 00C00003           1345m     MOVE.B DUART_SRA,D3                         ; CHECK FOR COMMAND
00000880  0803 0000               1346m     BTST #0,D3                                  ; CHECK FOR CHARACTER
00000884  6700 0010               1347m     BEQ CONTINUE_82                             ; NOTHING, CONTINUE
00000888                          1348m  
00000888                          1349mm     READ_CHAR D2
00000888                 TRUE     1350mm     IFEQ DEBUG
00000888  1439 00C00007           1351mm         MOVE.B DUART_RXA,D2                     ; GOT A CHARACTER, READ IT
0000088E                          1352mm     ENDC
0000088E                 FALSE    1353mm     IFNE DEBUG
0000088E                          1354mm     ENDC
0000088E                          1355mm      
0000088E  B43C 001B               1356mm     CMP.B #$1B,D2                               ; CHECK FOR ESCAPE AND GO TO START
00000892  6700 F774               1357mm     BEQ START
00000896                          1358mm     ENDM
00000896                          1359m CONTINUE_82
00000896  1639 00C00013           1360m     MOVE.B DUART_SRB,D3                         ; READ STATUS REGISTER
0000089C  0803 0000               1361m     BTST #0,D3                                  ; CHECK FOR CHARACTER
000008A0  67D8                    1362m     BEQ WAIT_FOR_READY_82                       ; NOTHING, CHECK AGAIN
000008A2                          1363m     
000008A2  1439 00C00017           1364m     MOVE.B DUART_RXB,D2                         ; GOT A CHARACTER, READ IT
000008A8  13C2 00E00001           1365m     MOVE.B D2,DISPLAY                           ; ECHO TO THE DISPLAY
000008AE                          1366m     
000008AE                          1367m     ENDM
000008AE                          1368m                 PRINT_CHAR D2,D3
000008AE                          1369m WAIT_FOR_READY_84                               ; WAIT UNTIL THE THERE IS SPACE TO SEND
000008AE                 TRUE     1370m     IFEQ DEBUG
000008AE  1639 00C00003           1371m         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
000008B4  0803 0002               1372m         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
000008B8  67F4                    1373m         BEQ WAIT_FOR_READY_84                   ; NO SPACE, CHECK AGAIN
000008BA  13C2 00C00007           1374m         MOVE.B D2,DUART_TXA                     ; SEND THE NEXT CHARACTER
000008C0                          1375m     ENDC
000008C0                          1376m     
000008C0                 FALSE    1377m     IFNE DEBUG
000008C0                          1378m     ENDC
000008C0                          1379m 
000008C0                          1380m     ENDM
000008C0                          1381m                 HEX2BIN D2,D2,A0
000008C0  41F9 000018BC           1382m     LEA HEX2BIN_LUT,A0                          ; LOAD THE LOOKUP TABLE
000008C6  0402 0030               1383m     SUB.B #'0',D2                               ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
000008CA  C4BC 000000FF           1384m     AND.L #$FF,D2                               ; IGNORE THE TOP 3 BYTES
000008D0  1430 2000               1385m     MOVE.B 0(A0,D2),D2                          ; USE THAT AS AN INDEX INTO THE LUT      
000008D4                          1386m     ENDM
000008D4  8E82                    1387                  OR.L D2,D7
000008D6                          1388                          
000008D6  DC87                    1389                  ADD.L D7,D6                     ; add into checksum
000008D8                          1390              
000008D8  E98F                    1391                  LSL.L #4,D7
000008DA                          1392m                 DOWNLOAD D2,D3                  ; MS 4 bits
000008DA                          1393m WAIT_FOR_READY_86                               ; WAIT UNTIL THE THERE IS SPACE TO SEND
000008DA                          1394m 
000008DA  1639 00C00003           1395m     MOVE.B DUART_SRA,D3                         ; CHECK FOR COMMAND
000008E0  0803 0000               1396m     BTST #0,D3                                  ; CHECK FOR CHARACTER
000008E4  6700 0010               1397m     BEQ CONTINUE_86                             ; NOTHING, CONTINUE
000008E8                          1398m  
000008E8                          1399mm     READ_CHAR D2
000008E8                 TRUE     1400mm     IFEQ DEBUG
000008E8  1439 00C00007           1401mm         MOVE.B DUART_RXA,D2                     ; GOT A CHARACTER, READ IT
000008EE                          1402mm     ENDC
000008EE                 FALSE    1403mm     IFNE DEBUG
000008EE                          1404mm     ENDC
000008EE                          1405mm      
000008EE  B43C 001B               1406mm     CMP.B #$1B,D2                               ; CHECK FOR ESCAPE AND GO TO START
000008F2  6700 F714               1407mm     BEQ START
000008F6                          1408mm     ENDM
000008F6                          1409m CONTINUE_86
000008F6  1639 00C00013           1410m     MOVE.B DUART_SRB,D3                         ; READ STATUS REGISTER
000008FC  0803 0000               1411m     BTST #0,D3                                  ; CHECK FOR CHARACTER
00000900  67D8                    1412m     BEQ WAIT_FOR_READY_86                       ; NOTHING, CHECK AGAIN
00000902                          1413m     
00000902  1439 00C00017           1414m     MOVE.B DUART_RXB,D2                         ; GOT A CHARACTER, READ IT
00000908  13C2 00E00001           1415m     MOVE.B D2,DISPLAY                           ; ECHO TO THE DISPLAY
0000090E                          1416m     
0000090E                          1417m     ENDM
0000090E                          1418m                 PRINT_CHAR D2,D3
0000090E                          1419m WAIT_FOR_READY_88                               ; WAIT UNTIL THE THERE IS SPACE TO SEND
0000090E                 TRUE     1420m     IFEQ DEBUG
0000090E  1639 00C00003           1421m         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
00000914  0803 0002               1422m         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
00000918  67F4                    1423m         BEQ WAIT_FOR_READY_88                   ; NO SPACE, CHECK AGAIN
0000091A  13C2 00C00007           1424m         MOVE.B D2,DUART_TXA                     ; SEND THE NEXT CHARACTER
00000920                          1425m     ENDC
00000920                          1426m     
00000920                 FALSE    1427m     IFNE DEBUG
00000920                          1428m     ENDC
00000920                          1429m 
00000920                          1430m     ENDM
00000920                          1431m                 HEX2BIN D2,D2,A0
00000920  41F9 000018BC           1432m     LEA HEX2BIN_LUT,A0                          ; LOAD THE LOOKUP TABLE
00000926  0402 0030               1433m     SUB.B #'0',D2                               ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
0000092A  C4BC 000000FF           1434m     AND.L #$FF,D2                               ; IGNORE THE TOP 3 BYTES
00000930  1430 2000               1435m     MOVE.B 0(A0,D2),D2                          ; USE THAT AS AN INDEX INTO THE LUT      
00000934                          1436m     ENDM
00000934  8E82                    1437                  OR.L D2,D7
00000936                          1438               
00000936  E98F                    1439                  LSL.L #4,D7
00000938                          1440m                 DOWNLOAD D2,D3                  ; LS 4 bits    
00000938                          1441m WAIT_FOR_READY_90                               ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000938                          1442m 
00000938  1639 00C00003           1443m     MOVE.B DUART_SRA,D3                         ; CHECK FOR COMMAND
0000093E  0803 0000               1444m     BTST #0,D3                                  ; CHECK FOR CHARACTER
00000942  6700 0010               1445m     BEQ CONTINUE_90                             ; NOTHING, CONTINUE
00000946                          1446m  
00000946                          1447mm     READ_CHAR D2
00000946                 TRUE     1448mm     IFEQ DEBUG
00000946  1439 00C00007           1449mm         MOVE.B DUART_RXA,D2                     ; GOT A CHARACTER, READ IT
0000094C                          1450mm     ENDC
0000094C                 FALSE    1451mm     IFNE DEBUG
0000094C                          1452mm     ENDC
0000094C                          1453mm      
0000094C  B43C 001B               1454mm     CMP.B #$1B,D2                               ; CHECK FOR ESCAPE AND GO TO START
00000950  6700 F6B6               1455mm     BEQ START
00000954                          1456mm     ENDM
00000954                          1457m CONTINUE_90
00000954  1639 00C00013           1458m     MOVE.B DUART_SRB,D3                         ; READ STATUS REGISTER
0000095A  0803 0000               1459m     BTST #0,D3                                  ; CHECK FOR CHARACTER
0000095E  67D8                    1460m     BEQ WAIT_FOR_READY_90                       ; NOTHING, CHECK AGAIN
00000960                          1461m     
00000960  1439 00C00017           1462m     MOVE.B DUART_RXB,D2                         ; GOT A CHARACTER, READ IT
00000966  13C2 00E00001           1463m     MOVE.B D2,DISPLAY                           ; ECHO TO THE DISPLAY
0000096C                          1464m     
0000096C                          1465m     ENDM
0000096C                          1466m                 PRINT_CHAR D2,D3
0000096C                          1467m WAIT_FOR_READY_92                               ; WAIT UNTIL THE THERE IS SPACE TO SEND
0000096C                 TRUE     1468m     IFEQ DEBUG
0000096C  1639 00C00003           1469m         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
00000972  0803 0002               1470m         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
00000976  67F4                    1471m         BEQ WAIT_FOR_READY_92                   ; NO SPACE, CHECK AGAIN
00000978  13C2 00C00007           1472m         MOVE.B D2,DUART_TXA                     ; SEND THE NEXT CHARACTER
0000097E                          1473m     ENDC
0000097E                          1474m     
0000097E                 FALSE    1475m     IFNE DEBUG
0000097E                          1476m     ENDC
0000097E                          1477m 
0000097E                          1478m     ENDM
0000097E                          1479m                 HEX2BIN D2,D2,A0
0000097E  41F9 000018BC           1480m     LEA HEX2BIN_LUT,A0                          ; LOAD THE LOOKUP TABLE
00000984  0402 0030               1481m     SUB.B #'0',D2                               ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
00000988  C4BC 000000FF           1482m     AND.L #$FF,D2                               ; IGNORE THE TOP 3 BYTES
0000098E  1430 2000               1483m     MOVE.B 0(A0,D2),D2                          ; USE THAT AS AN INDEX INTO THE LUT      
00000992                          1484m     ENDM
00000992  8E82                    1485                  OR.L D2,D7
00000994                          1486              
00000994  7400                    1487                  MOVE.L #0,D2                    ; rextract bottom byte of address and add into checksum
00000996  1407                    1488                  MOVE.B D7,D2
00000998  DC82                    1489                  ADD.L D2,D6
0000099A                          1490              
0000099A  32C7                    1491                  MOVE.W D7,(A1)+                 ; store it!
0000099C                          1492              ENDW
0000099C  6000 FE70               1493s     BRA _10000000
000009A0                          1494s _10000001
000009A0                          1495          
000009A0                          1496              IF D5 <EQ> #1 THEN
000009A0  BA7C 0001               1497s     CMP.W   #1,D5
000009A4  6600 00CE               1498s     BNE _00000003
000009A8  7E00                    1499                  MOVE.L #0,D7                    ; D7 holds the word
000009AA                          1500                      
000009AA                          1501m                 DOWNLOAD D2,D3                  ; MS 4 bits
000009AA                          1502m WAIT_FOR_READY_94                               ; WAIT UNTIL THE THERE IS SPACE TO SEND
000009AA                          1503m 
000009AA  1639 00C00003           1504m     MOVE.B DUART_SRA,D3                         ; CHECK FOR COMMAND
000009B0  0803 0000               1505m     BTST #0,D3                                  ; CHECK FOR CHARACTER
000009B4  6700 0010               1506m     BEQ CONTINUE_94                             ; NOTHING, CONTINUE
000009B8                          1507m  
000009B8                          1508mm     READ_CHAR D2
000009B8                 TRUE     1509mm     IFEQ DEBUG
000009B8  1439 00C00007           1510mm         MOVE.B DUART_RXA,D2                     ; GOT A CHARACTER, READ IT
000009BE                          1511mm     ENDC
000009BE                 FALSE    1512mm     IFNE DEBUG
000009BE                          1513mm     ENDC
000009BE                          1514mm      
000009BE  B43C 001B               1515mm     CMP.B #$1B,D2                               ; CHECK FOR ESCAPE AND GO TO START
000009C2  6700 F644               1516mm     BEQ START
000009C6                          1517mm     ENDM
000009C6                          1518m CONTINUE_94
000009C6  1639 00C00013           1519m     MOVE.B DUART_SRB,D3                         ; READ STATUS REGISTER
000009CC  0803 0000               1520m     BTST #0,D3                                  ; CHECK FOR CHARACTER
000009D0  67D8                    1521m     BEQ WAIT_FOR_READY_94                       ; NOTHING, CHECK AGAIN
000009D2                          1522m     
000009D2  1439 00C00017           1523m     MOVE.B DUART_RXB,D2                         ; GOT A CHARACTER, READ IT
000009D8  13C2 00E00001           1524m     MOVE.B D2,DISPLAY                           ; ECHO TO THE DISPLAY
000009DE                          1525m     
000009DE                          1526m     ENDM
000009DE                          1527m                 PRINT_CHAR D2,D3
000009DE                          1528m WAIT_FOR_READY_96                               ; WAIT UNTIL THE THERE IS SPACE TO SEND
000009DE                 TRUE     1529m     IFEQ DEBUG
000009DE  1639 00C00003           1530m         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
000009E4  0803 0002               1531m         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
000009E8  67F4                    1532m         BEQ WAIT_FOR_READY_96                   ; NO SPACE, CHECK AGAIN
000009EA  13C2 00C00007           1533m         MOVE.B D2,DUART_TXA                     ; SEND THE NEXT CHARACTER
000009F0                          1534m     ENDC
000009F0                          1535m     
000009F0                 FALSE    1536m     IFNE DEBUG
000009F0                          1537m     ENDC
000009F0                          1538m 
000009F0                          1539m     ENDM
000009F0                          1540m                 HEX2BIN D2,D2,A0
000009F0  41F9 000018BC           1541m     LEA HEX2BIN_LUT,A0                          ; LOAD THE LOOKUP TABLE
000009F6  0402 0030               1542m     SUB.B #'0',D2                               ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
000009FA  C4BC 000000FF           1543m     AND.L #$FF,D2                               ; IGNORE THE TOP 3 BYTES
00000A00  1430 2000               1544m     MOVE.B 0(A0,D2),D2                          ; USE THAT AS AN INDEX INTO THE LUT      
00000A04                          1545m     ENDM
00000A04  8E82                    1546                  OR.L D2,D7
00000A06  E98F                    1547              LSL.L #4,D7
00000A08                          1548               
00000A08                          1549m             DOWNLOAD D2,D3                      ; LS 4 bits    
00000A08                          1550m WAIT_FOR_READY_98                               ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000A08                          1551m 
00000A08  1639 00C00003           1552m     MOVE.B DUART_SRA,D3                         ; CHECK FOR COMMAND
00000A0E  0803 0000               1553m     BTST #0,D3                                  ; CHECK FOR CHARACTER
00000A12  6700 0010               1554m     BEQ CONTINUE_98                             ; NOTHING, CONTINUE
00000A16                          1555m  
00000A16                          1556mm     READ_CHAR D2
00000A16                 TRUE     1557mm     IFEQ DEBUG
00000A16  1439 00C00007           1558mm         MOVE.B DUART_RXA,D2                     ; GOT A CHARACTER, READ IT
00000A1C                          1559mm     ENDC
00000A1C                 FALSE    1560mm     IFNE DEBUG
00000A1C                          1561mm     ENDC
00000A1C                          1562mm      
00000A1C  B43C 001B               1563mm     CMP.B #$1B,D2                               ; CHECK FOR ESCAPE AND GO TO START
00000A20  6700 F5E6               1564mm     BEQ START
00000A24                          1565mm     ENDM
00000A24                          1566m CONTINUE_98
00000A24  1639 00C00013           1567m     MOVE.B DUART_SRB,D3                         ; READ STATUS REGISTER
00000A2A  0803 0000               1568m     BTST #0,D3                                  ; CHECK FOR CHARACTER
00000A2E  67D8                    1569m     BEQ WAIT_FOR_READY_98                       ; NOTHING, CHECK AGAIN
00000A30                          1570m     
00000A30  1439 00C00017           1571m     MOVE.B DUART_RXB,D2                         ; GOT A CHARACTER, READ IT
00000A36  13C2 00E00001           1572m     MOVE.B D2,DISPLAY                           ; ECHO TO THE DISPLAY
00000A3C                          1573m     
00000A3C                          1574m     ENDM
00000A3C                          1575m             PRINT_CHAR D2,D3
00000A3C                          1576m WAIT_FOR_READY_100                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000A3C                 TRUE     1577m     IFEQ DEBUG
00000A3C  1639 00C00003           1578m         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
00000A42  0803 0002               1579m         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
00000A46  67F4                    1580m         BEQ WAIT_FOR_READY_100                      ; NO SPACE, CHECK AGAIN
00000A48  13C2 00C00007           1581m         MOVE.B D2,DUART_TXA                     ; SEND THE NEXT CHARACTER
00000A4E                          1582m     ENDC
00000A4E                          1583m     
00000A4E                 FALSE    1584m     IFNE DEBUG
00000A4E                          1585m     ENDC
00000A4E                          1586m 
00000A4E                          1587m     ENDM
00000A4E                          1588m             HEX2BIN D2,D2,A0
00000A4E  41F9 000018BC           1589m     LEA HEX2BIN_LUT,A0                          ; LOAD THE LOOKUP TABLE
00000A54  0402 0030               1590m     SUB.B #'0',D2                               ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
00000A58  C4BC 000000FF           1591m     AND.L #$FF,D2                               ; IGNORE THE TOP 3 BYTES
00000A5E  1430 2000               1592m     MOVE.B 0(A0,D2),D2                          ; USE THAT AS AN INDEX INTO THE LUT      
00000A62                          1593m     ENDM
00000A62  8E82                    1594              OR.L D2,D7
00000A64                          1595                          
00000A64  DC87                    1596              ADD.L D7,D6                         ; add into checksum
00000A66                          1597              
00000A66  3611                    1598              MOVE.W (A1),D3                      ; get the current data and replace the top byte
00000A68  E18F                    1599              LSL.L #8,D7
00000A6A  C6BC 000000FF           1600              AND.L #$00FF,D3
00000A70  8687                    1601              OR.L D7,D3
00000A72                          1602  
00000A72  32C3                    1603              MOVE.W D3,(A1)+                     ; store it!
00000A74                          1604          ENDI
00000A74                          1605s _00000003
00000A74                          1606    
00000A74                          1607m         PRINT_CRLF D3
00000A74                          1608mm     PRINT_CHAR #13,D3                           ; CR
00000A74                          1609mm WAIT_FOR_READY_103                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000A74                 TRUE     1610mm     IFEQ DEBUG
00000A74  1639 00C00003           1611mm         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
00000A7A  0803 0002               1612mm         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
00000A7E  67F4                    1613mm         BEQ WAIT_FOR_READY_103                      ; NO SPACE, CHECK AGAIN
00000A80  13FC 000D 00C00007      1614mm         MOVE.B #13,DUART_TXA                    ; SEND THE NEXT CHARACTER
00000A88                          1615mm     ENDC
00000A88                          1616mm     
00000A88                 FALSE    1617mm     IFNE DEBUG
00000A88                          1618mm     ENDC
00000A88                          1619mm 
00000A88                          1620mm     ENDM
00000A88                          1621mm     PRINT_CHAR #10,D3                           ; LF
00000A88                          1622mm WAIT_FOR_READY_104                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000A88                 TRUE     1623mm     IFEQ DEBUG
00000A88  1639 00C00003           1624mm         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
00000A8E  0803 0002               1625mm         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
00000A92  67F4                    1626mm         BEQ WAIT_FOR_READY_104                      ; NO SPACE, CHECK AGAIN
00000A94  13FC 000A 00C00007      1627mm         MOVE.B #10,DUART_TXA                    ; SEND THE NEXT CHARACTER
00000A9C                          1628mm     ENDC
00000A9C                          1629mm     
00000A9C                 FALSE    1630mm     IFNE DEBUG
00000A9C                          1631mm     ENDC
00000A9C                          1632mm 
00000A9C                          1633mm     ENDM
00000A9C                          1634m     ENDM
00000A9C  43F8 048E               1635          LEA WAIT_FOR_SRECORD,A1                 ; next place to go
00000AA0                          1636        ELSE
00000AA0  6000 080C               1637s     BRA _00000004
00000AA4                          1638s _00000002
00000AA4                          1639              IF.B D7 <EQ> #'2' THEN.L            ; 24 bit address data record
00000AA4  BE3C 0032               1640s     CMP.B   #'2',D7
00000AA8  6600 05B8               1641s     BNE.L   _00000005
00000AAC  7E00                    1642                  MOVE.L #0,D7                    ; read the 24 bit address, we'll stomp on D7 for this since it's sort of like the address accumulator
00000AAE                          1643m                 DOWNLOAD D2,D3                  ; top byte
00000AAE                          1644m WAIT_FOR_READY_105                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000AAE                          1645m 
00000AAE  1639 00C00003           1646m     MOVE.B DUART_SRA,D3                         ; CHECK FOR COMMAND
00000AB4  0803 0000               1647m     BTST #0,D3                                  ; CHECK FOR CHARACTER
00000AB8  6700 0010               1648m     BEQ CONTINUE_105                                ; NOTHING, CONTINUE
00000ABC                          1649m  
00000ABC                          1650mm     READ_CHAR D2
00000ABC                 TRUE     1651mm     IFEQ DEBUG
00000ABC  1439 00C00007           1652mm         MOVE.B DUART_RXA,D2                     ; GOT A CHARACTER, READ IT
00000AC2                          1653mm     ENDC
00000AC2                 FALSE    1654mm     IFNE DEBUG
00000AC2                          1655mm     ENDC
00000AC2                          1656mm      
00000AC2  B43C 001B               1657mm     CMP.B #$1B,D2                               ; CHECK FOR ESCAPE AND GO TO START
00000AC6  6700 F540               1658mm     BEQ START
00000ACA                          1659mm     ENDM
00000ACA                          1660m CONTINUE_105
00000ACA  1639 00C00013           1661m     MOVE.B DUART_SRB,D3                         ; READ STATUS REGISTER
00000AD0  0803 0000               1662m     BTST #0,D3                                  ; CHECK FOR CHARACTER
00000AD4  67D8                    1663m     BEQ WAIT_FOR_READY_105                      ; NOTHING, CHECK AGAIN
00000AD6                          1664m     
00000AD6  1439 00C00017           1665m     MOVE.B DUART_RXB,D2                         ; GOT A CHARACTER, READ IT
00000ADC  13C2 00E00001           1666m     MOVE.B D2,DISPLAY                           ; ECHO TO THE DISPLAY
00000AE2                          1667m     
00000AE2                          1668m     ENDM
00000AE2                          1669m                 PRINT_CHAR D2,D3
00000AE2                          1670m WAIT_FOR_READY_107                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000AE2                 TRUE     1671m     IFEQ DEBUG
00000AE2  1639 00C00003           1672m         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
00000AE8  0803 0002               1673m         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
00000AEC  67F4                    1674m         BEQ WAIT_FOR_READY_107                      ; NO SPACE, CHECK AGAIN
00000AEE  13C2 00C00007           1675m         MOVE.B D2,DUART_TXA                     ; SEND THE NEXT CHARACTER
00000AF4                          1676m     ENDC
00000AF4                          1677m     
00000AF4                 FALSE    1678m     IFNE DEBUG
00000AF4                          1679m     ENDC
00000AF4                          1680m 
00000AF4                          1681m     ENDM
00000AF4                          1682m                 HEX2BIN D2,D2,A0
00000AF4  41F9 000018BC           1683m     LEA HEX2BIN_LUT,A0                          ; LOAD THE LOOKUP TABLE
00000AFA  0402 0030               1684m     SUB.B #'0',D2                               ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
00000AFE  C4BC 000000FF           1685m     AND.L #$FF,D2                               ; IGNORE THE TOP 3 BYTES
00000B04  1430 2000               1686m     MOVE.B 0(A0,D2),D2                          ; USE THAT AS AN INDEX INTO THE LUT      
00000B08                          1687m     ENDM
00000B08  8E82                    1688                  OR.L D2,D7
00000B0A  E98F                    1689                  LSL.L #4,D7
00000B0C                          1690m                 DOWNLOAD D2,D3         
00000B0C                          1691m WAIT_FOR_READY_109                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000B0C                          1692m 
00000B0C  1639 00C00003           1693m     MOVE.B DUART_SRA,D3                         ; CHECK FOR COMMAND
00000B12  0803 0000               1694m     BTST #0,D3                                  ; CHECK FOR CHARACTER
00000B16  6700 0010               1695m     BEQ CONTINUE_109                                ; NOTHING, CONTINUE
00000B1A                          1696m  
00000B1A                          1697mm     READ_CHAR D2
00000B1A                 TRUE     1698mm     IFEQ DEBUG
00000B1A  1439 00C00007           1699mm         MOVE.B DUART_RXA,D2                     ; GOT A CHARACTER, READ IT
00000B20                          1700mm     ENDC
00000B20                 FALSE    1701mm     IFNE DEBUG
00000B20                          1702mm     ENDC
00000B20                          1703mm      
00000B20  B43C 001B               1704mm     CMP.B #$1B,D2                               ; CHECK FOR ESCAPE AND GO TO START
00000B24  6700 F4E2               1705mm     BEQ START
00000B28                          1706mm     ENDM
00000B28                          1707m CONTINUE_109
00000B28  1639 00C00013           1708m     MOVE.B DUART_SRB,D3                         ; READ STATUS REGISTER
00000B2E  0803 0000               1709m     BTST #0,D3                                  ; CHECK FOR CHARACTER
00000B32  67D8                    1710m     BEQ WAIT_FOR_READY_109                      ; NOTHING, CHECK AGAIN
00000B34                          1711m     
00000B34  1439 00C00017           1712m     MOVE.B DUART_RXB,D2                         ; GOT A CHARACTER, READ IT
00000B3A  13C2 00E00001           1713m     MOVE.B D2,DISPLAY                           ; ECHO TO THE DISPLAY
00000B40                          1714m     
00000B40                          1715m     ENDM
00000B40                          1716m                 PRINT_CHAR D2,D3
00000B40                          1717m WAIT_FOR_READY_111                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000B40                 TRUE     1718m     IFEQ DEBUG
00000B40  1639 00C00003           1719m         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
00000B46  0803 0002               1720m         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
00000B4A  67F4                    1721m         BEQ WAIT_FOR_READY_111                      ; NO SPACE, CHECK AGAIN
00000B4C  13C2 00C00007           1722m         MOVE.B D2,DUART_TXA                     ; SEND THE NEXT CHARACTER
00000B52                          1723m     ENDC
00000B52                          1724m     
00000B52                 FALSE    1725m     IFNE DEBUG
00000B52                          1726m     ENDC
00000B52                          1727m 
00000B52                          1728m     ENDM
00000B52                          1729m                 HEX2BIN D2,D2,A0
00000B52  41F9 000018BC           1730m     LEA HEX2BIN_LUT,A0                          ; LOAD THE LOOKUP TABLE
00000B58  0402 0030               1731m     SUB.B #'0',D2                               ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
00000B5C  C4BC 000000FF           1732m     AND.L #$FF,D2                               ; IGNORE THE TOP 3 BYTES
00000B62  1430 2000               1733m     MOVE.B 0(A0,D2),D2                          ; USE THAT AS AN INDEX INTO THE LUT      
00000B66                          1734m     ENDM
00000B66  8E82                    1735                  OR.L D2,D7
00000B68                          1736                  
00000B68  DC87                    1737                  ADD.L D7,D6                     ; add top byte of address into checksum
00000B6A                          1738  
00000B6A  E98F                    1739                  LSL.L #4,D7                     ; middle byte
00000B6C                          1740m                 DOWNLOAD D2,D3
00000B6C                          1741m WAIT_FOR_READY_113                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000B6C                          1742m 
00000B6C  1639 00C00003           1743m     MOVE.B DUART_SRA,D3                         ; CHECK FOR COMMAND
00000B72  0803 0000               1744m     BTST #0,D3                                  ; CHECK FOR CHARACTER
00000B76  6700 0010               1745m     BEQ CONTINUE_113                                ; NOTHING, CONTINUE
00000B7A                          1746m  
00000B7A                          1747mm     READ_CHAR D2
00000B7A                 TRUE     1748mm     IFEQ DEBUG
00000B7A  1439 00C00007           1749mm         MOVE.B DUART_RXA,D2                     ; GOT A CHARACTER, READ IT
00000B80                          1750mm     ENDC
00000B80                 FALSE    1751mm     IFNE DEBUG
00000B80                          1752mm     ENDC
00000B80                          1753mm      
00000B80  B43C 001B               1754mm     CMP.B #$1B,D2                               ; CHECK FOR ESCAPE AND GO TO START
00000B84  6700 F482               1755mm     BEQ START
00000B88                          1756mm     ENDM
00000B88                          1757m CONTINUE_113
00000B88  1639 00C00013           1758m     MOVE.B DUART_SRB,D3                         ; READ STATUS REGISTER
00000B8E  0803 0000               1759m     BTST #0,D3                                  ; CHECK FOR CHARACTER
00000B92  67D8                    1760m     BEQ WAIT_FOR_READY_113                      ; NOTHING, CHECK AGAIN
00000B94                          1761m     
00000B94  1439 00C00017           1762m     MOVE.B DUART_RXB,D2                         ; GOT A CHARACTER, READ IT
00000B9A  13C2 00E00001           1763m     MOVE.B D2,DISPLAY                           ; ECHO TO THE DISPLAY
00000BA0                          1764m     
00000BA0                          1765m     ENDM
00000BA0                          1766m                 PRINT_CHAR D2,D3
00000BA0                          1767m WAIT_FOR_READY_115                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000BA0                 TRUE     1768m     IFEQ DEBUG
00000BA0  1639 00C00003           1769m         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
00000BA6  0803 0002               1770m         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
00000BAA  67F4                    1771m         BEQ WAIT_FOR_READY_115                      ; NO SPACE, CHECK AGAIN
00000BAC  13C2 00C00007           1772m         MOVE.B D2,DUART_TXA                     ; SEND THE NEXT CHARACTER
00000BB2                          1773m     ENDC
00000BB2                          1774m     
00000BB2                 FALSE    1775m     IFNE DEBUG
00000BB2                          1776m     ENDC
00000BB2                          1777m 
00000BB2                          1778m     ENDM
00000BB2                          1779m                 HEX2BIN D2,D2,A0
00000BB2  41F9 000018BC           1780m     LEA HEX2BIN_LUT,A0                          ; LOAD THE LOOKUP TABLE
00000BB8  0402 0030               1781m     SUB.B #'0',D2                               ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
00000BBC  C4BC 000000FF           1782m     AND.L #$FF,D2                               ; IGNORE THE TOP 3 BYTES
00000BC2  1430 2000               1783m     MOVE.B 0(A0,D2),D2                          ; USE THAT AS AN INDEX INTO THE LUT      
00000BC6                          1784m     ENDM
00000BC6  8E82                    1785                  OR.L D2,D7
00000BC8  E98F                    1786                  LSL.L #4,D7        
00000BCA                          1787m                 DOWNLOAD D2,D3
00000BCA                          1788m WAIT_FOR_READY_117                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000BCA                          1789m 
00000BCA  1639 00C00003           1790m     MOVE.B DUART_SRA,D3                         ; CHECK FOR COMMAND
00000BD0  0803 0000               1791m     BTST #0,D3                                  ; CHECK FOR CHARACTER
00000BD4  6700 0010               1792m     BEQ CONTINUE_117                                ; NOTHING, CONTINUE
00000BD8                          1793m  
00000BD8                          1794mm     READ_CHAR D2
00000BD8                 TRUE     1795mm     IFEQ DEBUG
00000BD8  1439 00C00007           1796mm         MOVE.B DUART_RXA,D2                     ; GOT A CHARACTER, READ IT
00000BDE                          1797mm     ENDC
00000BDE                 FALSE    1798mm     IFNE DEBUG
00000BDE                          1799mm     ENDC
00000BDE                          1800mm      
00000BDE  B43C 001B               1801mm     CMP.B #$1B,D2                               ; CHECK FOR ESCAPE AND GO TO START
00000BE2  6700 F424               1802mm     BEQ START
00000BE6                          1803mm     ENDM
00000BE6                          1804m CONTINUE_117
00000BE6  1639 00C00013           1805m     MOVE.B DUART_SRB,D3                         ; READ STATUS REGISTER
00000BEC  0803 0000               1806m     BTST #0,D3                                  ; CHECK FOR CHARACTER
00000BF0  67D8                    1807m     BEQ WAIT_FOR_READY_117                      ; NOTHING, CHECK AGAIN
00000BF2                          1808m     
00000BF2  1439 00C00017           1809m     MOVE.B DUART_RXB,D2                         ; GOT A CHARACTER, READ IT
00000BF8  13C2 00E00001           1810m     MOVE.B D2,DISPLAY                           ; ECHO TO THE DISPLAY
00000BFE                          1811m     
00000BFE                          1812m     ENDM
00000BFE                          1813m                 PRINT_CHAR D2,D3
00000BFE                          1814m WAIT_FOR_READY_119                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000BFE                 TRUE     1815m     IFEQ DEBUG
00000BFE  1639 00C00003           1816m         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
00000C04  0803 0002               1817m         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
00000C08  67F4                    1818m         BEQ WAIT_FOR_READY_119                      ; NO SPACE, CHECK AGAIN
00000C0A  13C2 00C00007           1819m         MOVE.B D2,DUART_TXA                     ; SEND THE NEXT CHARACTER
00000C10                          1820m     ENDC
00000C10                          1821m     
00000C10                 FALSE    1822m     IFNE DEBUG
00000C10                          1823m     ENDC
00000C10                          1824m 
00000C10                          1825m     ENDM
00000C10                          1826m                 HEX2BIN D2,D2,A0
00000C10  41F9 000018BC           1827m     LEA HEX2BIN_LUT,A0                          ; LOAD THE LOOKUP TABLE
00000C16  0402 0030               1828m     SUB.B #'0',D2                               ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
00000C1A  C4BC 000000FF           1829m     AND.L #$FF,D2                               ; IGNORE THE TOP 3 BYTES
00000C20  1430 2000               1830m     MOVE.B 0(A0,D2),D2                          ; USE THAT AS AN INDEX INTO THE LUT      
00000C24                          1831m     ENDM
00000C24  8E82                    1832                  OR.L D2,D7
00000C26                          1833                  
00000C26  7400                    1834                  MOVE.L #0,D2                    ; rextract middle byte of address and add into checksum
00000C28  1407                    1835                  MOVE.B D7,D2
00000C2A  DC82                    1836                  ADD.L D2,D6
00000C2C                          1837            
00000C2C  E98F                    1838                  LSL.L #4,D7                     ; bottom byte
00000C2E                          1839m                 DOWNLOAD D2,D3
00000C2E                          1840m WAIT_FOR_READY_121                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000C2E                          1841m 
00000C2E  1639 00C00003           1842m     MOVE.B DUART_SRA,D3                         ; CHECK FOR COMMAND
00000C34  0803 0000               1843m     BTST #0,D3                                  ; CHECK FOR CHARACTER
00000C38  6700 0010               1844m     BEQ CONTINUE_121                                ; NOTHING, CONTINUE
00000C3C                          1845m  
00000C3C                          1846mm     READ_CHAR D2
00000C3C                 TRUE     1847mm     IFEQ DEBUG
00000C3C  1439 00C00007           1848mm         MOVE.B DUART_RXA,D2                     ; GOT A CHARACTER, READ IT
00000C42                          1849mm     ENDC
00000C42                 FALSE    1850mm     IFNE DEBUG
00000C42                          1851mm     ENDC
00000C42                          1852mm      
00000C42  B43C 001B               1853mm     CMP.B #$1B,D2                               ; CHECK FOR ESCAPE AND GO TO START
00000C46  6700 F3C0               1854mm     BEQ START
00000C4A                          1855mm     ENDM
00000C4A                          1856m CONTINUE_121
00000C4A  1639 00C00013           1857m     MOVE.B DUART_SRB,D3                         ; READ STATUS REGISTER
00000C50  0803 0000               1858m     BTST #0,D3                                  ; CHECK FOR CHARACTER
00000C54  67D8                    1859m     BEQ WAIT_FOR_READY_121                      ; NOTHING, CHECK AGAIN
00000C56                          1860m     
00000C56  1439 00C00017           1861m     MOVE.B DUART_RXB,D2                         ; GOT A CHARACTER, READ IT
00000C5C  13C2 00E00001           1862m     MOVE.B D2,DISPLAY                           ; ECHO TO THE DISPLAY
00000C62                          1863m     
00000C62                          1864m     ENDM
00000C62                          1865m                 PRINT_CHAR D2,D3
00000C62                          1866m WAIT_FOR_READY_123                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000C62                 TRUE     1867m     IFEQ DEBUG
00000C62  1639 00C00003           1868m         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
00000C68  0803 0002               1869m         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
00000C6C  67F4                    1870m         BEQ WAIT_FOR_READY_123                      ; NO SPACE, CHECK AGAIN
00000C6E  13C2 00C00007           1871m         MOVE.B D2,DUART_TXA                     ; SEND THE NEXT CHARACTER
00000C74                          1872m     ENDC
00000C74                          1873m     
00000C74                 FALSE    1874m     IFNE DEBUG
00000C74                          1875m     ENDC
00000C74                          1876m 
00000C74                          1877m     ENDM
00000C74                          1878m                 HEX2BIN D2,D2,A0
00000C74  41F9 000018BC           1879m     LEA HEX2BIN_LUT,A0                          ; LOAD THE LOOKUP TABLE
00000C7A  0402 0030               1880m     SUB.B #'0',D2                               ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
00000C7E  C4BC 000000FF           1881m     AND.L #$FF,D2                               ; IGNORE THE TOP 3 BYTES
00000C84  1430 2000               1882m     MOVE.B 0(A0,D2),D2                          ; USE THAT AS AN INDEX INTO THE LUT      
00000C88                          1883m     ENDM
00000C88  8E82                    1884                  OR.L D2,D7
00000C8A  E98F                    1885                  LSL.L #4,D7        
00000C8C                          1886m                 DOWNLOAD D2,D3
00000C8C                          1887m WAIT_FOR_READY_125                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000C8C                          1888m 
00000C8C  1639 00C00003           1889m     MOVE.B DUART_SRA,D3                         ; CHECK FOR COMMAND
00000C92  0803 0000               1890m     BTST #0,D3                                  ; CHECK FOR CHARACTER
00000C96  6700 0010               1891m     BEQ CONTINUE_125                                ; NOTHING, CONTINUE
00000C9A                          1892m  
00000C9A                          1893mm     READ_CHAR D2
00000C9A                 TRUE     1894mm     IFEQ DEBUG
00000C9A  1439 00C00007           1895mm         MOVE.B DUART_RXA,D2                     ; GOT A CHARACTER, READ IT
00000CA0                          1896mm     ENDC
00000CA0                 FALSE    1897mm     IFNE DEBUG
00000CA0                          1898mm     ENDC
00000CA0                          1899mm      
00000CA0  B43C 001B               1900mm     CMP.B #$1B,D2                               ; CHECK FOR ESCAPE AND GO TO START
00000CA4  6700 F362               1901mm     BEQ START
00000CA8                          1902mm     ENDM
00000CA8                          1903m CONTINUE_125
00000CA8  1639 00C00013           1904m     MOVE.B DUART_SRB,D3                         ; READ STATUS REGISTER
00000CAE  0803 0000               1905m     BTST #0,D3                                  ; CHECK FOR CHARACTER
00000CB2  67D8                    1906m     BEQ WAIT_FOR_READY_125                      ; NOTHING, CHECK AGAIN
00000CB4                          1907m     
00000CB4  1439 00C00017           1908m     MOVE.B DUART_RXB,D2                         ; GOT A CHARACTER, READ IT
00000CBA  13C2 00E00001           1909m     MOVE.B D2,DISPLAY                           ; ECHO TO THE DISPLAY
00000CC0                          1910m     
00000CC0                          1911m     ENDM
00000CC0                          1912m                 PRINT_CHAR D2,D3
00000CC0                          1913m WAIT_FOR_READY_127                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000CC0                 TRUE     1914m     IFEQ DEBUG
00000CC0  1639 00C00003           1915m         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
00000CC6  0803 0002               1916m         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
00000CCA  67F4                    1917m         BEQ WAIT_FOR_READY_127                      ; NO SPACE, CHECK AGAIN
00000CCC  13C2 00C00007           1918m         MOVE.B D2,DUART_TXA                     ; SEND THE NEXT CHARACTER
00000CD2                          1919m     ENDC
00000CD2                          1920m     
00000CD2                 FALSE    1921m     IFNE DEBUG
00000CD2                          1922m     ENDC
00000CD2                          1923m 
00000CD2                          1924m     ENDM
00000CD2                          1925m                 HEX2BIN D2,D2,A0
00000CD2  41F9 000018BC           1926m     LEA HEX2BIN_LUT,A0                          ; LOAD THE LOOKUP TABLE
00000CD8  0402 0030               1927m     SUB.B #'0',D2                               ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
00000CDC  C4BC 000000FF           1928m     AND.L #$FF,D2                               ; IGNORE THE TOP 3 BYTES
00000CE2  1430 2000               1929m     MOVE.B 0(A0,D2),D2                          ; USE THAT AS AN INDEX INTO THE LUT      
00000CE6                          1930m     ENDM
00000CE6  8E82                    1931                  OR.L D2,D7
00000CE8                          1932          
00000CE8  7400                    1933                  MOVE.L #0,D2                    ; rextract bottom byte of address and add into checksum
00000CEA  1407                    1934                  MOVE.B D7,D2
00000CEC  DC82                    1935                  ADD.L D2,D6
00000CEE                          1936                  
00000CEE  2247                    1937                  MOVE.L D7,A1                    ; put the address in an address register, and we can now re-use D7
00000CF0  D3CB                    1938                  ADD.L A3,A1                     ; add in the offset
00000CF2                          1939                    
00000CF2  0807 0000               1940                  BTST #0,D7                      ; deal with odd addresses
00000CF6                          1941  
00000CF6  2247                    1942                  MOVE.L D7,A1                    ; put the address in an address register, and we can now re-use D7
00000CF8  6700 00D0               1943                  BEQ EVEN2
00000CFC                          1944                          
00000CFC  5385                    1945                  SUB.L #1,D5
00000CFE  5389                    1946                  SUB.L #1,A1
00000D00                          1947                  
00000D00  7E00                    1948                  MOVE.L #0,D7
00000D02                          1949m                 DOWNLOAD D2,D3                  ; MS 4 bits
00000D02                          1950m WAIT_FOR_READY_129                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000D02                          1951m 
00000D02  1639 00C00003           1952m     MOVE.B DUART_SRA,D3                         ; CHECK FOR COMMAND
00000D08  0803 0000               1953m     BTST #0,D3                                  ; CHECK FOR CHARACTER
00000D0C  6700 0010               1954m     BEQ CONTINUE_129                                ; NOTHING, CONTINUE
00000D10                          1955m  
00000D10                          1956mm     READ_CHAR D2
00000D10                 TRUE     1957mm     IFEQ DEBUG
00000D10  1439 00C00007           1958mm         MOVE.B DUART_RXA,D2                     ; GOT A CHARACTER, READ IT
00000D16                          1959mm     ENDC
00000D16                 FALSE    1960mm     IFNE DEBUG
00000D16                          1961mm     ENDC
00000D16                          1962mm      
00000D16  B43C 001B               1963mm     CMP.B #$1B,D2                               ; CHECK FOR ESCAPE AND GO TO START
00000D1A  6700 F2EC               1964mm     BEQ START
00000D1E                          1965mm     ENDM
00000D1E                          1966m CONTINUE_129
00000D1E  1639 00C00013           1967m     MOVE.B DUART_SRB,D3                         ; READ STATUS REGISTER
00000D24  0803 0000               1968m     BTST #0,D3                                  ; CHECK FOR CHARACTER
00000D28  67D8                    1969m     BEQ WAIT_FOR_READY_129                      ; NOTHING, CHECK AGAIN
00000D2A                          1970m     
00000D2A  1439 00C00017           1971m     MOVE.B DUART_RXB,D2                         ; GOT A CHARACTER, READ IT
00000D30  13C2 00E00001           1972m     MOVE.B D2,DISPLAY                           ; ECHO TO THE DISPLAY
00000D36                          1973m     
00000D36                          1974m     ENDM
00000D36                          1975m                 PRINT_CHAR D2,D3
00000D36                          1976m WAIT_FOR_READY_131                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000D36                 TRUE     1977m     IFEQ DEBUG
00000D36  1639 00C00003           1978m         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
00000D3C  0803 0002               1979m         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
00000D40  67F4                    1980m         BEQ WAIT_FOR_READY_131                      ; NO SPACE, CHECK AGAIN
00000D42  13C2 00C00007           1981m         MOVE.B D2,DUART_TXA                     ; SEND THE NEXT CHARACTER
00000D48                          1982m     ENDC
00000D48                          1983m     
00000D48                 FALSE    1984m     IFNE DEBUG
00000D48                          1985m     ENDC
00000D48                          1986m 
00000D48                          1987m     ENDM
00000D48                          1988m                 HEX2BIN D2,D2,A0
00000D48  41F9 000018BC           1989m     LEA HEX2BIN_LUT,A0                          ; LOAD THE LOOKUP TABLE
00000D4E  0402 0030               1990m     SUB.B #'0',D2                               ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
00000D52  C4BC 000000FF           1991m     AND.L #$FF,D2                               ; IGNORE THE TOP 3 BYTES
00000D58  1430 2000               1992m     MOVE.B 0(A0,D2),D2                          ; USE THAT AS AN INDEX INTO THE LUT      
00000D5C                          1993m     ENDM
00000D5C  8E82                    1994                  OR.L D2,D7
00000D5E  E98F                    1995                  LSL.L #4,D7
00000D60                          1996                       
00000D60                          1997m                 DOWNLOAD D2,D3                  ; LS 4 bits    
00000D60                          1998m WAIT_FOR_READY_133                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000D60                          1999m 
00000D60  1639 00C00003           2000m     MOVE.B DUART_SRA,D3                         ; CHECK FOR COMMAND
00000D66  0803 0000               2001m     BTST #0,D3                                  ; CHECK FOR CHARACTER
00000D6A  6700 0010               2002m     BEQ CONTINUE_133                                ; NOTHING, CONTINUE
00000D6E                          2003m  
00000D6E                          2004mm     READ_CHAR D2
00000D6E                 TRUE     2005mm     IFEQ DEBUG
00000D6E  1439 00C00007           2006mm         MOVE.B DUART_RXA,D2                     ; GOT A CHARACTER, READ IT
00000D74                          2007mm     ENDC
00000D74                 FALSE    2008mm     IFNE DEBUG
00000D74                          2009mm     ENDC
00000D74                          2010mm      
00000D74  B43C 001B               2011mm     CMP.B #$1B,D2                               ; CHECK FOR ESCAPE AND GO TO START
00000D78  6700 F28E               2012mm     BEQ START
00000D7C                          2013mm     ENDM
00000D7C                          2014m CONTINUE_133
00000D7C  1639 00C00013           2015m     MOVE.B DUART_SRB,D3                         ; READ STATUS REGISTER
00000D82  0803 0000               2016m     BTST #0,D3                                  ; CHECK FOR CHARACTER
00000D86  67D8                    2017m     BEQ WAIT_FOR_READY_133                      ; NOTHING, CHECK AGAIN
00000D88                          2018m     
00000D88  1439 00C00017           2019m     MOVE.B DUART_RXB,D2                         ; GOT A CHARACTER, READ IT
00000D8E  13C2 00E00001           2020m     MOVE.B D2,DISPLAY                           ; ECHO TO THE DISPLAY
00000D94                          2021m     
00000D94                          2022m     ENDM
00000D94                          2023m                 PRINT_CHAR D2,D3
00000D94                          2024m WAIT_FOR_READY_135                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000D94                 TRUE     2025m     IFEQ DEBUG
00000D94  1639 00C00003           2026m         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
00000D9A  0803 0002               2027m         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
00000D9E  67F4                    2028m         BEQ WAIT_FOR_READY_135                      ; NO SPACE, CHECK AGAIN
00000DA0  13C2 00C00007           2029m         MOVE.B D2,DUART_TXA                     ; SEND THE NEXT CHARACTER
00000DA6                          2030m     ENDC
00000DA6                          2031m     
00000DA6                 FALSE    2032m     IFNE DEBUG
00000DA6                          2033m     ENDC
00000DA6                          2034m 
00000DA6                          2035m     ENDM
00000DA6                          2036m                 HEX2BIN D2,D2,A0
00000DA6  41F9 000018BC           2037m     LEA HEX2BIN_LUT,A0                          ; LOAD THE LOOKUP TABLE
00000DAC  0402 0030               2038m     SUB.B #'0',D2                               ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
00000DB0  C4BC 000000FF           2039m     AND.L #$FF,D2                               ; IGNORE THE TOP 3 BYTES
00000DB6  1430 2000               2040m     MOVE.B 0(A0,D2),D2                          ; USE THAT AS AN INDEX INTO THE LUT      
00000DBA                          2041m     ENDM
00000DBA  8E82                    2042                  OR.L D2,D7
00000DBC                          2043                          
00000DBC  DC87                    2044                  ADD.L D7,D6                     ; add into checksum
00000DBE                          2045                                
00000DBE  3611                    2046                  MOVE.W (A1),D3                  ; get the current data and replace the bottom byte
00000DC0                          2047                  
00000DC0  0243 FF00               2048                  ANDI.W #$FF00,D3
00000DC4  8647                    2049                  OR.W D7,D3
00000DC6                          2050                  
00000DC6  3283                    2051                  MOVE.W D3,(A1)                  ; store it!
00000DC8  5489                    2052                  ADD.L #2,A1
00000DCA                          2053  EVEN2
00000DCA  5985                    2054                  SUB.L #4,D5                     ; subtract four bytes for 24 bit address and 1 byte checksum
00000DCC                          2055                  WHILE.L D5 <GE> #2 DO           ; read the data bytes
00000DCC                          2056s _10000002
00000DCC  BABC 00000002           2057s     CMP.L   #2,D5
00000DD2  6D00 018A               2058s     BLT _10000003
00000DD6  5585                    2059                      SUB.L #2,D5
00000DD8                          2060                      
00000DD8  7E00                    2061                      MOVE.L #0,D7                ; D7 holds the word
00000DDA                          2062                      
00000DDA                          2063m                     DOWNLOAD D2,D3              ; MS 4 bits
00000DDA                          2064m WAIT_FOR_READY_137                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000DDA                          2065m 
00000DDA  1639 00C00003           2066m     MOVE.B DUART_SRA,D3                         ; CHECK FOR COMMAND
00000DE0  0803 0000               2067m     BTST #0,D3                                  ; CHECK FOR CHARACTER
00000DE4  6700 0010               2068m     BEQ CONTINUE_137                                ; NOTHING, CONTINUE
00000DE8                          2069m  
00000DE8                          2070mm     READ_CHAR D2
00000DE8                 TRUE     2071mm     IFEQ DEBUG
00000DE8  1439 00C00007           2072mm         MOVE.B DUART_RXA,D2                     ; GOT A CHARACTER, READ IT
00000DEE                          2073mm     ENDC
00000DEE                 FALSE    2074mm     IFNE DEBUG
00000DEE                          2075mm     ENDC
00000DEE                          2076mm      
00000DEE  B43C 001B               2077mm     CMP.B #$1B,D2                               ; CHECK FOR ESCAPE AND GO TO START
00000DF2  6700 F214               2078mm     BEQ START
00000DF6                          2079mm     ENDM
00000DF6                          2080m CONTINUE_137
00000DF6  1639 00C00013           2081m     MOVE.B DUART_SRB,D3                         ; READ STATUS REGISTER
00000DFC  0803 0000               2082m     BTST #0,D3                                  ; CHECK FOR CHARACTER
00000E00  67D8                    2083m     BEQ WAIT_FOR_READY_137                      ; NOTHING, CHECK AGAIN
00000E02                          2084m     
00000E02  1439 00C00017           2085m     MOVE.B DUART_RXB,D2                         ; GOT A CHARACTER, READ IT
00000E08  13C2 00E00001           2086m     MOVE.B D2,DISPLAY                           ; ECHO TO THE DISPLAY
00000E0E                          2087m     
00000E0E                          2088m     ENDM
00000E0E                          2089m                     PRINT_CHAR D2,D3
00000E0E                          2090m WAIT_FOR_READY_139                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000E0E                 TRUE     2091m     IFEQ DEBUG
00000E0E  1639 00C00003           2092m         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
00000E14  0803 0002               2093m         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
00000E18  67F4                    2094m         BEQ WAIT_FOR_READY_139                      ; NO SPACE, CHECK AGAIN
00000E1A  13C2 00C00007           2095m         MOVE.B D2,DUART_TXA                     ; SEND THE NEXT CHARACTER
00000E20                          2096m     ENDC
00000E20                          2097m     
00000E20                 FALSE    2098m     IFNE DEBUG
00000E20                          2099m     ENDC
00000E20                          2100m 
00000E20                          2101m     ENDM
00000E20                          2102m                     HEX2BIN D2,D2,A0
00000E20  41F9 000018BC           2103m     LEA HEX2BIN_LUT,A0                          ; LOAD THE LOOKUP TABLE
00000E26  0402 0030               2104m     SUB.B #'0',D2                               ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
00000E2A  C4BC 000000FF           2105m     AND.L #$FF,D2                               ; IGNORE THE TOP 3 BYTES
00000E30  1430 2000               2106m     MOVE.B 0(A0,D2),D2                          ; USE THAT AS AN INDEX INTO THE LUT      
00000E34                          2107m     ENDM
00000E34  8E82                    2108                      OR.L D2,D7
00000E36  E98F                    2109                      LSL.L #4,D7
00000E38                          2110                       
00000E38                          2111m                     DOWNLOAD D2,D3              ; LS 4 bits    
00000E38                          2112m WAIT_FOR_READY_141                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000E38                          2113m 
00000E38  1639 00C00003           2114m     MOVE.B DUART_SRA,D3                         ; CHECK FOR COMMAND
00000E3E  0803 0000               2115m     BTST #0,D3                                  ; CHECK FOR CHARACTER
00000E42  6700 0010               2116m     BEQ CONTINUE_141                                ; NOTHING, CONTINUE
00000E46                          2117m  
00000E46                          2118mm     READ_CHAR D2
00000E46                 TRUE     2119mm     IFEQ DEBUG
00000E46  1439 00C00007           2120mm         MOVE.B DUART_RXA,D2                     ; GOT A CHARACTER, READ IT
00000E4C                          2121mm     ENDC
00000E4C                 FALSE    2122mm     IFNE DEBUG
00000E4C                          2123mm     ENDC
00000E4C                          2124mm      
00000E4C  B43C 001B               2125mm     CMP.B #$1B,D2                               ; CHECK FOR ESCAPE AND GO TO START
00000E50  6700 F1B6               2126mm     BEQ START
00000E54                          2127mm     ENDM
00000E54                          2128m CONTINUE_141
00000E54  1639 00C00013           2129m     MOVE.B DUART_SRB,D3                         ; READ STATUS REGISTER
00000E5A  0803 0000               2130m     BTST #0,D3                                  ; CHECK FOR CHARACTER
00000E5E  67D8                    2131m     BEQ WAIT_FOR_READY_141                      ; NOTHING, CHECK AGAIN
00000E60                          2132m     
00000E60  1439 00C00017           2133m     MOVE.B DUART_RXB,D2                         ; GOT A CHARACTER, READ IT
00000E66  13C2 00E00001           2134m     MOVE.B D2,DISPLAY                           ; ECHO TO THE DISPLAY
00000E6C                          2135m     
00000E6C                          2136m     ENDM
00000E6C                          2137m                     PRINT_CHAR D2,D3
00000E6C                          2138m WAIT_FOR_READY_143                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000E6C                 TRUE     2139m     IFEQ DEBUG
00000E6C  1639 00C00003           2140m         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
00000E72  0803 0002               2141m         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
00000E76  67F4                    2142m         BEQ WAIT_FOR_READY_143                      ; NO SPACE, CHECK AGAIN
00000E78  13C2 00C00007           2143m         MOVE.B D2,DUART_TXA                     ; SEND THE NEXT CHARACTER
00000E7E                          2144m     ENDC
00000E7E                          2145m     
00000E7E                 FALSE    2146m     IFNE DEBUG
00000E7E                          2147m     ENDC
00000E7E                          2148m 
00000E7E                          2149m     ENDM
00000E7E                          2150m                     HEX2BIN D2,D2,A0
00000E7E  41F9 000018BC           2151m     LEA HEX2BIN_LUT,A0                          ; LOAD THE LOOKUP TABLE
00000E84  0402 0030               2152m     SUB.B #'0',D2                               ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
00000E88  C4BC 000000FF           2153m     AND.L #$FF,D2                               ; IGNORE THE TOP 3 BYTES
00000E8E  1430 2000               2154m     MOVE.B 0(A0,D2),D2                          ; USE THAT AS AN INDEX INTO THE LUT      
00000E92                          2155m     ENDM
00000E92  8E82                    2156                      OR.L D2,D7
00000E94                          2157                          
00000E94  DC87                    2158                      ADD.L D7,D6                 ; add into checksum
00000E96                          2159                      
00000E96  E98F                    2160                      LSL.L #4,D7
00000E98                          2161m                     DOWNLOAD D2,D3              ; MS 4 bits
00000E98                          2162m WAIT_FOR_READY_145                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000E98                          2163m 
00000E98  1639 00C00003           2164m     MOVE.B DUART_SRA,D3                         ; CHECK FOR COMMAND
00000E9E  0803 0000               2165m     BTST #0,D3                                  ; CHECK FOR CHARACTER
00000EA2  6700 0010               2166m     BEQ CONTINUE_145                                ; NOTHING, CONTINUE
00000EA6                          2167m  
00000EA6                          2168mm     READ_CHAR D2
00000EA6                 TRUE     2169mm     IFEQ DEBUG
00000EA6  1439 00C00007           2170mm         MOVE.B DUART_RXA,D2                     ; GOT A CHARACTER, READ IT
00000EAC                          2171mm     ENDC
00000EAC                 FALSE    2172mm     IFNE DEBUG
00000EAC                          2173mm     ENDC
00000EAC                          2174mm      
00000EAC  B43C 001B               2175mm     CMP.B #$1B,D2                               ; CHECK FOR ESCAPE AND GO TO START
00000EB0  6700 F156               2176mm     BEQ START
00000EB4                          2177mm     ENDM
00000EB4                          2178m CONTINUE_145
00000EB4  1639 00C00013           2179m     MOVE.B DUART_SRB,D3                         ; READ STATUS REGISTER
00000EBA  0803 0000               2180m     BTST #0,D3                                  ; CHECK FOR CHARACTER
00000EBE  67D8                    2181m     BEQ WAIT_FOR_READY_145                      ; NOTHING, CHECK AGAIN
00000EC0                          2182m     
00000EC0  1439 00C00017           2183m     MOVE.B DUART_RXB,D2                         ; GOT A CHARACTER, READ IT
00000EC6  13C2 00E00001           2184m     MOVE.B D2,DISPLAY                           ; ECHO TO THE DISPLAY
00000ECC                          2185m     
00000ECC                          2186m     ENDM
00000ECC                          2187m                     PRINT_CHAR D2,D3
00000ECC                          2188m WAIT_FOR_READY_147                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000ECC                 TRUE     2189m     IFEQ DEBUG
00000ECC  1639 00C00003           2190m         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
00000ED2  0803 0002               2191m         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
00000ED6  67F4                    2192m         BEQ WAIT_FOR_READY_147                      ; NO SPACE, CHECK AGAIN
00000ED8  13C2 00C00007           2193m         MOVE.B D2,DUART_TXA                     ; SEND THE NEXT CHARACTER
00000EDE                          2194m     ENDC
00000EDE                          2195m     
00000EDE                 FALSE    2196m     IFNE DEBUG
00000EDE                          2197m     ENDC
00000EDE                          2198m 
00000EDE                          2199m     ENDM
00000EDE                          2200m                     HEX2BIN D2,D2,A0
00000EDE  41F9 000018BC           2201m     LEA HEX2BIN_LUT,A0                          ; LOAD THE LOOKUP TABLE
00000EE4  0402 0030               2202m     SUB.B #'0',D2                               ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
00000EE8  C4BC 000000FF           2203m     AND.L #$FF,D2                               ; IGNORE THE TOP 3 BYTES
00000EEE  1430 2000               2204m     MOVE.B 0(A0,D2),D2                          ; USE THAT AS AN INDEX INTO THE LUT      
00000EF2                          2205m     ENDM
00000EF2  8E82                    2206                      OR.L D2,D7
00000EF4                          2207                       
00000EF4  E98F                    2208                      LSL.L #4,D7
00000EF6                          2209m                     DOWNLOAD D2,D3              ; LS 4 bits    
00000EF6                          2210m WAIT_FOR_READY_149                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000EF6                          2211m 
00000EF6  1639 00C00003           2212m     MOVE.B DUART_SRA,D3                         ; CHECK FOR COMMAND
00000EFC  0803 0000               2213m     BTST #0,D3                                  ; CHECK FOR CHARACTER
00000F00  6700 0010               2214m     BEQ CONTINUE_149                                ; NOTHING, CONTINUE
00000F04                          2215m  
00000F04                          2216mm     READ_CHAR D2
00000F04                 TRUE     2217mm     IFEQ DEBUG
00000F04  1439 00C00007           2218mm         MOVE.B DUART_RXA,D2                     ; GOT A CHARACTER, READ IT
00000F0A                          2219mm     ENDC
00000F0A                 FALSE    2220mm     IFNE DEBUG
00000F0A                          2221mm     ENDC
00000F0A                          2222mm      
00000F0A  B43C 001B               2223mm     CMP.B #$1B,D2                               ; CHECK FOR ESCAPE AND GO TO START
00000F0E  6700 F0F8               2224mm     BEQ START
00000F12                          2225mm     ENDM
00000F12                          2226m CONTINUE_149
00000F12  1639 00C00013           2227m     MOVE.B DUART_SRB,D3                         ; READ STATUS REGISTER
00000F18  0803 0000               2228m     BTST #0,D3                                  ; CHECK FOR CHARACTER
00000F1C  67D8                    2229m     BEQ WAIT_FOR_READY_149                      ; NOTHING, CHECK AGAIN
00000F1E                          2230m     
00000F1E  1439 00C00017           2231m     MOVE.B DUART_RXB,D2                         ; GOT A CHARACTER, READ IT
00000F24  13C2 00E00001           2232m     MOVE.B D2,DISPLAY                           ; ECHO TO THE DISPLAY
00000F2A                          2233m     
00000F2A                          2234m     ENDM
00000F2A                          2235m                     PRINT_CHAR D2,D3
00000F2A                          2236m WAIT_FOR_READY_151                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000F2A                 TRUE     2237m     IFEQ DEBUG
00000F2A  1639 00C00003           2238m         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
00000F30  0803 0002               2239m         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
00000F34  67F4                    2240m         BEQ WAIT_FOR_READY_151                      ; NO SPACE, CHECK AGAIN
00000F36  13C2 00C00007           2241m         MOVE.B D2,DUART_TXA                     ; SEND THE NEXT CHARACTER
00000F3C                          2242m     ENDC
00000F3C                          2243m     
00000F3C                 FALSE    2244m     IFNE DEBUG
00000F3C                          2245m     ENDC
00000F3C                          2246m 
00000F3C                          2247m     ENDM
00000F3C                          2248m                     HEX2BIN D2,D2,A0
00000F3C  41F9 000018BC           2249m     LEA HEX2BIN_LUT,A0                          ; LOAD THE LOOKUP TABLE
00000F42  0402 0030               2250m     SUB.B #'0',D2                               ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
00000F46  C4BC 000000FF           2251m     AND.L #$FF,D2                               ; IGNORE THE TOP 3 BYTES
00000F4C  1430 2000               2252m     MOVE.B 0(A0,D2),D2                          ; USE THAT AS AN INDEX INTO THE LUT      
00000F50                          2253m     ENDM
00000F50  8E82                    2254                      OR.L D2,D7
00000F52                          2255                      
00000F52  7400                    2256                      MOVE.L #0,D2                ; rextract bottom byte of address and add into checksum
00000F54  1407                    2257                      MOVE.B D7,D2
00000F56  DC82                    2258                      ADD.L D2,D6
00000F58                          2259                      
00000F58  32C7                    2260                      MOVE.W D7,(A1)+             ; store it!
00000F5A                          2261              
00000F5A                          2262                  ENDW
00000F5A  6000 FE70               2263s     BRA _10000002
00000F5E                          2264s _10000003
00000F5E                          2265              
00000F5E                          2266                  IF D5 <EQ> #1 THEN
00000F5E  BA7C 0001               2267s     CMP.W   #1,D5
00000F62  6600 00CE               2268s     BNE _00000006
00000F66  7E00                    2269                      MOVE.L #0,D7                ; D7 holds the word
00000F68                          2270                              
00000F68                          2271m                     DOWNLOAD D2,D3              ; MS 4 bits
00000F68                          2272m WAIT_FOR_READY_153                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000F68                          2273m 
00000F68  1639 00C00003           2274m     MOVE.B DUART_SRA,D3                         ; CHECK FOR COMMAND
00000F6E  0803 0000               2275m     BTST #0,D3                                  ; CHECK FOR CHARACTER
00000F72  6700 0010               2276m     BEQ CONTINUE_153                                ; NOTHING, CONTINUE
00000F76                          2277m  
00000F76                          2278mm     READ_CHAR D2
00000F76                 TRUE     2279mm     IFEQ DEBUG
00000F76  1439 00C00007           2280mm         MOVE.B DUART_RXA,D2                     ; GOT A CHARACTER, READ IT
00000F7C                          2281mm     ENDC
00000F7C                 FALSE    2282mm     IFNE DEBUG
00000F7C                          2283mm     ENDC
00000F7C                          2284mm      
00000F7C  B43C 001B               2285mm     CMP.B #$1B,D2                               ; CHECK FOR ESCAPE AND GO TO START
00000F80  6700 F086               2286mm     BEQ START
00000F84                          2287mm     ENDM
00000F84                          2288m CONTINUE_153
00000F84  1639 00C00013           2289m     MOVE.B DUART_SRB,D3                         ; READ STATUS REGISTER
00000F8A  0803 0000               2290m     BTST #0,D3                                  ; CHECK FOR CHARACTER
00000F8E  67D8                    2291m     BEQ WAIT_FOR_READY_153                      ; NOTHING, CHECK AGAIN
00000F90                          2292m     
00000F90  1439 00C00017           2293m     MOVE.B DUART_RXB,D2                         ; GOT A CHARACTER, READ IT
00000F96  13C2 00E00001           2294m     MOVE.B D2,DISPLAY                           ; ECHO TO THE DISPLAY
00000F9C                          2295m     
00000F9C                          2296m     ENDM
00000F9C                          2297m                     PRINT_CHAR D2,D3
00000F9C                          2298m WAIT_FOR_READY_155                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000F9C                 TRUE     2299m     IFEQ DEBUG
00000F9C  1639 00C00003           2300m         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
00000FA2  0803 0002               2301m         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
00000FA6  67F4                    2302m         BEQ WAIT_FOR_READY_155                      ; NO SPACE, CHECK AGAIN
00000FA8  13C2 00C00007           2303m         MOVE.B D2,DUART_TXA                     ; SEND THE NEXT CHARACTER
00000FAE                          2304m     ENDC
00000FAE                          2305m     
00000FAE                 FALSE    2306m     IFNE DEBUG
00000FAE                          2307m     ENDC
00000FAE                          2308m 
00000FAE                          2309m     ENDM
00000FAE                          2310m                     HEX2BIN D2,D2,A0
00000FAE  41F9 000018BC           2311m     LEA HEX2BIN_LUT,A0                          ; LOAD THE LOOKUP TABLE
00000FB4  0402 0030               2312m     SUB.B #'0',D2                               ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
00000FB8  C4BC 000000FF           2313m     AND.L #$FF,D2                               ; IGNORE THE TOP 3 BYTES
00000FBE  1430 2000               2314m     MOVE.B 0(A0,D2),D2                          ; USE THAT AS AN INDEX INTO THE LUT      
00000FC2                          2315m     ENDM
00000FC2  8E82                    2316                      OR.L D2,D7
00000FC4  E98F                    2317                      LSL.L #4,D7
00000FC6                          2318                       
00000FC6                          2319m                     DOWNLOAD D2,D3              ; LS 4 bits    
00000FC6                          2320m WAIT_FOR_READY_157                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000FC6                          2321m 
00000FC6  1639 00C00003           2322m     MOVE.B DUART_SRA,D3                         ; CHECK FOR COMMAND
00000FCC  0803 0000               2323m     BTST #0,D3                                  ; CHECK FOR CHARACTER
00000FD0  6700 0010               2324m     BEQ CONTINUE_157                                ; NOTHING, CONTINUE
00000FD4                          2325m  
00000FD4                          2326mm     READ_CHAR D2
00000FD4                 TRUE     2327mm     IFEQ DEBUG
00000FD4  1439 00C00007           2328mm         MOVE.B DUART_RXA,D2                     ; GOT A CHARACTER, READ IT
00000FDA                          2329mm     ENDC
00000FDA                 FALSE    2330mm     IFNE DEBUG
00000FDA                          2331mm     ENDC
00000FDA                          2332mm      
00000FDA  B43C 001B               2333mm     CMP.B #$1B,D2                               ; CHECK FOR ESCAPE AND GO TO START
00000FDE  6700 F028               2334mm     BEQ START
00000FE2                          2335mm     ENDM
00000FE2                          2336m CONTINUE_157
00000FE2  1639 00C00013           2337m     MOVE.B DUART_SRB,D3                         ; READ STATUS REGISTER
00000FE8  0803 0000               2338m     BTST #0,D3                                  ; CHECK FOR CHARACTER
00000FEC  67D8                    2339m     BEQ WAIT_FOR_READY_157                      ; NOTHING, CHECK AGAIN
00000FEE                          2340m     
00000FEE  1439 00C00017           2341m     MOVE.B DUART_RXB,D2                         ; GOT A CHARACTER, READ IT
00000FF4  13C2 00E00001           2342m     MOVE.B D2,DISPLAY                           ; ECHO TO THE DISPLAY
00000FFA                          2343m     
00000FFA                          2344m     ENDM
00000FFA                          2345m                     PRINT_CHAR D2,D3
00000FFA                          2346m WAIT_FOR_READY_159                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000FFA                 TRUE     2347m     IFEQ DEBUG
00000FFA  1639 00C00003           2348m         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
00001000  0803 0002               2349m         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
00001004  67F4                    2350m         BEQ WAIT_FOR_READY_159                      ; NO SPACE, CHECK AGAIN
00001006  13C2 00C00007           2351m         MOVE.B D2,DUART_TXA                     ; SEND THE NEXT CHARACTER
0000100C                          2352m     ENDC
0000100C                          2353m     
0000100C                 FALSE    2354m     IFNE DEBUG
0000100C                          2355m     ENDC
0000100C                          2356m 
0000100C                          2357m     ENDM
0000100C                          2358m                     HEX2BIN D2,D2,A0
0000100C  41F9 000018BC           2359m     LEA HEX2BIN_LUT,A0                          ; LOAD THE LOOKUP TABLE
00001012  0402 0030               2360m     SUB.B #'0',D2                               ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
00001016  C4BC 000000FF           2361m     AND.L #$FF,D2                               ; IGNORE THE TOP 3 BYTES
0000101C  1430 2000               2362m     MOVE.B 0(A0,D2),D2                          ; USE THAT AS AN INDEX INTO THE LUT      
00001020                          2363m     ENDM
00001020  8E82                    2364                      OR.L D2,D7
00001022                          2365                                  
00001022  DC87                    2366                      ADD.L D7,D6                 ; add into checksum
00001024                          2367                      
00001024  3611                    2368                      MOVE.W (A1),D3              ; get the current data and replace the top byte
00001026  E18F                    2369                      LSL.L #8,D7
00001028  C6BC 000000FF           2370                      AND.L #$00FF,D3
0000102E  8687                    2371                      OR.L D7,D3
00001030                          2372  
00001030  32C3                    2373                      MOVE.W D3,(A1)+             ; store it!
00001032                          2374                  ENDI
00001032                          2375s _00000006
00001032                          2376m                 PRINT_CRLF D3
00001032                          2377mm     PRINT_CHAR #13,D3                           ; CR
00001032                          2378mm WAIT_FOR_READY_162                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00001032                 TRUE     2379mm     IFEQ DEBUG
00001032  1639 00C00003           2380mm         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
00001038  0803 0002               2381mm         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
0000103C  67F4                    2382mm         BEQ WAIT_FOR_READY_162                      ; NO SPACE, CHECK AGAIN
0000103E  13FC 000D 00C00007      2383mm         MOVE.B #13,DUART_TXA                    ; SEND THE NEXT CHARACTER
00001046                          2384mm     ENDC
00001046                          2385mm     
00001046                 FALSE    2386mm     IFNE DEBUG
00001046                          2387mm     ENDC
00001046                          2388mm 
00001046                          2389mm     ENDM
00001046                          2390mm     PRINT_CHAR #10,D3                           ; LF
00001046                          2391mm WAIT_FOR_READY_163                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00001046                 TRUE     2392mm     IFEQ DEBUG
00001046  1639 00C00003           2393mm         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
0000104C  0803 0002               2394mm         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
00001050  67F4                    2395mm         BEQ WAIT_FOR_READY_163                      ; NO SPACE, CHECK AGAIN
00001052  13FC 000A 00C00007      2396mm         MOVE.B #10,DUART_TXA                    ; SEND THE NEXT CHARACTER
0000105A                          2397mm     ENDC
0000105A                          2398mm     
0000105A                 FALSE    2399mm     IFNE DEBUG
0000105A                          2400mm     ENDC
0000105A                          2401mm 
0000105A                          2402mm     ENDM
0000105A                          2403m     ENDM
0000105A  43F8 048E               2404                  LEA WAIT_FOR_SRECORD,A1         ; next place to go
0000105E                          2405              ELSE
0000105E  6000 024E               2406s     BRA _00000007
00001062                          2407s _00000005
00001062                          2408                  IF.B D7 <EQ> #'8' THEN.L        ; termination record, exit
00001062  BE3C 0038               2409s     CMP.B   #'8',D7
00001066  6600 01E4               2410s     BNE.L   _00000008
0000106A  7E00                    2411                      MOVE.L #0,D7                ; read the 24 bit address, we'll stomp on D7 for this since it's sort of like the address accumulator
0000106C                          2412m                     DOWNLOAD D2,D3              ; top byte
0000106C                          2413m WAIT_FOR_READY_164                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
0000106C                          2414m 
0000106C  1639 00C00003           2415m     MOVE.B DUART_SRA,D3                         ; CHECK FOR COMMAND
00001072  0803 0000               2416m     BTST #0,D3                                  ; CHECK FOR CHARACTER
00001076  6700 0010               2417m     BEQ CONTINUE_164                                ; NOTHING, CONTINUE
0000107A                          2418m  
0000107A                          2419mm     READ_CHAR D2
0000107A                 TRUE     2420mm     IFEQ DEBUG
0000107A  1439 00C00007           2421mm         MOVE.B DUART_RXA,D2                     ; GOT A CHARACTER, READ IT
00001080                          2422mm     ENDC
00001080                 FALSE    2423mm     IFNE DEBUG
00001080                          2424mm     ENDC
00001080                          2425mm      
00001080  B43C 001B               2426mm     CMP.B #$1B,D2                               ; CHECK FOR ESCAPE AND GO TO START
00001084  6700 EF82               2427mm     BEQ START
00001088                          2428mm     ENDM
00001088                          2429m CONTINUE_164
00001088  1639 00C00013           2430m     MOVE.B DUART_SRB,D3                         ; READ STATUS REGISTER
0000108E  0803 0000               2431m     BTST #0,D3                                  ; CHECK FOR CHARACTER
00001092  67D8                    2432m     BEQ WAIT_FOR_READY_164                      ; NOTHING, CHECK AGAIN
00001094                          2433m     
00001094  1439 00C00017           2434m     MOVE.B DUART_RXB,D2                         ; GOT A CHARACTER, READ IT
0000109A  13C2 00E00001           2435m     MOVE.B D2,DISPLAY                           ; ECHO TO THE DISPLAY
000010A0                          2436m     
000010A0                          2437m     ENDM
000010A0                          2438m                     HEX2BIN D2,D2,A0
000010A0  41F9 000018BC           2439m     LEA HEX2BIN_LUT,A0                          ; LOAD THE LOOKUP TABLE
000010A6  0402 0030               2440m     SUB.B #'0',D2                               ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
000010AA  C4BC 000000FF           2441m     AND.L #$FF,D2                               ; IGNORE THE TOP 3 BYTES
000010B0  1430 2000               2442m     MOVE.B 0(A0,D2),D2                          ; USE THAT AS AN INDEX INTO THE LUT      
000010B4                          2443m     ENDM
000010B4  8E82                    2444                      OR.L D2,D7
000010B6  E98F                    2445                      LSL.L #4,D7
000010B8                          2446m                     DOWNLOAD D2,D3         
000010B8                          2447m WAIT_FOR_READY_167                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
000010B8                          2448m 
000010B8  1639 00C00003           2449m     MOVE.B DUART_SRA,D3                         ; CHECK FOR COMMAND
000010BE  0803 0000               2450m     BTST #0,D3                                  ; CHECK FOR CHARACTER
000010C2  6700 0010               2451m     BEQ CONTINUE_167                                ; NOTHING, CONTINUE
000010C6                          2452m  
000010C6                          2453mm     READ_CHAR D2
000010C6                 TRUE     2454mm     IFEQ DEBUG
000010C6  1439 00C00007           2455mm         MOVE.B DUART_RXA,D2                     ; GOT A CHARACTER, READ IT
000010CC                          2456mm     ENDC
000010CC                 FALSE    2457mm     IFNE DEBUG
000010CC                          2458mm     ENDC
000010CC                          2459mm      
000010CC  B43C 001B               2460mm     CMP.B #$1B,D2                               ; CHECK FOR ESCAPE AND GO TO START
000010D0  6700 EF36               2461mm     BEQ START
000010D4                          2462mm     ENDM
000010D4                          2463m CONTINUE_167
000010D4  1639 00C00013           2464m     MOVE.B DUART_SRB,D3                         ; READ STATUS REGISTER
000010DA  0803 0000               2465m     BTST #0,D3                                  ; CHECK FOR CHARACTER
000010DE  67D8                    2466m     BEQ WAIT_FOR_READY_167                      ; NOTHING, CHECK AGAIN
000010E0                          2467m     
000010E0  1439 00C00017           2468m     MOVE.B DUART_RXB,D2                         ; GOT A CHARACTER, READ IT
000010E6  13C2 00E00001           2469m     MOVE.B D2,DISPLAY                           ; ECHO TO THE DISPLAY
000010EC                          2470m     
000010EC                          2471m     ENDM
000010EC                          2472m                     HEX2BIN D2,D2,A0
000010EC  41F9 000018BC           2473m     LEA HEX2BIN_LUT,A0                          ; LOAD THE LOOKUP TABLE
000010F2  0402 0030               2474m     SUB.B #'0',D2                               ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
000010F6  C4BC 000000FF           2475m     AND.L #$FF,D2                               ; IGNORE THE TOP 3 BYTES
000010FC  1430 2000               2476m     MOVE.B 0(A0,D2),D2                          ; USE THAT AS AN INDEX INTO THE LUT      
00001100                          2477m     ENDM
00001100  8E82                    2478                      OR.L D2,D7
00001102                          2479                  
00001102  DC87                    2480                      ADD.L D7,D6                 ; add top byte of address into checksum
00001104                          2481  
00001104  E98F                    2482                      LSL.L #4,D7                 ; middle byte
00001106                          2483m                     DOWNLOAD D2,D3
00001106                          2484m WAIT_FOR_READY_170                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00001106                          2485m 
00001106  1639 00C00003           2486m     MOVE.B DUART_SRA,D3                         ; CHECK FOR COMMAND
0000110C  0803 0000               2487m     BTST #0,D3                                  ; CHECK FOR CHARACTER
00001110  6700 0010               2488m     BEQ CONTINUE_170                                ; NOTHING, CONTINUE
00001114                          2489m  
00001114                          2490mm     READ_CHAR D2
00001114                 TRUE     2491mm     IFEQ DEBUG
00001114  1439 00C00007           2492mm         MOVE.B DUART_RXA,D2                     ; GOT A CHARACTER, READ IT
0000111A                          2493mm     ENDC
0000111A                 FALSE    2494mm     IFNE DEBUG
0000111A                          2495mm     ENDC
0000111A                          2496mm      
0000111A  B43C 001B               2497mm     CMP.B #$1B,D2                               ; CHECK FOR ESCAPE AND GO TO START
0000111E  6700 EEE8               2498mm     BEQ START
00001122                          2499mm     ENDM
00001122                          2500m CONTINUE_170
00001122  1639 00C00013           2501m     MOVE.B DUART_SRB,D3                         ; READ STATUS REGISTER
00001128  0803 0000               2502m     BTST #0,D3                                  ; CHECK FOR CHARACTER
0000112C  67D8                    2503m     BEQ WAIT_FOR_READY_170                      ; NOTHING, CHECK AGAIN
0000112E                          2504m     
0000112E  1439 00C00017           2505m     MOVE.B DUART_RXB,D2                         ; GOT A CHARACTER, READ IT
00001134  13C2 00E00001           2506m     MOVE.B D2,DISPLAY                           ; ECHO TO THE DISPLAY
0000113A                          2507m     
0000113A                          2508m     ENDM
0000113A                          2509m                     HEX2BIN D2,D2,A0
0000113A  41F9 000018BC           2510m     LEA HEX2BIN_LUT,A0                          ; LOAD THE LOOKUP TABLE
00001140  0402 0030               2511m     SUB.B #'0',D2                               ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
00001144  C4BC 000000FF           2512m     AND.L #$FF,D2                               ; IGNORE THE TOP 3 BYTES
0000114A  1430 2000               2513m     MOVE.B 0(A0,D2),D2                          ; USE THAT AS AN INDEX INTO THE LUT      
0000114E                          2514m     ENDM
0000114E  8E82                    2515                      OR.L D2,D7
00001150  E98F                    2516                      LSL.L #4,D7        
00001152                          2517m                     DOWNLOAD D2,D3
00001152                          2518m WAIT_FOR_READY_173                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00001152                          2519m 
00001152  1639 00C00003           2520m     MOVE.B DUART_SRA,D3                         ; CHECK FOR COMMAND
00001158  0803 0000               2521m     BTST #0,D3                                  ; CHECK FOR CHARACTER
0000115C  6700 0010               2522m     BEQ CONTINUE_173                                ; NOTHING, CONTINUE
00001160                          2523m  
00001160                          2524mm     READ_CHAR D2
00001160                 TRUE     2525mm     IFEQ DEBUG
00001160  1439 00C00007           2526mm         MOVE.B DUART_RXA,D2                     ; GOT A CHARACTER, READ IT
00001166                          2527mm     ENDC
00001166                 FALSE    2528mm     IFNE DEBUG
00001166                          2529mm     ENDC
00001166                          2530mm      
00001166  B43C 001B               2531mm     CMP.B #$1B,D2                               ; CHECK FOR ESCAPE AND GO TO START
0000116A  6700 EE9C               2532mm     BEQ START
0000116E                          2533mm     ENDM
0000116E                          2534m CONTINUE_173
0000116E  1639 00C00013           2535m     MOVE.B DUART_SRB,D3                         ; READ STATUS REGISTER
00001174  0803 0000               2536m     BTST #0,D3                                  ; CHECK FOR CHARACTER
00001178  67D8                    2537m     BEQ WAIT_FOR_READY_173                      ; NOTHING, CHECK AGAIN
0000117A                          2538m     
0000117A  1439 00C00017           2539m     MOVE.B DUART_RXB,D2                         ; GOT A CHARACTER, READ IT
00001180  13C2 00E00001           2540m     MOVE.B D2,DISPLAY                           ; ECHO TO THE DISPLAY
00001186                          2541m     
00001186                          2542m     ENDM
00001186                          2543m                     HEX2BIN D2,D2,A0
00001186  41F9 000018BC           2544m     LEA HEX2BIN_LUT,A0                          ; LOAD THE LOOKUP TABLE
0000118C  0402 0030               2545m     SUB.B #'0',D2                               ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
00001190  C4BC 000000FF           2546m     AND.L #$FF,D2                               ; IGNORE THE TOP 3 BYTES
00001196  1430 2000               2547m     MOVE.B 0(A0,D2),D2                          ; USE THAT AS AN INDEX INTO THE LUT      
0000119A                          2548m     ENDM
0000119A  8E82                    2549                      OR.L D2,D7
0000119C                          2550          
0000119C  7400                    2551                      MOVE.L #0,D2                ; rextract middle byte of address and add into checksum
0000119E  1407                    2552                      MOVE.B D7,D2
000011A0  DC82                    2553                      ADD.L D2,D6
000011A2                          2554                    
000011A2  E98F                    2555                      LSL.L #4,D7                 ; bottom byte
000011A4                          2556m                     DOWNLOAD D2,D3
000011A4                          2557m WAIT_FOR_READY_176                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
000011A4                          2558m 
000011A4  1639 00C00003           2559m     MOVE.B DUART_SRA,D3                         ; CHECK FOR COMMAND
000011AA  0803 0000               2560m     BTST #0,D3                                  ; CHECK FOR CHARACTER
000011AE  6700 0010               2561m     BEQ CONTINUE_176                                ; NOTHING, CONTINUE
000011B2                          2562m  
000011B2                          2563mm     READ_CHAR D2
000011B2                 TRUE     2564mm     IFEQ DEBUG
000011B2  1439 00C00007           2565mm         MOVE.B DUART_RXA,D2                     ; GOT A CHARACTER, READ IT
000011B8                          2566mm     ENDC
000011B8                 FALSE    2567mm     IFNE DEBUG
000011B8                          2568mm     ENDC
000011B8                          2569mm      
000011B8  B43C 001B               2570mm     CMP.B #$1B,D2                               ; CHECK FOR ESCAPE AND GO TO START
000011BC  6700 EE4A               2571mm     BEQ START
000011C0                          2572mm     ENDM
000011C0                          2573m CONTINUE_176
000011C0  1639 00C00013           2574m     MOVE.B DUART_SRB,D3                         ; READ STATUS REGISTER
000011C6  0803 0000               2575m     BTST #0,D3                                  ; CHECK FOR CHARACTER
000011CA  67D8                    2576m     BEQ WAIT_FOR_READY_176                      ; NOTHING, CHECK AGAIN
000011CC                          2577m     
000011CC  1439 00C00017           2578m     MOVE.B DUART_RXB,D2                         ; GOT A CHARACTER, READ IT
000011D2  13C2 00E00001           2579m     MOVE.B D2,DISPLAY                           ; ECHO TO THE DISPLAY
000011D8                          2580m     
000011D8                          2581m     ENDM
000011D8                          2582m                     HEX2BIN D2,D2,A0
000011D8  41F9 000018BC           2583m     LEA HEX2BIN_LUT,A0                          ; LOAD THE LOOKUP TABLE
000011DE  0402 0030               2584m     SUB.B #'0',D2                               ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
000011E2  C4BC 000000FF           2585m     AND.L #$FF,D2                               ; IGNORE THE TOP 3 BYTES
000011E8  1430 2000               2586m     MOVE.B 0(A0,D2),D2                          ; USE THAT AS AN INDEX INTO THE LUT      
000011EC                          2587m     ENDM
000011EC  8E82                    2588                      OR.L D2,D7
000011EE  E98F                    2589                      LSL.L #4,D7        
000011F0                          2590m                     DOWNLOAD D2,D3
000011F0                          2591m WAIT_FOR_READY_179                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
000011F0                          2592m 
000011F0  1639 00C00003           2593m     MOVE.B DUART_SRA,D3                         ; CHECK FOR COMMAND
000011F6  0803 0000               2594m     BTST #0,D3                                  ; CHECK FOR CHARACTER
000011FA  6700 0010               2595m     BEQ CONTINUE_179                                ; NOTHING, CONTINUE
000011FE                          2596m  
000011FE                          2597mm     READ_CHAR D2
000011FE                 TRUE     2598mm     IFEQ DEBUG
000011FE  1439 00C00007           2599mm         MOVE.B DUART_RXA,D2                     ; GOT A CHARACTER, READ IT
00001204                          2600mm     ENDC
00001204                 FALSE    2601mm     IFNE DEBUG
00001204                          2602mm     ENDC
00001204                          2603mm      
00001204  B43C 001B               2604mm     CMP.B #$1B,D2                               ; CHECK FOR ESCAPE AND GO TO START
00001208  6700 EDFE               2605mm     BEQ START
0000120C                          2606mm     ENDM
0000120C                          2607m CONTINUE_179
0000120C  1639 00C00013           2608m     MOVE.B DUART_SRB,D3                         ; READ STATUS REGISTER
00001212  0803 0000               2609m     BTST #0,D3                                  ; CHECK FOR CHARACTER
00001216  67D8                    2610m     BEQ WAIT_FOR_READY_179                      ; NOTHING, CHECK AGAIN
00001218                          2611m     
00001218  1439 00C00017           2612m     MOVE.B DUART_RXB,D2                         ; GOT A CHARACTER, READ IT
0000121E  13C2 00E00001           2613m     MOVE.B D2,DISPLAY                           ; ECHO TO THE DISPLAY
00001224                          2614m     
00001224                          2615m     ENDM
00001224                          2616m                     HEX2BIN D2,D2,A0
00001224  41F9 000018BC           2617m     LEA HEX2BIN_LUT,A0                          ; LOAD THE LOOKUP TABLE
0000122A  0402 0030               2618m     SUB.B #'0',D2                               ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
0000122E  C4BC 000000FF           2619m     AND.L #$FF,D2                               ; IGNORE THE TOP 3 BYTES
00001234  1430 2000               2620m     MOVE.B 0(A0,D2),D2                          ; USE THAT AS AN INDEX INTO THE LUT      
00001238                          2621m     ENDM
00001238  8E82                    2622                      OR.L D2,D7
0000123A                          2623                  
0000123A  7400                    2624                      MOVE.L #0,D2                ; rextract bottom byte of address and add into checksum
0000123C  1407                    2625                      MOVE.B D7,D2
0000123E  DC82                    2626                      ADD.L D2,D6
00001240                          2627                    
00001240  2447                    2628                      MOVE.L D7,A2                ; start address -> A2
00001242                          2629                  
00001242  43F9 000013FA           2630                      LEA DOWNLOAD_DONE,A1        ; next place to go
00001248                          2631                  ELSE
00001248  6000 0064               2632s     BRA _00000009
0000124C                          2633s _00000008
0000124C  41F9 00001871           2634                      LEA UNREC,A0                ; warn for unrecognised type
00001252                          2635m                     PRINT_STR A0,D3
00001252                          2636m LOOP_182
00001252  0C10 0000               2637m     CMP.B #0,(A0)                               ; 0 -> DONE
00001256  6700 0018               2638m     BEQ EXIT_182
0000125A                          2639mm     PRINT_CHAR (A0)+,D3
0000125A                          2640mm WAIT_FOR_READY_183                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
0000125A                 TRUE     2641mm     IFEQ DEBUG
0000125A  1639 00C00003           2642mm         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
00001260  0803 0002               2643mm         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
00001264  67F4                    2644mm         BEQ WAIT_FOR_READY_183                      ; NO SPACE, CHECK AGAIN
00001266  13D8 00C00007           2645mm         MOVE.B (A0)+,DUART_TXA                      ; SEND THE NEXT CHARACTER
0000126C                          2646mm     ENDC
0000126C                          2647mm     
0000126C                 FALSE    2648mm     IFNE DEBUG
0000126C                          2649mm     ENDC
0000126C                          2650mm 
0000126C                          2651mm     ENDM
0000126C  4EF8 1252               2652m     JMP LOOP_182
00001270                          2653m EXIT_182
00001270                          2654m     ENDM
00001270                          2655m                     PRINT_CHAR D7,D3
00001270                          2656m WAIT_FOR_READY_184                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00001270                 TRUE     2657m     IFEQ DEBUG
00001270  1639 00C00003           2658m         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
00001276  0803 0002               2659m         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
0000127A  67F4                    2660m         BEQ WAIT_FOR_READY_184                      ; NO SPACE, CHECK AGAIN
0000127C  13C7 00C00007           2661m         MOVE.B D7,DUART_TXA                     ; SEND THE NEXT CHARACTER
00001282                          2662m     ENDC
00001282                          2663m     
00001282                 FALSE    2664m     IFNE DEBUG
00001282                          2665m     ENDC
00001282                          2666m 
00001282                          2667m     ENDM
00001282                          2668m                     PRINT_CRLF D3
00001282                          2669mm     PRINT_CHAR #13,D3                           ; CR
00001282                          2670mm WAIT_FOR_READY_186                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00001282                 TRUE     2671mm     IFEQ DEBUG
00001282  1639 00C00003           2672mm         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
00001288  0803 0002               2673mm         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
0000128C  67F4                    2674mm         BEQ WAIT_FOR_READY_186                      ; NO SPACE, CHECK AGAIN
0000128E  13FC 000D 00C00007      2675mm         MOVE.B #13,DUART_TXA                    ; SEND THE NEXT CHARACTER
00001296                          2676mm     ENDC
00001296                          2677mm     
00001296                 FALSE    2678mm     IFNE DEBUG
00001296                          2679mm     ENDC
00001296                          2680mm 
00001296                          2681mm     ENDM
00001296                          2682mm     PRINT_CHAR #10,D3                           ; LF
00001296                          2683mm WAIT_FOR_READY_187                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00001296                 TRUE     2684mm     IFEQ DEBUG
00001296  1639 00C00003           2685mm         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
0000129C  0803 0002               2686mm         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
000012A0  67F4                    2687mm         BEQ WAIT_FOR_READY_187                      ; NO SPACE, CHECK AGAIN
000012A2  13FC 000A 00C00007      2688mm         MOVE.B #10,DUART_TXA                    ; SEND THE NEXT CHARACTER
000012AA                          2689mm     ENDC
000012AA                          2690mm     
000012AA                 FALSE    2691mm     IFNE DEBUG
000012AA                          2692mm     ENDC
000012AA                          2693mm 
000012AA                          2694mm     ENDM
000012AA                          2695m     ENDM
000012AA                          2696              
000012AA  4EF8 048E               2697                      JMP WAIT_FOR_SRECORD        ; ignore any other type    
000012AE                          2698                  ENDI
000012AE                          2699s _00000009
000012AE                          2700              ENDI
000012AE                          2701s _00000007
000012AE                          2702          ENDI
000012AE                          2703s _00000004
000012AE                          2704      ENDI
000012AE                          2705s _00000001
000012AE                          2706      
000012AE  4686                    2707      NOT.L D6                                    ; ones complement the checksum
000012B0  0286 000000FF           2708      ANDI.L #$FF,D6                              ; and take the LSByte
000012B6                          2709          
000012B6  7E00                    2710      MOVE.L #0,D7                                ; read the checksum from the data stream
000012B8                          2711m     DOWNLOAD D2,D3                              ; top byte
000012B8                          2712m WAIT_FOR_READY_188                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
000012B8                          2713m 
000012B8  1639 00C00003           2714m     MOVE.B DUART_SRA,D3                         ; CHECK FOR COMMAND
000012BE  0803 0000               2715m     BTST #0,D3                                  ; CHECK FOR CHARACTER
000012C2  6700 0010               2716m     BEQ CONTINUE_188                                ; NOTHING, CONTINUE
000012C6                          2717m  
000012C6                          2718mm     READ_CHAR D2
000012C6                 TRUE     2719mm     IFEQ DEBUG
000012C6  1439 00C00007           2720mm         MOVE.B DUART_RXA,D2                     ; GOT A CHARACTER, READ IT
000012CC                          2721mm     ENDC
000012CC                 FALSE    2722mm     IFNE DEBUG
000012CC                          2723mm     ENDC
000012CC                          2724mm      
000012CC  B43C 001B               2725mm     CMP.B #$1B,D2                               ; CHECK FOR ESCAPE AND GO TO START
000012D0  6700 ED36               2726mm     BEQ START
000012D4                          2727mm     ENDM
000012D4                          2728m CONTINUE_188
000012D4  1639 00C00013           2729m     MOVE.B DUART_SRB,D3                         ; READ STATUS REGISTER
000012DA  0803 0000               2730m     BTST #0,D3                                  ; CHECK FOR CHARACTER
000012DE  67D8                    2731m     BEQ WAIT_FOR_READY_188                      ; NOTHING, CHECK AGAIN
000012E0                          2732m     
000012E0  1439 00C00017           2733m     MOVE.B DUART_RXB,D2                         ; GOT A CHARACTER, READ IT
000012E6  13C2 00E00001           2734m     MOVE.B D2,DISPLAY                           ; ECHO TO THE DISPLAY
000012EC                          2735m     
000012EC                          2736m     ENDM
000012EC                          2737m     HEX2BIN D2,D2,A0
000012EC  41F9 000018BC           2738m     LEA HEX2BIN_LUT,A0                          ; LOAD THE LOOKUP TABLE
000012F2  0402 0030               2739m     SUB.B #'0',D2                               ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
000012F6  C4BC 000000FF           2740m     AND.L #$FF,D2                               ; IGNORE THE TOP 3 BYTES
000012FC  1430 2000               2741m     MOVE.B 0(A0,D2),D2                          ; USE THAT AS AN INDEX INTO THE LUT      
00001300                          2742m     ENDM
00001300  8E82                    2743      OR.L D2,D7
00001302  E98F                    2744      LSL.L #4,D7
00001304                          2745m     DOWNLOAD D2,D3                              ; bottom byte
00001304                          2746m WAIT_FOR_READY_191                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00001304                          2747m 
00001304  1639 00C00003           2748m     MOVE.B DUART_SRA,D3                         ; CHECK FOR COMMAND
0000130A  0803 0000               2749m     BTST #0,D3                                  ; CHECK FOR CHARACTER
0000130E  6700 0010               2750m     BEQ CONTINUE_191                                ; NOTHING, CONTINUE
00001312                          2751m  
00001312                          2752mm     READ_CHAR D2
00001312                 TRUE     2753mm     IFEQ DEBUG
00001312  1439 00C00007           2754mm         MOVE.B DUART_RXA,D2                     ; GOT A CHARACTER, READ IT
00001318                          2755mm     ENDC
00001318                 FALSE    2756mm     IFNE DEBUG
00001318                          2757mm     ENDC
00001318                          2758mm      
00001318  B43C 001B               2759mm     CMP.B #$1B,D2                               ; CHECK FOR ESCAPE AND GO TO START
0000131C  6700 ECEA               2760mm     BEQ START
00001320                          2761mm     ENDM
00001320                          2762m CONTINUE_191
00001320  1639 00C00013           2763m     MOVE.B DUART_SRB,D3                         ; READ STATUS REGISTER
00001326  0803 0000               2764m     BTST #0,D3                                  ; CHECK FOR CHARACTER
0000132A  67D8                    2765m     BEQ WAIT_FOR_READY_191                      ; NOTHING, CHECK AGAIN
0000132C                          2766m     
0000132C  1439 00C00017           2767m     MOVE.B DUART_RXB,D2                         ; GOT A CHARACTER, READ IT
00001332  13C2 00E00001           2768m     MOVE.B D2,DISPLAY                           ; ECHO TO THE DISPLAY
00001338                          2769m     
00001338                          2770m     ENDM
00001338                          2771m     HEX2BIN D2,D2,A0
00001338  41F9 000018BC           2772m     LEA HEX2BIN_LUT,A0                          ; LOAD THE LOOKUP TABLE
0000133E  0402 0030               2773m     SUB.B #'0',D2                               ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
00001342  C4BC 000000FF           2774m     AND.L #$FF,D2                               ; IGNORE THE TOP 3 BYTES
00001348  1430 2000               2775m     MOVE.B 0(A0,D2),D2                          ; USE THAT AS AN INDEX INTO THE LUT      
0000134C                          2776m     ENDM
0000134C  8E82                    2777      OR.L D2,D7
0000134E                          2778                  
0000134E                          2779      IF.B D7 <NE> D6 THEN.L
0000134E  BE06                    2780s     CMP.B   D6,D7
00001350  6700 00A6               2781s     BEQ.L   _0000000A
00001354  41F9 00001888           2782          LEA CS_FAILURE,A0                       ; warn for mismatched checksum
0000135A                          2783m         PRINT_STR A0,D3
0000135A                          2784m LOOP_194
0000135A  0C10 0000               2785m     CMP.B #0,(A0)                               ; 0 -> DONE
0000135E  6700 0018               2786m     BEQ EXIT_194
00001362                          2787mm     PRINT_CHAR (A0)+,D3
00001362                          2788mm WAIT_FOR_READY_195                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00001362                 TRUE     2789mm     IFEQ DEBUG
00001362  1639 00C00003           2790mm         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
00001368  0803 0002               2791mm         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
0000136C  67F4                    2792mm         BEQ WAIT_FOR_READY_195                      ; NO SPACE, CHECK AGAIN
0000136E  13D8 00C00007           2793mm         MOVE.B (A0)+,DUART_TXA                      ; SEND THE NEXT CHARACTER
00001374                          2794mm     ENDC
00001374                          2795mm     
00001374                 FALSE    2796mm     IFNE DEBUG
00001374                          2797mm     ENDC
00001374                          2798mm 
00001374                          2799mm     ENDM
00001374  4EF8 135A               2800m     JMP LOOP_194
00001378                          2801m EXIT_194
00001378                          2802m     ENDM
00001378                          2803m         PRINT_REG D4,D3,D6,D7,A0
00001378                          2804mm     PRINT_CHAR #'0',D3                          ;0X HEADER
00001378                          2805mm WAIT_FOR_READY_197                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00001378                 TRUE     2806mm     IFEQ DEBUG
00001378  1639 00C00003           2807mm         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
0000137E  0803 0002               2808mm         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
00001382  67F4                    2809mm         BEQ WAIT_FOR_READY_197                      ; NO SPACE, CHECK AGAIN
00001384  13FC 0030 00C00007      2810mm         MOVE.B #'0',DUART_TXA                       ; SEND THE NEXT CHARACTER
0000138C                          2811mm     ENDC
0000138C                          2812mm     
0000138C                 FALSE    2813mm     IFNE DEBUG
0000138C                          2814mm     ENDC
0000138C                          2815mm 
0000138C                          2816mm     ENDM
0000138C                          2817mm     PRINT_CHAR #'x',D3
0000138C                          2818mm WAIT_FOR_READY_198                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
0000138C                 TRUE     2819mm     IFEQ DEBUG
0000138C  1639 00C00003           2820mm         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
00001392  0803 0002               2821mm         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
00001396  67F4                    2822mm         BEQ WAIT_FOR_READY_198                      ; NO SPACE, CHECK AGAIN
00001398  13FC 0078 00C00007      2823mm         MOVE.B #'x',DUART_TXA                       ; SEND THE NEXT CHARACTER
000013A0                          2824mm     ENDC
000013A0                          2825mm     
000013A0                 FALSE    2826mm     IFNE DEBUG
000013A0                          2827mm     ENDC
000013A0                          2828mm 
000013A0                          2829mm     ENDM
000013A0  7E07                    2830m     MOVE.L #7,D7                                ; LOOP ROUND ALL 8 HEX CHARACTERS OF 4 BITS EACH
000013A2                          2831m LOOP_196
000013A2                          2832mm     BIN2HEX D4,D6,A0
000013A2  41F9 000018AC           2833mm     LEA BIN2HEX_LUT,A0                          ; LOAD THE LOOKUP TABLE
000013A8  E99C                    2834mm     ROL.L #4,D4                                 ; SHIFT THE TOP 4 BITS DOWN TO BOTTOM OF THE REGISTER THE AND MASK OFF EVERYTHING ELSE
000013AA  1C04                    2835mm     MOVE.B D4,D6
000013AC  0286 0000000F           2836mm     ANDI.L #$F,D6
000013B2  1C30 6000               2837mm     MOVE.B 0(A0,D6),D6                          ; USE THAT AS AN INDEX INTO THE LUT
000013B6                          2838mm     ENDM
000013B6                          2839mm     PRINT_CHAR D6,D3
000013B6                          2840mm WAIT_FOR_READY_200                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
000013B6                 TRUE     2841mm     IFEQ DEBUG
000013B6  1639 00C00003           2842mm         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
000013BC  0803 0002               2843mm         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
000013C0  67F4                    2844mm         BEQ WAIT_FOR_READY_200                      ; NO SPACE, CHECK AGAIN
000013C2  13C6 00C00007           2845mm         MOVE.B D6,DUART_TXA                     ; SEND THE NEXT CHARACTER
000013C8                          2846mm     ENDC
000013C8                          2847mm     
000013C8                 FALSE    2848mm     IFNE DEBUG
000013C8                          2849mm     ENDC
000013C8                          2850mm 
000013C8                          2851mm     ENDM
000013C8  57CF FFD8               2852m     DBEQ D7,LOOP_196
000013CC                          2853m     ENDM
000013CC                          2854m         PRINT_CRLF D3
000013CC                          2855mm     PRINT_CHAR #13,D3                           ; CR
000013CC                          2856mm WAIT_FOR_READY_202                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
000013CC                 TRUE     2857mm     IFEQ DEBUG
000013CC  1639 00C00003           2858mm         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
000013D2  0803 0002               2859mm         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
000013D6  67F4                    2860mm         BEQ WAIT_FOR_READY_202                      ; NO SPACE, CHECK AGAIN
000013D8  13FC 000D 00C00007      2861mm         MOVE.B #13,DUART_TXA                    ; SEND THE NEXT CHARACTER
000013E0                          2862mm     ENDC
000013E0                          2863mm     
000013E0                 FALSE    2864mm     IFNE DEBUG
000013E0                          2865mm     ENDC
000013E0                          2866mm 
000013E0                          2867mm     ENDM
000013E0                          2868mm     PRINT_CHAR #10,D3                           ; LF
000013E0                          2869mm WAIT_FOR_READY_203                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
000013E0                 TRUE     2870mm     IFEQ DEBUG
000013E0  1639 00C00003           2871mm         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
000013E6  0803 0002               2872mm         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
000013EA  67F4                    2873mm         BEQ WAIT_FOR_READY_203                      ; NO SPACE, CHECK AGAIN
000013EC  13FC 000A 00C00007      2874mm         MOVE.B #10,DUART_TXA                    ; SEND THE NEXT CHARACTER
000013F4                          2875mm     ENDC
000013F4                          2876mm     
000013F4                 FALSE    2877mm     IFNE DEBUG
000013F4                          2878mm     ENDC
000013F4                          2879mm 
000013F4                          2880mm     ENDM
000013F4                          2881m     ENDM
000013F4  4EF8 0186               2882          JMP MAIN_LOOP
000013F8                          2883      ENDI
000013F8                          2884s _0000000A
000013F8                          2885      
000013F8  4ED1                    2886      JMP (A1)
000013FA                          2887  DOWNLOAD_DONE
000013FA                          2888m     PRINT_REG D4,D3,D7,D6,A0                    ; print out number of Srecords read
000013FA                          2889mm     PRINT_CHAR #'0',D3                          ;0X HEADER
000013FA                          2890mm WAIT_FOR_READY_205                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
000013FA                 TRUE     2891mm     IFEQ DEBUG
000013FA  1639 00C00003           2892mm         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
00001400  0803 0002               2893mm         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
00001404  67F4                    2894mm         BEQ WAIT_FOR_READY_205                      ; NO SPACE, CHECK AGAIN
00001406  13FC 0030 00C00007      2895mm         MOVE.B #'0',DUART_TXA                       ; SEND THE NEXT CHARACTER
0000140E                          2896mm     ENDC
0000140E                          2897mm     
0000140E                 FALSE    2898mm     IFNE DEBUG
0000140E                          2899mm     ENDC
0000140E                          2900mm 
0000140E                          2901mm     ENDM
0000140E                          2902mm     PRINT_CHAR #'x',D3
0000140E                          2903mm WAIT_FOR_READY_206                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
0000140E                 TRUE     2904mm     IFEQ DEBUG
0000140E  1639 00C00003           2905mm         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
00001414  0803 0002               2906mm         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
00001418  67F4                    2907mm         BEQ WAIT_FOR_READY_206                      ; NO SPACE, CHECK AGAIN
0000141A  13FC 0078 00C00007      2908mm         MOVE.B #'x',DUART_TXA                       ; SEND THE NEXT CHARACTER
00001422                          2909mm     ENDC
00001422                          2910mm     
00001422                 FALSE    2911mm     IFNE DEBUG
00001422                          2912mm     ENDC
00001422                          2913mm 
00001422                          2914mm     ENDM
00001422  7C07                    2915m     MOVE.L #7,D6                                ; LOOP ROUND ALL 8 HEX CHARACTERS OF 4 BITS EACH
00001424                          2916m LOOP_204
00001424                          2917mm     BIN2HEX D4,D7,A0
00001424  41F9 000018AC           2918mm     LEA BIN2HEX_LUT,A0                          ; LOAD THE LOOKUP TABLE
0000142A  E99C                    2919mm     ROL.L #4,D4                                 ; SHIFT THE TOP 4 BITS DOWN TO BOTTOM OF THE REGISTER THE AND MASK OFF EVERYTHING ELSE
0000142C  1E04                    2920mm     MOVE.B D4,D7
0000142E  0287 0000000F           2921mm     ANDI.L #$F,D7
00001434  1E30 7000               2922mm     MOVE.B 0(A0,D7),D7                          ; USE THAT AS AN INDEX INTO THE LUT
00001438                          2923mm     ENDM
00001438                          2924mm     PRINT_CHAR D7,D3
00001438                          2925mm WAIT_FOR_READY_208                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00001438                 TRUE     2926mm     IFEQ DEBUG
00001438  1639 00C00003           2927mm         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
0000143E  0803 0002               2928mm         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
00001442  67F4                    2929mm         BEQ WAIT_FOR_READY_208                      ; NO SPACE, CHECK AGAIN
00001444  13C7 00C00007           2930mm         MOVE.B D7,DUART_TXA                     ; SEND THE NEXT CHARACTER
0000144A                          2931mm     ENDC
0000144A                          2932mm     
0000144A                 FALSE    2933mm     IFNE DEBUG
0000144A                          2934mm     ENDC
0000144A                          2935mm 
0000144A                          2936mm     ENDM
0000144A  57CE FFD8               2937m     DBEQ D6,LOOP_204
0000144E                          2938m     ENDM
0000144E  41F9 0000184F           2939      LEA READ,A0
00001454                          2940m     PRINT_STR A0,D3
00001454                          2941m LOOP_209
00001454  0C10 0000               2942m     CMP.B #0,(A0)                               ; 0 -> DONE
00001458  6700 0018               2943m     BEQ EXIT_209
0000145C                          2944mm     PRINT_CHAR (A0)+,D3
0000145C                          2945mm WAIT_FOR_READY_210                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
0000145C                 TRUE     2946mm     IFEQ DEBUG
0000145C  1639 00C00003           2947mm         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
00001462  0803 0002               2948mm         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
00001466  67F4                    2949mm         BEQ WAIT_FOR_READY_210                      ; NO SPACE, CHECK AGAIN
00001468  13D8 00C00007           2950mm         MOVE.B (A0)+,DUART_TXA                      ; SEND THE NEXT CHARACTER
0000146E                          2951mm     ENDC
0000146E                          2952mm     
0000146E                 FALSE    2953mm     IFNE DEBUG
0000146E                          2954mm     ENDC
0000146E                          2955mm 
0000146E                          2956mm     ENDM
0000146E  4EF8 1454               2957m     JMP LOOP_209
00001472                          2958m EXIT_209
00001472                          2959m     ENDM
00001472  2E0A                    2960      MOVE.L A2,D7                                ; set address accumulator to start address
00001474                          2961m     PRINT_REG D7,D3,D2,D6,A0                    ; print out start address
00001474                          2962mm     PRINT_CHAR #'0',D3                          ;0X HEADER
00001474                          2963mm WAIT_FOR_READY_212                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00001474                 TRUE     2964mm     IFEQ DEBUG
00001474  1639 00C00003           2965mm         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
0000147A  0803 0002               2966mm         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
0000147E  67F4                    2967mm         BEQ WAIT_FOR_READY_212                      ; NO SPACE, CHECK AGAIN
00001480  13FC 0030 00C00007      2968mm         MOVE.B #'0',DUART_TXA                       ; SEND THE NEXT CHARACTER
00001488                          2969mm     ENDC
00001488                          2970mm     
00001488                 FALSE    2971mm     IFNE DEBUG
00001488                          2972mm     ENDC
00001488                          2973mm 
00001488                          2974mm     ENDM
00001488                          2975mm     PRINT_CHAR #'x',D3
00001488                          2976mm WAIT_FOR_READY_213                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00001488                 TRUE     2977mm     IFEQ DEBUG
00001488  1639 00C00003           2978mm         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
0000148E  0803 0002               2979mm         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
00001492  67F4                    2980mm         BEQ WAIT_FOR_READY_213                      ; NO SPACE, CHECK AGAIN
00001494  13FC 0078 00C00007      2981mm         MOVE.B #'x',DUART_TXA                       ; SEND THE NEXT CHARACTER
0000149C                          2982mm     ENDC
0000149C                          2983mm     
0000149C                 FALSE    2984mm     IFNE DEBUG
0000149C                          2985mm     ENDC
0000149C                          2986mm 
0000149C                          2987mm     ENDM
0000149C  7C07                    2988m     MOVE.L #7,D6                                ; LOOP ROUND ALL 8 HEX CHARACTERS OF 4 BITS EACH
0000149E                          2989m LOOP_211
0000149E                          2990mm     BIN2HEX D7,D2,A0
0000149E  41F9 000018AC           2991mm     LEA BIN2HEX_LUT,A0                          ; LOAD THE LOOKUP TABLE
000014A4  E99F                    2992mm     ROL.L #4,D7                                 ; SHIFT THE TOP 4 BITS DOWN TO BOTTOM OF THE REGISTER THE AND MASK OFF EVERYTHING ELSE
000014A6  1407                    2993mm     MOVE.B D7,D2
000014A8  0282 0000000F           2994mm     ANDI.L #$F,D2
000014AE  1430 2000               2995mm     MOVE.B 0(A0,D2),D2                          ; USE THAT AS AN INDEX INTO THE LUT
000014B2                          2996mm     ENDM
000014B2                          2997mm     PRINT_CHAR D2,D3
000014B2                          2998mm WAIT_FOR_READY_215                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
000014B2                 TRUE     2999mm     IFEQ DEBUG
000014B2  1639 00C00003           3000mm         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
000014B8  0803 0002               3001mm         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
000014BC  67F4                    3002mm         BEQ WAIT_FOR_READY_215                      ; NO SPACE, CHECK AGAIN
000014BE  13C2 00C00007           3003mm         MOVE.B D2,DUART_TXA                     ; SEND THE NEXT CHARACTER
000014C4                          3004mm     ENDC
000014C4                          3005mm     
000014C4                 FALSE    3006mm     IFNE DEBUG
000014C4                          3007mm     ENDC
000014C4                          3008mm 
000014C4                          3009mm     ENDM
000014C4  57CE FFD8               3010m     DBEQ D6,LOOP_211
000014C8                          3011m     ENDM
000014C8                          3012m     PRINT_CRLF D3     
000014C8                          3013mm     PRINT_CHAR #13,D3                           ; CR
000014C8                          3014mm WAIT_FOR_READY_217                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
000014C8                 TRUE     3015mm     IFEQ DEBUG
000014C8  1639 00C00003           3016mm         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
000014CE  0803 0002               3017mm         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
000014D2  67F4                    3018mm         BEQ WAIT_FOR_READY_217                      ; NO SPACE, CHECK AGAIN
000014D4  13FC 000D 00C00007      3019mm         MOVE.B #13,DUART_TXA                    ; SEND THE NEXT CHARACTER
000014DC                          3020mm     ENDC
000014DC                          3021mm     
000014DC                 FALSE    3022mm     IFNE DEBUG
000014DC                          3023mm     ENDC
000014DC                          3024mm 
000014DC                          3025mm     ENDM
000014DC                          3026mm     PRINT_CHAR #10,D3                           ; LF
000014DC                          3027mm WAIT_FOR_READY_218                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
000014DC                 TRUE     3028mm     IFEQ DEBUG
000014DC  1639 00C00003           3029mm         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
000014E2  0803 0002               3030mm         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
000014E6  67F4                    3031mm         BEQ WAIT_FOR_READY_218                      ; NO SPACE, CHECK AGAIN
000014E8  13FC 000A 00C00007      3032mm         MOVE.B #10,DUART_TXA                    ; SEND THE NEXT CHARACTER
000014F0                          3033mm     ENDC
000014F0                          3034mm     
000014F0                 FALSE    3035mm     IFNE DEBUG
000014F0                          3036mm     ENDC
000014F0                          3037mm 
000014F0                          3038mm     ENDM
000014F0                          3039m     ENDM
000014F0                          3040          
000014F0  4EF8 0186               3041      JMP MAIN_LOOP
000014F4                          3042      
000014F4                          3043  G
000014F4  2047                    3044      MOVE.L D7,A0                                ; address accumulator -> address register
000014F6  3E3C 0000               3045      MOVE #0,D7                                  ; clear the now used address accumulator
000014FA  4ED0                    3046      JMP (A0)                                    ; jump to it!
000014FC                          3047      
000014FC                          3048  Z
000014FC  207C 00200000           3049      MOVE.L #RAM,A0                              ; address of RAM
00001502  7000                    3050      MOVE.L #0,D0                                ; number of bytes
00001504                          3051     
00001504                          3052      WHILE.L D0 <LE> #$40000 DO                  ; read the data bytes
00001504                          3053s _10000004
00001504  B0BC 00040000           3054s     CMP.L   #$40000,D0
0000150A  6E00 001A               3055s     BGT _10000005
0000150E                          3056         
0000150E  2200                    3057          MOVE.L D0,D1                            ; progress update
00001510  E089                    3058          LSR.L #8,D1 
00001512  E089                    3059          LSR.L #8,D1
00001514  0281 0000000F           3060          ANDI.L #$F,D1
0000151A  13C1 00E00001           3061          MOVE.B D1,DISPLAY
00001520                          3062  
00001520  20C0                    3063          MOVE.L D0,(A0)+ 
00001522  5880                    3064          ADD.L #4,D0
00001524                          3065      ENDW
00001524  60DE                    3066s     BRA _10000004
00001526                          3067s _10000005
00001526                          3068   
00001526  207C 00200000           3069      MOVE.L #RAM,A0                              ; address of RAM
0000152C  7000                    3070      MOVE.L #0,D0                                ; number of bytes
0000152E                          3071     
0000152E                          3072      WHILE.L D0 <LE> #$40000 DO                  ; read the data bytes
0000152E                          3073s _10000006
0000152E  B0BC 00040000           3074s     CMP.L   #$40000,D0
00001534  6E00 00CA               3075s     BGT _10000007
00001538                          3076  
00001538  2200                    3077          MOVE.L D0,D1                            ; progress update
0000153A  E089                    3078          LSR.L #8,D1
0000153C  E089                    3079          LSR.L #8,D1
0000153E  0281 0000000F           3080          ANDI.L #$F,D1
00001544  13C1 00E00001           3081          MOVE.B D1,DISPLAY
0000154A                          3082  
0000154A  2218                    3083          MOVE.L (A0)+,D1
0000154C                          3084            
0000154C                          3085          IF.L D0 <EQ> D1 THEN
0000154C  B081                    3086s     CMP.L   D1,D0
0000154E  6600 0006               3087s     BNE _0000000B
00001552  6000 00A6               3088              BRA OK
00001556                          3089          ENDI 
00001556                          3090s _0000000B
00001556                          3091            
00001556  43F9 0000189A           3092          LEA RAM_ERROR,A1
0000155C                          3093m         PRINT_STR A1,D1
0000155C                          3094m LOOP_219
0000155C  0C11 0000               3095m     CMP.B #0,(A1)                               ; 0 -> DONE
00001560  6700 0018               3096m     BEQ EXIT_219
00001564                          3097mm     PRINT_CHAR (A1)+,D1
00001564                          3098mm WAIT_FOR_READY_220                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00001564                 TRUE     3099mm     IFEQ DEBUG
00001564  1239 00C00003           3100mm         MOVE.B DUART_SRA,D1                     ; READ STATUS REGISTER
0000156A  0801 0002               3101mm         BTST #2,D1                              ; CHECK FOR SPACE TO SEND
0000156E  67F4                    3102mm         BEQ WAIT_FOR_READY_220                      ; NO SPACE, CHECK AGAIN
00001570  13D9 00C00007           3103mm         MOVE.B (A1)+,DUART_TXA                      ; SEND THE NEXT CHARACTER
00001576                          3104mm     ENDC
00001576                          3105mm     
00001576                 FALSE    3106mm     IFNE DEBUG
00001576                          3107mm     ENDC
00001576                          3108mm 
00001576                          3109mm     ENDM
00001576  4EF8 155C               3110m     JMP LOOP_219
0000157A                          3111m EXIT_219
0000157A                          3112m     ENDM
0000157A  2208                    3113          MOVE.L A0,D1
0000157C  5981                    3114          SUB.L #4,D1
0000157E                          3115m         PRINT_REG D1,D3,D2,D6,A1                ; print out failure address
0000157E                          3116mm     PRINT_CHAR #'0',D3                          ;0X HEADER
0000157E                          3117mm WAIT_FOR_READY_222                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
0000157E                 TRUE     3118mm     IFEQ DEBUG
0000157E  1639 00C00003           3119mm         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
00001584  0803 0002               3120mm         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
00001588  67F4                    3121mm         BEQ WAIT_FOR_READY_222                      ; NO SPACE, CHECK AGAIN
0000158A  13FC 0030 00C00007      3122mm         MOVE.B #'0',DUART_TXA                       ; SEND THE NEXT CHARACTER
00001592                          3123mm     ENDC
00001592                          3124mm     
00001592                 FALSE    3125mm     IFNE DEBUG
00001592                          3126mm     ENDC
00001592                          3127mm 
00001592                          3128mm     ENDM
00001592                          3129mm     PRINT_CHAR #'x',D3
00001592                          3130mm WAIT_FOR_READY_223                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00001592                 TRUE     3131mm     IFEQ DEBUG
00001592  1639 00C00003           3132mm         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
00001598  0803 0002               3133mm         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
0000159C  67F4                    3134mm         BEQ WAIT_FOR_READY_223                      ; NO SPACE, CHECK AGAIN
0000159E  13FC 0078 00C00007      3135mm         MOVE.B #'x',DUART_TXA                       ; SEND THE NEXT CHARACTER
000015A6                          3136mm     ENDC
000015A6                          3137mm     
000015A6                 FALSE    3138mm     IFNE DEBUG
000015A6                          3139mm     ENDC
000015A6                          3140mm 
000015A6                          3141mm     ENDM
000015A6  7C07                    3142m     MOVE.L #7,D6                                ; LOOP ROUND ALL 8 HEX CHARACTERS OF 4 BITS EACH
000015A8                          3143m LOOP_221
000015A8                          3144mm     BIN2HEX D1,D2,A1
000015A8  43F9 000018AC           3145mm     LEA BIN2HEX_LUT,A1                          ; LOAD THE LOOKUP TABLE
000015AE  E999                    3146mm     ROL.L #4,D1                                 ; SHIFT THE TOP 4 BITS DOWN TO BOTTOM OF THE REGISTER THE AND MASK OFF EVERYTHING ELSE
000015B0  1401                    3147mm     MOVE.B D1,D2
000015B2  0282 0000000F           3148mm     ANDI.L #$F,D2
000015B8  1431 2000               3149mm     MOVE.B 0(A1,D2),D2                          ; USE THAT AS AN INDEX INTO THE LUT
000015BC                          3150mm     ENDM
000015BC                          3151mm     PRINT_CHAR D2,D3
000015BC                          3152mm WAIT_FOR_READY_225                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
000015BC                 TRUE     3153mm     IFEQ DEBUG
000015BC  1639 00C00003           3154mm         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
000015C2  0803 0002               3155mm         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
000015C6  67F4                    3156mm         BEQ WAIT_FOR_READY_225                      ; NO SPACE, CHECK AGAIN
000015C8  13C2 00C00007           3157mm         MOVE.B D2,DUART_TXA                     ; SEND THE NEXT CHARACTER
000015CE                          3158mm     ENDC
000015CE                          3159mm     
000015CE                 FALSE    3160mm     IFNE DEBUG
000015CE                          3161mm     ENDC
000015CE                          3162mm 
000015CE                          3163mm     ENDM
000015CE  57CE FFD8               3164m     DBEQ D6,LOOP_221
000015D2                          3165m     ENDM
000015D2                          3166m         PRINT_CRLF D3
000015D2                          3167mm     PRINT_CHAR #13,D3                           ; CR
000015D2                          3168mm WAIT_FOR_READY_227                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
000015D2                 TRUE     3169mm     IFEQ DEBUG
000015D2  1639 00C00003           3170mm         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
000015D8  0803 0002               3171mm         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
000015DC  67F4                    3172mm         BEQ WAIT_FOR_READY_227                      ; NO SPACE, CHECK AGAIN
000015DE  13FC 000D 00C00007      3173mm         MOVE.B #13,DUART_TXA                    ; SEND THE NEXT CHARACTER
000015E6                          3174mm     ENDC
000015E6                          3175mm     
000015E6                 FALSE    3176mm     IFNE DEBUG
000015E6                          3177mm     ENDC
000015E6                          3178mm 
000015E6                          3179mm     ENDM
000015E6                          3180mm     PRINT_CHAR #10,D3                           ; LF
000015E6                          3181mm WAIT_FOR_READY_228                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
000015E6                 TRUE     3182mm     IFEQ DEBUG
000015E6  1639 00C00003           3183mm         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
000015EC  0803 0002               3184mm         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
000015F0  67F4                    3185mm         BEQ WAIT_FOR_READY_228                      ; NO SPACE, CHECK AGAIN
000015F2  13FC 000A 00C00007      3186mm         MOVE.B #10,DUART_TXA                    ; SEND THE NEXT CHARACTER
000015FA                          3187mm     ENDC
000015FA                          3188mm     
000015FA                 FALSE    3189mm     IFNE DEBUG
000015FA                          3190mm     ENDC
000015FA                          3191mm 
000015FA                          3192mm     ENDM
000015FA                          3193m     ENDM
000015FA                          3194  OK    
000015FA  5880                    3195          ADD.L #4,D0
000015FC                          3196      ENDW
000015FC  6000 FF30               3197s     BRA _10000006
00001600                          3198s _10000007
00001600                          3199      
00001600  4EF8 0186               3200      JMP MAIN_LOOP
00001604                          3201    
00001604                          3202  L
00001604  7A00                    3203      MOVE.L #0,D5                                ; D5 will be the length  to write            
00001606                          3204  
00001606                          3205m     WAIT_CHAR D2,D3                             ; read most significant character -> D2
00001606                          3206m WAIT_FOR_READY_229                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00001606                          3207m 
00001606                 TRUE     3208m     IFEQ DEBUG
00001606  1639 00C00003           3209m         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
0000160C  0803 0000               3210m         BTST #0,D3                              ; CHECK FOR CHARACTER
00001610  67F4                    3211m         BEQ WAIT_FOR_READY_229                      ; NOTHING, CHECK AGAIN
00001612                          3212m     ENDC
00001612                          3213m     
00001612                          3214mm     READ_CHAR D2
00001612                 TRUE     3215mm     IFEQ DEBUG
00001612  1439 00C00007           3216mm         MOVE.B DUART_RXA,D2                     ; GOT A CHARACTER, READ IT
00001618                          3217mm     ENDC
00001618                 FALSE    3218mm     IFNE DEBUG
00001618                          3219mm     ENDC
00001618                          3220mm      
00001618  B43C 001B               3221mm     CMP.B #$1B,D2                               ; CHECK FOR ESCAPE AND GO TO START
0000161C  6700 E9EA               3222mm     BEQ START
00001620                          3223mm     ENDM
00001620                          3224m 
00001620                 TRUE     3225m     IFEQ DEBUG
00001620                          3226mm         PRINT_CHAR D2,D3                        ; ECHO IT BACK
00001620                          3227mm WAIT_FOR_READY_231                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00001620                 TRUE     3228mm     IFEQ DEBUG
00001620  1639 00C00003           3229mm         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
00001626  0803 0002               3230mm         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
0000162A  67F4                    3231mm         BEQ WAIT_FOR_READY_231                      ; NO SPACE, CHECK AGAIN
0000162C  13C2 00C00007           3232mm         MOVE.B D2,DUART_TXA                     ; SEND THE NEXT CHARACTER
00001632                          3233mm     ENDC
00001632                          3234mm     
00001632                 FALSE    3235mm     IFNE DEBUG
00001632                          3236mm     ENDC
00001632                          3237mm 
00001632                          3238mm     ENDM
00001632                          3239m     ENDC
00001632                          3240m     ENDM
00001632                          3241m     HEX2BIN D2,D2,A0                            ; convert to binary -> D2
00001632  41F9 000018BC           3242m     LEA HEX2BIN_LUT,A0                          ; LOAD THE LOOKUP TABLE
00001638  0402 0030               3243m     SUB.B #'0',D2                               ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
0000163C  C4BC 000000FF           3244m     AND.L #$FF,D2                               ; IGNORE THE TOP 3 BYTES
00001642  1430 2000               3245m     MOVE.B 0(A0,D2),D2                          ; USE THAT AS AN INDEX INTO THE LUT      
00001646                          3246m     ENDM
00001646  1A02                    3247      MOVE.B D2,D5                                ; put at bottom of D5
00001648                          3248  
00001648  3C3C 0002               3249      MOVE #2,D6                                  ; 3 bytes left to read
0000164C                          3250      
0000164C                          3251  READ_LENGTH
0000164C  E98D                    3252      LSL.L #4,D5                                 ; make what we have so far more significant
0000164E                          3253m     WAIT_CHAR D2,D3                             ; next character -> D2
0000164E                          3254m WAIT_FOR_READY_233                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
0000164E                          3255m 
0000164E                 TRUE     3256m     IFEQ DEBUG
0000164E  1639 00C00003           3257m         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
00001654  0803 0000               3258m         BTST #0,D3                              ; CHECK FOR CHARACTER
00001658  67F4                    3259m         BEQ WAIT_FOR_READY_233                      ; NOTHING, CHECK AGAIN
0000165A                          3260m     ENDC
0000165A                          3261m     
0000165A                          3262mm     READ_CHAR D2
0000165A                 TRUE     3263mm     IFEQ DEBUG
0000165A  1439 00C00007           3264mm         MOVE.B DUART_RXA,D2                     ; GOT A CHARACTER, READ IT
00001660                          3265mm     ENDC
00001660                 FALSE    3266mm     IFNE DEBUG
00001660                          3267mm     ENDC
00001660                          3268mm      
00001660  B43C 001B               3269mm     CMP.B #$1B,D2                               ; CHECK FOR ESCAPE AND GO TO START
00001664  6700 E9A2               3270mm     BEQ START
00001668                          3271mm     ENDM
00001668                          3272m 
00001668                 TRUE     3273m     IFEQ DEBUG
00001668                          3274mm         PRINT_CHAR D2,D3                        ; ECHO IT BACK
00001668                          3275mm WAIT_FOR_READY_235                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00001668                 TRUE     3276mm     IFEQ DEBUG
00001668  1639 00C00003           3277mm         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
0000166E  0803 0002               3278mm         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
00001672  67F4                    3279mm         BEQ WAIT_FOR_READY_235                      ; NO SPACE, CHECK AGAIN
00001674  13C2 00C00007           3280mm         MOVE.B D2,DUART_TXA                     ; SEND THE NEXT CHARACTER
0000167A                          3281mm     ENDC
0000167A                          3282mm     
0000167A                 FALSE    3283mm     IFNE DEBUG
0000167A                          3284mm     ENDC
0000167A                          3285mm 
0000167A                          3286mm     ENDM
0000167A                          3287m     ENDC
0000167A                          3288m     ENDM
0000167A                          3289m     HEX2BIN D2,D2,A0                            ; convert to binary -> D2
0000167A  41F9 000018BC           3290m     LEA HEX2BIN_LUT,A0                          ; LOAD THE LOOKUP TABLE
00001680  0402 0030               3291m     SUB.B #'0',D2                               ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
00001684  C4BC 000000FF           3292m     AND.L #$FF,D2                               ; IGNORE THE TOP 3 BYTES
0000168A  1430 2000               3293m     MOVE.B 0(A0,D2),D2                          ; USE THAT AS AN INDEX INTO THE LUT      
0000168E                          3294m     ENDM
0000168E  8A02                    3295      OR.B D2,D5
00001690  023C 00FB               3296      ANDI #$FB,CCR                               ; clear the Z bit if set (from the OR above)
00001694  57CE FFB6               3297      DBEQ D6,READ_LENGTH
00001698                          3298          
00001698                          3299m     PRINT_CRLF D3
00001698                          3300mm     PRINT_CHAR #13,D3                           ; CR
00001698                          3301mm WAIT_FOR_READY_238                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00001698                 TRUE     3302mm     IFEQ DEBUG
00001698  1639 00C00003           3303mm         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
0000169E  0803 0002               3304mm         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
000016A2  67F4                    3305mm         BEQ WAIT_FOR_READY_238                      ; NO SPACE, CHECK AGAIN
000016A4  13FC 000D 00C00007      3306mm         MOVE.B #13,DUART_TXA                    ; SEND THE NEXT CHARACTER
000016AC                          3307mm     ENDC
000016AC                          3308mm     
000016AC                 FALSE    3309mm     IFNE DEBUG
000016AC                          3310mm     ENDC
000016AC                          3311mm 
000016AC                          3312mm     ENDM
000016AC                          3313mm     PRINT_CHAR #10,D3                           ; LF
000016AC                          3314mm WAIT_FOR_READY_239                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
000016AC                 TRUE     3315mm     IFEQ DEBUG
000016AC  1639 00C00003           3316mm         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
000016B2  0803 0002               3317mm         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
000016B6  67F4                    3318mm         BEQ WAIT_FOR_READY_239                      ; NO SPACE, CHECK AGAIN
000016B8  13FC 000A 00C00007      3319mm         MOVE.B #10,DUART_TXA                    ; SEND THE NEXT CHARACTER
000016C0                          3320mm     ENDC
000016C0                          3321mm     
000016C0                 FALSE    3322mm     IFNE DEBUG
000016C0                          3323mm     ENDC
000016C0                          3324mm 
000016C0                          3325mm     ENDM
000016C0                          3326m     ENDM
000016C0                          3327  
000016C0  207C 00000000           3328      MOVE.L #ROM,A0                              ; start of ROM
000016C6                          3329      
000016C6  2247                    3330      MOVE.L D7,A1                                ; address accumulator -> address register
000016C8  7E00                    3331      MOVE.L #0,D7                                ; clear the now used address accumulator
000016CA                          3332      
000016CA  267C 00002AAA           3333      MOVE.L #$2AAA,A3
000016D0  36BC AAAA               3334      MOVE.W #$AAAA,(A3)
000016D4  267C 00001554           3335      MOVE.L #$1554,A3
000016DA  36BC 5555               3336      MOVE.W #$5555,(A3)
000016DE  267C 00002AAA           3337      MOVE.L #$2AAA,A3
000016E4  36BC 8080               3338      MOVE.W #$8080,(A3)
000016E8  267C 00002AAA           3339      MOVE.L #$2AAA,A3
000016EE  36BC AAAA               3340      MOVE.W #$AAAA,(A3)
000016F2  267C 00001554           3341      MOVE.L #$1554,A3
000016F8  36BC 5555               3342      MOVE.W #$5555,(A3)
000016FC  267C 00002AAA           3343      MOVE.L #$2AAA,A3
00001702  36BC 2020               3344      MOVE.W #$2020,(A3)
00001706                          3345      
00001706  45F9 000018D3           3346      LEA LOADING,A2                              ; important for timing
0000170C                          3347m     PRINT_STR A2,D3
0000170C                          3348m LOOP_240
0000170C  0C12 0000               3349m     CMP.B #0,(A2)                               ; 0 -> DONE
00001710  6700 0018               3350m     BEQ EXIT_240
00001714                          3351mm     PRINT_CHAR (A2)+,D3
00001714                          3352mm WAIT_FOR_READY_241                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00001714                 TRUE     3353mm     IFEQ DEBUG
00001714  1639 00C00003           3354mm         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
0000171A  0803 0002               3355mm         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
0000171E  67F4                    3356mm         BEQ WAIT_FOR_READY_241                      ; NO SPACE, CHECK AGAIN
00001720  13DA 00C00007           3357mm         MOVE.B (A2)+,DUART_TXA                      ; SEND THE NEXT CHARACTER
00001726                          3358mm     ENDC
00001726                          3359mm     
00001726                 FALSE    3360mm     IFNE DEBUG
00001726                          3361mm     ENDC
00001726                          3362mm 
00001726                          3363mm     ENDM
00001726  4EF8 170C               3364m     JMP LOOP_240
0000172A                          3365m EXIT_240
0000172A                          3366m     ENDM
0000172A                          3367  
0000172A  023C 00FB               3368      ANDI #$FB,CCR                               ; clear the Z bit if set (from the OR above)
0000172E                          3369      
0000172E                          3370      WHILE D5 <GT> #0 DO
0000172E                          3371s _10000008
0000172E  BA7C 0000               3372s     CMP.W   #0,D5
00001732  6F00 001E               3373s     BLE _10000009
00001736  5585                    3374          SUB.L #2,D5
00001738                          3375            
00001738  13D1 00E00001           3376          MOVE.B (A1),DISPLAY
0000173E  3091                    3377          MOVE.W (A1),(A0)                        ; write the data
00001740                          3378        
00001740                          3379  WAIT_FOR_COMPLETE
00001740  3410                    3380          MOVE.W (A0),D2
00001742                          3381  
00001742                          3382          IF D2 <NE> (A1) THEN
00001742  B451                    3383s     CMP.W   (A1),D2
00001744  6700 0006               3384s     BEQ _0000000C
00001748  4EF8 1740               3385              JMP WAIT_FOR_COMPLETE
0000174C                          3386          ENDI
0000174C                          3387s _0000000C
0000174C                          3388        
0000174C  5488                    3389          ADD.L #2,A0
0000174E  5489                    3390          ADD.L #2,A1
00001750                          3391      ENDW  
00001750  60DC                    3392s     BRA _10000008
00001752                          3393s _10000009
00001752                          3394      
00001752  267C 00002AAA           3395      MOVE.L #$2AAA,A3
00001758  36BC AAAA               3396      MOVE.W #$AAAA,(A3)
0000175C  267C 00001554           3397      MOVE.L #$1554,A3
00001762  36BC 5555               3398      MOVE.W #$5555,(A3)
00001766  267C 00002AAA           3399      MOVE.L #$2AAA,A3
0000176C  36BC A0A0               3400      MOVE.W #$A0A0,(A3)
00001770                          3401              
00001770  4EF8 0186               3402      JMP MAIN_LOOP
00001774                          3403          
00001774                          3404  HEX_DIGIT
00001774  E98F                    3405      LSL.L #4,D7                                 ; add the next digit in the next 4 bits
00001776                          3406m     HEX2BIN D2,D2,A0
00001776  41F9 000018BC           3407m     LEA HEX2BIN_LUT,A0                          ; LOAD THE LOOKUP TABLE
0000177C  0402 0030               3408m     SUB.B #'0',D2                               ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
00001780  C4BC 000000FF           3409m     AND.L #$FF,D2                               ; IGNORE THE TOP 3 BYTES
00001786  1430 2000               3410m     MOVE.B 0(A0,D2),D2                          ; USE THAT AS AN INDEX INTO THE LUT      
0000178A                          3411m     ENDM
0000178A  8E02                    3412      OR.B D2,D7  
0000178C  4EF8 01AE               3413      JMP GET_INPUT
00001790                          3414  
00001790  FFFF FFFF               3415      SIMHALT                                     ; halt simulator
00001794                          3416  
00001794                          3417  ; strings
00001794= 4D 44 46 2D 6D 6F ...   3418  VERSION DC.B 'MDF-mon V1.36 (08/04/2021)',13,10,0
000017B1= 3F 20 48 65 6C 70 ...   3419  HELP    DC.B '? Help',13,10,'V Version',13,10,'xxxxxxxxR Read long',13,10,'xxxxxxxxWxxxxxxxx Write long',13,10,'S download S records',13,10,'xxxxxxxxG Go',13,10,'Z Zap memory',10,13,'xxxxxxxxLxxxx Load to EEPROM',10,13,0
00001848= 48 75 68 3F 0D 0A 00    3420  HUH     DC.B 'Huh?',13,10,0
0000184F= 20 53 20 72 65 63 ...   3421  READ    DC.B ' S records read, start address = ',0
00001871= 57 3A 20 55 6E 6B ...   3422  UNREC   DC.B 'W: Unknown Srec type: ',0
00001888= 57 3A 20 43 53 20 ...   3423  CS_FAILURE   DC.B 'W: CS failure at ',0
0000189A= 57 3A 20 52 41 4D ...   3424  RAM_ERROR DC.B 'W: RAM error at: ',0
000018AC= 30 31 32 33 34 35 ...   3425  BIN2HEX_LUT DC.B '0123456789ABCDEF'
000018BC= 00 01 02 03 04 05 ...   3426  HEX2BIN_LUT DC.B 0,1,2,3,4,5,6,7,8,9,0,0,0,0,0,0,0,$A,$B,$C,$D,$E,$F
000018D3= 4C 6F 61 64 69 6E ...   3427  LOADING  DC.B 'Loading EEPROM...',13,11,0
000018E7                          3428      
000018E7                          3429      END    START                    ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
BIN2HEX             0
BIN2HEX_LUT         18AC
CONTINUE_105        ACA
CONTINUE_109        B28
CONTINUE_113        B88
CONTINUE_117        BE6
CONTINUE_121        C4A
CONTINUE_125        CA8
CONTINUE_129        D1E
CONTINUE_133        D7C
CONTINUE_137        DF6
CONTINUE_141        E54
CONTINUE_145        EB4
CONTINUE_149        F12
CONTINUE_153        F84
CONTINUE_157        FE2
CONTINUE_164        1088
CONTINUE_167        10D4
CONTINUE_170        1122
CONTINUE_173        116E
CONTINUE_176        11C0
CONTINUE_179        120C
CONTINUE_188        12D4
CONTINUE_191        1320
CONTINUE_44         4AA
CONTINUE_46         4E6
CONTINUE_48         51E
CONTINUE_51         56A
CONTINUE_54         5D0
CONTINUE_58         62E
CONTINUE_62         68E
CONTINUE_66         6EC
CONTINUE_70         762
CONTINUE_74         7C0
CONTINUE_78         838
CONTINUE_82         896
CONTINUE_86         8F6
CONTINUE_90         954
CONTINUE_94         9C6
CONTINUE_98         A24
CS_FAILURE          1888
DEBUG               0
DISPLAY             E00001
DISPLAY_            0
DISPLAY_BASE        E00000
DOWNLOAD            960
DOWNLOAD_DONE       13FA
DUART_ACR           C00009
DUART_ACR_          4
DUART_BASE          C00000
DUART_CRA           C00005
DUART_CRA_          2
DUART_CRB           C00015
DUART_CRB_          A
DUART_CSRA          C00003
DUART_CSRA_         1
DUART_CSRB          C00013
DUART_CSRB_         9
DUART_IMR           C0000B
DUART_IMR_          5
DUART_IVR           C00019
DUART_IVR_          C
DUART_MRA           C00001
DUART_MRA_          0
DUART_MRB           C00011
DUART_MRB_          8
DUART_OPCR          C0001B
DUART_OPCR_         D
DUART_RESET_OPR     C0001F
DUART_RESET_OPR_    F
DUART_RXA           C00007
DUART_RXA_          3
DUART_RXB           C00017
DUART_RXB_          B
DUART_SET_OPR       C0001D
DUART_SET_OPR_      E
DUART_SRA           C00003
DUART_SRA_          1
DUART_SRB           C00013
DUART_SRB_          9
DUART_TXA           C00007
DUART_TXA_          3
DUART_TXB           C00017
DUART_TXB_          B
EVEN                80E
EVEN2               DCA
EXIT_182            1270
EXIT_19             2E6
EXIT_194            1378
EXIT_209            1472
EXIT_21             30E
EXIT_219            157A
EXIT_23             336
EXIT_240            172A
EXIT_5              140
G                   14F4
GET_INPUT           1AE
H                   2EA
HELP                17B1
HEX2BIN             134
HEX2BIN_LUT         18BC
HEX_DIGIT           1774
HUH                 1848
L                   1604
LOADING             18D3
LOOP_182            1252
LOOP_19             2C8
LOOP_194            135A
LOOP_196            13A2
LOOP_204            1424
LOOP_209            1454
LOOP_21             2F0
LOOP_211            149E
LOOP_219            155C
LOOP_221            15A8
LOOP_23             318
LOOP_240            170C
LOOP_25             368
LOOP_5              122
MAIN_LOOP           186
OK                  15FA
PRINT_CHAR          273
PRINT_CRLF          48D
PRINT_REG           575
PRINT_STR           4EF
R                   33A
RAM                 200000
RAM_ERROR           189A
READ                184F
READ_CHAR           805
READ_DATA_TO_POKE   408
READ_LENGTH         164C
RESET               4
ROM                 0
S                   486
STACK               0
START               8
UNREC               1871
V                   312
VERSION             1794
W                   3C0
WAIT_CHAR           665
WAIT_FOR_COMPLETE   1740
WAIT_FOR_READY_1    D8
WAIT_FOR_READY_10   168
WAIT_FOR_READY_100  A3C
WAIT_FOR_READY_103  A74
WAIT_FOR_READY_104  A88
WAIT_FOR_READY_105  AAE
WAIT_FOR_READY_107  AE2
WAIT_FOR_READY_109  B0C
WAIT_FOR_READY_11   186
WAIT_FOR_READY_111  B40
WAIT_FOR_READY_113  B6C
WAIT_FOR_READY_115  BA0
WAIT_FOR_READY_117  BCA
WAIT_FOR_READY_119  BFE
WAIT_FOR_READY_12   19A
WAIT_FOR_READY_121  C2E
WAIT_FOR_READY_123  C62
WAIT_FOR_READY_125  C8C
WAIT_FOR_READY_127  CC0
WAIT_FOR_READY_129  D02
WAIT_FOR_READY_13   1AE
WAIT_FOR_READY_131  D36
WAIT_FOR_READY_133  D60
WAIT_FOR_READY_135  D94
WAIT_FOR_READY_137  DDA
WAIT_FOR_READY_139  E0E
WAIT_FOR_READY_141  E38
WAIT_FOR_READY_143  E6C
WAIT_FOR_READY_145  E98
WAIT_FOR_READY_147  ECC
WAIT_FOR_READY_149  EF6
WAIT_FOR_READY_15   1C8
WAIT_FOR_READY_151  F2A
WAIT_FOR_READY_153  F68
WAIT_FOR_READY_155  F9C
WAIT_FOR_READY_157  FC6
WAIT_FOR_READY_159  FFA
WAIT_FOR_READY_162  1032
WAIT_FOR_READY_163  1046
WAIT_FOR_READY_164  106C
WAIT_FOR_READY_167  10B8
WAIT_FOR_READY_17   26A
WAIT_FOR_READY_170  1106
WAIT_FOR_READY_173  1152
WAIT_FOR_READY_176  11A4
WAIT_FOR_READY_179  11F0
WAIT_FOR_READY_18   27E
WAIT_FOR_READY_183  125A
WAIT_FOR_READY_184  1270
WAIT_FOR_READY_186  1282
WAIT_FOR_READY_187  1296
WAIT_FOR_READY_188  12B8
WAIT_FOR_READY_191  1304
WAIT_FOR_READY_195  1362
WAIT_FOR_READY_197  1378
WAIT_FOR_READY_198  138C
WAIT_FOR_READY_20   2D0
WAIT_FOR_READY_200  13B6
WAIT_FOR_READY_202  13CC
WAIT_FOR_READY_203  13E0
WAIT_FOR_READY_205  13FA
WAIT_FOR_READY_206  140E
WAIT_FOR_READY_208  1438
WAIT_FOR_READY_210  145C
WAIT_FOR_READY_212  1474
WAIT_FOR_READY_213  1488
WAIT_FOR_READY_215  14B2
WAIT_FOR_READY_217  14C8
WAIT_FOR_READY_218  14DC
WAIT_FOR_READY_22   2F8
WAIT_FOR_READY_220  1564
WAIT_FOR_READY_222  157E
WAIT_FOR_READY_223  1592
WAIT_FOR_READY_225  15BC
WAIT_FOR_READY_227  15D2
WAIT_FOR_READY_228  15E6
WAIT_FOR_READY_229  1606
WAIT_FOR_READY_231  1620
WAIT_FOR_READY_233  164E
WAIT_FOR_READY_235  1668
WAIT_FOR_READY_238  1698
WAIT_FOR_READY_239  16AC
WAIT_FOR_READY_24   320
WAIT_FOR_READY_241  1714
WAIT_FOR_READY_26   33E
WAIT_FOR_READY_27   352
WAIT_FOR_READY_29   37C
WAIT_FOR_READY_3    F4
WAIT_FOR_READY_31   392
WAIT_FOR_READY_32   3A6
WAIT_FOR_READY_33   3C2
WAIT_FOR_READY_35   3DC
WAIT_FOR_READY_37   40A
WAIT_FOR_READY_39   424
WAIT_FOR_READY_4    108
WAIT_FOR_READY_42   45A
WAIT_FOR_READY_43   46E
WAIT_FOR_READY_44   48E
WAIT_FOR_READY_46   4CA
WAIT_FOR_READY_48   502
WAIT_FOR_READY_51   54E
WAIT_FOR_READY_54   5B4
WAIT_FOR_READY_56   5E8
WAIT_FOR_READY_58   612
WAIT_FOR_READY_6    12A
WAIT_FOR_READY_60   646
WAIT_FOR_READY_62   672
WAIT_FOR_READY_64   6A6
WAIT_FOR_READY_66   6D0
WAIT_FOR_READY_68   704
WAIT_FOR_READY_70   746
WAIT_FOR_READY_72   77A
WAIT_FOR_READY_74   7A4
WAIT_FOR_READY_76   7D8
WAIT_FOR_READY_78   81C
WAIT_FOR_READY_8    140
WAIT_FOR_READY_80   850
WAIT_FOR_READY_82   87A
WAIT_FOR_READY_84   8AE
WAIT_FOR_READY_86   8DA
WAIT_FOR_READY_88   90E
WAIT_FOR_READY_9    154
WAIT_FOR_READY_90   938
WAIT_FOR_READY_92   96C
WAIT_FOR_READY_94   9AA
WAIT_FOR_READY_96   9DE
WAIT_FOR_READY_98   A08
WAIT_FOR_SRECORD    48E
Z                   14FC
_00000000           5AA
_00000001           12AE
_00000002           AA4
_00000003           A74
_00000004           12AE
_00000005           1062
_00000006           1032
_00000007           12AE
_00000008           124C
_00000009           12AE
_0000000A           13F8
_0000000B           1556
_0000000C           174C
_10000000           80E
_10000001           9A0
_10000002           DCC
_10000003           F5E
_10000004           1504
_10000005           1526
_10000006           152E
_10000007           1600
_10000008           172E
_10000009           1752
