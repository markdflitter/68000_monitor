00200008 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 08/04/2021 12:32:06

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : MDFmon 
00000000                             3  * Written by : Mark Flitter
00000000                             4  * Date       : March 2021
00000000                             5  * Description: 68000 monitor program
00000000                             6  *-----------------------------------------------------------
00000000                             7  ; to do
00000000                             8  ; don't waste code on reading the srec header - just ignore it
00000000                             9  ; implement DOWNLOAD_BYTE to remove repeated code and shorten the gap between S1 and S2
00000000                            10  ; lots of repeated code in download between the two S record types (S1 and S2)
00000000                            11  ; tidy up NAND gate invertor and wiring for OE and WE on eeproms
00000000                            12  ; tidy up power loom
00000000                            13  ; add LDS and UDS with an OR gate and test because then I can do byte writes and it will make the download simpler
00000000                            14  ; stop using two registers in download
00000000                            15  ; add simpler .W and .B variants of PRINT_REG, will reduce code a bit
00000000                            16  ; burn EEPROM to alternative location ($1000) and update the start vector as the very last operation
00000000                            17  ; if the EEPROM programming getas stuck, print out value read back and retry write eventually? 
00000000                            18  
00000000                            19  ; make the monitor relocatable, so it can run in RAM and ROM
00000000                            20  ; keep track of highest address hit during srec download
00000000                            21  ; fix the reset vector so that it jumps to the start
00000000                            22  ; Replace JMP -> BRA
00000000                            23  ; implement backspace
00000000                            24  ; check for escape during Z and L?  Not sure if W is a good idea either
00000000                            25  ; fix being able to enter random chars when W'ing
00000000                            26  ; ram check at startup?  Not sure if this is a good idea!
00000000                            27  
00000000                            28      ;ORG  $0
00200000                            29      ORG  $200000
00200000                            30  
00200000  =00000000                 31  DEBUG               EQU 0
00200000                            32  
00200000                            33  ; constants
00200000  =00000000                 34  ROM                 EQU $0
00200000  =00200000                 35  RAM                 EQU $200000
00200000                            36     
00200000  =00C00000                 37  DUART_BASE          EQU $C00000
00200000  =00000000                 38  DUART_MRA_          EQU $0
00200000  =00000001                 39  DUART_CSRA_         EQU $1
00200000  =00000001                 40  DUART_SRA_          EQU $1
00200000  =00000002                 41  DUART_CRA_          EQU $2
00200000  =00000003                 42  DUART_TXA_          EQU $3
00200000  =00000003                 43  DUART_RXA_          EQU $3
00200000  =00000004                 44  DUART_ACR_          EQU $4
00200000  =00000005                 45  DUART_IMR_          EQU $5
00200000  =00000008                 46  DUART_MRB_          EQU $8
00200000  =00000009                 47  DUART_CSRB_         EQU $9
00200000  =00000009                 48  DUART_SRB_          EQU $9
00200000  =0000000A                 49  DUART_CRB_          EQU $A
00200000  =0000000B                 50  DUART_TXB_          EQU $B
00200000  =0000000B                 51  DUART_RXB_          EQU $B
00200000  =0000000C                 52  DUART_IVR_          EQU $C
00200000  =0000000D                 53  DUART_OPCR_         EQU $D
00200000  =0000000E                 54  DUART_SET_OPR_      EQU $E
00200000  =0000000F                 55  DUART_RESET_OPR_    EQU $F
00200000                            56  
00200000  =00C00001                 57  DUART_MRA           EQU DUART_BASE+2*DUART_MRA_+1
00200000  =00C00003                 58  DUART_SRA           EQU DUART_BASE+2*DUART_SRA_+1
00200000  =00C00003                 59  DUART_CSRA          EQU DUART_BASE+2*DUART_CSRA_+1
00200000  =00C00005                 60  DUART_CRA           EQU DUART_BASE+2*DUART_CRA_+1
00200000  =00C00007                 61  DUART_TXA           EQU DUART_BASE+2*DUART_TXA_+1
00200000  =00C00007                 62  DUART_RXA           EQU DUART_BASE+2*DUART_RXA_+1
00200000                            63  
00200000  =00C00011                 64  DUART_MRB           EQU DUART_BASE+2*DUART_MRB_+1
00200000  =00C00013                 65  DUART_SRB           EQU DUART_BASE+2*DUART_SRB_+1
00200000  =00C00013                 66  DUART_CSRB          EQU DUART_BASE+2*DUART_CSRB_+1
00200000  =00C00015                 67  DUART_CRB           EQU DUART_BASE+2*DUART_CRB_+1
00200000  =00C00017                 68  DUART_TXB           EQU DUART_BASE+2*DUART_TXB_+1
00200000  =00C00017                 69  DUART_RXB           EQU DUART_BASE+2*DUART_RXB_+1
00200000                            70  
00200000  =00C00009                 71  DUART_ACR           EQU DUART_BASE+2*DUART_ACR_+1
00200000  =00C0000B                 72  DUART_IMR           EQU DUART_BASE+2*DUART_IMR_+1
00200000  =00C00019                 73  DUART_IVR           EQU DUART_BASE+2*DUART_IVR_+1
00200000  =00C0001B                 74  DUART_OPCR          EQU DUART_BASE+2*DUART_OPCR_+1
00200000  =00C0001D                 75  DUART_SET_OPR       EQU DUART_BASE+2*DUART_SET_OPR_+1
00200000  =00C0001F                 76  DUART_RESET_OPR     EQU DUART_BASE+2*DUART_RESET_OPR_+1
00200000                            77  
00200000  =00E00000                 78  DISPLAY_BASE        EQU $E00000
00200000  =00000000                 79  DISPLAY_            EQU $0
00200000  =00E00001                 80  DISPLAY             EQU DISPLAY_BASE+2*DISPLAY_+1
00200000                            81  
00200000                            82  ; macros
00200000                            83  ; convert top 4 bits of input register from binary to a single hex digit
00200000                            84  ; the input register is changed during the process
00200000                            85  ; \1 input data register containing binary number,  \2 data register for return value, \3 working address register
00200000                            86  BIN2HEX MACRO
00200000                            87      LEA BIN2HEX_LUT,\3                          ; load the lookup table
00200000                            88      ROL.L #4,\1                                 ; shift the top 4 bits down to bottom of the register the and mask off everything else
00200000                            89      MOVE.B \1,\2
00200000                            90      ANDI.L #$F,\2
00200000                            91      MOVE.B 0(\3,\2),\2                          ; use that as an index into the LUT
00200000                            92      ENDM
00200000                            93  
00200000                            94  ; convert single hex digit to 4 bit binary number in LSbits
00200000                            95  ; the input register is changed during the process
00200000                            96  ; \1 data register containing hex character, \2 data register for return value, \3 working address register
00200000                            97  HEX2BIN MACRO
00200000                            98      LEA HEX2BIN_LUT,\3                          ; load the lookup table
00200000                            99      SUB.B #'0',\1                               ; work out offset and mask off anything rogue
00200000                           100      AND.L #$FF,\1                               ; ignore the top 3 bytes
00200000                           101      MOVE.B 0(\3,\1),\2                          ; use that as an index into the LUT      
00200000                           102      ENDM
00200000                           103  
00200000                           104  ; send a single char to the serial port
00200000                           105  ; \1 = char to send, \2 = data register to use for status poll
00200000                           106  ; will stamp on D0 and D1 in debug mode
00200000                           107  PRINT_CHAR MACRO
00200000                           108  WAIT_FOR_READY\@                                ; wait until the there is space to send
00200000                           109      IFEQ DEBUG
00200000                           110          MOVE.B DUART_SRA,\2                     ; read status register
00200000                           111          BTST #2,\2                              ; check for space to send
00200000                           112          BEQ WAIT_FOR_READY\@                    ; no space, check again
00200000                           113          MOVE.B \1,DUART_TXA                     ; send the next character
00200000                           114      ENDC
00200000                           115      
00200000                           116      IFNE DEBUG
00200000                           117          MOVE.B \1,D1
00200000                           118          MOVE.L #6,D0   
00200000                           119          TRAP #15                                ; write to terminal in simulator
00200000                           120      ENDC
00200000                           121  
00200000                           122      ENDM
00200000                           123  
00200000                           124  ; send CR,LF to the serial port
00200000                           125  ; \1 = data register to use for status poll
00200000                           126  PRINT_CRLF MACRO
00200000                           127      PRINT_CHAR #13,\1                           ; CR
00200000                           128      PRINT_CHAR #10,\1                           ; LF
00200000                           129      ENDM
00200000                           130  
00200000                           131  ; send C-style, zero terminated string to the serial port
00200000                           132  ; \1 = address register containing address of zero terminated string, \2 = data register to use for status poll, 
00200000                           133  PRINT_STR MACRO
00200000                           134  LOOP\@
00200000                           135      CMP.B #0,(\1)                               ; 0 -> done
00200000                           136      BEQ EXIT\@
00200000                           137      PRINT_CHAR (\1)+,\2
00200000                           138      JMP LOOP\@
00200000                           139  EXIT\@
00200000                           140      ENDM
00200000                           141    
00200000                           142  ; send the contents of a data register to the serial port as a 8 digit hex number
00200000                           143  ; \1 = data register containing binary number, \2 = data register to use for status poll, \3 working data register, \4 counter register, \5 working address register, 
00200000                           144  PRINT_REG MACRO
00200000                           145      PRINT_CHAR #'0',\2                          ;0x header
00200000                           146      PRINT_CHAR #'x',\2
00200000                           147      MOVE.L #7,\4                                ; loop round all 8 hex characters of 4 bits each
00200000                           148  LOOP\@
00200000                           149      BIN2HEX \1,\3,\5
00200000                           150      PRINT_CHAR \3,\2
00200000                           151      DBEQ \4,LOOP\@
00200000                           152      ENDM
00200000                           153    
00200000                           154  ; wait for a char from the serial port
00200000                           155  ; \ 1= data register for read char, \2 = register to use for status poll
00200000                           156  ; will stamp on D0 and D1 in debug mode
00200000                           157  WAIT_CHAR MACRO
00200000                           158  WAIT_FOR_READY\@                                ; wait until the there is space to send
00200000                           159  
00200000                           160      IFEQ DEBUG
00200000                           161          MOVE.B DUART_SRA,\2                     ; read status register
00200000                           162          BTST #0,\2                              ; check for character
00200000                           163          BEQ WAIT_FOR_READY\@                    ; nothing, check again
00200000                           164      ENDC
00200000                           165      
00200000                           166      READ_CHAR \1
00200000                           167  
00200000                           168      IFEQ DEBUG
00200000                           169          PRINT_CHAR \1,\2                        ; echo it back
00200000                           170      ENDC
00200000                           171      ENDM
00200000                           172      
00200000                           173  ; read a char from the serial port - assumes that there is one!
00200000                           174  ; \ 1= data register for read char
00200000                           175  ; will stamp on D0 and D1 in debug mode
00200000                           176  READ_CHAR MACRO
00200000                           177      IFEQ DEBUG
00200000                           178          MOVE.B DUART_RXA,\1                     ; got a character, read it
00200000                           179      ENDC
00200000                           180      IFNE DEBUG
00200000                           181          MOVE.L #5,D0    
00200000                           182          TRAP #15                                ; read from keyboard in simulator
00200000                           183          MOVE.L D1,\1
00200000                           184      ENDC
00200000                           185       
00200000                           186      CMP.B #$1B,\1                               ; check for escape and go to start
00200000                           187      BEQ START
00200000                           188      ENDM
00200000                           189      
00200000                           190      
00200000                           191  ; read data from the download serial port
00200000                           192  ; \ 1= data register for read char, \2 = register to use for status poll
00200000                           193  DOWNLOAD MACRO
00200000                           194  WAIT_FOR_READY\@                                ; wait until the there is space to send
00200000                           195  
00200000                           196      MOVE.B DUART_SRA,\2                         ; check for command
00200000                           197      BTST #0,\2                                  ; check for character
00200000                           198      BEQ CONTINUE\@                              ; nothing, continue
00200000                           199   
00200000                           200      READ_CHAR \1
00200000                           201  CONTINUE\@
00200000                           202      MOVE.B DUART_SRB,\2                         ; read status register
00200000                           203      BTST #0,\2                                  ; check for character
00200000                           204      BEQ WAIT_FOR_READY\@                        ; nothing, check again
00200000                           205      
00200000                           206      MOVE.B DUART_RXB,\1                         ; got a character, read it
00200000                           207      MOVE.B \1,DISPLAY                           ; echo to the display
00200000                           208      
00200000                           209      ENDM
00200000                           210  
00200000                           211  ; register catalogue
00200000                           212  ; D0 - used for simulator I/O
00200000                           213  ; D1 - used for simulator I/O
00200000                           214  ; D2 - read character
00200000                           215  ; D3 - serial port status poll / task for TRAP in simulator
00200000                           216  ; D4 - count of S records read
00200000                           217  ; D5 - data to write / data read / byte count for S record load
00200000                           218  ; D6 - working register used in R/W and download
00200000                           219  ; D7 - address accumulator / reset by download
00200000                           220  ; A0 - address of string to print 
00200000                           221  
00200000                           222  ; start vector
00200000= 00000000                 223  STACK    DC.L $00000000                         ; STACK
00200004= 00200008                 224  RESET    DC.L START                             ; RESET
00200008                           225      
00200008                           226  ; start of program  
00200008                           227  START
00200008  13FC 0000 00E00001       228      MOVE.B #0,DISPLAY
00200010                           229  
00200010                           230  ; reset the UART in case of warm start
00200010  13FC 000A 00C00005       231      MOVE.B #$A,DUART_CRA                        ; disable rx & tx
00200018  13FC 0050 00C00005       232      MOVE.B #$50,DUART_CRA                       ; reset everyting
00200020  4E71                     233      NOP
00200022  13FC 0040 00C00005       234      MOVE.B #$40,DUART_CRA           
0020002A  4E71                     235      NOP
0020002C  13FC 0030 00C00005       236      MOVE.B #$30,DUART_CRA
00200034  4E71                     237      NOP
00200036  13FC 0020 00C00005       238      MOVE.B #$20,DUART_CRA
0020003E  4E71                     239      NOP
00200040  13FC 0010 00C00005       240      MOVE.B #$10,DUART_CRA   
00200048                           241  
00200048  13FC 000A 00C00015       242      MOVE.B #$A,DUART_CRB                        ; disable rx & tx
00200050  13FC 0050 00C00015       243      MOVE.B #$50,DUART_CRB                       ; reset everyting
00200058  4E71                     244      NOP
0020005A  13FC 0040 00C00015       245      MOVE.B #$40,DUART_CRB           
00200062  4E71                     246      NOP
00200064  13FC 0030 00C00015       247      MOVE.B #$30,DUART_CRB
0020006C  4E71                     248      NOP
0020006E  13FC 0020 00C00015       249      MOVE.B #$20,DUART_CRB
00200076  4E71                     250      NOP
00200078  13FC 0010 00C00015       251      MOVE.B #$10,DUART_CRB   
00200080                           252  
00200080                           253  ;initialise UART
00200080  13FC 0000 00C00009       254      MOVE.B #$0,DUART_ACR            
00200088  13FC 0000 00C0000B       255      MOVE.B #$0,DUART_IMR                        ; no interrupts, please            
00200090  13FC 0000 00C0001B       256      MOVE.B #$0,DUART_OPCR                       ; enable all outputs
00200098                           257  
00200098                           258  ; channel A
00200098  13FC 0013 00C00001       259      MOVE.B #$13,DUART_MRA                       ; no flow control, no parity, 8 data bits
002000A0  13FC 0007 00C00001       260      MOVE.B #$07,DUART_MRA                       ; 1 stop bit
002000A8  13FC 00CC 00C00003       261      MOVE.B #$CC,DUART_CSRA                      ; 9600 baud
002000B0  13FC 0005 00C00005       262      MOVE.B #$5,DUART_CRA                        ; enable rx & tx
002000B8                           263  
002000B8                           264  ; channel B
002000B8  13FC 0013 00C00011       265      MOVE.B #$13,DUART_MRB                       ; no flow control, no parity, 8 data bits
002000C0  13FC 0007 00C00011       266      MOVE.B #$07,DUART_MRB                       ; 1 stop bit
002000C8  13FC 00CC 00C00013       267      MOVE.B #$CC,DUART_CSRB                      ; 9600 baud
002000D0  13FC 0005 00C00015       268      MOVE.B #$5,DUART_CRB                        ; enable rx & tx
002000D8                           269  
002000D8                           270m     PRINT_CHAR '.',D3                           ; give the serial port chance to settle after reset
002000D8                           271m WAIT_FOR_READY_1                                ; WAIT UNTIL THE THERE IS SPACE TO SEND
002000D8                 TRUE      272m     IFEQ DEBUG
002000D8  1639 00C00003            273m         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
002000DE  0803 0002                274m         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
002000E2  67F4                     275m         BEQ WAIT_FOR_READY_1                    ; NO SPACE, CHECK AGAIN
002000E4  13F8 002E 00C00007       276m         MOVE.B '.',DUART_TXA                    ; SEND THE NEXT CHARACTER
002000EC                           277m     ENDC
002000EC                           278m     
002000EC                 FALSE     279m     IFNE DEBUG
002000EC                           280m     ENDC
002000EC                           281m 
002000EC                           282m     ENDM
002000EC                           283  
002000EC  13FC 0001 00E00001       284      MOVE.B #1,DISPLAY
002000F4                           285         
002000F4                           286m     PRINT_CRLF D3
002000F4                           287mm     PRINT_CHAR #13,D3                           ; CR
002000F4                           288mm WAIT_FOR_READY_3                                ; WAIT UNTIL THE THERE IS SPACE TO SEND
002000F4                 TRUE      289mm     IFEQ DEBUG
002000F4  1639 00C00003            290mm         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
002000FA  0803 0002                291mm         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
002000FE  67F4                     292mm         BEQ WAIT_FOR_READY_3                    ; NO SPACE, CHECK AGAIN
00200100  13FC 000D 00C00007       293mm         MOVE.B #13,DUART_TXA                    ; SEND THE NEXT CHARACTER
00200108                           294mm     ENDC
00200108                           295mm     
00200108                 FALSE     296mm     IFNE DEBUG
00200108                           297mm     ENDC
00200108                           298mm 
00200108                           299mm     ENDM
00200108                           300mm     PRINT_CHAR #10,D3                           ; LF
00200108                           301mm WAIT_FOR_READY_4                                ; WAIT UNTIL THE THERE IS SPACE TO SEND
00200108                 TRUE      302mm     IFEQ DEBUG
00200108  1639 00C00003            303mm         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
0020010E  0803 0002                304mm         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
00200112  67F4                     305mm         BEQ WAIT_FOR_READY_4                    ; NO SPACE, CHECK AGAIN
00200114  13FC 000A 00C00007       306mm         MOVE.B #10,DUART_TXA                    ; SEND THE NEXT CHARACTER
0020011C                           307mm     ENDC
0020011C                           308mm     
0020011C                 FALSE     309mm     IFNE DEBUG
0020011C                           310mm     ENDC
0020011C                           311mm 
0020011C                           312mm     ENDM
0020011C                           313m     ENDM
0020011C                           314  
0020011C  41F9 002017C2            315      LEA VERSION,A0
00200122                           316m     PRINT_STR A0,D3
00200122                           317m LOOP_5
00200122  0C10 0000                318m     CMP.B #0,(A0)                               ; 0 -> DONE
00200126  6700 001A                319m     BEQ EXIT_5
0020012A                           320mm     PRINT_CHAR (A0)+,D3
0020012A                           321mm WAIT_FOR_READY_6                                ; WAIT UNTIL THE THERE IS SPACE TO SEND
0020012A                 TRUE      322mm     IFEQ DEBUG
0020012A  1639 00C00003            323mm         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
00200130  0803 0002                324mm         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
00200134  67F4                     325mm         BEQ WAIT_FOR_READY_6                    ; NO SPACE, CHECK AGAIN
00200136  13D8 00C00007            326mm         MOVE.B (A0)+,DUART_TXA                      ; SEND THE NEXT CHARACTER
0020013C                           327mm     ENDC
0020013C                           328mm     
0020013C                 FALSE     329mm     IFNE DEBUG
0020013C                           330mm     ENDC
0020013C                           331mm 
0020013C                           332mm     ENDM
0020013C  4EF9 00200122            333m     JMP LOOP_5
00200142                           334m EXIT_5
00200142                           335m     ENDM
00200142                           336m     PRINT_CRLF D3
00200142                           337mm     PRINT_CHAR #13,D3                           ; CR
00200142                           338mm WAIT_FOR_READY_8                                ; WAIT UNTIL THE THERE IS SPACE TO SEND
00200142                 TRUE      339mm     IFEQ DEBUG
00200142  1639 00C00003            340mm         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
00200148  0803 0002                341mm         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
0020014C  67F4                     342mm         BEQ WAIT_FOR_READY_8                    ; NO SPACE, CHECK AGAIN
0020014E  13FC 000D 00C00007       343mm         MOVE.B #13,DUART_TXA                    ; SEND THE NEXT CHARACTER
00200156                           344mm     ENDC
00200156                           345mm     
00200156                 FALSE     346mm     IFNE DEBUG
00200156                           347mm     ENDC
00200156                           348mm 
00200156                           349mm     ENDM
00200156                           350mm     PRINT_CHAR #10,D3                           ; LF
00200156                           351mm WAIT_FOR_READY_9                                ; WAIT UNTIL THE THERE IS SPACE TO SEND
00200156                 TRUE      352mm     IFEQ DEBUG
00200156  1639 00C00003            353mm         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
0020015C  0803 0002                354mm         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
00200160  67F4                     355mm         BEQ WAIT_FOR_READY_9                    ; NO SPACE, CHECK AGAIN
00200162  13FC 000A 00C00007       356mm         MOVE.B #10,DUART_TXA                    ; SEND THE NEXT CHARACTER
0020016A                           357mm     ENDC
0020016A                           358mm     
0020016A                 FALSE     359mm     IFNE DEBUG
0020016A                           360mm     ENDC
0020016A                           361mm 
0020016A                           362mm     ENDM
0020016A                           363m     ENDM
0020016A                           364m     PRINT_CHAR #7,D3
0020016A                           365m WAIT_FOR_READY_10                               ; WAIT UNTIL THE THERE IS SPACE TO SEND
0020016A                 TRUE      366m     IFEQ DEBUG
0020016A  1639 00C00003            367m         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
00200170  0803 0002                368m         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
00200174  67F4                     369m         BEQ WAIT_FOR_READY_10                   ; NO SPACE, CHECK AGAIN
00200176  13FC 0007 00C00007       370m         MOVE.B #7,DUART_TXA                     ; SEND THE NEXT CHARACTER
0020017E                           371m     ENDC
0020017E                           372m     
0020017E                 FALSE     373m     IFNE DEBUG
0020017E                           374m     ENDC
0020017E                           375m 
0020017E                           376m     ENDM
0020017E                           377  
0020017E  7E00                     378      MOVE.L #0,D7                                ; address accumulator
00200180                           379  
00200180  13FC 0002 00E00001       380      MOVE.B #2,DISPLAY
00200188                           381  MAIN_LOOP
00200188                           382m     PRINT_CHAR #'>',D3                          ; prompt
00200188                           383m WAIT_FOR_READY_11                               ; WAIT UNTIL THE THERE IS SPACE TO SEND
00200188                 TRUE      384m     IFEQ DEBUG
00200188  1639 00C00003            385m         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
0020018E  0803 0002                386m         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
00200192  67F4                     387m         BEQ WAIT_FOR_READY_11                   ; NO SPACE, CHECK AGAIN
00200194  13FC 003E 00C00007       388m         MOVE.B #'>',DUART_TXA                       ; SEND THE NEXT CHARACTER
0020019C                           389m     ENDC
0020019C                           390m     
0020019C                 FALSE     391m     IFNE DEBUG
0020019C                           392m     ENDC
0020019C                           393m 
0020019C                           394m     ENDM
0020019C                           395m     PRINT_CHAR #32,D3                           ; space
0020019C                           396m WAIT_FOR_READY_12                               ; WAIT UNTIL THE THERE IS SPACE TO SEND
0020019C                 TRUE      397m     IFEQ DEBUG
0020019C  1639 00C00003            398m         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
002001A2  0803 0002                399m         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
002001A6  67F4                     400m         BEQ WAIT_FOR_READY_12                   ; NO SPACE, CHECK AGAIN
002001A8  13FC 0020 00C00007       401m         MOVE.B #32,DUART_TXA                    ; SEND THE NEXT CHARACTER
002001B0                           402m     ENDC
002001B0                           403m     
002001B0                 FALSE     404m     IFNE DEBUG
002001B0                           405m     ENDC
002001B0                           406m 
002001B0                           407m     ENDM
002001B0                           408      
002001B0                           409  GET_INPUT
002001B0                           410m     WAIT_CHAR D2,D3                             ; fetch character from serial port -> D2
002001B0                           411m WAIT_FOR_READY_13                               ; WAIT UNTIL THE THERE IS SPACE TO SEND
002001B0                           412m 
002001B0                 TRUE      413m     IFEQ DEBUG
002001B0  1639 00C00003            414m         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
002001B6  0803 0000                415m         BTST #0,D3                              ; CHECK FOR CHARACTER
002001BA  67F4                     416m         BEQ WAIT_FOR_READY_13                   ; NOTHING, CHECK AGAIN
002001BC                           417m     ENDC
002001BC                           418m     
002001BC                           419mm     READ_CHAR D2
002001BC                 TRUE      420mm     IFEQ DEBUG
002001BC  1439 00C00007            421mm         MOVE.B DUART_RXA,D2                     ; GOT A CHARACTER, READ IT
002001C2                           422mm     ENDC
002001C2                 FALSE     423mm     IFNE DEBUG
002001C2                           424mm     ENDC
002001C2                           425mm      
002001C2  B43C 001B                426mm     CMP.B #$1B,D2                               ; CHECK FOR ESCAPE AND GO TO START
002001C6  6700 FE40                427mm     BEQ START
002001CA                           428mm     ENDM
002001CA                           429m 
002001CA                 TRUE      430m     IFEQ DEBUG
002001CA                           431mm         PRINT_CHAR D2,D3                        ; ECHO IT BACK
002001CA                           432mm WAIT_FOR_READY_15                               ; WAIT UNTIL THE THERE IS SPACE TO SEND
002001CA                 TRUE      433mm     IFEQ DEBUG
002001CA  1639 00C00003            434mm         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
002001D0  0803 0002                435mm         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
002001D4  67F4                     436mm         BEQ WAIT_FOR_READY_15                   ; NO SPACE, CHECK AGAIN
002001D6  13C2 00C00007            437mm         MOVE.B D2,DUART_TXA                     ; SEND THE NEXT CHARACTER
002001DC                           438mm     ENDC
002001DC                           439mm     
002001DC                 FALSE     440mm     IFNE DEBUG
002001DC                           441mm     ENDC
002001DC                           442mm 
002001DC                           443mm     ENDM
002001DC                           444m     ENDC
002001DC                           445m     ENDM
002001DC                           446      
002001DC  B43C 0030                447      CMP.B #'0',D2
002001E0  6700 15BE                448      BEQ HEX_DIGIT
002001E4  B43C 0031                449      CMP.B #'1',D2
002001E8  6700 15B6                450      BEQ HEX_DIGIT
002001EC  B43C 0032                451      CMP.B #'2',D2
002001F0  6700 15AE                452      BEQ HEX_DIGIT
002001F4  B43C 0033                453      CMP.B #'3',D2
002001F8  6700 15A6                454      BEQ HEX_DIGIT
002001FC  B43C 0034                455      CMP.B #'4',D2
00200200  6700 159E                456      BEQ HEX_DIGIT
00200204  B43C 0035                457      CMP.B #'5',D2
00200208  6700 1596                458      BEQ HEX_DIGIT
0020020C  B43C 0036                459      CMP.B #'6',D2
00200210  6700 158E                460      BEQ HEX_DIGIT
00200214  B43C 0037                461      CMP.B #'7',D2
00200218  6700 1586                462      BEQ HEX_DIGIT
0020021C  B43C 0038                463      CMP.B #'8',D2
00200220  6700 157E                464      BEQ HEX_DIGIT
00200224  B43C 0039                465      CMP.B #'9',D2
00200228  6700 1576                466      BEQ HEX_DIGIT
0020022C  B43C 0041                467      CMP.B #'A',D2
00200230  6700 156E                468      BEQ HEX_DIGIT
00200234  B43C 0042                469      CMP.B #'B',D2
00200238  6700 1566                470      BEQ HEX_DIGIT
0020023C  B43C 0043                471      CMP.B #'C',D2
00200240  6700 155E                472      BEQ HEX_DIGIT
00200244  B43C 0044                473      CMP.B #'D',D2
00200248  6700 1556                474      BEQ HEX_DIGIT
0020024C  B43C 0045                475      CMP.B #'E',D2
00200250  6700 154E                476      BEQ HEX_DIGIT
00200254  B43C 0046                477      CMP.B #'F',D2
00200258  6700 1546                478      BEQ HEX_DIGIT
0020025C                           479      
0020025C  B43C 0057                480      CMP.B #'W',D2
00200260  6700 016E                481      BEQ W
00200264                           482      
00200264  B43C 004C                483      CMP.B #'L',D2
00200268  6700 13C0                484      BEQ L 
0020026C                           485  
0020026C                           486m     PRINT_CRLF D3
0020026C                           487mm     PRINT_CHAR #13,D3                           ; CR
0020026C                           488mm WAIT_FOR_READY_17                               ; WAIT UNTIL THE THERE IS SPACE TO SEND
0020026C                 TRUE      489mm     IFEQ DEBUG
0020026C  1639 00C00003            490mm         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
00200272  0803 0002                491mm         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
00200276  67F4                     492mm         BEQ WAIT_FOR_READY_17                   ; NO SPACE, CHECK AGAIN
00200278  13FC 000D 00C00007       493mm         MOVE.B #13,DUART_TXA                    ; SEND THE NEXT CHARACTER
00200280                           494mm     ENDC
00200280                           495mm     
00200280                 FALSE     496mm     IFNE DEBUG
00200280                           497mm     ENDC
00200280                           498mm 
00200280                           499mm     ENDM
00200280                           500mm     PRINT_CHAR #10,D3                           ; LF
00200280                           501mm WAIT_FOR_READY_18                               ; WAIT UNTIL THE THERE IS SPACE TO SEND
00200280                 TRUE      502mm     IFEQ DEBUG
00200280  1639 00C00003            503mm         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
00200286  0803 0002                504mm         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
0020028A  67F4                     505mm         BEQ WAIT_FOR_READY_18                   ; NO SPACE, CHECK AGAIN
0020028C  13FC 000A 00C00007       506mm         MOVE.B #10,DUART_TXA                    ; SEND THE NEXT CHARACTER
00200294                           507mm     ENDC
00200294                           508mm     
00200294                 FALSE     509mm     IFNE DEBUG
00200294                           510mm     ENDC
00200294                           511mm 
00200294                           512mm     ENDM
00200294                           513m     ENDM
00200294                           514   
00200294  B43C 003F                515      CMP.B #'?',D2
00200298  6700 0056                516      BEQ H
0020029C                           517  
0020029C  B43C 0056                518      CMP.B #'V',D2
002002A0  6700 007A                519      BEQ V
002002A4                           520      
002002A4  B43C 0052                521      CMP.B #'R',D2
002002A8  6700 009E                522      BEQ R
002002AC                           523  
002002AC  B43C 0053                524      CMP.B #'S',D2
002002B0  6700 01E6                525      BEQ S
002002B4                           526  
002002B4  B43C 0047                527      CMP.B #'G',D2
002002B8  6700 125C                528      BEQ G   
002002BC                           529  
002002BC  B43C 005A                530      CMP.B #'Z',D2
002002C0  6700 125C                531      BEQ Z   
002002C4                           532  
002002C4  41F9 00201876            533      LEA HUH,A0
002002CA                           534m     PRINT_STR A0,D3
002002CA                           535m LOOP_19
002002CA  0C10 0000                536m     CMP.B #0,(A0)                               ; 0 -> DONE
002002CE  6700 001A                537m     BEQ EXIT_19
002002D2                           538mm     PRINT_CHAR (A0)+,D3
002002D2                           539mm WAIT_FOR_READY_20                               ; WAIT UNTIL THE THERE IS SPACE TO SEND
002002D2                 TRUE      540mm     IFEQ DEBUG
002002D2  1639 00C00003            541mm         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
002002D8  0803 0002                542mm         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
002002DC  67F4                     543mm         BEQ WAIT_FOR_READY_20                   ; NO SPACE, CHECK AGAIN
002002DE  13D8 00C00007            544mm         MOVE.B (A0)+,DUART_TXA                      ; SEND THE NEXT CHARACTER
002002E4                           545mm     ENDC
002002E4                           546mm     
002002E4                 FALSE     547mm     IFNE DEBUG
002002E4                           548mm     ENDC
002002E4                           549mm 
002002E4                           550mm     ENDM
002002E4  4EF9 002002CA            551m     JMP LOOP_19
002002EA                           552m EXIT_19
002002EA                           553m     ENDM
002002EA                           554                         
002002EA  4EF9 00200188            555      JMP MAIN_LOOP
002002F0                           556      
002002F0                           557  ; commands
002002F0                           558  H   
002002F0  41F9 002017DF            559      LEA HELP,A0
002002F6                           560m     PRINT_STR A0,D3
002002F6                           561m LOOP_21
002002F6  0C10 0000                562m     CMP.B #0,(A0)                               ; 0 -> DONE
002002FA  6700 001A                563m     BEQ EXIT_21
002002FE                           564mm     PRINT_CHAR (A0)+,D3
002002FE                           565mm WAIT_FOR_READY_22                               ; WAIT UNTIL THE THERE IS SPACE TO SEND
002002FE                 TRUE      566mm     IFEQ DEBUG
002002FE  1639 00C00003            567mm         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
00200304  0803 0002                568mm         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
00200308  67F4                     569mm         BEQ WAIT_FOR_READY_22                   ; NO SPACE, CHECK AGAIN
0020030A  13D8 00C00007            570mm         MOVE.B (A0)+,DUART_TXA                      ; SEND THE NEXT CHARACTER
00200310                           571mm     ENDC
00200310                           572mm     
00200310                 FALSE     573mm     IFNE DEBUG
00200310                           574mm     ENDC
00200310                           575mm 
00200310                           576mm     ENDM
00200310  4EF9 002002F6            577m     JMP LOOP_21
00200316                           578m EXIT_21
00200316                           579m     ENDM
00200316  4EF9 00200188            580      JMP MAIN_LOOP
0020031C                           581  
0020031C                           582  V   
0020031C  41F9 002017C2            583      LEA VERSION,A0
00200322                           584m     PRINT_STR A0,D3       
00200322                           585m LOOP_23
00200322  0C10 0000                586m     CMP.B #0,(A0)                               ; 0 -> DONE
00200326  6700 001A                587m     BEQ EXIT_23
0020032A                           588mm     PRINT_CHAR (A0)+,D3
0020032A                           589mm WAIT_FOR_READY_24                               ; WAIT UNTIL THE THERE IS SPACE TO SEND
0020032A                 TRUE      590mm     IFEQ DEBUG
0020032A  1639 00C00003            591mm         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
00200330  0803 0002                592mm         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
00200334  67F4                     593mm         BEQ WAIT_FOR_READY_24                   ; NO SPACE, CHECK AGAIN
00200336  13D8 00C00007            594mm         MOVE.B (A0)+,DUART_TXA                      ; SEND THE NEXT CHARACTER
0020033C                           595mm     ENDC
0020033C                           596mm     
0020033C                 FALSE     597mm     IFNE DEBUG
0020033C                           598mm     ENDC
0020033C                           599mm 
0020033C                           600mm     ENDM
0020033C  4EF9 00200322            601m     JMP LOOP_23
00200342                           602m EXIT_23
00200342                           603m     ENDM
00200342  4EF9 00200188            604      JMP MAIN_LOOP
00200348                           605      
00200348                           606  R   
00200348  2047                     607      MOVE.L D7,A0                                ; address accumulator -> address register
0020034A  2A10                     608      MOVE.L (A0),D5                              ; read the memory and print it
0020034C                           609m     PRINT_REG D5,D3,D7,D6,A0
0020034C                           610mm     PRINT_CHAR #'0',D3                          ;0X HEADER
0020034C                           611mm WAIT_FOR_READY_26                               ; WAIT UNTIL THE THERE IS SPACE TO SEND
0020034C                 TRUE      612mm     IFEQ DEBUG
0020034C  1639 00C00003            613mm         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
00200352  0803 0002                614mm         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
00200356  67F4                     615mm         BEQ WAIT_FOR_READY_26                   ; NO SPACE, CHECK AGAIN
00200358  13FC 0030 00C00007       616mm         MOVE.B #'0',DUART_TXA                       ; SEND THE NEXT CHARACTER
00200360                           617mm     ENDC
00200360                           618mm     
00200360                 FALSE     619mm     IFNE DEBUG
00200360                           620mm     ENDC
00200360                           621mm 
00200360                           622mm     ENDM
00200360                           623mm     PRINT_CHAR #'x',D3
00200360                           624mm WAIT_FOR_READY_27                               ; WAIT UNTIL THE THERE IS SPACE TO SEND
00200360                 TRUE      625mm     IFEQ DEBUG
00200360  1639 00C00003            626mm         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
00200366  0803 0002                627mm         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
0020036A  67F4                     628mm         BEQ WAIT_FOR_READY_27                   ; NO SPACE, CHECK AGAIN
0020036C  13FC 0078 00C00007       629mm         MOVE.B #'x',DUART_TXA                       ; SEND THE NEXT CHARACTER
00200374                           630mm     ENDC
00200374                           631mm     
00200374                 FALSE     632mm     IFNE DEBUG
00200374                           633mm     ENDC
00200374                           634mm 
00200374                           635mm     ENDM
00200374  7C07                     636m     MOVE.L #7,D6                                ; LOOP ROUND ALL 8 HEX CHARACTERS OF 4 BITS EACH
00200376                           637m LOOP_25
00200376                           638mm     BIN2HEX D5,D7,A0
00200376  41F9 002018DA            639mm     LEA BIN2HEX_LUT,A0                          ; LOAD THE LOOKUP TABLE
0020037C  E99D                     640mm     ROL.L #4,D5                                 ; SHIFT THE TOP 4 BITS DOWN TO BOTTOM OF THE REGISTER THE AND MASK OFF EVERYTHING ELSE
0020037E  1E05                     641mm     MOVE.B D5,D7
00200380  0287 0000000F            642mm     ANDI.L #$F,D7
00200386  1E30 7000                643mm     MOVE.B 0(A0,D7),D7                          ; USE THAT AS AN INDEX INTO THE LUT
0020038A                           644mm     ENDM
0020038A                           645mm     PRINT_CHAR D7,D3
0020038A                           646mm WAIT_FOR_READY_29                               ; WAIT UNTIL THE THERE IS SPACE TO SEND
0020038A                 TRUE      647mm     IFEQ DEBUG
0020038A  1639 00C00003            648mm         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
00200390  0803 0002                649mm         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
00200394  67F4                     650mm         BEQ WAIT_FOR_READY_29                   ; NO SPACE, CHECK AGAIN
00200396  13C7 00C00007            651mm         MOVE.B D7,DUART_TXA                     ; SEND THE NEXT CHARACTER
0020039C                           652mm     ENDC
0020039C                           653mm     
0020039C                 FALSE     654mm     IFNE DEBUG
0020039C                           655mm     ENDC
0020039C                           656mm 
0020039C                           657mm     ENDM
0020039C  57CE FFD8                658m     DBEQ D6,LOOP_25
002003A0                           659m     ENDM
002003A0                           660m     PRINT_CRLF D3
002003A0                           661mm     PRINT_CHAR #13,D3                           ; CR
002003A0                           662mm WAIT_FOR_READY_31                               ; WAIT UNTIL THE THERE IS SPACE TO SEND
002003A0                 TRUE      663mm     IFEQ DEBUG
002003A0  1639 00C00003            664mm         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
002003A6  0803 0002                665mm         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
002003AA  67F4                     666mm         BEQ WAIT_FOR_READY_31                   ; NO SPACE, CHECK AGAIN
002003AC  13FC 000D 00C00007       667mm         MOVE.B #13,DUART_TXA                    ; SEND THE NEXT CHARACTER
002003B4                           668mm     ENDC
002003B4                           669mm     
002003B4                 FALSE     670mm     IFNE DEBUG
002003B4                           671mm     ENDC
002003B4                           672mm 
002003B4                           673mm     ENDM
002003B4                           674mm     PRINT_CHAR #10,D3                           ; LF
002003B4                           675mm WAIT_FOR_READY_32                               ; WAIT UNTIL THE THERE IS SPACE TO SEND
002003B4                 TRUE      676mm     IFEQ DEBUG
002003B4  1639 00C00003            677mm         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
002003BA  0803 0002                678mm         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
002003BE  67F4                     679mm         BEQ WAIT_FOR_READY_32                   ; NO SPACE, CHECK AGAIN
002003C0  13FC 000A 00C00007       680mm         MOVE.B #10,DUART_TXA                    ; SEND THE NEXT CHARACTER
002003C8                           681mm     ENDC
002003C8                           682mm     
002003C8                 FALSE     683mm     IFNE DEBUG
002003C8                           684mm     ENDC
002003C8                           685mm 
002003C8                           686mm     ENDM
002003C8                           687m     ENDM
002003C8  7E00                     688      MOVE.L #0,D7                                ; clear the now used address accumulator
002003CA  4EF9 00200188            689      JMP MAIN_LOOP
002003D0                           690  
002003D0                           691  W
002003D0  7A00                     692      MOVE.L #0,D5                                ; D5 will be the value to write            
002003D2                           693  
002003D2                           694m     WAIT_CHAR D2,D3                             ; read most significant character -> D2
002003D2                           695m WAIT_FOR_READY_33                               ; WAIT UNTIL THE THERE IS SPACE TO SEND
002003D2                           696m 
002003D2                 TRUE      697m     IFEQ DEBUG
002003D2  1639 00C00003            698m         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
002003D8  0803 0000                699m         BTST #0,D3                              ; CHECK FOR CHARACTER
002003DC  67F4                     700m         BEQ WAIT_FOR_READY_33                   ; NOTHING, CHECK AGAIN
002003DE                           701m     ENDC
002003DE                           702m     
002003DE                           703mm     READ_CHAR D2
002003DE                 TRUE      704mm     IFEQ DEBUG
002003DE  1439 00C00007            705mm         MOVE.B DUART_RXA,D2                     ; GOT A CHARACTER, READ IT
002003E4                           706mm     ENDC
002003E4                 FALSE     707mm     IFNE DEBUG
002003E4                           708mm     ENDC
002003E4                           709mm      
002003E4  B43C 001B                710mm     CMP.B #$1B,D2                               ; CHECK FOR ESCAPE AND GO TO START
002003E8  6700 FC1E                711mm     BEQ START
002003EC                           712mm     ENDM
002003EC                           713m 
002003EC                 TRUE      714m     IFEQ DEBUG
002003EC                           715mm         PRINT_CHAR D2,D3                        ; ECHO IT BACK
002003EC                           716mm WAIT_FOR_READY_35                               ; WAIT UNTIL THE THERE IS SPACE TO SEND
002003EC                 TRUE      717mm     IFEQ DEBUG
002003EC  1639 00C00003            718mm         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
002003F2  0803 0002                719mm         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
002003F6  67F4                     720mm         BEQ WAIT_FOR_READY_35                   ; NO SPACE, CHECK AGAIN
002003F8  13C2 00C00007            721mm         MOVE.B D2,DUART_TXA                     ; SEND THE NEXT CHARACTER
002003FE                           722mm     ENDC
002003FE                           723mm     
002003FE                 FALSE     724mm     IFNE DEBUG
002003FE                           725mm     ENDC
002003FE                           726mm 
002003FE                           727mm     ENDM
002003FE                           728m     ENDC
002003FE                           729m     ENDM
002003FE                           730m     HEX2BIN D2,D2,A0                            ; convert to binary -> D2
002003FE  41F9 002018EA            731m     LEA HEX2BIN_LUT,A0                          ; LOAD THE LOOKUP TABLE
00200404  0402 0030                732m     SUB.B #'0',D2                               ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
00200408  C4BC 000000FF            733m     AND.L #$FF,D2                               ; IGNORE THE TOP 3 BYTES
0020040E  1430 2000                734m     MOVE.B 0(A0,D2),D2                          ; USE THAT AS AN INDEX INTO THE LUT      
00200412                           735m     ENDM
00200412  1A02                     736      MOVE.B D2,D5                                ; put at bottom of D5
00200414                           737  
00200414  3C3C 0006                738      MOVE #6,D6                                  ; 7 bytes left to read
00200418                           739      
00200418                           740  READ_DATA_TO_POKE
00200418  E98D                     741      LSL.L #4,D5                                 ; make what we have so far more significant
0020041A                           742m     WAIT_CHAR D2,D3                             ; next character -> D2
0020041A                           743m WAIT_FOR_READY_37                               ; WAIT UNTIL THE THERE IS SPACE TO SEND
0020041A                           744m 
0020041A                 TRUE      745m     IFEQ DEBUG
0020041A  1639 00C00003            746m         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
00200420  0803 0000                747m         BTST #0,D3                              ; CHECK FOR CHARACTER
00200424  67F4                     748m         BEQ WAIT_FOR_READY_37                   ; NOTHING, CHECK AGAIN
00200426                           749m     ENDC
00200426                           750m     
00200426                           751mm     READ_CHAR D2
00200426                 TRUE      752mm     IFEQ DEBUG
00200426  1439 00C00007            753mm         MOVE.B DUART_RXA,D2                     ; GOT A CHARACTER, READ IT
0020042C                           754mm     ENDC
0020042C                 FALSE     755mm     IFNE DEBUG
0020042C                           756mm     ENDC
0020042C                           757mm      
0020042C  B43C 001B                758mm     CMP.B #$1B,D2                               ; CHECK FOR ESCAPE AND GO TO START
00200430  6700 FBD6                759mm     BEQ START
00200434                           760mm     ENDM
00200434                           761m 
00200434                 TRUE      762m     IFEQ DEBUG
00200434                           763mm         PRINT_CHAR D2,D3                        ; ECHO IT BACK
00200434                           764mm WAIT_FOR_READY_39                               ; WAIT UNTIL THE THERE IS SPACE TO SEND
00200434                 TRUE      765mm     IFEQ DEBUG
00200434  1639 00C00003            766mm         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
0020043A  0803 0002                767mm         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
0020043E  67F4                     768mm         BEQ WAIT_FOR_READY_39                   ; NO SPACE, CHECK AGAIN
00200440  13C2 00C00007            769mm         MOVE.B D2,DUART_TXA                     ; SEND THE NEXT CHARACTER
00200446                           770mm     ENDC
00200446                           771mm     
00200446                 FALSE     772mm     IFNE DEBUG
00200446                           773mm     ENDC
00200446                           774mm 
00200446                           775mm     ENDM
00200446                           776m     ENDC
00200446                           777m     ENDM
00200446                           778m     HEX2BIN D2,D2,A0                            ; convert to binary -> D2
00200446  41F9 002018EA            779m     LEA HEX2BIN_LUT,A0                          ; LOAD THE LOOKUP TABLE
0020044C  0402 0030                780m     SUB.B #'0',D2                               ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
00200450  C4BC 000000FF            781m     AND.L #$FF,D2                               ; IGNORE THE TOP 3 BYTES
00200456  1430 2000                782m     MOVE.B 0(A0,D2),D2                          ; USE THAT AS AN INDEX INTO THE LUT      
0020045A                           783m     ENDM
0020045A  8A02                     784      OR.B D2,D5
0020045C  023C 00FB                785      ANDI #$FB,CCR                               ; clear the Z bit if set (from the OR above)
00200460  57CE FFB6                786      DBEQ D6,READ_DATA_TO_POKE
00200464                           787      
00200464  2047                     788      MOVE.L D7,A0                                ; address accumulator -> address register
00200466  7E00                     789      MOVE.L #0,D7                                ; clear the now used address accumulator
00200468                           790      
00200468  2085                     791      MOVE.L D5,(A0)                              ; write the data
0020046A                           792  
0020046A                           793m     PRINT_CRLF D3
0020046A                           794mm     PRINT_CHAR #13,D3                           ; CR
0020046A                           795mm WAIT_FOR_READY_42                               ; WAIT UNTIL THE THERE IS SPACE TO SEND
0020046A                 TRUE      796mm     IFEQ DEBUG
0020046A  1639 00C00003            797mm         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
00200470  0803 0002                798mm         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
00200474  67F4                     799mm         BEQ WAIT_FOR_READY_42                   ; NO SPACE, CHECK AGAIN
00200476  13FC 000D 00C00007       800mm         MOVE.B #13,DUART_TXA                    ; SEND THE NEXT CHARACTER
0020047E                           801mm     ENDC
0020047E                           802mm     
0020047E                 FALSE     803mm     IFNE DEBUG
0020047E                           804mm     ENDC
0020047E                           805mm 
0020047E                           806mm     ENDM
0020047E                           807mm     PRINT_CHAR #10,D3                           ; LF
0020047E                           808mm WAIT_FOR_READY_43                               ; WAIT UNTIL THE THERE IS SPACE TO SEND
0020047E                 TRUE      809mm     IFEQ DEBUG
0020047E  1639 00C00003            810mm         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
00200484  0803 0002                811mm         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
00200488  67F4                     812mm         BEQ WAIT_FOR_READY_43                   ; NO SPACE, CHECK AGAIN
0020048A  13FC 000A 00C00007       813mm         MOVE.B #10,DUART_TXA                    ; SEND THE NEXT CHARACTER
00200492                           814mm     ENDC
00200492                           815mm     
00200492                 FALSE     816mm     IFNE DEBUG
00200492                           817mm     ENDC
00200492                           818mm 
00200492                           819mm     ENDM
00200492                           820m     ENDM
00200492  4EF9 00200188            821      JMP MAIN_LOOP
00200498                           822  
00200498                           823          
00200498                           824  S
00200498  2647                     825      MOVE.L D7,A3                                ; grab the address accumulator
0020049A  7800                     826      MOVE.L #0,D4                                ; count of records read -> D4
0020049C  2478 0000                827      MOVE.L 0,A2                                 ; start address -> A2
002004A0                           828      
002004A0                           829  WAIT_FOR_SRECORD                                ; wait for the start of a record, indicated by 'S'
002004A0                           830m     DOWNLOAD D2,D3                  
002004A0                           831m WAIT_FOR_READY_44                               ; WAIT UNTIL THE THERE IS SPACE TO SEND
002004A0                           832m 
002004A0  1639 00C00003            833m     MOVE.B DUART_SRA,D3                         ; CHECK FOR COMMAND
002004A6  0803 0000                834m     BTST #0,D3                                  ; CHECK FOR CHARACTER
002004AA  6700 0010                835m     BEQ CONTINUE_44                             ; NOTHING, CONTINUE
002004AE                           836m  
002004AE                           837mm     READ_CHAR D2
002004AE                 TRUE      838mm     IFEQ DEBUG
002004AE  1439 00C00007            839mm         MOVE.B DUART_RXA,D2                     ; GOT A CHARACTER, READ IT
002004B4                           840mm     ENDC
002004B4                 FALSE     841mm     IFNE DEBUG
002004B4                           842mm     ENDC
002004B4                           843mm      
002004B4  B43C 001B                844mm     CMP.B #$1B,D2                               ; CHECK FOR ESCAPE AND GO TO START
002004B8  6700 FB4E                845mm     BEQ START
002004BC                           846mm     ENDM
002004BC                           847m CONTINUE_44
002004BC  1639 00C00013            848m     MOVE.B DUART_SRB,D3                         ; READ STATUS REGISTER
002004C2  0803 0000                849m     BTST #0,D3                                  ; CHECK FOR CHARACTER
002004C6  67D8                     850m     BEQ WAIT_FOR_READY_44                       ; NOTHING, CHECK AGAIN
002004C8                           851m     
002004C8  1439 00C00017            852m     MOVE.B DUART_RXB,D2                         ; GOT A CHARACTER, READ IT
002004CE  13C2 00E00001            853m     MOVE.B D2,DISPLAY                           ; ECHO TO THE DISPLAY
002004D4                           854m     
002004D4                           855m     ENDM
002004D4  B43C 0053                856      CMP.B #'S',D2                               ; found S?    
002004D8  66C6                     857      BNE WAIT_FOR_SRECORD                        ; nope, keep waiting
002004DA                           858      
002004DA  5284                     859      ADD.L #1,D4                                 ; read another S record, increment count
002004DC                           860      
002004DC                           861m     DOWNLOAD D7,D3                              ; read the record digit
002004DC                           862m WAIT_FOR_READY_46                               ; WAIT UNTIL THE THERE IS SPACE TO SEND
002004DC                           863m 
002004DC  1639 00C00003            864m     MOVE.B DUART_SRA,D3                         ; CHECK FOR COMMAND
002004E2  0803 0000                865m     BTST #0,D3                                  ; CHECK FOR CHARACTER
002004E6  6700 0010                866m     BEQ CONTINUE_46                             ; NOTHING, CONTINUE
002004EA                           867m  
002004EA                           868mm     READ_CHAR D7
002004EA                 TRUE      869mm     IFEQ DEBUG
002004EA  1E39 00C00007            870mm         MOVE.B DUART_RXA,D7                     ; GOT A CHARACTER, READ IT
002004F0                           871mm     ENDC
002004F0                 FALSE     872mm     IFNE DEBUG
002004F0                           873mm     ENDC
002004F0                           874mm      
002004F0  BE3C 001B                875mm     CMP.B #$1B,D7                               ; CHECK FOR ESCAPE AND GO TO START
002004F4  6700 FB12                876mm     BEQ START
002004F8                           877mm     ENDM
002004F8                           878m CONTINUE_46
002004F8  1639 00C00013            879m     MOVE.B DUART_SRB,D3                         ; READ STATUS REGISTER
002004FE  0803 0000                880m     BTST #0,D3                                  ; CHECK FOR CHARACTER
00200502  67D8                     881m     BEQ WAIT_FOR_READY_46                       ; NOTHING, CHECK AGAIN
00200504                           882m     
00200504  1E39 00C00017            883m     MOVE.B DUART_RXB,D7                         ; GOT A CHARACTER, READ IT
0020050A  13C7 00E00001            884m     MOVE.B D7,DISPLAY                           ; ECHO TO THE DISPLAY
00200510                           885m     
00200510                           886m     ENDM
00200510                           887  
00200510  7C00                     888      MOVE.L #0,D6                                ; checksum
00200512                           889  
00200512  7A00                     890      MOVE.L #0,D5                                ; read the 2 digit byte count -> D5
00200514                           891m     DOWNLOAD D2,D3              
00200514                           892m WAIT_FOR_READY_48                               ; WAIT UNTIL THE THERE IS SPACE TO SEND
00200514                           893m 
00200514  1639 00C00003            894m     MOVE.B DUART_SRA,D3                         ; CHECK FOR COMMAND
0020051A  0803 0000                895m     BTST #0,D3                                  ; CHECK FOR CHARACTER
0020051E  6700 0010                896m     BEQ CONTINUE_48                             ; NOTHING, CONTINUE
00200522                           897m  
00200522                           898mm     READ_CHAR D2
00200522                 TRUE      899mm     IFEQ DEBUG
00200522  1439 00C00007            900mm         MOVE.B DUART_RXA,D2                     ; GOT A CHARACTER, READ IT
00200528                           901mm     ENDC
00200528                 FALSE     902mm     IFNE DEBUG
00200528                           903mm     ENDC
00200528                           904mm      
00200528  B43C 001B                905mm     CMP.B #$1B,D2                               ; CHECK FOR ESCAPE AND GO TO START
0020052C  6700 FADA                906mm     BEQ START
00200530                           907mm     ENDM
00200530                           908m CONTINUE_48
00200530  1639 00C00013            909m     MOVE.B DUART_SRB,D3                         ; READ STATUS REGISTER
00200536  0803 0000                910m     BTST #0,D3                                  ; CHECK FOR CHARACTER
0020053A  67D8                     911m     BEQ WAIT_FOR_READY_48                       ; NOTHING, CHECK AGAIN
0020053C                           912m     
0020053C  1439 00C00017            913m     MOVE.B DUART_RXB,D2                         ; GOT A CHARACTER, READ IT
00200542  13C2 00E00001            914m     MOVE.B D2,DISPLAY                           ; ECHO TO THE DISPLAY
00200548                           915m     
00200548                           916m     ENDM
00200548                           917m     HEX2BIN D2,D2,A0
00200548  41F9 002018EA            918m     LEA HEX2BIN_LUT,A0                          ; LOAD THE LOOKUP TABLE
0020054E  0402 0030                919m     SUB.B #'0',D2                               ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
00200552  C4BC 000000FF            920m     AND.L #$FF,D2                               ; IGNORE THE TOP 3 BYTES
00200558  1430 2000                921m     MOVE.B 0(A0,D2),D2                          ; USE THAT AS AN INDEX INTO THE LUT      
0020055C                           922m     ENDM
0020055C  8A82                     923      OR.L D2,D5
0020055E  E98D                     924      LSL.L #4,D5    
00200560                           925m     DOWNLOAD D2,D3
00200560                           926m WAIT_FOR_READY_51                               ; WAIT UNTIL THE THERE IS SPACE TO SEND
00200560                           927m 
00200560  1639 00C00003            928m     MOVE.B DUART_SRA,D3                         ; CHECK FOR COMMAND
00200566  0803 0000                929m     BTST #0,D3                                  ; CHECK FOR CHARACTER
0020056A  6700 0010                930m     BEQ CONTINUE_51                             ; NOTHING, CONTINUE
0020056E                           931m  
0020056E                           932mm     READ_CHAR D2
0020056E                 TRUE      933mm     IFEQ DEBUG
0020056E  1439 00C00007            934mm         MOVE.B DUART_RXA,D2                     ; GOT A CHARACTER, READ IT
00200574                           935mm     ENDC
00200574                 FALSE     936mm     IFNE DEBUG
00200574                           937mm     ENDC
00200574                           938mm      
00200574  B43C 001B                939mm     CMP.B #$1B,D2                               ; CHECK FOR ESCAPE AND GO TO START
00200578  6700 FA8E                940mm     BEQ START
0020057C                           941mm     ENDM
0020057C                           942m CONTINUE_51
0020057C  1639 00C00013            943m     MOVE.B DUART_SRB,D3                         ; READ STATUS REGISTER
00200582  0803 0000                944m     BTST #0,D3                                  ; CHECK FOR CHARACTER
00200586  67D8                     945m     BEQ WAIT_FOR_READY_51                       ; NOTHING, CHECK AGAIN
00200588                           946m     
00200588  1439 00C00017            947m     MOVE.B DUART_RXB,D2                         ; GOT A CHARACTER, READ IT
0020058E  13C2 00E00001            948m     MOVE.B D2,DISPLAY                           ; ECHO TO THE DISPLAY
00200594                           949m     
00200594                           950m     ENDM
00200594                           951m     HEX2BIN D2,D2,A0  
00200594  41F9 002018EA            952m     LEA HEX2BIN_LUT,A0                          ; LOAD THE LOOKUP TABLE
0020059A  0402 0030                953m     SUB.B #'0',D2                               ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
0020059E  C4BC 000000FF            954m     AND.L #$FF,D2                               ; IGNORE THE TOP 3 BYTES
002005A4  1430 2000                955m     MOVE.B 0(A0,D2),D2                          ; USE THAT AS AN INDEX INTO THE LUT      
002005A8                           956m     ENDM
002005A8  8A82                     957      OR.L D2,D5
002005AA                           958                  
002005AA  DC85                     959      ADD.L D5,D6                                 ; add byte count into checksum
002005AC                           960  
002005AC                           961      IF.B D7 <EQ> #'0' THEN.L                    ; header, just ignore it
002005AC  BE3C 0030                962s     CMP.B   #'0',D7
002005B0  6600 000A                963s     BNE.L   _00000000
002005B4  6000 FEEA                964          BRA WAIT_FOR_SRECORD
002005B8                           965      ELSE
002005B8  6000 0D0E                966s     BRA _00000001
002005BC                           967s _00000000
002005BC                           968          IF.B D7 <EQ> #'1' THEN.L                ; 16 bit address data record
002005BC  BE3C 0031                969s     CMP.B   #'1',D7
002005C0  6600 04F6                970s     BNE.L   _00000002
002005C4  7E00                     971              MOVE.L #0,D7                        ; read the 16 bit address, we'll stomp on D7 for this since it's sort of like the address accumulator
002005C6                           972m             DOWNLOAD D2,D3                      ; top byte
002005C6                           973m WAIT_FOR_READY_54                               ; WAIT UNTIL THE THERE IS SPACE TO SEND
002005C6                           974m 
002005C6  1639 00C00003            975m     MOVE.B DUART_SRA,D3                         ; CHECK FOR COMMAND
002005CC  0803 0000                976m     BTST #0,D3                                  ; CHECK FOR CHARACTER
002005D0  6700 0010                977m     BEQ CONTINUE_54                             ; NOTHING, CONTINUE
002005D4                           978m  
002005D4                           979mm     READ_CHAR D2
002005D4                 TRUE      980mm     IFEQ DEBUG
002005D4  1439 00C00007            981mm         MOVE.B DUART_RXA,D2                     ; GOT A CHARACTER, READ IT
002005DA                           982mm     ENDC
002005DA                 FALSE     983mm     IFNE DEBUG
002005DA                           984mm     ENDC
002005DA                           985mm      
002005DA  B43C 001B                986mm     CMP.B #$1B,D2                               ; CHECK FOR ESCAPE AND GO TO START
002005DE  6700 FA28                987mm     BEQ START
002005E2                           988mm     ENDM
002005E2                           989m CONTINUE_54
002005E2  1639 00C00013            990m     MOVE.B DUART_SRB,D3                         ; READ STATUS REGISTER
002005E8  0803 0000                991m     BTST #0,D3                                  ; CHECK FOR CHARACTER
002005EC  67D8                     992m     BEQ WAIT_FOR_READY_54                       ; NOTHING, CHECK AGAIN
002005EE                           993m     
002005EE  1439 00C00017            994m     MOVE.B DUART_RXB,D2                         ; GOT A CHARACTER, READ IT
002005F4  13C2 00E00001            995m     MOVE.B D2,DISPLAY                           ; ECHO TO THE DISPLAY
002005FA                           996m     
002005FA                           997m     ENDM
002005FA                           998m             PRINT_CHAR D2,D3
002005FA                           999m WAIT_FOR_READY_56                               ; WAIT UNTIL THE THERE IS SPACE TO SEND
002005FA                 TRUE     1000m     IFEQ DEBUG
002005FA  1639 00C00003           1001m         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
00200600  0803 0002               1002m         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
00200604  67F4                    1003m         BEQ WAIT_FOR_READY_56                   ; NO SPACE, CHECK AGAIN
00200606  13C2 00C00007           1004m         MOVE.B D2,DUART_TXA                     ; SEND THE NEXT CHARACTER
0020060C                          1005m     ENDC
0020060C                          1006m     
0020060C                 FALSE    1007m     IFNE DEBUG
0020060C                          1008m     ENDC
0020060C                          1009m 
0020060C                          1010m     ENDM
0020060C                          1011m             HEX2BIN D2,D2,A0
0020060C  41F9 002018EA           1012m     LEA HEX2BIN_LUT,A0                          ; LOAD THE LOOKUP TABLE
00200612  0402 0030               1013m     SUB.B #'0',D2                               ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
00200616  C4BC 000000FF           1014m     AND.L #$FF,D2                               ; IGNORE THE TOP 3 BYTES
0020061C  1430 2000               1015m     MOVE.B 0(A0,D2),D2                          ; USE THAT AS AN INDEX INTO THE LUT      
00200620                          1016m     ENDM
00200620  8E82                    1017              OR.L D2,D7
00200622  E98F                    1018              LSL.L #4,D7
00200624                          1019m             DOWNLOAD D2,D3         
00200624                          1020m WAIT_FOR_READY_58                               ; WAIT UNTIL THE THERE IS SPACE TO SEND
00200624                          1021m 
00200624  1639 00C00003           1022m     MOVE.B DUART_SRA,D3                         ; CHECK FOR COMMAND
0020062A  0803 0000               1023m     BTST #0,D3                                  ; CHECK FOR CHARACTER
0020062E  6700 0010               1024m     BEQ CONTINUE_58                             ; NOTHING, CONTINUE
00200632                          1025m  
00200632                          1026mm     READ_CHAR D2
00200632                 TRUE     1027mm     IFEQ DEBUG
00200632  1439 00C00007           1028mm         MOVE.B DUART_RXA,D2                     ; GOT A CHARACTER, READ IT
00200638                          1029mm     ENDC
00200638                 FALSE    1030mm     IFNE DEBUG
00200638                          1031mm     ENDC
00200638                          1032mm      
00200638  B43C 001B               1033mm     CMP.B #$1B,D2                               ; CHECK FOR ESCAPE AND GO TO START
0020063C  6700 F9CA               1034mm     BEQ START
00200640                          1035mm     ENDM
00200640                          1036m CONTINUE_58
00200640  1639 00C00013           1037m     MOVE.B DUART_SRB,D3                         ; READ STATUS REGISTER
00200646  0803 0000               1038m     BTST #0,D3                                  ; CHECK FOR CHARACTER
0020064A  67D8                    1039m     BEQ WAIT_FOR_READY_58                       ; NOTHING, CHECK AGAIN
0020064C                          1040m     
0020064C  1439 00C00017           1041m     MOVE.B DUART_RXB,D2                         ; GOT A CHARACTER, READ IT
00200652  13C2 00E00001           1042m     MOVE.B D2,DISPLAY                           ; ECHO TO THE DISPLAY
00200658                          1043m     
00200658                          1044m     ENDM
00200658                          1045m             PRINT_CHAR D2,D3
00200658                          1046m WAIT_FOR_READY_60                               ; WAIT UNTIL THE THERE IS SPACE TO SEND
00200658                 TRUE     1047m     IFEQ DEBUG
00200658  1639 00C00003           1048m         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
0020065E  0803 0002               1049m         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
00200662  67F4                    1050m         BEQ WAIT_FOR_READY_60                   ; NO SPACE, CHECK AGAIN
00200664  13C2 00C00007           1051m         MOVE.B D2,DUART_TXA                     ; SEND THE NEXT CHARACTER
0020066A                          1052m     ENDC
0020066A                          1053m     
0020066A                 FALSE    1054m     IFNE DEBUG
0020066A                          1055m     ENDC
0020066A                          1056m 
0020066A                          1057m     ENDM
0020066A                          1058m             HEX2BIN D2,D2,A0
0020066A  41F9 002018EA           1059m     LEA HEX2BIN_LUT,A0                          ; LOAD THE LOOKUP TABLE
00200670  0402 0030               1060m     SUB.B #'0',D2                               ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
00200674  C4BC 000000FF           1061m     AND.L #$FF,D2                               ; IGNORE THE TOP 3 BYTES
0020067A  1430 2000               1062m     MOVE.B 0(A0,D2),D2                          ; USE THAT AS AN INDEX INTO THE LUT      
0020067E                          1063m     ENDM
0020067E  8E82                    1064              OR.L D2,D7
00200680                          1065          
00200680  DC87                    1066              ADD.L D7,D6                         ; add top byte of address into checksum
00200682                          1067  
00200682  E98F                    1068              LSL.L #4,D7                         ; bottom byte
00200684                          1069m             DOWNLOAD D2,D3
00200684                          1070m WAIT_FOR_READY_62                               ; WAIT UNTIL THE THERE IS SPACE TO SEND
00200684                          1071m 
00200684  1639 00C00003           1072m     MOVE.B DUART_SRA,D3                         ; CHECK FOR COMMAND
0020068A  0803 0000               1073m     BTST #0,D3                                  ; CHECK FOR CHARACTER
0020068E  6700 0010               1074m     BEQ CONTINUE_62                             ; NOTHING, CONTINUE
00200692                          1075m  
00200692                          1076mm     READ_CHAR D2
00200692                 TRUE     1077mm     IFEQ DEBUG
00200692  1439 00C00007           1078mm         MOVE.B DUART_RXA,D2                     ; GOT A CHARACTER, READ IT
00200698                          1079mm     ENDC
00200698                 FALSE    1080mm     IFNE DEBUG
00200698                          1081mm     ENDC
00200698                          1082mm      
00200698  B43C 001B               1083mm     CMP.B #$1B,D2                               ; CHECK FOR ESCAPE AND GO TO START
0020069C  6700 F96A               1084mm     BEQ START
002006A0                          1085mm     ENDM
002006A0                          1086m CONTINUE_62
002006A0  1639 00C00013           1087m     MOVE.B DUART_SRB,D3                         ; READ STATUS REGISTER
002006A6  0803 0000               1088m     BTST #0,D3                                  ; CHECK FOR CHARACTER
002006AA  67D8                    1089m     BEQ WAIT_FOR_READY_62                       ; NOTHING, CHECK AGAIN
002006AC                          1090m     
002006AC  1439 00C00017           1091m     MOVE.B DUART_RXB,D2                         ; GOT A CHARACTER, READ IT
002006B2  13C2 00E00001           1092m     MOVE.B D2,DISPLAY                           ; ECHO TO THE DISPLAY
002006B8                          1093m     
002006B8                          1094m     ENDM
002006B8                          1095m             PRINT_CHAR D2,D3
002006B8                          1096m WAIT_FOR_READY_64                               ; WAIT UNTIL THE THERE IS SPACE TO SEND
002006B8                 TRUE     1097m     IFEQ DEBUG
002006B8  1639 00C00003           1098m         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
002006BE  0803 0002               1099m         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
002006C2  67F4                    1100m         BEQ WAIT_FOR_READY_64                   ; NO SPACE, CHECK AGAIN
002006C4  13C2 00C00007           1101m         MOVE.B D2,DUART_TXA                     ; SEND THE NEXT CHARACTER
002006CA                          1102m     ENDC
002006CA                          1103m     
002006CA                 FALSE    1104m     IFNE DEBUG
002006CA                          1105m     ENDC
002006CA                          1106m 
002006CA                          1107m     ENDM
002006CA                          1108m             HEX2BIN D2,D2,A0
002006CA  41F9 002018EA           1109m     LEA HEX2BIN_LUT,A0                          ; LOAD THE LOOKUP TABLE
002006D0  0402 0030               1110m     SUB.B #'0',D2                               ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
002006D4  C4BC 000000FF           1111m     AND.L #$FF,D2                               ; IGNORE THE TOP 3 BYTES
002006DA  1430 2000               1112m     MOVE.B 0(A0,D2),D2                          ; USE THAT AS AN INDEX INTO THE LUT      
002006DE                          1113m     ENDM
002006DE  8E82                    1114              OR.L D2,D7
002006E0  E98F                    1115              LSL.L #4,D7        
002006E2                          1116m             DOWNLOAD D2,D3
002006E2                          1117m WAIT_FOR_READY_66                               ; WAIT UNTIL THE THERE IS SPACE TO SEND
002006E2                          1118m 
002006E2  1639 00C00003           1119m     MOVE.B DUART_SRA,D3                         ; CHECK FOR COMMAND
002006E8  0803 0000               1120m     BTST #0,D3                                  ; CHECK FOR CHARACTER
002006EC  6700 0010               1121m     BEQ CONTINUE_66                             ; NOTHING, CONTINUE
002006F0                          1122m  
002006F0                          1123mm     READ_CHAR D2
002006F0                 TRUE     1124mm     IFEQ DEBUG
002006F0  1439 00C00007           1125mm         MOVE.B DUART_RXA,D2                     ; GOT A CHARACTER, READ IT
002006F6                          1126mm     ENDC
002006F6                 FALSE    1127mm     IFNE DEBUG
002006F6                          1128mm     ENDC
002006F6                          1129mm      
002006F6  B43C 001B               1130mm     CMP.B #$1B,D2                               ; CHECK FOR ESCAPE AND GO TO START
002006FA  6700 F90C               1131mm     BEQ START
002006FE                          1132mm     ENDM
002006FE                          1133m CONTINUE_66
002006FE  1639 00C00013           1134m     MOVE.B DUART_SRB,D3                         ; READ STATUS REGISTER
00200704  0803 0000               1135m     BTST #0,D3                                  ; CHECK FOR CHARACTER
00200708  67D8                    1136m     BEQ WAIT_FOR_READY_66                       ; NOTHING, CHECK AGAIN
0020070A                          1137m     
0020070A  1439 00C00017           1138m     MOVE.B DUART_RXB,D2                         ; GOT A CHARACTER, READ IT
00200710  13C2 00E00001           1139m     MOVE.B D2,DISPLAY                           ; ECHO TO THE DISPLAY
00200716                          1140m     
00200716                          1141m     ENDM
00200716                          1142m             PRINT_CHAR D2,D3
00200716                          1143m WAIT_FOR_READY_68                               ; WAIT UNTIL THE THERE IS SPACE TO SEND
00200716                 TRUE     1144m     IFEQ DEBUG
00200716  1639 00C00003           1145m         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
0020071C  0803 0002               1146m         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
00200720  67F4                    1147m         BEQ WAIT_FOR_READY_68                   ; NO SPACE, CHECK AGAIN
00200722  13C2 00C00007           1148m         MOVE.B D2,DUART_TXA                     ; SEND THE NEXT CHARACTER
00200728                          1149m     ENDC
00200728                          1150m     
00200728                 FALSE    1151m     IFNE DEBUG
00200728                          1152m     ENDC
00200728                          1153m 
00200728                          1154m     ENDM
00200728                          1155m             HEX2BIN D2,D2,A0
00200728  41F9 002018EA           1156m     LEA HEX2BIN_LUT,A0                          ; LOAD THE LOOKUP TABLE
0020072E  0402 0030               1157m     SUB.B #'0',D2                               ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
00200732  C4BC 000000FF           1158m     AND.L #$FF,D2                               ; IGNORE THE TOP 3 BYTES
00200738  1430 2000               1159m     MOVE.B 0(A0,D2),D2                          ; USE THAT AS AN INDEX INTO THE LUT      
0020073C                          1160m     ENDM
0020073C  8E82                    1161              OR.L D2,D7
0020073E                          1162          
0020073E  7400                    1163              MOVE.L #0,D2                        ; rextract bottom byte of address and add into checksum
00200740  1407                    1164              MOVE.B D7,D2
00200742  DC82                    1165              ADD.L D2,D6
00200744                          1166          
00200744  DE8B                    1167              ADD.L A3,D7                         ; add in the offset
00200746                          1168          
00200746  5785                    1169              SUB.L #3,D5                         ; subtract three bytes for 16 bit address and 1 byte checksum
00200748                          1170          
00200748  0807 0000               1171              BTST #0,D7                          ; deal with odd addresses
0020074C                          1172  
0020074C  2247                    1173              MOVE.L D7,A1                        ; put the address in an address register, and we can now re-use D7
0020074E  6700 00D0               1174              BEQ EVEN
00200752                          1175                  
00200752  5385                    1176              SUB.L #1,D5
00200754  5389                    1177              SUB.L #1,A1
00200756                          1178          
00200756  7E00                    1179              MOVE.L #0,D7
00200758                          1180m             DOWNLOAD D2,D3                      ; MS 4 bits
00200758                          1181m WAIT_FOR_READY_70                               ; WAIT UNTIL THE THERE IS SPACE TO SEND
00200758                          1182m 
00200758  1639 00C00003           1183m     MOVE.B DUART_SRA,D3                         ; CHECK FOR COMMAND
0020075E  0803 0000               1184m     BTST #0,D3                                  ; CHECK FOR CHARACTER
00200762  6700 0010               1185m     BEQ CONTINUE_70                             ; NOTHING, CONTINUE
00200766                          1186m  
00200766                          1187mm     READ_CHAR D2
00200766                 TRUE     1188mm     IFEQ DEBUG
00200766  1439 00C00007           1189mm         MOVE.B DUART_RXA,D2                     ; GOT A CHARACTER, READ IT
0020076C                          1190mm     ENDC
0020076C                 FALSE    1191mm     IFNE DEBUG
0020076C                          1192mm     ENDC
0020076C                          1193mm      
0020076C  B43C 001B               1194mm     CMP.B #$1B,D2                               ; CHECK FOR ESCAPE AND GO TO START
00200770  6700 F896               1195mm     BEQ START
00200774                          1196mm     ENDM
00200774                          1197m CONTINUE_70
00200774  1639 00C00013           1198m     MOVE.B DUART_SRB,D3                         ; READ STATUS REGISTER
0020077A  0803 0000               1199m     BTST #0,D3                                  ; CHECK FOR CHARACTER
0020077E  67D8                    1200m     BEQ WAIT_FOR_READY_70                       ; NOTHING, CHECK AGAIN
00200780                          1201m     
00200780  1439 00C00017           1202m     MOVE.B DUART_RXB,D2                         ; GOT A CHARACTER, READ IT
00200786  13C2 00E00001           1203m     MOVE.B D2,DISPLAY                           ; ECHO TO THE DISPLAY
0020078C                          1204m     
0020078C                          1205m     ENDM
0020078C                          1206m             PRINT_CHAR D2,D3
0020078C                          1207m WAIT_FOR_READY_72                               ; WAIT UNTIL THE THERE IS SPACE TO SEND
0020078C                 TRUE     1208m     IFEQ DEBUG
0020078C  1639 00C00003           1209m         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
00200792  0803 0002               1210m         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
00200796  67F4                    1211m         BEQ WAIT_FOR_READY_72                   ; NO SPACE, CHECK AGAIN
00200798  13C2 00C00007           1212m         MOVE.B D2,DUART_TXA                     ; SEND THE NEXT CHARACTER
0020079E                          1213m     ENDC
0020079E                          1214m     
0020079E                 FALSE    1215m     IFNE DEBUG
0020079E                          1216m     ENDC
0020079E                          1217m 
0020079E                          1218m     ENDM
0020079E                          1219m             HEX2BIN D2,D2,A0
0020079E  41F9 002018EA           1220m     LEA HEX2BIN_LUT,A0                          ; LOAD THE LOOKUP TABLE
002007A4  0402 0030               1221m     SUB.B #'0',D2                               ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
002007A8  C4BC 000000FF           1222m     AND.L #$FF,D2                               ; IGNORE THE TOP 3 BYTES
002007AE  1430 2000               1223m     MOVE.B 0(A0,D2),D2                          ; USE THAT AS AN INDEX INTO THE LUT      
002007B2                          1224m     ENDM
002007B2  8E82                    1225              OR.L D2,D7
002007B4  E98F                    1226              LSL.L #4,D7
002007B6                          1227               
002007B6                          1228m             DOWNLOAD D2,D3                      ; LS 4 bits    
002007B6                          1229m WAIT_FOR_READY_74                               ; WAIT UNTIL THE THERE IS SPACE TO SEND
002007B6                          1230m 
002007B6  1639 00C00003           1231m     MOVE.B DUART_SRA,D3                         ; CHECK FOR COMMAND
002007BC  0803 0000               1232m     BTST #0,D3                                  ; CHECK FOR CHARACTER
002007C0  6700 0010               1233m     BEQ CONTINUE_74                             ; NOTHING, CONTINUE
002007C4                          1234m  
002007C4                          1235mm     READ_CHAR D2
002007C4                 TRUE     1236mm     IFEQ DEBUG
002007C4  1439 00C00007           1237mm         MOVE.B DUART_RXA,D2                     ; GOT A CHARACTER, READ IT
002007CA                          1238mm     ENDC
002007CA                 FALSE    1239mm     IFNE DEBUG
002007CA                          1240mm     ENDC
002007CA                          1241mm      
002007CA  B43C 001B               1242mm     CMP.B #$1B,D2                               ; CHECK FOR ESCAPE AND GO TO START
002007CE  6700 F838               1243mm     BEQ START
002007D2                          1244mm     ENDM
002007D2                          1245m CONTINUE_74
002007D2  1639 00C00013           1246m     MOVE.B DUART_SRB,D3                         ; READ STATUS REGISTER
002007D8  0803 0000               1247m     BTST #0,D3                                  ; CHECK FOR CHARACTER
002007DC  67D8                    1248m     BEQ WAIT_FOR_READY_74                       ; NOTHING, CHECK AGAIN
002007DE                          1249m     
002007DE  1439 00C00017           1250m     MOVE.B DUART_RXB,D2                         ; GOT A CHARACTER, READ IT
002007E4  13C2 00E00001           1251m     MOVE.B D2,DISPLAY                           ; ECHO TO THE DISPLAY
002007EA                          1252m     
002007EA                          1253m     ENDM
002007EA                          1254m             PRINT_CHAR D2,D3
002007EA                          1255m WAIT_FOR_READY_76                               ; WAIT UNTIL THE THERE IS SPACE TO SEND
002007EA                 TRUE     1256m     IFEQ DEBUG
002007EA  1639 00C00003           1257m         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
002007F0  0803 0002               1258m         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
002007F4  67F4                    1259m         BEQ WAIT_FOR_READY_76                   ; NO SPACE, CHECK AGAIN
002007F6  13C2 00C00007           1260m         MOVE.B D2,DUART_TXA                     ; SEND THE NEXT CHARACTER
002007FC                          1261m     ENDC
002007FC                          1262m     
002007FC                 FALSE    1263m     IFNE DEBUG
002007FC                          1264m     ENDC
002007FC                          1265m 
002007FC                          1266m     ENDM
002007FC                          1267m             HEX2BIN D2,D2,A0
002007FC  41F9 002018EA           1268m     LEA HEX2BIN_LUT,A0                          ; LOAD THE LOOKUP TABLE
00200802  0402 0030               1269m     SUB.B #'0',D2                               ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
00200806  C4BC 000000FF           1270m     AND.L #$FF,D2                               ; IGNORE THE TOP 3 BYTES
0020080C  1430 2000               1271m     MOVE.B 0(A0,D2),D2                          ; USE THAT AS AN INDEX INTO THE LUT      
00200810                          1272m     ENDM
00200810  8E82                    1273              OR.L D2,D7
00200812                          1274                          
00200812  DC87                    1275              ADD.L D7,D6                         ; add into checksum
00200814                          1276                        
00200814  3611                    1277              MOVE.W (A1),D3                      ; get the current data and replace the bottom byte
00200816                          1278          
00200816  0243 FF00               1279              ANDI.W #$FF00,D3
0020081A  8647                    1280              OR.W D7,D3
0020081C                          1281          
0020081C  3283                    1282              MOVE.W D3,(A1)                      ; store it!
0020081E  5489                    1283              ADD.L #2,A1
00200820                          1284  EVEN        
00200820                          1285              WHILE.L D5 <GE> #2 DO               ; read the data bytes
00200820                          1286s _10000000
00200820  BABC 00000002           1287s     CMP.L   #2,D5
00200826  6D00 018A               1288s     BLT _10000001
0020082A  5585                    1289                  SUB.L #2,D5
0020082C  7E00                    1290                  MOVE.L #0,D7                    ; D7 holds the word
0020082E                          1291              
0020082E                          1292m                 DOWNLOAD D2,D3                  ; MS 4 bits
0020082E                          1293m WAIT_FOR_READY_78                               ; WAIT UNTIL THE THERE IS SPACE TO SEND
0020082E                          1294m 
0020082E  1639 00C00003           1295m     MOVE.B DUART_SRA,D3                         ; CHECK FOR COMMAND
00200834  0803 0000               1296m     BTST #0,D3                                  ; CHECK FOR CHARACTER
00200838  6700 0010               1297m     BEQ CONTINUE_78                             ; NOTHING, CONTINUE
0020083C                          1298m  
0020083C                          1299mm     READ_CHAR D2
0020083C                 TRUE     1300mm     IFEQ DEBUG
0020083C  1439 00C00007           1301mm         MOVE.B DUART_RXA,D2                     ; GOT A CHARACTER, READ IT
00200842                          1302mm     ENDC
00200842                 FALSE    1303mm     IFNE DEBUG
00200842                          1304mm     ENDC
00200842                          1305mm      
00200842  B43C 001B               1306mm     CMP.B #$1B,D2                               ; CHECK FOR ESCAPE AND GO TO START
00200846  6700 F7C0               1307mm     BEQ START
0020084A                          1308mm     ENDM
0020084A                          1309m CONTINUE_78
0020084A  1639 00C00013           1310m     MOVE.B DUART_SRB,D3                         ; READ STATUS REGISTER
00200850  0803 0000               1311m     BTST #0,D3                                  ; CHECK FOR CHARACTER
00200854  67D8                    1312m     BEQ WAIT_FOR_READY_78                       ; NOTHING, CHECK AGAIN
00200856                          1313m     
00200856  1439 00C00017           1314m     MOVE.B DUART_RXB,D2                         ; GOT A CHARACTER, READ IT
0020085C  13C2 00E00001           1315m     MOVE.B D2,DISPLAY                           ; ECHO TO THE DISPLAY
00200862                          1316m     
00200862                          1317m     ENDM
00200862                          1318m                 PRINT_CHAR D2,D3
00200862                          1319m WAIT_FOR_READY_80                               ; WAIT UNTIL THE THERE IS SPACE TO SEND
00200862                 TRUE     1320m     IFEQ DEBUG
00200862  1639 00C00003           1321m         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
00200868  0803 0002               1322m         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
0020086C  67F4                    1323m         BEQ WAIT_FOR_READY_80                   ; NO SPACE, CHECK AGAIN
0020086E  13C2 00C00007           1324m         MOVE.B D2,DUART_TXA                     ; SEND THE NEXT CHARACTER
00200874                          1325m     ENDC
00200874                          1326m     
00200874                 FALSE    1327m     IFNE DEBUG
00200874                          1328m     ENDC
00200874                          1329m 
00200874                          1330m     ENDM
00200874                          1331m                 HEX2BIN D2,D2,A0
00200874  41F9 002018EA           1332m     LEA HEX2BIN_LUT,A0                          ; LOAD THE LOOKUP TABLE
0020087A  0402 0030               1333m     SUB.B #'0',D2                               ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
0020087E  C4BC 000000FF           1334m     AND.L #$FF,D2                               ; IGNORE THE TOP 3 BYTES
00200884  1430 2000               1335m     MOVE.B 0(A0,D2),D2                          ; USE THAT AS AN INDEX INTO THE LUT      
00200888                          1336m     ENDM
00200888  8E82                    1337                  OR.L D2,D7
0020088A  E98F                    1338                  LSL.L #4,D7
0020088C                          1339               
0020088C                          1340m                 DOWNLOAD D2,D3                  ; LS 4 bits    
0020088C                          1341m WAIT_FOR_READY_82                               ; WAIT UNTIL THE THERE IS SPACE TO SEND
0020088C                          1342m 
0020088C  1639 00C00003           1343m     MOVE.B DUART_SRA,D3                         ; CHECK FOR COMMAND
00200892  0803 0000               1344m     BTST #0,D3                                  ; CHECK FOR CHARACTER
00200896  6700 0010               1345m     BEQ CONTINUE_82                             ; NOTHING, CONTINUE
0020089A                          1346m  
0020089A                          1347mm     READ_CHAR D2
0020089A                 TRUE     1348mm     IFEQ DEBUG
0020089A  1439 00C00007           1349mm         MOVE.B DUART_RXA,D2                     ; GOT A CHARACTER, READ IT
002008A0                          1350mm     ENDC
002008A0                 FALSE    1351mm     IFNE DEBUG
002008A0                          1352mm     ENDC
002008A0                          1353mm      
002008A0  B43C 001B               1354mm     CMP.B #$1B,D2                               ; CHECK FOR ESCAPE AND GO TO START
002008A4  6700 F762               1355mm     BEQ START
002008A8                          1356mm     ENDM
002008A8                          1357m CONTINUE_82
002008A8  1639 00C00013           1358m     MOVE.B DUART_SRB,D3                         ; READ STATUS REGISTER
002008AE  0803 0000               1359m     BTST #0,D3                                  ; CHECK FOR CHARACTER
002008B2  67D8                    1360m     BEQ WAIT_FOR_READY_82                       ; NOTHING, CHECK AGAIN
002008B4                          1361m     
002008B4  1439 00C00017           1362m     MOVE.B DUART_RXB,D2                         ; GOT A CHARACTER, READ IT
002008BA  13C2 00E00001           1363m     MOVE.B D2,DISPLAY                           ; ECHO TO THE DISPLAY
002008C0                          1364m     
002008C0                          1365m     ENDM
002008C0                          1366m                 PRINT_CHAR D2,D3
002008C0                          1367m WAIT_FOR_READY_84                               ; WAIT UNTIL THE THERE IS SPACE TO SEND
002008C0                 TRUE     1368m     IFEQ DEBUG
002008C0  1639 00C00003           1369m         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
002008C6  0803 0002               1370m         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
002008CA  67F4                    1371m         BEQ WAIT_FOR_READY_84                   ; NO SPACE, CHECK AGAIN
002008CC  13C2 00C00007           1372m         MOVE.B D2,DUART_TXA                     ; SEND THE NEXT CHARACTER
002008D2                          1373m     ENDC
002008D2                          1374m     
002008D2                 FALSE    1375m     IFNE DEBUG
002008D2                          1376m     ENDC
002008D2                          1377m 
002008D2                          1378m     ENDM
002008D2                          1379m                 HEX2BIN D2,D2,A0
002008D2  41F9 002018EA           1380m     LEA HEX2BIN_LUT,A0                          ; LOAD THE LOOKUP TABLE
002008D8  0402 0030               1381m     SUB.B #'0',D2                               ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
002008DC  C4BC 000000FF           1382m     AND.L #$FF,D2                               ; IGNORE THE TOP 3 BYTES
002008E2  1430 2000               1383m     MOVE.B 0(A0,D2),D2                          ; USE THAT AS AN INDEX INTO THE LUT      
002008E6                          1384m     ENDM
002008E6  8E82                    1385                  OR.L D2,D7
002008E8                          1386                          
002008E8  DC87                    1387                  ADD.L D7,D6                     ; add into checksum
002008EA                          1388              
002008EA  E98F                    1389                  LSL.L #4,D7
002008EC                          1390m                 DOWNLOAD D2,D3                  ; MS 4 bits
002008EC                          1391m WAIT_FOR_READY_86                               ; WAIT UNTIL THE THERE IS SPACE TO SEND
002008EC                          1392m 
002008EC  1639 00C00003           1393m     MOVE.B DUART_SRA,D3                         ; CHECK FOR COMMAND
002008F2  0803 0000               1394m     BTST #0,D3                                  ; CHECK FOR CHARACTER
002008F6  6700 0010               1395m     BEQ CONTINUE_86                             ; NOTHING, CONTINUE
002008FA                          1396m  
002008FA                          1397mm     READ_CHAR D2
002008FA                 TRUE     1398mm     IFEQ DEBUG
002008FA  1439 00C00007           1399mm         MOVE.B DUART_RXA,D2                     ; GOT A CHARACTER, READ IT
00200900                          1400mm     ENDC
00200900                 FALSE    1401mm     IFNE DEBUG
00200900                          1402mm     ENDC
00200900                          1403mm      
00200900  B43C 001B               1404mm     CMP.B #$1B,D2                               ; CHECK FOR ESCAPE AND GO TO START
00200904  6700 F702               1405mm     BEQ START
00200908                          1406mm     ENDM
00200908                          1407m CONTINUE_86
00200908  1639 00C00013           1408m     MOVE.B DUART_SRB,D3                         ; READ STATUS REGISTER
0020090E  0803 0000               1409m     BTST #0,D3                                  ; CHECK FOR CHARACTER
00200912  67D8                    1410m     BEQ WAIT_FOR_READY_86                       ; NOTHING, CHECK AGAIN
00200914                          1411m     
00200914  1439 00C00017           1412m     MOVE.B DUART_RXB,D2                         ; GOT A CHARACTER, READ IT
0020091A  13C2 00E00001           1413m     MOVE.B D2,DISPLAY                           ; ECHO TO THE DISPLAY
00200920                          1414m     
00200920                          1415m     ENDM
00200920                          1416m                 PRINT_CHAR D2,D3
00200920                          1417m WAIT_FOR_READY_88                               ; WAIT UNTIL THE THERE IS SPACE TO SEND
00200920                 TRUE     1418m     IFEQ DEBUG
00200920  1639 00C00003           1419m         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
00200926  0803 0002               1420m         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
0020092A  67F4                    1421m         BEQ WAIT_FOR_READY_88                   ; NO SPACE, CHECK AGAIN
0020092C  13C2 00C00007           1422m         MOVE.B D2,DUART_TXA                     ; SEND THE NEXT CHARACTER
00200932                          1423m     ENDC
00200932                          1424m     
00200932                 FALSE    1425m     IFNE DEBUG
00200932                          1426m     ENDC
00200932                          1427m 
00200932                          1428m     ENDM
00200932                          1429m                 HEX2BIN D2,D2,A0
00200932  41F9 002018EA           1430m     LEA HEX2BIN_LUT,A0                          ; LOAD THE LOOKUP TABLE
00200938  0402 0030               1431m     SUB.B #'0',D2                               ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
0020093C  C4BC 000000FF           1432m     AND.L #$FF,D2                               ; IGNORE THE TOP 3 BYTES
00200942  1430 2000               1433m     MOVE.B 0(A0,D2),D2                          ; USE THAT AS AN INDEX INTO THE LUT      
00200946                          1434m     ENDM
00200946  8E82                    1435                  OR.L D2,D7
00200948                          1436               
00200948  E98F                    1437                  LSL.L #4,D7
0020094A                          1438m                 DOWNLOAD D2,D3                  ; LS 4 bits    
0020094A                          1439m WAIT_FOR_READY_90                               ; WAIT UNTIL THE THERE IS SPACE TO SEND
0020094A                          1440m 
0020094A  1639 00C00003           1441m     MOVE.B DUART_SRA,D3                         ; CHECK FOR COMMAND
00200950  0803 0000               1442m     BTST #0,D3                                  ; CHECK FOR CHARACTER
00200954  6700 0010               1443m     BEQ CONTINUE_90                             ; NOTHING, CONTINUE
00200958                          1444m  
00200958                          1445mm     READ_CHAR D2
00200958                 TRUE     1446mm     IFEQ DEBUG
00200958  1439 00C00007           1447mm         MOVE.B DUART_RXA,D2                     ; GOT A CHARACTER, READ IT
0020095E                          1448mm     ENDC
0020095E                 FALSE    1449mm     IFNE DEBUG
0020095E                          1450mm     ENDC
0020095E                          1451mm      
0020095E  B43C 001B               1452mm     CMP.B #$1B,D2                               ; CHECK FOR ESCAPE AND GO TO START
00200962  6700 F6A4               1453mm     BEQ START
00200966                          1454mm     ENDM
00200966                          1455m CONTINUE_90
00200966  1639 00C00013           1456m     MOVE.B DUART_SRB,D3                         ; READ STATUS REGISTER
0020096C  0803 0000               1457m     BTST #0,D3                                  ; CHECK FOR CHARACTER
00200970  67D8                    1458m     BEQ WAIT_FOR_READY_90                       ; NOTHING, CHECK AGAIN
00200972                          1459m     
00200972  1439 00C00017           1460m     MOVE.B DUART_RXB,D2                         ; GOT A CHARACTER, READ IT
00200978  13C2 00E00001           1461m     MOVE.B D2,DISPLAY                           ; ECHO TO THE DISPLAY
0020097E                          1462m     
0020097E                          1463m     ENDM
0020097E                          1464m                 PRINT_CHAR D2,D3
0020097E                          1465m WAIT_FOR_READY_92                               ; WAIT UNTIL THE THERE IS SPACE TO SEND
0020097E                 TRUE     1466m     IFEQ DEBUG
0020097E  1639 00C00003           1467m         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
00200984  0803 0002               1468m         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
00200988  67F4                    1469m         BEQ WAIT_FOR_READY_92                   ; NO SPACE, CHECK AGAIN
0020098A  13C2 00C00007           1470m         MOVE.B D2,DUART_TXA                     ; SEND THE NEXT CHARACTER
00200990                          1471m     ENDC
00200990                          1472m     
00200990                 FALSE    1473m     IFNE DEBUG
00200990                          1474m     ENDC
00200990                          1475m 
00200990                          1476m     ENDM
00200990                          1477m                 HEX2BIN D2,D2,A0
00200990  41F9 002018EA           1478m     LEA HEX2BIN_LUT,A0                          ; LOAD THE LOOKUP TABLE
00200996  0402 0030               1479m     SUB.B #'0',D2                               ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
0020099A  C4BC 000000FF           1480m     AND.L #$FF,D2                               ; IGNORE THE TOP 3 BYTES
002009A0  1430 2000               1481m     MOVE.B 0(A0,D2),D2                          ; USE THAT AS AN INDEX INTO THE LUT      
002009A4                          1482m     ENDM
002009A4  8E82                    1483                  OR.L D2,D7
002009A6                          1484              
002009A6  7400                    1485                  MOVE.L #0,D2                    ; rextract bottom byte of address and add into checksum
002009A8  1407                    1486                  MOVE.B D7,D2
002009AA  DC82                    1487                  ADD.L D2,D6
002009AC                          1488              
002009AC  32C7                    1489                  MOVE.W D7,(A1)+                 ; store it!
002009AE                          1490              ENDW
002009AE  6000 FE70               1491s     BRA _10000000
002009B2                          1492s _10000001
002009B2                          1493          
002009B2                          1494              IF D5 <EQ> #1 THEN
002009B2  BA7C 0001               1495s     CMP.W   #1,D5
002009B6  6600 00CE               1496s     BNE _00000003
002009BA  7E00                    1497                  MOVE.L #0,D7                    ; D7 holds the word
002009BC                          1498                      
002009BC                          1499m                 DOWNLOAD D2,D3                  ; MS 4 bits
002009BC                          1500m WAIT_FOR_READY_94                               ; WAIT UNTIL THE THERE IS SPACE TO SEND
002009BC                          1501m 
002009BC  1639 00C00003           1502m     MOVE.B DUART_SRA,D3                         ; CHECK FOR COMMAND
002009C2  0803 0000               1503m     BTST #0,D3                                  ; CHECK FOR CHARACTER
002009C6  6700 0010               1504m     BEQ CONTINUE_94                             ; NOTHING, CONTINUE
002009CA                          1505m  
002009CA                          1506mm     READ_CHAR D2
002009CA                 TRUE     1507mm     IFEQ DEBUG
002009CA  1439 00C00007           1508mm         MOVE.B DUART_RXA,D2                     ; GOT A CHARACTER, READ IT
002009D0                          1509mm     ENDC
002009D0                 FALSE    1510mm     IFNE DEBUG
002009D0                          1511mm     ENDC
002009D0                          1512mm      
002009D0  B43C 001B               1513mm     CMP.B #$1B,D2                               ; CHECK FOR ESCAPE AND GO TO START
002009D4  6700 F632               1514mm     BEQ START
002009D8                          1515mm     ENDM
002009D8                          1516m CONTINUE_94
002009D8  1639 00C00013           1517m     MOVE.B DUART_SRB,D3                         ; READ STATUS REGISTER
002009DE  0803 0000               1518m     BTST #0,D3                                  ; CHECK FOR CHARACTER
002009E2  67D8                    1519m     BEQ WAIT_FOR_READY_94                       ; NOTHING, CHECK AGAIN
002009E4                          1520m     
002009E4  1439 00C00017           1521m     MOVE.B DUART_RXB,D2                         ; GOT A CHARACTER, READ IT
002009EA  13C2 00E00001           1522m     MOVE.B D2,DISPLAY                           ; ECHO TO THE DISPLAY
002009F0                          1523m     
002009F0                          1524m     ENDM
002009F0                          1525m                 PRINT_CHAR D2,D3
002009F0                          1526m WAIT_FOR_READY_96                               ; WAIT UNTIL THE THERE IS SPACE TO SEND
002009F0                 TRUE     1527m     IFEQ DEBUG
002009F0  1639 00C00003           1528m         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
002009F6  0803 0002               1529m         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
002009FA  67F4                    1530m         BEQ WAIT_FOR_READY_96                   ; NO SPACE, CHECK AGAIN
002009FC  13C2 00C00007           1531m         MOVE.B D2,DUART_TXA                     ; SEND THE NEXT CHARACTER
00200A02                          1532m     ENDC
00200A02                          1533m     
00200A02                 FALSE    1534m     IFNE DEBUG
00200A02                          1535m     ENDC
00200A02                          1536m 
00200A02                          1537m     ENDM
00200A02                          1538m                 HEX2BIN D2,D2,A0
00200A02  41F9 002018EA           1539m     LEA HEX2BIN_LUT,A0                          ; LOAD THE LOOKUP TABLE
00200A08  0402 0030               1540m     SUB.B #'0',D2                               ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
00200A0C  C4BC 000000FF           1541m     AND.L #$FF,D2                               ; IGNORE THE TOP 3 BYTES
00200A12  1430 2000               1542m     MOVE.B 0(A0,D2),D2                          ; USE THAT AS AN INDEX INTO THE LUT      
00200A16                          1543m     ENDM
00200A16  8E82                    1544                  OR.L D2,D7
00200A18  E98F                    1545              LSL.L #4,D7
00200A1A                          1546               
00200A1A                          1547m             DOWNLOAD D2,D3                      ; LS 4 bits    
00200A1A                          1548m WAIT_FOR_READY_98                               ; WAIT UNTIL THE THERE IS SPACE TO SEND
00200A1A                          1549m 
00200A1A  1639 00C00003           1550m     MOVE.B DUART_SRA,D3                         ; CHECK FOR COMMAND
00200A20  0803 0000               1551m     BTST #0,D3                                  ; CHECK FOR CHARACTER
00200A24  6700 0010               1552m     BEQ CONTINUE_98                             ; NOTHING, CONTINUE
00200A28                          1553m  
00200A28                          1554mm     READ_CHAR D2
00200A28                 TRUE     1555mm     IFEQ DEBUG
00200A28  1439 00C00007           1556mm         MOVE.B DUART_RXA,D2                     ; GOT A CHARACTER, READ IT
00200A2E                          1557mm     ENDC
00200A2E                 FALSE    1558mm     IFNE DEBUG
00200A2E                          1559mm     ENDC
00200A2E                          1560mm      
00200A2E  B43C 001B               1561mm     CMP.B #$1B,D2                               ; CHECK FOR ESCAPE AND GO TO START
00200A32  6700 F5D4               1562mm     BEQ START
00200A36                          1563mm     ENDM
00200A36                          1564m CONTINUE_98
00200A36  1639 00C00013           1565m     MOVE.B DUART_SRB,D3                         ; READ STATUS REGISTER
00200A3C  0803 0000               1566m     BTST #0,D3                                  ; CHECK FOR CHARACTER
00200A40  67D8                    1567m     BEQ WAIT_FOR_READY_98                       ; NOTHING, CHECK AGAIN
00200A42                          1568m     
00200A42  1439 00C00017           1569m     MOVE.B DUART_RXB,D2                         ; GOT A CHARACTER, READ IT
00200A48  13C2 00E00001           1570m     MOVE.B D2,DISPLAY                           ; ECHO TO THE DISPLAY
00200A4E                          1571m     
00200A4E                          1572m     ENDM
00200A4E                          1573m             PRINT_CHAR D2,D3
00200A4E                          1574m WAIT_FOR_READY_100                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00200A4E                 TRUE     1575m     IFEQ DEBUG
00200A4E  1639 00C00003           1576m         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
00200A54  0803 0002               1577m         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
00200A58  67F4                    1578m         BEQ WAIT_FOR_READY_100                      ; NO SPACE, CHECK AGAIN
00200A5A  13C2 00C00007           1579m         MOVE.B D2,DUART_TXA                     ; SEND THE NEXT CHARACTER
00200A60                          1580m     ENDC
00200A60                          1581m     
00200A60                 FALSE    1582m     IFNE DEBUG
00200A60                          1583m     ENDC
00200A60                          1584m 
00200A60                          1585m     ENDM
00200A60                          1586m             HEX2BIN D2,D2,A0
00200A60  41F9 002018EA           1587m     LEA HEX2BIN_LUT,A0                          ; LOAD THE LOOKUP TABLE
00200A66  0402 0030               1588m     SUB.B #'0',D2                               ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
00200A6A  C4BC 000000FF           1589m     AND.L #$FF,D2                               ; IGNORE THE TOP 3 BYTES
00200A70  1430 2000               1590m     MOVE.B 0(A0,D2),D2                          ; USE THAT AS AN INDEX INTO THE LUT      
00200A74                          1591m     ENDM
00200A74  8E82                    1592              OR.L D2,D7
00200A76                          1593                          
00200A76  DC87                    1594              ADD.L D7,D6                         ; add into checksum
00200A78                          1595              
00200A78  3611                    1596              MOVE.W (A1),D3                      ; get the current data and replace the top byte
00200A7A  E18F                    1597              LSL.L #8,D7
00200A7C  C6BC 000000FF           1598              AND.L #$00FF,D3
00200A82  8687                    1599              OR.L D7,D3
00200A84                          1600  
00200A84  32C3                    1601              MOVE.W D3,(A1)+                     ; store it!
00200A86                          1602          ENDI
00200A86                          1603s _00000003
00200A86                          1604    
00200A86                          1605m         PRINT_CRLF D3
00200A86                          1606mm     PRINT_CHAR #13,D3                           ; CR
00200A86                          1607mm WAIT_FOR_READY_103                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00200A86                 TRUE     1608mm     IFEQ DEBUG
00200A86  1639 00C00003           1609mm         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
00200A8C  0803 0002               1610mm         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
00200A90  67F4                    1611mm         BEQ WAIT_FOR_READY_103                      ; NO SPACE, CHECK AGAIN
00200A92  13FC 000D 00C00007      1612mm         MOVE.B #13,DUART_TXA                    ; SEND THE NEXT CHARACTER
00200A9A                          1613mm     ENDC
00200A9A                          1614mm     
00200A9A                 FALSE    1615mm     IFNE DEBUG
00200A9A                          1616mm     ENDC
00200A9A                          1617mm 
00200A9A                          1618mm     ENDM
00200A9A                          1619mm     PRINT_CHAR #10,D3                           ; LF
00200A9A                          1620mm WAIT_FOR_READY_104                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00200A9A                 TRUE     1621mm     IFEQ DEBUG
00200A9A  1639 00C00003           1622mm         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
00200AA0  0803 0002               1623mm         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
00200AA4  67F4                    1624mm         BEQ WAIT_FOR_READY_104                      ; NO SPACE, CHECK AGAIN
00200AA6  13FC 000A 00C00007      1625mm         MOVE.B #10,DUART_TXA                    ; SEND THE NEXT CHARACTER
00200AAE                          1626mm     ENDC
00200AAE                          1627mm     
00200AAE                 FALSE    1628mm     IFNE DEBUG
00200AAE                          1629mm     ENDC
00200AAE                          1630mm 
00200AAE                          1631mm     ENDM
00200AAE                          1632m     ENDM
00200AAE  43F9 002004A0           1633          LEA WAIT_FOR_SRECORD,A1                 ; next place to go
00200AB4                          1634        ELSE
00200AB4  6000 0812               1635s     BRA _00000004
00200AB8                          1636s _00000002
00200AB8                          1637              IF.B D7 <EQ> #'2' THEN.L            ; 24 bit address data record
00200AB8  BE3C 0032               1638s     CMP.B   #'2',D7
00200ABC  6600 05BA               1639s     BNE.L   _00000005
00200AC0  7E00                    1640                  MOVE.L #0,D7                    ; read the 24 bit address, we'll stomp on D7 for this since it's sort of like the address accumulator
00200AC2                          1641m                 DOWNLOAD D2,D3                  ; top byte
00200AC2                          1642m WAIT_FOR_READY_105                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00200AC2                          1643m 
00200AC2  1639 00C00003           1644m     MOVE.B DUART_SRA,D3                         ; CHECK FOR COMMAND
00200AC8  0803 0000               1645m     BTST #0,D3                                  ; CHECK FOR CHARACTER
00200ACC  6700 0010               1646m     BEQ CONTINUE_105                                ; NOTHING, CONTINUE
00200AD0                          1647m  
00200AD0                          1648mm     READ_CHAR D2
00200AD0                 TRUE     1649mm     IFEQ DEBUG
00200AD0  1439 00C00007           1650mm         MOVE.B DUART_RXA,D2                     ; GOT A CHARACTER, READ IT
00200AD6                          1651mm     ENDC
00200AD6                 FALSE    1652mm     IFNE DEBUG
00200AD6                          1653mm     ENDC
00200AD6                          1654mm      
00200AD6  B43C 001B               1655mm     CMP.B #$1B,D2                               ; CHECK FOR ESCAPE AND GO TO START
00200ADA  6700 F52C               1656mm     BEQ START
00200ADE                          1657mm     ENDM
00200ADE                          1658m CONTINUE_105
00200ADE  1639 00C00013           1659m     MOVE.B DUART_SRB,D3                         ; READ STATUS REGISTER
00200AE4  0803 0000               1660m     BTST #0,D3                                  ; CHECK FOR CHARACTER
00200AE8  67D8                    1661m     BEQ WAIT_FOR_READY_105                      ; NOTHING, CHECK AGAIN
00200AEA                          1662m     
00200AEA  1439 00C00017           1663m     MOVE.B DUART_RXB,D2                         ; GOT A CHARACTER, READ IT
00200AF0  13C2 00E00001           1664m     MOVE.B D2,DISPLAY                           ; ECHO TO THE DISPLAY
00200AF6                          1665m     
00200AF6                          1666m     ENDM
00200AF6                          1667m                 PRINT_CHAR D2,D3
00200AF6                          1668m WAIT_FOR_READY_107                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00200AF6                 TRUE     1669m     IFEQ DEBUG
00200AF6  1639 00C00003           1670m         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
00200AFC  0803 0002               1671m         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
00200B00  67F4                    1672m         BEQ WAIT_FOR_READY_107                      ; NO SPACE, CHECK AGAIN
00200B02  13C2 00C00007           1673m         MOVE.B D2,DUART_TXA                     ; SEND THE NEXT CHARACTER
00200B08                          1674m     ENDC
00200B08                          1675m     
00200B08                 FALSE    1676m     IFNE DEBUG
00200B08                          1677m     ENDC
00200B08                          1678m 
00200B08                          1679m     ENDM
00200B08                          1680m                 HEX2BIN D2,D2,A0
00200B08  41F9 002018EA           1681m     LEA HEX2BIN_LUT,A0                          ; LOAD THE LOOKUP TABLE
00200B0E  0402 0030               1682m     SUB.B #'0',D2                               ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
00200B12  C4BC 000000FF           1683m     AND.L #$FF,D2                               ; IGNORE THE TOP 3 BYTES
00200B18  1430 2000               1684m     MOVE.B 0(A0,D2),D2                          ; USE THAT AS AN INDEX INTO THE LUT      
00200B1C                          1685m     ENDM
00200B1C  8E82                    1686                  OR.L D2,D7
00200B1E  E98F                    1687                  LSL.L #4,D7
00200B20                          1688m                 DOWNLOAD D2,D3         
00200B20                          1689m WAIT_FOR_READY_109                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00200B20                          1690m 
00200B20  1639 00C00003           1691m     MOVE.B DUART_SRA,D3                         ; CHECK FOR COMMAND
00200B26  0803 0000               1692m     BTST #0,D3                                  ; CHECK FOR CHARACTER
00200B2A  6700 0010               1693m     BEQ CONTINUE_109                                ; NOTHING, CONTINUE
00200B2E                          1694m  
00200B2E                          1695mm     READ_CHAR D2
00200B2E                 TRUE     1696mm     IFEQ DEBUG
00200B2E  1439 00C00007           1697mm         MOVE.B DUART_RXA,D2                     ; GOT A CHARACTER, READ IT
00200B34                          1698mm     ENDC
00200B34                 FALSE    1699mm     IFNE DEBUG
00200B34                          1700mm     ENDC
00200B34                          1701mm      
00200B34  B43C 001B               1702mm     CMP.B #$1B,D2                               ; CHECK FOR ESCAPE AND GO TO START
00200B38  6700 F4CE               1703mm     BEQ START
00200B3C                          1704mm     ENDM
00200B3C                          1705m CONTINUE_109
00200B3C  1639 00C00013           1706m     MOVE.B DUART_SRB,D3                         ; READ STATUS REGISTER
00200B42  0803 0000               1707m     BTST #0,D3                                  ; CHECK FOR CHARACTER
00200B46  67D8                    1708m     BEQ WAIT_FOR_READY_109                      ; NOTHING, CHECK AGAIN
00200B48                          1709m     
00200B48  1439 00C00017           1710m     MOVE.B DUART_RXB,D2                         ; GOT A CHARACTER, READ IT
00200B4E  13C2 00E00001           1711m     MOVE.B D2,DISPLAY                           ; ECHO TO THE DISPLAY
00200B54                          1712m     
00200B54                          1713m     ENDM
00200B54                          1714m                 PRINT_CHAR D2,D3
00200B54                          1715m WAIT_FOR_READY_111                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00200B54                 TRUE     1716m     IFEQ DEBUG
00200B54  1639 00C00003           1717m         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
00200B5A  0803 0002               1718m         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
00200B5E  67F4                    1719m         BEQ WAIT_FOR_READY_111                      ; NO SPACE, CHECK AGAIN
00200B60  13C2 00C00007           1720m         MOVE.B D2,DUART_TXA                     ; SEND THE NEXT CHARACTER
00200B66                          1721m     ENDC
00200B66                          1722m     
00200B66                 FALSE    1723m     IFNE DEBUG
00200B66                          1724m     ENDC
00200B66                          1725m 
00200B66                          1726m     ENDM
00200B66                          1727m                 HEX2BIN D2,D2,A0
00200B66  41F9 002018EA           1728m     LEA HEX2BIN_LUT,A0                          ; LOAD THE LOOKUP TABLE
00200B6C  0402 0030               1729m     SUB.B #'0',D2                               ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
00200B70  C4BC 000000FF           1730m     AND.L #$FF,D2                               ; IGNORE THE TOP 3 BYTES
00200B76  1430 2000               1731m     MOVE.B 0(A0,D2),D2                          ; USE THAT AS AN INDEX INTO THE LUT      
00200B7A                          1732m     ENDM
00200B7A  8E82                    1733                  OR.L D2,D7
00200B7C                          1734                  
00200B7C  DC87                    1735                  ADD.L D7,D6                     ; add top byte of address into checksum
00200B7E                          1736  
00200B7E  E98F                    1737                  LSL.L #4,D7                     ; middle byte
00200B80                          1738m                 DOWNLOAD D2,D3
00200B80                          1739m WAIT_FOR_READY_113                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00200B80                          1740m 
00200B80  1639 00C00003           1741m     MOVE.B DUART_SRA,D3                         ; CHECK FOR COMMAND
00200B86  0803 0000               1742m     BTST #0,D3                                  ; CHECK FOR CHARACTER
00200B8A  6700 0010               1743m     BEQ CONTINUE_113                                ; NOTHING, CONTINUE
00200B8E                          1744m  
00200B8E                          1745mm     READ_CHAR D2
00200B8E                 TRUE     1746mm     IFEQ DEBUG
00200B8E  1439 00C00007           1747mm         MOVE.B DUART_RXA,D2                     ; GOT A CHARACTER, READ IT
00200B94                          1748mm     ENDC
00200B94                 FALSE    1749mm     IFNE DEBUG
00200B94                          1750mm     ENDC
00200B94                          1751mm      
00200B94  B43C 001B               1752mm     CMP.B #$1B,D2                               ; CHECK FOR ESCAPE AND GO TO START
00200B98  6700 F46E               1753mm     BEQ START
00200B9C                          1754mm     ENDM
00200B9C                          1755m CONTINUE_113
00200B9C  1639 00C00013           1756m     MOVE.B DUART_SRB,D3                         ; READ STATUS REGISTER
00200BA2  0803 0000               1757m     BTST #0,D3                                  ; CHECK FOR CHARACTER
00200BA6  67D8                    1758m     BEQ WAIT_FOR_READY_113                      ; NOTHING, CHECK AGAIN
00200BA8                          1759m     
00200BA8  1439 00C00017           1760m     MOVE.B DUART_RXB,D2                         ; GOT A CHARACTER, READ IT
00200BAE  13C2 00E00001           1761m     MOVE.B D2,DISPLAY                           ; ECHO TO THE DISPLAY
00200BB4                          1762m     
00200BB4                          1763m     ENDM
00200BB4                          1764m                 PRINT_CHAR D2,D3
00200BB4                          1765m WAIT_FOR_READY_115                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00200BB4                 TRUE     1766m     IFEQ DEBUG
00200BB4  1639 00C00003           1767m         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
00200BBA  0803 0002               1768m         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
00200BBE  67F4                    1769m         BEQ WAIT_FOR_READY_115                      ; NO SPACE, CHECK AGAIN
00200BC0  13C2 00C00007           1770m         MOVE.B D2,DUART_TXA                     ; SEND THE NEXT CHARACTER
00200BC6                          1771m     ENDC
00200BC6                          1772m     
00200BC6                 FALSE    1773m     IFNE DEBUG
00200BC6                          1774m     ENDC
00200BC6                          1775m 
00200BC6                          1776m     ENDM
00200BC6                          1777m                 HEX2BIN D2,D2,A0
00200BC6  41F9 002018EA           1778m     LEA HEX2BIN_LUT,A0                          ; LOAD THE LOOKUP TABLE
00200BCC  0402 0030               1779m     SUB.B #'0',D2                               ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
00200BD0  C4BC 000000FF           1780m     AND.L #$FF,D2                               ; IGNORE THE TOP 3 BYTES
00200BD6  1430 2000               1781m     MOVE.B 0(A0,D2),D2                          ; USE THAT AS AN INDEX INTO THE LUT      
00200BDA                          1782m     ENDM
00200BDA  8E82                    1783                  OR.L D2,D7
00200BDC  E98F                    1784                  LSL.L #4,D7        
00200BDE                          1785m                 DOWNLOAD D2,D3
00200BDE                          1786m WAIT_FOR_READY_117                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00200BDE                          1787m 
00200BDE  1639 00C00003           1788m     MOVE.B DUART_SRA,D3                         ; CHECK FOR COMMAND
00200BE4  0803 0000               1789m     BTST #0,D3                                  ; CHECK FOR CHARACTER
00200BE8  6700 0010               1790m     BEQ CONTINUE_117                                ; NOTHING, CONTINUE
00200BEC                          1791m  
00200BEC                          1792mm     READ_CHAR D2
00200BEC                 TRUE     1793mm     IFEQ DEBUG
00200BEC  1439 00C00007           1794mm         MOVE.B DUART_RXA,D2                     ; GOT A CHARACTER, READ IT
00200BF2                          1795mm     ENDC
00200BF2                 FALSE    1796mm     IFNE DEBUG
00200BF2                          1797mm     ENDC
00200BF2                          1798mm      
00200BF2  B43C 001B               1799mm     CMP.B #$1B,D2                               ; CHECK FOR ESCAPE AND GO TO START
00200BF6  6700 F410               1800mm     BEQ START
00200BFA                          1801mm     ENDM
00200BFA                          1802m CONTINUE_117
00200BFA  1639 00C00013           1803m     MOVE.B DUART_SRB,D3                         ; READ STATUS REGISTER
00200C00  0803 0000               1804m     BTST #0,D3                                  ; CHECK FOR CHARACTER
00200C04  67D8                    1805m     BEQ WAIT_FOR_READY_117                      ; NOTHING, CHECK AGAIN
00200C06                          1806m     
00200C06  1439 00C00017           1807m     MOVE.B DUART_RXB,D2                         ; GOT A CHARACTER, READ IT
00200C0C  13C2 00E00001           1808m     MOVE.B D2,DISPLAY                           ; ECHO TO THE DISPLAY
00200C12                          1809m     
00200C12                          1810m     ENDM
00200C12                          1811m                 PRINT_CHAR D2,D3
00200C12                          1812m WAIT_FOR_READY_119                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00200C12                 TRUE     1813m     IFEQ DEBUG
00200C12  1639 00C00003           1814m         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
00200C18  0803 0002               1815m         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
00200C1C  67F4                    1816m         BEQ WAIT_FOR_READY_119                      ; NO SPACE, CHECK AGAIN
00200C1E  13C2 00C00007           1817m         MOVE.B D2,DUART_TXA                     ; SEND THE NEXT CHARACTER
00200C24                          1818m     ENDC
00200C24                          1819m     
00200C24                 FALSE    1820m     IFNE DEBUG
00200C24                          1821m     ENDC
00200C24                          1822m 
00200C24                          1823m     ENDM
00200C24                          1824m                 HEX2BIN D2,D2,A0
00200C24  41F9 002018EA           1825m     LEA HEX2BIN_LUT,A0                          ; LOAD THE LOOKUP TABLE
00200C2A  0402 0030               1826m     SUB.B #'0',D2                               ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
00200C2E  C4BC 000000FF           1827m     AND.L #$FF,D2                               ; IGNORE THE TOP 3 BYTES
00200C34  1430 2000               1828m     MOVE.B 0(A0,D2),D2                          ; USE THAT AS AN INDEX INTO THE LUT      
00200C38                          1829m     ENDM
00200C38  8E82                    1830                  OR.L D2,D7
00200C3A                          1831                  
00200C3A  7400                    1832                  MOVE.L #0,D2                    ; rextract middle byte of address and add into checksum
00200C3C  1407                    1833                  MOVE.B D7,D2
00200C3E  DC82                    1834                  ADD.L D2,D6
00200C40                          1835            
00200C40  E98F                    1836                  LSL.L #4,D7                     ; bottom byte
00200C42                          1837m                 DOWNLOAD D2,D3
00200C42                          1838m WAIT_FOR_READY_121                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00200C42                          1839m 
00200C42  1639 00C00003           1840m     MOVE.B DUART_SRA,D3                         ; CHECK FOR COMMAND
00200C48  0803 0000               1841m     BTST #0,D3                                  ; CHECK FOR CHARACTER
00200C4C  6700 0010               1842m     BEQ CONTINUE_121                                ; NOTHING, CONTINUE
00200C50                          1843m  
00200C50                          1844mm     READ_CHAR D2
00200C50                 TRUE     1845mm     IFEQ DEBUG
00200C50  1439 00C00007           1846mm         MOVE.B DUART_RXA,D2                     ; GOT A CHARACTER, READ IT
00200C56                          1847mm     ENDC
00200C56                 FALSE    1848mm     IFNE DEBUG
00200C56                          1849mm     ENDC
00200C56                          1850mm      
00200C56  B43C 001B               1851mm     CMP.B #$1B,D2                               ; CHECK FOR ESCAPE AND GO TO START
00200C5A  6700 F3AC               1852mm     BEQ START
00200C5E                          1853mm     ENDM
00200C5E                          1854m CONTINUE_121
00200C5E  1639 00C00013           1855m     MOVE.B DUART_SRB,D3                         ; READ STATUS REGISTER
00200C64  0803 0000               1856m     BTST #0,D3                                  ; CHECK FOR CHARACTER
00200C68  67D8                    1857m     BEQ WAIT_FOR_READY_121                      ; NOTHING, CHECK AGAIN
00200C6A                          1858m     
00200C6A  1439 00C00017           1859m     MOVE.B DUART_RXB,D2                         ; GOT A CHARACTER, READ IT
00200C70  13C2 00E00001           1860m     MOVE.B D2,DISPLAY                           ; ECHO TO THE DISPLAY
00200C76                          1861m     
00200C76                          1862m     ENDM
00200C76                          1863m                 PRINT_CHAR D2,D3
00200C76                          1864m WAIT_FOR_READY_123                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00200C76                 TRUE     1865m     IFEQ DEBUG
00200C76  1639 00C00003           1866m         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
00200C7C  0803 0002               1867m         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
00200C80  67F4                    1868m         BEQ WAIT_FOR_READY_123                      ; NO SPACE, CHECK AGAIN
00200C82  13C2 00C00007           1869m         MOVE.B D2,DUART_TXA                     ; SEND THE NEXT CHARACTER
00200C88                          1870m     ENDC
00200C88                          1871m     
00200C88                 FALSE    1872m     IFNE DEBUG
00200C88                          1873m     ENDC
00200C88                          1874m 
00200C88                          1875m     ENDM
00200C88                          1876m                 HEX2BIN D2,D2,A0
00200C88  41F9 002018EA           1877m     LEA HEX2BIN_LUT,A0                          ; LOAD THE LOOKUP TABLE
00200C8E  0402 0030               1878m     SUB.B #'0',D2                               ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
00200C92  C4BC 000000FF           1879m     AND.L #$FF,D2                               ; IGNORE THE TOP 3 BYTES
00200C98  1430 2000               1880m     MOVE.B 0(A0,D2),D2                          ; USE THAT AS AN INDEX INTO THE LUT      
00200C9C                          1881m     ENDM
00200C9C  8E82                    1882                  OR.L D2,D7
00200C9E  E98F                    1883                  LSL.L #4,D7        
00200CA0                          1884m                 DOWNLOAD D2,D3
00200CA0                          1885m WAIT_FOR_READY_125                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00200CA0                          1886m 
00200CA0  1639 00C00003           1887m     MOVE.B DUART_SRA,D3                         ; CHECK FOR COMMAND
00200CA6  0803 0000               1888m     BTST #0,D3                                  ; CHECK FOR CHARACTER
00200CAA  6700 0010               1889m     BEQ CONTINUE_125                                ; NOTHING, CONTINUE
00200CAE                          1890m  
00200CAE                          1891mm     READ_CHAR D2
00200CAE                 TRUE     1892mm     IFEQ DEBUG
00200CAE  1439 00C00007           1893mm         MOVE.B DUART_RXA,D2                     ; GOT A CHARACTER, READ IT
00200CB4                          1894mm     ENDC
00200CB4                 FALSE    1895mm     IFNE DEBUG
00200CB4                          1896mm     ENDC
00200CB4                          1897mm      
00200CB4  B43C 001B               1898mm     CMP.B #$1B,D2                               ; CHECK FOR ESCAPE AND GO TO START
00200CB8  6700 F34E               1899mm     BEQ START
00200CBC                          1900mm     ENDM
00200CBC                          1901m CONTINUE_125
00200CBC  1639 00C00013           1902m     MOVE.B DUART_SRB,D3                         ; READ STATUS REGISTER
00200CC2  0803 0000               1903m     BTST #0,D3                                  ; CHECK FOR CHARACTER
00200CC6  67D8                    1904m     BEQ WAIT_FOR_READY_125                      ; NOTHING, CHECK AGAIN
00200CC8                          1905m     
00200CC8  1439 00C00017           1906m     MOVE.B DUART_RXB,D2                         ; GOT A CHARACTER, READ IT
00200CCE  13C2 00E00001           1907m     MOVE.B D2,DISPLAY                           ; ECHO TO THE DISPLAY
00200CD4                          1908m     
00200CD4                          1909m     ENDM
00200CD4                          1910m                 PRINT_CHAR D2,D3
00200CD4                          1911m WAIT_FOR_READY_127                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00200CD4                 TRUE     1912m     IFEQ DEBUG
00200CD4  1639 00C00003           1913m         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
00200CDA  0803 0002               1914m         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
00200CDE  67F4                    1915m         BEQ WAIT_FOR_READY_127                      ; NO SPACE, CHECK AGAIN
00200CE0  13C2 00C00007           1916m         MOVE.B D2,DUART_TXA                     ; SEND THE NEXT CHARACTER
00200CE6                          1917m     ENDC
00200CE6                          1918m     
00200CE6                 FALSE    1919m     IFNE DEBUG
00200CE6                          1920m     ENDC
00200CE6                          1921m 
00200CE6                          1922m     ENDM
00200CE6                          1923m                 HEX2BIN D2,D2,A0
00200CE6  41F9 002018EA           1924m     LEA HEX2BIN_LUT,A0                          ; LOAD THE LOOKUP TABLE
00200CEC  0402 0030               1925m     SUB.B #'0',D2                               ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
00200CF0  C4BC 000000FF           1926m     AND.L #$FF,D2                               ; IGNORE THE TOP 3 BYTES
00200CF6  1430 2000               1927m     MOVE.B 0(A0,D2),D2                          ; USE THAT AS AN INDEX INTO THE LUT      
00200CFA                          1928m     ENDM
00200CFA  8E82                    1929                  OR.L D2,D7
00200CFC                          1930          
00200CFC  7400                    1931                  MOVE.L #0,D2                    ; rextract bottom byte of address and add into checksum
00200CFE  1407                    1932                  MOVE.B D7,D2
00200D00  DC82                    1933                  ADD.L D2,D6
00200D02                          1934                  
00200D02  2247                    1935                  MOVE.L D7,A1                    ; put the address in an address register, and we can now re-use D7
00200D04  D3CB                    1936                  ADD.L A3,A1                     ; add in the offset
00200D06                          1937                    
00200D06  0807 0000               1938                  BTST #0,D7                      ; deal with odd addresses
00200D0A                          1939  
00200D0A  2247                    1940                  MOVE.L D7,A1                    ; put the address in an address register, and we can now re-use D7
00200D0C  6700 00D0               1941                  BEQ EVEN2
00200D10                          1942                          
00200D10  5385                    1943                  SUB.L #1,D5
00200D12  5389                    1944                  SUB.L #1,A1
00200D14                          1945                  
00200D14  7E00                    1946                  MOVE.L #0,D7
00200D16                          1947m                 DOWNLOAD D2,D3                  ; MS 4 bits
00200D16                          1948m WAIT_FOR_READY_129                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00200D16                          1949m 
00200D16  1639 00C00003           1950m     MOVE.B DUART_SRA,D3                         ; CHECK FOR COMMAND
00200D1C  0803 0000               1951m     BTST #0,D3                                  ; CHECK FOR CHARACTER
00200D20  6700 0010               1952m     BEQ CONTINUE_129                                ; NOTHING, CONTINUE
00200D24                          1953m  
00200D24                          1954mm     READ_CHAR D2
00200D24                 TRUE     1955mm     IFEQ DEBUG
00200D24  1439 00C00007           1956mm         MOVE.B DUART_RXA,D2                     ; GOT A CHARACTER, READ IT
00200D2A                          1957mm     ENDC
00200D2A                 FALSE    1958mm     IFNE DEBUG
00200D2A                          1959mm     ENDC
00200D2A                          1960mm      
00200D2A  B43C 001B               1961mm     CMP.B #$1B,D2                               ; CHECK FOR ESCAPE AND GO TO START
00200D2E  6700 F2D8               1962mm     BEQ START
00200D32                          1963mm     ENDM
00200D32                          1964m CONTINUE_129
00200D32  1639 00C00013           1965m     MOVE.B DUART_SRB,D3                         ; READ STATUS REGISTER
00200D38  0803 0000               1966m     BTST #0,D3                                  ; CHECK FOR CHARACTER
00200D3C  67D8                    1967m     BEQ WAIT_FOR_READY_129                      ; NOTHING, CHECK AGAIN
00200D3E                          1968m     
00200D3E  1439 00C00017           1969m     MOVE.B DUART_RXB,D2                         ; GOT A CHARACTER, READ IT
00200D44  13C2 00E00001           1970m     MOVE.B D2,DISPLAY                           ; ECHO TO THE DISPLAY
00200D4A                          1971m     
00200D4A                          1972m     ENDM
00200D4A                          1973m                 PRINT_CHAR D2,D3
00200D4A                          1974m WAIT_FOR_READY_131                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00200D4A                 TRUE     1975m     IFEQ DEBUG
00200D4A  1639 00C00003           1976m         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
00200D50  0803 0002               1977m         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
00200D54  67F4                    1978m         BEQ WAIT_FOR_READY_131                      ; NO SPACE, CHECK AGAIN
00200D56  13C2 00C00007           1979m         MOVE.B D2,DUART_TXA                     ; SEND THE NEXT CHARACTER
00200D5C                          1980m     ENDC
00200D5C                          1981m     
00200D5C                 FALSE    1982m     IFNE DEBUG
00200D5C                          1983m     ENDC
00200D5C                          1984m 
00200D5C                          1985m     ENDM
00200D5C                          1986m                 HEX2BIN D2,D2,A0
00200D5C  41F9 002018EA           1987m     LEA HEX2BIN_LUT,A0                          ; LOAD THE LOOKUP TABLE
00200D62  0402 0030               1988m     SUB.B #'0',D2                               ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
00200D66  C4BC 000000FF           1989m     AND.L #$FF,D2                               ; IGNORE THE TOP 3 BYTES
00200D6C  1430 2000               1990m     MOVE.B 0(A0,D2),D2                          ; USE THAT AS AN INDEX INTO THE LUT      
00200D70                          1991m     ENDM
00200D70  8E82                    1992                  OR.L D2,D7
00200D72  E98F                    1993                  LSL.L #4,D7
00200D74                          1994                       
00200D74                          1995m                 DOWNLOAD D2,D3                  ; LS 4 bits    
00200D74                          1996m WAIT_FOR_READY_133                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00200D74                          1997m 
00200D74  1639 00C00003           1998m     MOVE.B DUART_SRA,D3                         ; CHECK FOR COMMAND
00200D7A  0803 0000               1999m     BTST #0,D3                                  ; CHECK FOR CHARACTER
00200D7E  6700 0010               2000m     BEQ CONTINUE_133                                ; NOTHING, CONTINUE
00200D82                          2001m  
00200D82                          2002mm     READ_CHAR D2
00200D82                 TRUE     2003mm     IFEQ DEBUG
00200D82  1439 00C00007           2004mm         MOVE.B DUART_RXA,D2                     ; GOT A CHARACTER, READ IT
00200D88                          2005mm     ENDC
00200D88                 FALSE    2006mm     IFNE DEBUG
00200D88                          2007mm     ENDC
00200D88                          2008mm      
00200D88  B43C 001B               2009mm     CMP.B #$1B,D2                               ; CHECK FOR ESCAPE AND GO TO START
00200D8C  6700 F27A               2010mm     BEQ START
00200D90                          2011mm     ENDM
00200D90                          2012m CONTINUE_133
00200D90  1639 00C00013           2013m     MOVE.B DUART_SRB,D3                         ; READ STATUS REGISTER
00200D96  0803 0000               2014m     BTST #0,D3                                  ; CHECK FOR CHARACTER
00200D9A  67D8                    2015m     BEQ WAIT_FOR_READY_133                      ; NOTHING, CHECK AGAIN
00200D9C                          2016m     
00200D9C  1439 00C00017           2017m     MOVE.B DUART_RXB,D2                         ; GOT A CHARACTER, READ IT
00200DA2  13C2 00E00001           2018m     MOVE.B D2,DISPLAY                           ; ECHO TO THE DISPLAY
00200DA8                          2019m     
00200DA8                          2020m     ENDM
00200DA8                          2021m                 PRINT_CHAR D2,D3
00200DA8                          2022m WAIT_FOR_READY_135                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00200DA8                 TRUE     2023m     IFEQ DEBUG
00200DA8  1639 00C00003           2024m         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
00200DAE  0803 0002               2025m         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
00200DB2  67F4                    2026m         BEQ WAIT_FOR_READY_135                      ; NO SPACE, CHECK AGAIN
00200DB4  13C2 00C00007           2027m         MOVE.B D2,DUART_TXA                     ; SEND THE NEXT CHARACTER
00200DBA                          2028m     ENDC
00200DBA                          2029m     
00200DBA                 FALSE    2030m     IFNE DEBUG
00200DBA                          2031m     ENDC
00200DBA                          2032m 
00200DBA                          2033m     ENDM
00200DBA                          2034m                 HEX2BIN D2,D2,A0
00200DBA  41F9 002018EA           2035m     LEA HEX2BIN_LUT,A0                          ; LOAD THE LOOKUP TABLE
00200DC0  0402 0030               2036m     SUB.B #'0',D2                               ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
00200DC4  C4BC 000000FF           2037m     AND.L #$FF,D2                               ; IGNORE THE TOP 3 BYTES
00200DCA  1430 2000               2038m     MOVE.B 0(A0,D2),D2                          ; USE THAT AS AN INDEX INTO THE LUT      
00200DCE                          2039m     ENDM
00200DCE  8E82                    2040                  OR.L D2,D7
00200DD0                          2041                          
00200DD0  DC87                    2042                  ADD.L D7,D6                     ; add into checksum
00200DD2                          2043                                
00200DD2  3611                    2044                  MOVE.W (A1),D3                  ; get the current data and replace the bottom byte
00200DD4                          2045                  
00200DD4  0243 FF00               2046                  ANDI.W #$FF00,D3
00200DD8  8647                    2047                  OR.W D7,D3
00200DDA                          2048                  
00200DDA  3283                    2049                  MOVE.W D3,(A1)                  ; store it!
00200DDC  5489                    2050                  ADD.L #2,A1
00200DDE                          2051  EVEN2
00200DDE  5985                    2052                  SUB.L #4,D5                     ; subtract four bytes for 24 bit address and 1 byte checksum
00200DE0                          2053                  WHILE.L D5 <GE> #2 DO           ; read the data bytes
00200DE0                          2054s _10000002
00200DE0  BABC 00000002           2055s     CMP.L   #2,D5
00200DE6  6D00 018A               2056s     BLT _10000003
00200DEA  5585                    2057                      SUB.L #2,D5
00200DEC                          2058                      
00200DEC  7E00                    2059                      MOVE.L #0,D7                ; D7 holds the word
00200DEE                          2060                      
00200DEE                          2061m                     DOWNLOAD D2,D3              ; MS 4 bits
00200DEE                          2062m WAIT_FOR_READY_137                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00200DEE                          2063m 
00200DEE  1639 00C00003           2064m     MOVE.B DUART_SRA,D3                         ; CHECK FOR COMMAND
00200DF4  0803 0000               2065m     BTST #0,D3                                  ; CHECK FOR CHARACTER
00200DF8  6700 0010               2066m     BEQ CONTINUE_137                                ; NOTHING, CONTINUE
00200DFC                          2067m  
00200DFC                          2068mm     READ_CHAR D2
00200DFC                 TRUE     2069mm     IFEQ DEBUG
00200DFC  1439 00C00007           2070mm         MOVE.B DUART_RXA,D2                     ; GOT A CHARACTER, READ IT
00200E02                          2071mm     ENDC
00200E02                 FALSE    2072mm     IFNE DEBUG
00200E02                          2073mm     ENDC
00200E02                          2074mm      
00200E02  B43C 001B               2075mm     CMP.B #$1B,D2                               ; CHECK FOR ESCAPE AND GO TO START
00200E06  6700 F200               2076mm     BEQ START
00200E0A                          2077mm     ENDM
00200E0A                          2078m CONTINUE_137
00200E0A  1639 00C00013           2079m     MOVE.B DUART_SRB,D3                         ; READ STATUS REGISTER
00200E10  0803 0000               2080m     BTST #0,D3                                  ; CHECK FOR CHARACTER
00200E14  67D8                    2081m     BEQ WAIT_FOR_READY_137                      ; NOTHING, CHECK AGAIN
00200E16                          2082m     
00200E16  1439 00C00017           2083m     MOVE.B DUART_RXB,D2                         ; GOT A CHARACTER, READ IT
00200E1C  13C2 00E00001           2084m     MOVE.B D2,DISPLAY                           ; ECHO TO THE DISPLAY
00200E22                          2085m     
00200E22                          2086m     ENDM
00200E22                          2087m                     PRINT_CHAR D2,D3
00200E22                          2088m WAIT_FOR_READY_139                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00200E22                 TRUE     2089m     IFEQ DEBUG
00200E22  1639 00C00003           2090m         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
00200E28  0803 0002               2091m         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
00200E2C  67F4                    2092m         BEQ WAIT_FOR_READY_139                      ; NO SPACE, CHECK AGAIN
00200E2E  13C2 00C00007           2093m         MOVE.B D2,DUART_TXA                     ; SEND THE NEXT CHARACTER
00200E34                          2094m     ENDC
00200E34                          2095m     
00200E34                 FALSE    2096m     IFNE DEBUG
00200E34                          2097m     ENDC
00200E34                          2098m 
00200E34                          2099m     ENDM
00200E34                          2100m                     HEX2BIN D2,D2,A0
00200E34  41F9 002018EA           2101m     LEA HEX2BIN_LUT,A0                          ; LOAD THE LOOKUP TABLE
00200E3A  0402 0030               2102m     SUB.B #'0',D2                               ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
00200E3E  C4BC 000000FF           2103m     AND.L #$FF,D2                               ; IGNORE THE TOP 3 BYTES
00200E44  1430 2000               2104m     MOVE.B 0(A0,D2),D2                          ; USE THAT AS AN INDEX INTO THE LUT      
00200E48                          2105m     ENDM
00200E48  8E82                    2106                      OR.L D2,D7
00200E4A  E98F                    2107                      LSL.L #4,D7
00200E4C                          2108                       
00200E4C                          2109m                     DOWNLOAD D2,D3              ; LS 4 bits    
00200E4C                          2110m WAIT_FOR_READY_141                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00200E4C                          2111m 
00200E4C  1639 00C00003           2112m     MOVE.B DUART_SRA,D3                         ; CHECK FOR COMMAND
00200E52  0803 0000               2113m     BTST #0,D3                                  ; CHECK FOR CHARACTER
00200E56  6700 0010               2114m     BEQ CONTINUE_141                                ; NOTHING, CONTINUE
00200E5A                          2115m  
00200E5A                          2116mm     READ_CHAR D2
00200E5A                 TRUE     2117mm     IFEQ DEBUG
00200E5A  1439 00C00007           2118mm         MOVE.B DUART_RXA,D2                     ; GOT A CHARACTER, READ IT
00200E60                          2119mm     ENDC
00200E60                 FALSE    2120mm     IFNE DEBUG
00200E60                          2121mm     ENDC
00200E60                          2122mm      
00200E60  B43C 001B               2123mm     CMP.B #$1B,D2                               ; CHECK FOR ESCAPE AND GO TO START
00200E64  6700 F1A2               2124mm     BEQ START
00200E68                          2125mm     ENDM
00200E68                          2126m CONTINUE_141
00200E68  1639 00C00013           2127m     MOVE.B DUART_SRB,D3                         ; READ STATUS REGISTER
00200E6E  0803 0000               2128m     BTST #0,D3                                  ; CHECK FOR CHARACTER
00200E72  67D8                    2129m     BEQ WAIT_FOR_READY_141                      ; NOTHING, CHECK AGAIN
00200E74                          2130m     
00200E74  1439 00C00017           2131m     MOVE.B DUART_RXB,D2                         ; GOT A CHARACTER, READ IT
00200E7A  13C2 00E00001           2132m     MOVE.B D2,DISPLAY                           ; ECHO TO THE DISPLAY
00200E80                          2133m     
00200E80                          2134m     ENDM
00200E80                          2135m                     PRINT_CHAR D2,D3
00200E80                          2136m WAIT_FOR_READY_143                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00200E80                 TRUE     2137m     IFEQ DEBUG
00200E80  1639 00C00003           2138m         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
00200E86  0803 0002               2139m         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
00200E8A  67F4                    2140m         BEQ WAIT_FOR_READY_143                      ; NO SPACE, CHECK AGAIN
00200E8C  13C2 00C00007           2141m         MOVE.B D2,DUART_TXA                     ; SEND THE NEXT CHARACTER
00200E92                          2142m     ENDC
00200E92                          2143m     
00200E92                 FALSE    2144m     IFNE DEBUG
00200E92                          2145m     ENDC
00200E92                          2146m 
00200E92                          2147m     ENDM
00200E92                          2148m                     HEX2BIN D2,D2,A0
00200E92  41F9 002018EA           2149m     LEA HEX2BIN_LUT,A0                          ; LOAD THE LOOKUP TABLE
00200E98  0402 0030               2150m     SUB.B #'0',D2                               ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
00200E9C  C4BC 000000FF           2151m     AND.L #$FF,D2                               ; IGNORE THE TOP 3 BYTES
00200EA2  1430 2000               2152m     MOVE.B 0(A0,D2),D2                          ; USE THAT AS AN INDEX INTO THE LUT      
00200EA6                          2153m     ENDM
00200EA6  8E82                    2154                      OR.L D2,D7
00200EA8                          2155                          
00200EA8  DC87                    2156                      ADD.L D7,D6                 ; add into checksum
00200EAA                          2157                      
00200EAA  E98F                    2158                      LSL.L #4,D7
00200EAC                          2159m                     DOWNLOAD D2,D3              ; MS 4 bits
00200EAC                          2160m WAIT_FOR_READY_145                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00200EAC                          2161m 
00200EAC  1639 00C00003           2162m     MOVE.B DUART_SRA,D3                         ; CHECK FOR COMMAND
00200EB2  0803 0000               2163m     BTST #0,D3                                  ; CHECK FOR CHARACTER
00200EB6  6700 0010               2164m     BEQ CONTINUE_145                                ; NOTHING, CONTINUE
00200EBA                          2165m  
00200EBA                          2166mm     READ_CHAR D2
00200EBA                 TRUE     2167mm     IFEQ DEBUG
00200EBA  1439 00C00007           2168mm         MOVE.B DUART_RXA,D2                     ; GOT A CHARACTER, READ IT
00200EC0                          2169mm     ENDC
00200EC0                 FALSE    2170mm     IFNE DEBUG
00200EC0                          2171mm     ENDC
00200EC0                          2172mm      
00200EC0  B43C 001B               2173mm     CMP.B #$1B,D2                               ; CHECK FOR ESCAPE AND GO TO START
00200EC4  6700 F142               2174mm     BEQ START
00200EC8                          2175mm     ENDM
00200EC8                          2176m CONTINUE_145
00200EC8  1639 00C00013           2177m     MOVE.B DUART_SRB,D3                         ; READ STATUS REGISTER
00200ECE  0803 0000               2178m     BTST #0,D3                                  ; CHECK FOR CHARACTER
00200ED2  67D8                    2179m     BEQ WAIT_FOR_READY_145                      ; NOTHING, CHECK AGAIN
00200ED4                          2180m     
00200ED4  1439 00C00017           2181m     MOVE.B DUART_RXB,D2                         ; GOT A CHARACTER, READ IT
00200EDA  13C2 00E00001           2182m     MOVE.B D2,DISPLAY                           ; ECHO TO THE DISPLAY
00200EE0                          2183m     
00200EE0                          2184m     ENDM
00200EE0                          2185m                     PRINT_CHAR D2,D3
00200EE0                          2186m WAIT_FOR_READY_147                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00200EE0                 TRUE     2187m     IFEQ DEBUG
00200EE0  1639 00C00003           2188m         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
00200EE6  0803 0002               2189m         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
00200EEA  67F4                    2190m         BEQ WAIT_FOR_READY_147                      ; NO SPACE, CHECK AGAIN
00200EEC  13C2 00C00007           2191m         MOVE.B D2,DUART_TXA                     ; SEND THE NEXT CHARACTER
00200EF2                          2192m     ENDC
00200EF2                          2193m     
00200EF2                 FALSE    2194m     IFNE DEBUG
00200EF2                          2195m     ENDC
00200EF2                          2196m 
00200EF2                          2197m     ENDM
00200EF2                          2198m                     HEX2BIN D2,D2,A0
00200EF2  41F9 002018EA           2199m     LEA HEX2BIN_LUT,A0                          ; LOAD THE LOOKUP TABLE
00200EF8  0402 0030               2200m     SUB.B #'0',D2                               ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
00200EFC  C4BC 000000FF           2201m     AND.L #$FF,D2                               ; IGNORE THE TOP 3 BYTES
00200F02  1430 2000               2202m     MOVE.B 0(A0,D2),D2                          ; USE THAT AS AN INDEX INTO THE LUT      
00200F06                          2203m     ENDM
00200F06  8E82                    2204                      OR.L D2,D7
00200F08                          2205                       
00200F08  E98F                    2206                      LSL.L #4,D7
00200F0A                          2207m                     DOWNLOAD D2,D3              ; LS 4 bits    
00200F0A                          2208m WAIT_FOR_READY_149                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00200F0A                          2209m 
00200F0A  1639 00C00003           2210m     MOVE.B DUART_SRA,D3                         ; CHECK FOR COMMAND
00200F10  0803 0000               2211m     BTST #0,D3                                  ; CHECK FOR CHARACTER
00200F14  6700 0010               2212m     BEQ CONTINUE_149                                ; NOTHING, CONTINUE
00200F18                          2213m  
00200F18                          2214mm     READ_CHAR D2
00200F18                 TRUE     2215mm     IFEQ DEBUG
00200F18  1439 00C00007           2216mm         MOVE.B DUART_RXA,D2                     ; GOT A CHARACTER, READ IT
00200F1E                          2217mm     ENDC
00200F1E                 FALSE    2218mm     IFNE DEBUG
00200F1E                          2219mm     ENDC
00200F1E                          2220mm      
00200F1E  B43C 001B               2221mm     CMP.B #$1B,D2                               ; CHECK FOR ESCAPE AND GO TO START
00200F22  6700 F0E4               2222mm     BEQ START
00200F26                          2223mm     ENDM
00200F26                          2224m CONTINUE_149
00200F26  1639 00C00013           2225m     MOVE.B DUART_SRB,D3                         ; READ STATUS REGISTER
00200F2C  0803 0000               2226m     BTST #0,D3                                  ; CHECK FOR CHARACTER
00200F30  67D8                    2227m     BEQ WAIT_FOR_READY_149                      ; NOTHING, CHECK AGAIN
00200F32                          2228m     
00200F32  1439 00C00017           2229m     MOVE.B DUART_RXB,D2                         ; GOT A CHARACTER, READ IT
00200F38  13C2 00E00001           2230m     MOVE.B D2,DISPLAY                           ; ECHO TO THE DISPLAY
00200F3E                          2231m     
00200F3E                          2232m     ENDM
00200F3E                          2233m                     PRINT_CHAR D2,D3
00200F3E                          2234m WAIT_FOR_READY_151                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00200F3E                 TRUE     2235m     IFEQ DEBUG
00200F3E  1639 00C00003           2236m         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
00200F44  0803 0002               2237m         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
00200F48  67F4                    2238m         BEQ WAIT_FOR_READY_151                      ; NO SPACE, CHECK AGAIN
00200F4A  13C2 00C00007           2239m         MOVE.B D2,DUART_TXA                     ; SEND THE NEXT CHARACTER
00200F50                          2240m     ENDC
00200F50                          2241m     
00200F50                 FALSE    2242m     IFNE DEBUG
00200F50                          2243m     ENDC
00200F50                          2244m 
00200F50                          2245m     ENDM
00200F50                          2246m                     HEX2BIN D2,D2,A0
00200F50  41F9 002018EA           2247m     LEA HEX2BIN_LUT,A0                          ; LOAD THE LOOKUP TABLE
00200F56  0402 0030               2248m     SUB.B #'0',D2                               ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
00200F5A  C4BC 000000FF           2249m     AND.L #$FF,D2                               ; IGNORE THE TOP 3 BYTES
00200F60  1430 2000               2250m     MOVE.B 0(A0,D2),D2                          ; USE THAT AS AN INDEX INTO THE LUT      
00200F64                          2251m     ENDM
00200F64  8E82                    2252                      OR.L D2,D7
00200F66                          2253                      
00200F66  7400                    2254                      MOVE.L #0,D2                ; rextract bottom byte of address and add into checksum
00200F68  1407                    2255                      MOVE.B D7,D2
00200F6A  DC82                    2256                      ADD.L D2,D6
00200F6C                          2257                      
00200F6C  32C7                    2258                      MOVE.W D7,(A1)+             ; store it!
00200F6E                          2259              
00200F6E                          2260                  ENDW
00200F6E  6000 FE70               2261s     BRA _10000002
00200F72                          2262s _10000003
00200F72                          2263              
00200F72                          2264                  IF D5 <EQ> #1 THEN
00200F72  BA7C 0001               2265s     CMP.W   #1,D5
00200F76  6600 00CE               2266s     BNE _00000006
00200F7A  7E00                    2267                      MOVE.L #0,D7                ; D7 holds the word
00200F7C                          2268                              
00200F7C                          2269m                     DOWNLOAD D2,D3              ; MS 4 bits
00200F7C                          2270m WAIT_FOR_READY_153                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00200F7C                          2271m 
00200F7C  1639 00C00003           2272m     MOVE.B DUART_SRA,D3                         ; CHECK FOR COMMAND
00200F82  0803 0000               2273m     BTST #0,D3                                  ; CHECK FOR CHARACTER
00200F86  6700 0010               2274m     BEQ CONTINUE_153                                ; NOTHING, CONTINUE
00200F8A                          2275m  
00200F8A                          2276mm     READ_CHAR D2
00200F8A                 TRUE     2277mm     IFEQ DEBUG
00200F8A  1439 00C00007           2278mm         MOVE.B DUART_RXA,D2                     ; GOT A CHARACTER, READ IT
00200F90                          2279mm     ENDC
00200F90                 FALSE    2280mm     IFNE DEBUG
00200F90                          2281mm     ENDC
00200F90                          2282mm      
00200F90  B43C 001B               2283mm     CMP.B #$1B,D2                               ; CHECK FOR ESCAPE AND GO TO START
00200F94  6700 F072               2284mm     BEQ START
00200F98                          2285mm     ENDM
00200F98                          2286m CONTINUE_153
00200F98  1639 00C00013           2287m     MOVE.B DUART_SRB,D3                         ; READ STATUS REGISTER
00200F9E  0803 0000               2288m     BTST #0,D3                                  ; CHECK FOR CHARACTER
00200FA2  67D8                    2289m     BEQ WAIT_FOR_READY_153                      ; NOTHING, CHECK AGAIN
00200FA4                          2290m     
00200FA4  1439 00C00017           2291m     MOVE.B DUART_RXB,D2                         ; GOT A CHARACTER, READ IT
00200FAA  13C2 00E00001           2292m     MOVE.B D2,DISPLAY                           ; ECHO TO THE DISPLAY
00200FB0                          2293m     
00200FB0                          2294m     ENDM
00200FB0                          2295m                     PRINT_CHAR D2,D3
00200FB0                          2296m WAIT_FOR_READY_155                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00200FB0                 TRUE     2297m     IFEQ DEBUG
00200FB0  1639 00C00003           2298m         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
00200FB6  0803 0002               2299m         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
00200FBA  67F4                    2300m         BEQ WAIT_FOR_READY_155                      ; NO SPACE, CHECK AGAIN
00200FBC  13C2 00C00007           2301m         MOVE.B D2,DUART_TXA                     ; SEND THE NEXT CHARACTER
00200FC2                          2302m     ENDC
00200FC2                          2303m     
00200FC2                 FALSE    2304m     IFNE DEBUG
00200FC2                          2305m     ENDC
00200FC2                          2306m 
00200FC2                          2307m     ENDM
00200FC2                          2308m                     HEX2BIN D2,D2,A0
00200FC2  41F9 002018EA           2309m     LEA HEX2BIN_LUT,A0                          ; LOAD THE LOOKUP TABLE
00200FC8  0402 0030               2310m     SUB.B #'0',D2                               ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
00200FCC  C4BC 000000FF           2311m     AND.L #$FF,D2                               ; IGNORE THE TOP 3 BYTES
00200FD2  1430 2000               2312m     MOVE.B 0(A0,D2),D2                          ; USE THAT AS AN INDEX INTO THE LUT      
00200FD6                          2313m     ENDM
00200FD6  8E82                    2314                      OR.L D2,D7
00200FD8  E98F                    2315                      LSL.L #4,D7
00200FDA                          2316                       
00200FDA                          2317m                     DOWNLOAD D2,D3              ; LS 4 bits    
00200FDA                          2318m WAIT_FOR_READY_157                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00200FDA                          2319m 
00200FDA  1639 00C00003           2320m     MOVE.B DUART_SRA,D3                         ; CHECK FOR COMMAND
00200FE0  0803 0000               2321m     BTST #0,D3                                  ; CHECK FOR CHARACTER
00200FE4  6700 0010               2322m     BEQ CONTINUE_157                                ; NOTHING, CONTINUE
00200FE8                          2323m  
00200FE8                          2324mm     READ_CHAR D2
00200FE8                 TRUE     2325mm     IFEQ DEBUG
00200FE8  1439 00C00007           2326mm         MOVE.B DUART_RXA,D2                     ; GOT A CHARACTER, READ IT
00200FEE                          2327mm     ENDC
00200FEE                 FALSE    2328mm     IFNE DEBUG
00200FEE                          2329mm     ENDC
00200FEE                          2330mm      
00200FEE  B43C 001B               2331mm     CMP.B #$1B,D2                               ; CHECK FOR ESCAPE AND GO TO START
00200FF2  6700 F014               2332mm     BEQ START
00200FF6                          2333mm     ENDM
00200FF6                          2334m CONTINUE_157
00200FF6  1639 00C00013           2335m     MOVE.B DUART_SRB,D3                         ; READ STATUS REGISTER
00200FFC  0803 0000               2336m     BTST #0,D3                                  ; CHECK FOR CHARACTER
00201000  67D8                    2337m     BEQ WAIT_FOR_READY_157                      ; NOTHING, CHECK AGAIN
00201002                          2338m     
00201002  1439 00C00017           2339m     MOVE.B DUART_RXB,D2                         ; GOT A CHARACTER, READ IT
00201008  13C2 00E00001           2340m     MOVE.B D2,DISPLAY                           ; ECHO TO THE DISPLAY
0020100E                          2341m     
0020100E                          2342m     ENDM
0020100E                          2343m                     PRINT_CHAR D2,D3
0020100E                          2344m WAIT_FOR_READY_159                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
0020100E                 TRUE     2345m     IFEQ DEBUG
0020100E  1639 00C00003           2346m         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
00201014  0803 0002               2347m         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
00201018  67F4                    2348m         BEQ WAIT_FOR_READY_159                      ; NO SPACE, CHECK AGAIN
0020101A  13C2 00C00007           2349m         MOVE.B D2,DUART_TXA                     ; SEND THE NEXT CHARACTER
00201020                          2350m     ENDC
00201020                          2351m     
00201020                 FALSE    2352m     IFNE DEBUG
00201020                          2353m     ENDC
00201020                          2354m 
00201020                          2355m     ENDM
00201020                          2356m                     HEX2BIN D2,D2,A0
00201020  41F9 002018EA           2357m     LEA HEX2BIN_LUT,A0                          ; LOAD THE LOOKUP TABLE
00201026  0402 0030               2358m     SUB.B #'0',D2                               ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
0020102A  C4BC 000000FF           2359m     AND.L #$FF,D2                               ; IGNORE THE TOP 3 BYTES
00201030  1430 2000               2360m     MOVE.B 0(A0,D2),D2                          ; USE THAT AS AN INDEX INTO THE LUT      
00201034                          2361m     ENDM
00201034  8E82                    2362                      OR.L D2,D7
00201036                          2363                                  
00201036  DC87                    2364                      ADD.L D7,D6                 ; add into checksum
00201038                          2365                      
00201038  3611                    2366                      MOVE.W (A1),D3              ; get the current data and replace the top byte
0020103A  E18F                    2367                      LSL.L #8,D7
0020103C  C6BC 000000FF           2368                      AND.L #$00FF,D3
00201042  8687                    2369                      OR.L D7,D3
00201044                          2370  
00201044  32C3                    2371                      MOVE.W D3,(A1)+             ; store it!
00201046                          2372                  ENDI
00201046                          2373s _00000006
00201046                          2374m                 PRINT_CRLF D3
00201046                          2375mm     PRINT_CHAR #13,D3                           ; CR
00201046                          2376mm WAIT_FOR_READY_162                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00201046                 TRUE     2377mm     IFEQ DEBUG
00201046  1639 00C00003           2378mm         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
0020104C  0803 0002               2379mm         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
00201050  67F4                    2380mm         BEQ WAIT_FOR_READY_162                      ; NO SPACE, CHECK AGAIN
00201052  13FC 000D 00C00007      2381mm         MOVE.B #13,DUART_TXA                    ; SEND THE NEXT CHARACTER
0020105A                          2382mm     ENDC
0020105A                          2383mm     
0020105A                 FALSE    2384mm     IFNE DEBUG
0020105A                          2385mm     ENDC
0020105A                          2386mm 
0020105A                          2387mm     ENDM
0020105A                          2388mm     PRINT_CHAR #10,D3                           ; LF
0020105A                          2389mm WAIT_FOR_READY_163                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
0020105A                 TRUE     2390mm     IFEQ DEBUG
0020105A  1639 00C00003           2391mm         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
00201060  0803 0002               2392mm         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
00201064  67F4                    2393mm         BEQ WAIT_FOR_READY_163                      ; NO SPACE, CHECK AGAIN
00201066  13FC 000A 00C00007      2394mm         MOVE.B #10,DUART_TXA                    ; SEND THE NEXT CHARACTER
0020106E                          2395mm     ENDC
0020106E                          2396mm     
0020106E                 FALSE    2397mm     IFNE DEBUG
0020106E                          2398mm     ENDC
0020106E                          2399mm 
0020106E                          2400mm     ENDM
0020106E                          2401m     ENDM
0020106E  43F9 002004A0           2402                  LEA WAIT_FOR_SRECORD,A1         ; next place to go
00201074                          2403              ELSE
00201074  6000 0252               2404s     BRA _00000007
00201078                          2405s _00000005
00201078                          2406                  IF.B D7 <EQ> #'8' THEN.L        ; termination record, exit
00201078  BE3C 0038               2407s     CMP.B   #'8',D7
0020107C  6600 01E4               2408s     BNE.L   _00000008
00201080  7E00                    2409                      MOVE.L #0,D7                ; read the 24 bit address, we'll stomp on D7 for this since it's sort of like the address accumulator
00201082                          2410m                     DOWNLOAD D2,D3              ; top byte
00201082                          2411m WAIT_FOR_READY_164                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00201082                          2412m 
00201082  1639 00C00003           2413m     MOVE.B DUART_SRA,D3                         ; CHECK FOR COMMAND
00201088  0803 0000               2414m     BTST #0,D3                                  ; CHECK FOR CHARACTER
0020108C  6700 0010               2415m     BEQ CONTINUE_164                                ; NOTHING, CONTINUE
00201090                          2416m  
00201090                          2417mm     READ_CHAR D2
00201090                 TRUE     2418mm     IFEQ DEBUG
00201090  1439 00C00007           2419mm         MOVE.B DUART_RXA,D2                     ; GOT A CHARACTER, READ IT
00201096                          2420mm     ENDC
00201096                 FALSE    2421mm     IFNE DEBUG
00201096                          2422mm     ENDC
00201096                          2423mm      
00201096  B43C 001B               2424mm     CMP.B #$1B,D2                               ; CHECK FOR ESCAPE AND GO TO START
0020109A  6700 EF6C               2425mm     BEQ START
0020109E                          2426mm     ENDM
0020109E                          2427m CONTINUE_164
0020109E  1639 00C00013           2428m     MOVE.B DUART_SRB,D3                         ; READ STATUS REGISTER
002010A4  0803 0000               2429m     BTST #0,D3                                  ; CHECK FOR CHARACTER
002010A8  67D8                    2430m     BEQ WAIT_FOR_READY_164                      ; NOTHING, CHECK AGAIN
002010AA                          2431m     
002010AA  1439 00C00017           2432m     MOVE.B DUART_RXB,D2                         ; GOT A CHARACTER, READ IT
002010B0  13C2 00E00001           2433m     MOVE.B D2,DISPLAY                           ; ECHO TO THE DISPLAY
002010B6                          2434m     
002010B6                          2435m     ENDM
002010B6                          2436m                     HEX2BIN D2,D2,A0
002010B6  41F9 002018EA           2437m     LEA HEX2BIN_LUT,A0                          ; LOAD THE LOOKUP TABLE
002010BC  0402 0030               2438m     SUB.B #'0',D2                               ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
002010C0  C4BC 000000FF           2439m     AND.L #$FF,D2                               ; IGNORE THE TOP 3 BYTES
002010C6  1430 2000               2440m     MOVE.B 0(A0,D2),D2                          ; USE THAT AS AN INDEX INTO THE LUT      
002010CA                          2441m     ENDM
002010CA  8E82                    2442                      OR.L D2,D7
002010CC  E98F                    2443                      LSL.L #4,D7
002010CE                          2444m                     DOWNLOAD D2,D3         
002010CE                          2445m WAIT_FOR_READY_167                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
002010CE                          2446m 
002010CE  1639 00C00003           2447m     MOVE.B DUART_SRA,D3                         ; CHECK FOR COMMAND
002010D4  0803 0000               2448m     BTST #0,D3                                  ; CHECK FOR CHARACTER
002010D8  6700 0010               2449m     BEQ CONTINUE_167                                ; NOTHING, CONTINUE
002010DC                          2450m  
002010DC                          2451mm     READ_CHAR D2
002010DC                 TRUE     2452mm     IFEQ DEBUG
002010DC  1439 00C00007           2453mm         MOVE.B DUART_RXA,D2                     ; GOT A CHARACTER, READ IT
002010E2                          2454mm     ENDC
002010E2                 FALSE    2455mm     IFNE DEBUG
002010E2                          2456mm     ENDC
002010E2                          2457mm      
002010E2  B43C 001B               2458mm     CMP.B #$1B,D2                               ; CHECK FOR ESCAPE AND GO TO START
002010E6  6700 EF20               2459mm     BEQ START
002010EA                          2460mm     ENDM
002010EA                          2461m CONTINUE_167
002010EA  1639 00C00013           2462m     MOVE.B DUART_SRB,D3                         ; READ STATUS REGISTER
002010F0  0803 0000               2463m     BTST #0,D3                                  ; CHECK FOR CHARACTER
002010F4  67D8                    2464m     BEQ WAIT_FOR_READY_167                      ; NOTHING, CHECK AGAIN
002010F6                          2465m     
002010F6  1439 00C00017           2466m     MOVE.B DUART_RXB,D2                         ; GOT A CHARACTER, READ IT
002010FC  13C2 00E00001           2467m     MOVE.B D2,DISPLAY                           ; ECHO TO THE DISPLAY
00201102                          2468m     
00201102                          2469m     ENDM
00201102                          2470m                     HEX2BIN D2,D2,A0
00201102  41F9 002018EA           2471m     LEA HEX2BIN_LUT,A0                          ; LOAD THE LOOKUP TABLE
00201108  0402 0030               2472m     SUB.B #'0',D2                               ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
0020110C  C4BC 000000FF           2473m     AND.L #$FF,D2                               ; IGNORE THE TOP 3 BYTES
00201112  1430 2000               2474m     MOVE.B 0(A0,D2),D2                          ; USE THAT AS AN INDEX INTO THE LUT      
00201116                          2475m     ENDM
00201116  8E82                    2476                      OR.L D2,D7
00201118                          2477                  
00201118  DC87                    2478                      ADD.L D7,D6                 ; add top byte of address into checksum
0020111A                          2479  
0020111A  E98F                    2480                      LSL.L #4,D7                 ; middle byte
0020111C                          2481m                     DOWNLOAD D2,D3
0020111C                          2482m WAIT_FOR_READY_170                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
0020111C                          2483m 
0020111C  1639 00C00003           2484m     MOVE.B DUART_SRA,D3                         ; CHECK FOR COMMAND
00201122  0803 0000               2485m     BTST #0,D3                                  ; CHECK FOR CHARACTER
00201126  6700 0010               2486m     BEQ CONTINUE_170                                ; NOTHING, CONTINUE
0020112A                          2487m  
0020112A                          2488mm     READ_CHAR D2
0020112A                 TRUE     2489mm     IFEQ DEBUG
0020112A  1439 00C00007           2490mm         MOVE.B DUART_RXA,D2                     ; GOT A CHARACTER, READ IT
00201130                          2491mm     ENDC
00201130                 FALSE    2492mm     IFNE DEBUG
00201130                          2493mm     ENDC
00201130                          2494mm      
00201130  B43C 001B               2495mm     CMP.B #$1B,D2                               ; CHECK FOR ESCAPE AND GO TO START
00201134  6700 EED2               2496mm     BEQ START
00201138                          2497mm     ENDM
00201138                          2498m CONTINUE_170
00201138  1639 00C00013           2499m     MOVE.B DUART_SRB,D3                         ; READ STATUS REGISTER
0020113E  0803 0000               2500m     BTST #0,D3                                  ; CHECK FOR CHARACTER
00201142  67D8                    2501m     BEQ WAIT_FOR_READY_170                      ; NOTHING, CHECK AGAIN
00201144                          2502m     
00201144  1439 00C00017           2503m     MOVE.B DUART_RXB,D2                         ; GOT A CHARACTER, READ IT
0020114A  13C2 00E00001           2504m     MOVE.B D2,DISPLAY                           ; ECHO TO THE DISPLAY
00201150                          2505m     
00201150                          2506m     ENDM
00201150                          2507m                     HEX2BIN D2,D2,A0
00201150  41F9 002018EA           2508m     LEA HEX2BIN_LUT,A0                          ; LOAD THE LOOKUP TABLE
00201156  0402 0030               2509m     SUB.B #'0',D2                               ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
0020115A  C4BC 000000FF           2510m     AND.L #$FF,D2                               ; IGNORE THE TOP 3 BYTES
00201160  1430 2000               2511m     MOVE.B 0(A0,D2),D2                          ; USE THAT AS AN INDEX INTO THE LUT      
00201164                          2512m     ENDM
00201164  8E82                    2513                      OR.L D2,D7
00201166  E98F                    2514                      LSL.L #4,D7        
00201168                          2515m                     DOWNLOAD D2,D3
00201168                          2516m WAIT_FOR_READY_173                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00201168                          2517m 
00201168  1639 00C00003           2518m     MOVE.B DUART_SRA,D3                         ; CHECK FOR COMMAND
0020116E  0803 0000               2519m     BTST #0,D3                                  ; CHECK FOR CHARACTER
00201172  6700 0010               2520m     BEQ CONTINUE_173                                ; NOTHING, CONTINUE
00201176                          2521m  
00201176                          2522mm     READ_CHAR D2
00201176                 TRUE     2523mm     IFEQ DEBUG
00201176  1439 00C00007           2524mm         MOVE.B DUART_RXA,D2                     ; GOT A CHARACTER, READ IT
0020117C                          2525mm     ENDC
0020117C                 FALSE    2526mm     IFNE DEBUG
0020117C                          2527mm     ENDC
0020117C                          2528mm      
0020117C  B43C 001B               2529mm     CMP.B #$1B,D2                               ; CHECK FOR ESCAPE AND GO TO START
00201180  6700 EE86               2530mm     BEQ START
00201184                          2531mm     ENDM
00201184                          2532m CONTINUE_173
00201184  1639 00C00013           2533m     MOVE.B DUART_SRB,D3                         ; READ STATUS REGISTER
0020118A  0803 0000               2534m     BTST #0,D3                                  ; CHECK FOR CHARACTER
0020118E  67D8                    2535m     BEQ WAIT_FOR_READY_173                      ; NOTHING, CHECK AGAIN
00201190                          2536m     
00201190  1439 00C00017           2537m     MOVE.B DUART_RXB,D2                         ; GOT A CHARACTER, READ IT
00201196  13C2 00E00001           2538m     MOVE.B D2,DISPLAY                           ; ECHO TO THE DISPLAY
0020119C                          2539m     
0020119C                          2540m     ENDM
0020119C                          2541m                     HEX2BIN D2,D2,A0
0020119C  41F9 002018EA           2542m     LEA HEX2BIN_LUT,A0                          ; LOAD THE LOOKUP TABLE
002011A2  0402 0030               2543m     SUB.B #'0',D2                               ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
002011A6  C4BC 000000FF           2544m     AND.L #$FF,D2                               ; IGNORE THE TOP 3 BYTES
002011AC  1430 2000               2545m     MOVE.B 0(A0,D2),D2                          ; USE THAT AS AN INDEX INTO THE LUT      
002011B0                          2546m     ENDM
002011B0  8E82                    2547                      OR.L D2,D7
002011B2                          2548          
002011B2  7400                    2549                      MOVE.L #0,D2                ; rextract middle byte of address and add into checksum
002011B4  1407                    2550                      MOVE.B D7,D2
002011B6  DC82                    2551                      ADD.L D2,D6
002011B8                          2552                    
002011B8  E98F                    2553                      LSL.L #4,D7                 ; bottom byte
002011BA                          2554m                     DOWNLOAD D2,D3
002011BA                          2555m WAIT_FOR_READY_176                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
002011BA                          2556m 
002011BA  1639 00C00003           2557m     MOVE.B DUART_SRA,D3                         ; CHECK FOR COMMAND
002011C0  0803 0000               2558m     BTST #0,D3                                  ; CHECK FOR CHARACTER
002011C4  6700 0010               2559m     BEQ CONTINUE_176                                ; NOTHING, CONTINUE
002011C8                          2560m  
002011C8                          2561mm     READ_CHAR D2
002011C8                 TRUE     2562mm     IFEQ DEBUG
002011C8  1439 00C00007           2563mm         MOVE.B DUART_RXA,D2                     ; GOT A CHARACTER, READ IT
002011CE                          2564mm     ENDC
002011CE                 FALSE    2565mm     IFNE DEBUG
002011CE                          2566mm     ENDC
002011CE                          2567mm      
002011CE  B43C 001B               2568mm     CMP.B #$1B,D2                               ; CHECK FOR ESCAPE AND GO TO START
002011D2  6700 EE34               2569mm     BEQ START
002011D6                          2570mm     ENDM
002011D6                          2571m CONTINUE_176
002011D6  1639 00C00013           2572m     MOVE.B DUART_SRB,D3                         ; READ STATUS REGISTER
002011DC  0803 0000               2573m     BTST #0,D3                                  ; CHECK FOR CHARACTER
002011E0  67D8                    2574m     BEQ WAIT_FOR_READY_176                      ; NOTHING, CHECK AGAIN
002011E2                          2575m     
002011E2  1439 00C00017           2576m     MOVE.B DUART_RXB,D2                         ; GOT A CHARACTER, READ IT
002011E8  13C2 00E00001           2577m     MOVE.B D2,DISPLAY                           ; ECHO TO THE DISPLAY
002011EE                          2578m     
002011EE                          2579m     ENDM
002011EE                          2580m                     HEX2BIN D2,D2,A0
002011EE  41F9 002018EA           2581m     LEA HEX2BIN_LUT,A0                          ; LOAD THE LOOKUP TABLE
002011F4  0402 0030               2582m     SUB.B #'0',D2                               ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
002011F8  C4BC 000000FF           2583m     AND.L #$FF,D2                               ; IGNORE THE TOP 3 BYTES
002011FE  1430 2000               2584m     MOVE.B 0(A0,D2),D2                          ; USE THAT AS AN INDEX INTO THE LUT      
00201202                          2585m     ENDM
00201202  8E82                    2586                      OR.L D2,D7
00201204  E98F                    2587                      LSL.L #4,D7        
00201206                          2588m                     DOWNLOAD D2,D3
00201206                          2589m WAIT_FOR_READY_179                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00201206                          2590m 
00201206  1639 00C00003           2591m     MOVE.B DUART_SRA,D3                         ; CHECK FOR COMMAND
0020120C  0803 0000               2592m     BTST #0,D3                                  ; CHECK FOR CHARACTER
00201210  6700 0010               2593m     BEQ CONTINUE_179                                ; NOTHING, CONTINUE
00201214                          2594m  
00201214                          2595mm     READ_CHAR D2
00201214                 TRUE     2596mm     IFEQ DEBUG
00201214  1439 00C00007           2597mm         MOVE.B DUART_RXA,D2                     ; GOT A CHARACTER, READ IT
0020121A                          2598mm     ENDC
0020121A                 FALSE    2599mm     IFNE DEBUG
0020121A                          2600mm     ENDC
0020121A                          2601mm      
0020121A  B43C 001B               2602mm     CMP.B #$1B,D2                               ; CHECK FOR ESCAPE AND GO TO START
0020121E  6700 EDE8               2603mm     BEQ START
00201222                          2604mm     ENDM
00201222                          2605m CONTINUE_179
00201222  1639 00C00013           2606m     MOVE.B DUART_SRB,D3                         ; READ STATUS REGISTER
00201228  0803 0000               2607m     BTST #0,D3                                  ; CHECK FOR CHARACTER
0020122C  67D8                    2608m     BEQ WAIT_FOR_READY_179                      ; NOTHING, CHECK AGAIN
0020122E                          2609m     
0020122E  1439 00C00017           2610m     MOVE.B DUART_RXB,D2                         ; GOT A CHARACTER, READ IT
00201234  13C2 00E00001           2611m     MOVE.B D2,DISPLAY                           ; ECHO TO THE DISPLAY
0020123A                          2612m     
0020123A                          2613m     ENDM
0020123A                          2614m                     HEX2BIN D2,D2,A0
0020123A  41F9 002018EA           2615m     LEA HEX2BIN_LUT,A0                          ; LOAD THE LOOKUP TABLE
00201240  0402 0030               2616m     SUB.B #'0',D2                               ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
00201244  C4BC 000000FF           2617m     AND.L #$FF,D2                               ; IGNORE THE TOP 3 BYTES
0020124A  1430 2000               2618m     MOVE.B 0(A0,D2),D2                          ; USE THAT AS AN INDEX INTO THE LUT      
0020124E                          2619m     ENDM
0020124E  8E82                    2620                      OR.L D2,D7
00201250                          2621                  
00201250  7400                    2622                      MOVE.L #0,D2                ; rextract bottom byte of address and add into checksum
00201252  1407                    2623                      MOVE.B D7,D2
00201254  DC82                    2624                      ADD.L D2,D6
00201256                          2625                    
00201256  2447                    2626                      MOVE.L D7,A2                ; start address -> A2
00201258                          2627                  
00201258  43F9 00201418           2628                      LEA DOWNLOAD_DONE,A1        ; next place to go
0020125E                          2629                  ELSE
0020125E  6000 0068               2630s     BRA _00000009
00201262                          2631s _00000008
00201262  41F9 0020189F           2632                      LEA UNREC,A0                ; warn for unrecognised type
00201268                          2633m                     PRINT_STR A0,D3
00201268                          2634m LOOP_182
00201268  0C10 0000               2635m     CMP.B #0,(A0)                               ; 0 -> DONE
0020126C  6700 001A               2636m     BEQ EXIT_182
00201270                          2637mm     PRINT_CHAR (A0)+,D3
00201270                          2638mm WAIT_FOR_READY_183                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00201270                 TRUE     2639mm     IFEQ DEBUG
00201270  1639 00C00003           2640mm         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
00201276  0803 0002               2641mm         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
0020127A  67F4                    2642mm         BEQ WAIT_FOR_READY_183                      ; NO SPACE, CHECK AGAIN
0020127C  13D8 00C00007           2643mm         MOVE.B (A0)+,DUART_TXA                      ; SEND THE NEXT CHARACTER
00201282                          2644mm     ENDC
00201282                          2645mm     
00201282                 FALSE    2646mm     IFNE DEBUG
00201282                          2647mm     ENDC
00201282                          2648mm 
00201282                          2649mm     ENDM
00201282  4EF9 00201268           2650m     JMP LOOP_182
00201288                          2651m EXIT_182
00201288                          2652m     ENDM
00201288                          2653m                     PRINT_CHAR D7,D3
00201288                          2654m WAIT_FOR_READY_184                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00201288                 TRUE     2655m     IFEQ DEBUG
00201288  1639 00C00003           2656m         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
0020128E  0803 0002               2657m         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
00201292  67F4                    2658m         BEQ WAIT_FOR_READY_184                      ; NO SPACE, CHECK AGAIN
00201294  13C7 00C00007           2659m         MOVE.B D7,DUART_TXA                     ; SEND THE NEXT CHARACTER
0020129A                          2660m     ENDC
0020129A                          2661m     
0020129A                 FALSE    2662m     IFNE DEBUG
0020129A                          2663m     ENDC
0020129A                          2664m 
0020129A                          2665m     ENDM
0020129A                          2666m                     PRINT_CRLF D3
0020129A                          2667mm     PRINT_CHAR #13,D3                           ; CR
0020129A                          2668mm WAIT_FOR_READY_186                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
0020129A                 TRUE     2669mm     IFEQ DEBUG
0020129A  1639 00C00003           2670mm         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
002012A0  0803 0002               2671mm         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
002012A4  67F4                    2672mm         BEQ WAIT_FOR_READY_186                      ; NO SPACE, CHECK AGAIN
002012A6  13FC 000D 00C00007      2673mm         MOVE.B #13,DUART_TXA                    ; SEND THE NEXT CHARACTER
002012AE                          2674mm     ENDC
002012AE                          2675mm     
002012AE                 FALSE    2676mm     IFNE DEBUG
002012AE                          2677mm     ENDC
002012AE                          2678mm 
002012AE                          2679mm     ENDM
002012AE                          2680mm     PRINT_CHAR #10,D3                           ; LF
002012AE                          2681mm WAIT_FOR_READY_187                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
002012AE                 TRUE     2682mm     IFEQ DEBUG
002012AE  1639 00C00003           2683mm         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
002012B4  0803 0002               2684mm         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
002012B8  67F4                    2685mm         BEQ WAIT_FOR_READY_187                      ; NO SPACE, CHECK AGAIN
002012BA  13FC 000A 00C00007      2686mm         MOVE.B #10,DUART_TXA                    ; SEND THE NEXT CHARACTER
002012C2                          2687mm     ENDC
002012C2                          2688mm     
002012C2                 FALSE    2689mm     IFNE DEBUG
002012C2                          2690mm     ENDC
002012C2                          2691mm 
002012C2                          2692mm     ENDM
002012C2                          2693m     ENDM
002012C2                          2694              
002012C2  4EF9 002004A0           2695                      JMP WAIT_FOR_SRECORD        ; ignore any other type    
002012C8                          2696                  ENDI
002012C8                          2697s _00000009
002012C8                          2698              ENDI
002012C8                          2699s _00000007
002012C8                          2700          ENDI
002012C8                          2701s _00000004
002012C8                          2702      ENDI
002012C8                          2703s _00000001
002012C8                          2704      
002012C8  4686                    2705      NOT.L D6                                    ; ones complement the checksum
002012CA  0286 000000FF           2706      ANDI.L #$FF,D6                              ; and take the LSByte
002012D0                          2707          
002012D0  7E00                    2708      MOVE.L #0,D7                                ; read the checksum from the data stream
002012D2                          2709m     DOWNLOAD D2,D3                              ; top byte
002012D2                          2710m WAIT_FOR_READY_188                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
002012D2                          2711m 
002012D2  1639 00C00003           2712m     MOVE.B DUART_SRA,D3                         ; CHECK FOR COMMAND
002012D8  0803 0000               2713m     BTST #0,D3                                  ; CHECK FOR CHARACTER
002012DC  6700 0010               2714m     BEQ CONTINUE_188                                ; NOTHING, CONTINUE
002012E0                          2715m  
002012E0                          2716mm     READ_CHAR D2
002012E0                 TRUE     2717mm     IFEQ DEBUG
002012E0  1439 00C00007           2718mm         MOVE.B DUART_RXA,D2                     ; GOT A CHARACTER, READ IT
002012E6                          2719mm     ENDC
002012E6                 FALSE    2720mm     IFNE DEBUG
002012E6                          2721mm     ENDC
002012E6                          2722mm      
002012E6  B43C 001B               2723mm     CMP.B #$1B,D2                               ; CHECK FOR ESCAPE AND GO TO START
002012EA  6700 ED1C               2724mm     BEQ START
002012EE                          2725mm     ENDM
002012EE                          2726m CONTINUE_188
002012EE  1639 00C00013           2727m     MOVE.B DUART_SRB,D3                         ; READ STATUS REGISTER
002012F4  0803 0000               2728m     BTST #0,D3                                  ; CHECK FOR CHARACTER
002012F8  67D8                    2729m     BEQ WAIT_FOR_READY_188                      ; NOTHING, CHECK AGAIN
002012FA                          2730m     
002012FA  1439 00C00017           2731m     MOVE.B DUART_RXB,D2                         ; GOT A CHARACTER, READ IT
00201300  13C2 00E00001           2732m     MOVE.B D2,DISPLAY                           ; ECHO TO THE DISPLAY
00201306                          2733m     
00201306                          2734m     ENDM
00201306                          2735m     HEX2BIN D2,D2,A0
00201306  41F9 002018EA           2736m     LEA HEX2BIN_LUT,A0                          ; LOAD THE LOOKUP TABLE
0020130C  0402 0030               2737m     SUB.B #'0',D2                               ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
00201310  C4BC 000000FF           2738m     AND.L #$FF,D2                               ; IGNORE THE TOP 3 BYTES
00201316  1430 2000               2739m     MOVE.B 0(A0,D2),D2                          ; USE THAT AS AN INDEX INTO THE LUT      
0020131A                          2740m     ENDM
0020131A  8E82                    2741      OR.L D2,D7
0020131C  E98F                    2742      LSL.L #4,D7
0020131E                          2743m     DOWNLOAD D2,D3                              ; bottom byte
0020131E                          2744m WAIT_FOR_READY_191                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
0020131E                          2745m 
0020131E  1639 00C00003           2746m     MOVE.B DUART_SRA,D3                         ; CHECK FOR COMMAND
00201324  0803 0000               2747m     BTST #0,D3                                  ; CHECK FOR CHARACTER
00201328  6700 0010               2748m     BEQ CONTINUE_191                                ; NOTHING, CONTINUE
0020132C                          2749m  
0020132C                          2750mm     READ_CHAR D2
0020132C                 TRUE     2751mm     IFEQ DEBUG
0020132C  1439 00C00007           2752mm         MOVE.B DUART_RXA,D2                     ; GOT A CHARACTER, READ IT
00201332                          2753mm     ENDC
00201332                 FALSE    2754mm     IFNE DEBUG
00201332                          2755mm     ENDC
00201332                          2756mm      
00201332  B43C 001B               2757mm     CMP.B #$1B,D2                               ; CHECK FOR ESCAPE AND GO TO START
00201336  6700 ECD0               2758mm     BEQ START
0020133A                          2759mm     ENDM
0020133A                          2760m CONTINUE_191
0020133A  1639 00C00013           2761m     MOVE.B DUART_SRB,D3                         ; READ STATUS REGISTER
00201340  0803 0000               2762m     BTST #0,D3                                  ; CHECK FOR CHARACTER
00201344  67D8                    2763m     BEQ WAIT_FOR_READY_191                      ; NOTHING, CHECK AGAIN
00201346                          2764m     
00201346  1439 00C00017           2765m     MOVE.B DUART_RXB,D2                         ; GOT A CHARACTER, READ IT
0020134C  13C2 00E00001           2766m     MOVE.B D2,DISPLAY                           ; ECHO TO THE DISPLAY
00201352                          2767m     
00201352                          2768m     ENDM
00201352                          2769m     HEX2BIN D2,D2,A0
00201352  41F9 002018EA           2770m     LEA HEX2BIN_LUT,A0                          ; LOAD THE LOOKUP TABLE
00201358  0402 0030               2771m     SUB.B #'0',D2                               ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
0020135C  C4BC 000000FF           2772m     AND.L #$FF,D2                               ; IGNORE THE TOP 3 BYTES
00201362  1430 2000               2773m     MOVE.B 0(A0,D2),D2                          ; USE THAT AS AN INDEX INTO THE LUT      
00201366                          2774m     ENDM
00201366  8E82                    2775      OR.L D2,D7
00201368                          2776                  
00201368                          2777      IF.B D7 <NE> D6 THEN.L
00201368  BE06                    2778s     CMP.B   D6,D7
0020136A  6700 00AA               2779s     BEQ.L   _0000000A
0020136E  41F9 002018B6           2780          LEA CS_FAILURE,A0                       ; warn for mismatched checksum
00201374                          2781m         PRINT_STR A0,D3
00201374                          2782m LOOP_194
00201374  0C10 0000               2783m     CMP.B #0,(A0)                               ; 0 -> DONE
00201378  6700 001A               2784m     BEQ EXIT_194
0020137C                          2785mm     PRINT_CHAR (A0)+,D3
0020137C                          2786mm WAIT_FOR_READY_195                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
0020137C                 TRUE     2787mm     IFEQ DEBUG
0020137C  1639 00C00003           2788mm         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
00201382  0803 0002               2789mm         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
00201386  67F4                    2790mm         BEQ WAIT_FOR_READY_195                      ; NO SPACE, CHECK AGAIN
00201388  13D8 00C00007           2791mm         MOVE.B (A0)+,DUART_TXA                      ; SEND THE NEXT CHARACTER
0020138E                          2792mm     ENDC
0020138E                          2793mm     
0020138E                 FALSE    2794mm     IFNE DEBUG
0020138E                          2795mm     ENDC
0020138E                          2796mm 
0020138E                          2797mm     ENDM
0020138E  4EF9 00201374           2798m     JMP LOOP_194
00201394                          2799m EXIT_194
00201394                          2800m     ENDM
00201394                          2801m         PRINT_REG D4,D3,D6,D7,A0
00201394                          2802mm     PRINT_CHAR #'0',D3                          ;0X HEADER
00201394                          2803mm WAIT_FOR_READY_197                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00201394                 TRUE     2804mm     IFEQ DEBUG
00201394  1639 00C00003           2805mm         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
0020139A  0803 0002               2806mm         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
0020139E  67F4                    2807mm         BEQ WAIT_FOR_READY_197                      ; NO SPACE, CHECK AGAIN
002013A0  13FC 0030 00C00007      2808mm         MOVE.B #'0',DUART_TXA                       ; SEND THE NEXT CHARACTER
002013A8                          2809mm     ENDC
002013A8                          2810mm     
002013A8                 FALSE    2811mm     IFNE DEBUG
002013A8                          2812mm     ENDC
002013A8                          2813mm 
002013A8                          2814mm     ENDM
002013A8                          2815mm     PRINT_CHAR #'x',D3
002013A8                          2816mm WAIT_FOR_READY_198                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
002013A8                 TRUE     2817mm     IFEQ DEBUG
002013A8  1639 00C00003           2818mm         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
002013AE  0803 0002               2819mm         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
002013B2  67F4                    2820mm         BEQ WAIT_FOR_READY_198                      ; NO SPACE, CHECK AGAIN
002013B4  13FC 0078 00C00007      2821mm         MOVE.B #'x',DUART_TXA                       ; SEND THE NEXT CHARACTER
002013BC                          2822mm     ENDC
002013BC                          2823mm     
002013BC                 FALSE    2824mm     IFNE DEBUG
002013BC                          2825mm     ENDC
002013BC                          2826mm 
002013BC                          2827mm     ENDM
002013BC  7E07                    2828m     MOVE.L #7,D7                                ; LOOP ROUND ALL 8 HEX CHARACTERS OF 4 BITS EACH
002013BE                          2829m LOOP_196
002013BE                          2830mm     BIN2HEX D4,D6,A0
002013BE  41F9 002018DA           2831mm     LEA BIN2HEX_LUT,A0                          ; LOAD THE LOOKUP TABLE
002013C4  E99C                    2832mm     ROL.L #4,D4                                 ; SHIFT THE TOP 4 BITS DOWN TO BOTTOM OF THE REGISTER THE AND MASK OFF EVERYTHING ELSE
002013C6  1C04                    2833mm     MOVE.B D4,D6
002013C8  0286 0000000F           2834mm     ANDI.L #$F,D6
002013CE  1C30 6000               2835mm     MOVE.B 0(A0,D6),D6                          ; USE THAT AS AN INDEX INTO THE LUT
002013D2                          2836mm     ENDM
002013D2                          2837mm     PRINT_CHAR D6,D3
002013D2                          2838mm WAIT_FOR_READY_200                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
002013D2                 TRUE     2839mm     IFEQ DEBUG
002013D2  1639 00C00003           2840mm         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
002013D8  0803 0002               2841mm         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
002013DC  67F4                    2842mm         BEQ WAIT_FOR_READY_200                      ; NO SPACE, CHECK AGAIN
002013DE  13C6 00C00007           2843mm         MOVE.B D6,DUART_TXA                     ; SEND THE NEXT CHARACTER
002013E4                          2844mm     ENDC
002013E4                          2845mm     
002013E4                 FALSE    2846mm     IFNE DEBUG
002013E4                          2847mm     ENDC
002013E4                          2848mm 
002013E4                          2849mm     ENDM
002013E4  57CF FFD8               2850m     DBEQ D7,LOOP_196
002013E8                          2851m     ENDM
002013E8                          2852m         PRINT_CRLF D3
002013E8                          2853mm     PRINT_CHAR #13,D3                           ; CR
002013E8                          2854mm WAIT_FOR_READY_202                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
002013E8                 TRUE     2855mm     IFEQ DEBUG
002013E8  1639 00C00003           2856mm         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
002013EE  0803 0002               2857mm         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
002013F2  67F4                    2858mm         BEQ WAIT_FOR_READY_202                      ; NO SPACE, CHECK AGAIN
002013F4  13FC 000D 00C00007      2859mm         MOVE.B #13,DUART_TXA                    ; SEND THE NEXT CHARACTER
002013FC                          2860mm     ENDC
002013FC                          2861mm     
002013FC                 FALSE    2862mm     IFNE DEBUG
002013FC                          2863mm     ENDC
002013FC                          2864mm 
002013FC                          2865mm     ENDM
002013FC                          2866mm     PRINT_CHAR #10,D3                           ; LF
002013FC                          2867mm WAIT_FOR_READY_203                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
002013FC                 TRUE     2868mm     IFEQ DEBUG
002013FC  1639 00C00003           2869mm         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
00201402  0803 0002               2870mm         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
00201406  67F4                    2871mm         BEQ WAIT_FOR_READY_203                      ; NO SPACE, CHECK AGAIN
00201408  13FC 000A 00C00007      2872mm         MOVE.B #10,DUART_TXA                    ; SEND THE NEXT CHARACTER
00201410                          2873mm     ENDC
00201410                          2874mm     
00201410                 FALSE    2875mm     IFNE DEBUG
00201410                          2876mm     ENDC
00201410                          2877mm 
00201410                          2878mm     ENDM
00201410                          2879m     ENDM
00201410  4EF9 00200188           2880          JMP MAIN_LOOP
00201416                          2881      ENDI
00201416                          2882s _0000000A
00201416                          2883      
00201416  4ED1                    2884      JMP (A1)
00201418                          2885  DOWNLOAD_DONE
00201418                          2886m     PRINT_REG D4,D3,D7,D6,A0                    ; print out number of Srecords read
00201418                          2887mm     PRINT_CHAR #'0',D3                          ;0X HEADER
00201418                          2888mm WAIT_FOR_READY_205                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00201418                 TRUE     2889mm     IFEQ DEBUG
00201418  1639 00C00003           2890mm         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
0020141E  0803 0002               2891mm         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
00201422  67F4                    2892mm         BEQ WAIT_FOR_READY_205                      ; NO SPACE, CHECK AGAIN
00201424  13FC 0030 00C00007      2893mm         MOVE.B #'0',DUART_TXA                       ; SEND THE NEXT CHARACTER
0020142C                          2894mm     ENDC
0020142C                          2895mm     
0020142C                 FALSE    2896mm     IFNE DEBUG
0020142C                          2897mm     ENDC
0020142C                          2898mm 
0020142C                          2899mm     ENDM
0020142C                          2900mm     PRINT_CHAR #'x',D3
0020142C                          2901mm WAIT_FOR_READY_206                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
0020142C                 TRUE     2902mm     IFEQ DEBUG
0020142C  1639 00C00003           2903mm         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
00201432  0803 0002               2904mm         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
00201436  67F4                    2905mm         BEQ WAIT_FOR_READY_206                      ; NO SPACE, CHECK AGAIN
00201438  13FC 0078 00C00007      2906mm         MOVE.B #'x',DUART_TXA                       ; SEND THE NEXT CHARACTER
00201440                          2907mm     ENDC
00201440                          2908mm     
00201440                 FALSE    2909mm     IFNE DEBUG
00201440                          2910mm     ENDC
00201440                          2911mm 
00201440                          2912mm     ENDM
00201440  7C07                    2913m     MOVE.L #7,D6                                ; LOOP ROUND ALL 8 HEX CHARACTERS OF 4 BITS EACH
00201442                          2914m LOOP_204
00201442                          2915mm     BIN2HEX D4,D7,A0
00201442  41F9 002018DA           2916mm     LEA BIN2HEX_LUT,A0                          ; LOAD THE LOOKUP TABLE
00201448  E99C                    2917mm     ROL.L #4,D4                                 ; SHIFT THE TOP 4 BITS DOWN TO BOTTOM OF THE REGISTER THE AND MASK OFF EVERYTHING ELSE
0020144A  1E04                    2918mm     MOVE.B D4,D7
0020144C  0287 0000000F           2919mm     ANDI.L #$F,D7
00201452  1E30 7000               2920mm     MOVE.B 0(A0,D7),D7                          ; USE THAT AS AN INDEX INTO THE LUT
00201456                          2921mm     ENDM
00201456                          2922mm     PRINT_CHAR D7,D3
00201456                          2923mm WAIT_FOR_READY_208                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00201456                 TRUE     2924mm     IFEQ DEBUG
00201456  1639 00C00003           2925mm         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
0020145C  0803 0002               2926mm         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
00201460  67F4                    2927mm         BEQ WAIT_FOR_READY_208                      ; NO SPACE, CHECK AGAIN
00201462  13C7 00C00007           2928mm         MOVE.B D7,DUART_TXA                     ; SEND THE NEXT CHARACTER
00201468                          2929mm     ENDC
00201468                          2930mm     
00201468                 FALSE    2931mm     IFNE DEBUG
00201468                          2932mm     ENDC
00201468                          2933mm 
00201468                          2934mm     ENDM
00201468  57CE FFD8               2935m     DBEQ D6,LOOP_204
0020146C                          2936m     ENDM
0020146C  41F9 0020187D           2937      LEA READ,A0
00201472                          2938m     PRINT_STR A0,D3
00201472                          2939m LOOP_209
00201472  0C10 0000               2940m     CMP.B #0,(A0)                               ; 0 -> DONE
00201476  6700 001A               2941m     BEQ EXIT_209
0020147A                          2942mm     PRINT_CHAR (A0)+,D3
0020147A                          2943mm WAIT_FOR_READY_210                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
0020147A                 TRUE     2944mm     IFEQ DEBUG
0020147A  1639 00C00003           2945mm         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
00201480  0803 0002               2946mm         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
00201484  67F4                    2947mm         BEQ WAIT_FOR_READY_210                      ; NO SPACE, CHECK AGAIN
00201486  13D8 00C00007           2948mm         MOVE.B (A0)+,DUART_TXA                      ; SEND THE NEXT CHARACTER
0020148C                          2949mm     ENDC
0020148C                          2950mm     
0020148C                 FALSE    2951mm     IFNE DEBUG
0020148C                          2952mm     ENDC
0020148C                          2953mm 
0020148C                          2954mm     ENDM
0020148C  4EF9 00201472           2955m     JMP LOOP_209
00201492                          2956m EXIT_209
00201492                          2957m     ENDM
00201492  2E0A                    2958      MOVE.L A2,D7                                ; set address accumulator to start address
00201494                          2959m     PRINT_REG D7,D3,D2,D6,A0                    ; print out start address
00201494                          2960mm     PRINT_CHAR #'0',D3                          ;0X HEADER
00201494                          2961mm WAIT_FOR_READY_212                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00201494                 TRUE     2962mm     IFEQ DEBUG
00201494  1639 00C00003           2963mm         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
0020149A  0803 0002               2964mm         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
0020149E  67F4                    2965mm         BEQ WAIT_FOR_READY_212                      ; NO SPACE, CHECK AGAIN
002014A0  13FC 0030 00C00007      2966mm         MOVE.B #'0',DUART_TXA                       ; SEND THE NEXT CHARACTER
002014A8                          2967mm     ENDC
002014A8                          2968mm     
002014A8                 FALSE    2969mm     IFNE DEBUG
002014A8                          2970mm     ENDC
002014A8                          2971mm 
002014A8                          2972mm     ENDM
002014A8                          2973mm     PRINT_CHAR #'x',D3
002014A8                          2974mm WAIT_FOR_READY_213                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
002014A8                 TRUE     2975mm     IFEQ DEBUG
002014A8  1639 00C00003           2976mm         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
002014AE  0803 0002               2977mm         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
002014B2  67F4                    2978mm         BEQ WAIT_FOR_READY_213                      ; NO SPACE, CHECK AGAIN
002014B4  13FC 0078 00C00007      2979mm         MOVE.B #'x',DUART_TXA                       ; SEND THE NEXT CHARACTER
002014BC                          2980mm     ENDC
002014BC                          2981mm     
002014BC                 FALSE    2982mm     IFNE DEBUG
002014BC                          2983mm     ENDC
002014BC                          2984mm 
002014BC                          2985mm     ENDM
002014BC  7C07                    2986m     MOVE.L #7,D6                                ; LOOP ROUND ALL 8 HEX CHARACTERS OF 4 BITS EACH
002014BE                          2987m LOOP_211
002014BE                          2988mm     BIN2HEX D7,D2,A0
002014BE  41F9 002018DA           2989mm     LEA BIN2HEX_LUT,A0                          ; LOAD THE LOOKUP TABLE
002014C4  E99F                    2990mm     ROL.L #4,D7                                 ; SHIFT THE TOP 4 BITS DOWN TO BOTTOM OF THE REGISTER THE AND MASK OFF EVERYTHING ELSE
002014C6  1407                    2991mm     MOVE.B D7,D2
002014C8  0282 0000000F           2992mm     ANDI.L #$F,D2
002014CE  1430 2000               2993mm     MOVE.B 0(A0,D2),D2                          ; USE THAT AS AN INDEX INTO THE LUT
002014D2                          2994mm     ENDM
002014D2                          2995mm     PRINT_CHAR D2,D3
002014D2                          2996mm WAIT_FOR_READY_215                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
002014D2                 TRUE     2997mm     IFEQ DEBUG
002014D2  1639 00C00003           2998mm         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
002014D8  0803 0002               2999mm         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
002014DC  67F4                    3000mm         BEQ WAIT_FOR_READY_215                      ; NO SPACE, CHECK AGAIN
002014DE  13C2 00C00007           3001mm         MOVE.B D2,DUART_TXA                     ; SEND THE NEXT CHARACTER
002014E4                          3002mm     ENDC
002014E4                          3003mm     
002014E4                 FALSE    3004mm     IFNE DEBUG
002014E4                          3005mm     ENDC
002014E4                          3006mm 
002014E4                          3007mm     ENDM
002014E4  57CE FFD8               3008m     DBEQ D6,LOOP_211
002014E8                          3009m     ENDM
002014E8                          3010m     PRINT_CRLF D3     
002014E8                          3011mm     PRINT_CHAR #13,D3                           ; CR
002014E8                          3012mm WAIT_FOR_READY_217                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
002014E8                 TRUE     3013mm     IFEQ DEBUG
002014E8  1639 00C00003           3014mm         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
002014EE  0803 0002               3015mm         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
002014F2  67F4                    3016mm         BEQ WAIT_FOR_READY_217                      ; NO SPACE, CHECK AGAIN
002014F4  13FC 000D 00C00007      3017mm         MOVE.B #13,DUART_TXA                    ; SEND THE NEXT CHARACTER
002014FC                          3018mm     ENDC
002014FC                          3019mm     
002014FC                 FALSE    3020mm     IFNE DEBUG
002014FC                          3021mm     ENDC
002014FC                          3022mm 
002014FC                          3023mm     ENDM
002014FC                          3024mm     PRINT_CHAR #10,D3                           ; LF
002014FC                          3025mm WAIT_FOR_READY_218                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
002014FC                 TRUE     3026mm     IFEQ DEBUG
002014FC  1639 00C00003           3027mm         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
00201502  0803 0002               3028mm         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
00201506  67F4                    3029mm         BEQ WAIT_FOR_READY_218                      ; NO SPACE, CHECK AGAIN
00201508  13FC 000A 00C00007      3030mm         MOVE.B #10,DUART_TXA                    ; SEND THE NEXT CHARACTER
00201510                          3031mm     ENDC
00201510                          3032mm     
00201510                 FALSE    3033mm     IFNE DEBUG
00201510                          3034mm     ENDC
00201510                          3035mm 
00201510                          3036mm     ENDM
00201510                          3037m     ENDM
00201510                          3038          
00201510  4EF9 00200188           3039      JMP MAIN_LOOP
00201516                          3040      
00201516                          3041  G
00201516  2047                    3042      MOVE.L D7,A0                                ; address accumulator -> address register
00201518  3E3C 0000               3043      MOVE #0,D7                                  ; clear the now used address accumulator
0020151C  4ED0                    3044      JMP (A0)                                    ; jump to it!
0020151E                          3045      
0020151E                          3046  Z
0020151E  207C 00200000           3047      MOVE.L #RAM,A0                              ; address of RAM
00201524  7000                    3048      MOVE.L #0,D0                                ; number of bytes
00201526                          3049     
00201526                          3050      WHILE.L D0 <LE> #$40000 DO                  ; read the data bytes
00201526                          3051s _10000004
00201526  B0BC 00040000           3052s     CMP.L   #$40000,D0
0020152C  6E00 001A               3053s     BGT _10000005
00201530                          3054         
00201530  2200                    3055          MOVE.L D0,D1                            ; progress update
00201532  E089                    3056          LSR.L #8,D1 
00201534  E089                    3057          LSR.L #8,D1
00201536  0281 0000000F           3058          ANDI.L #$F,D1
0020153C  13C1 00E00001           3059          MOVE.B D1,DISPLAY
00201542                          3060  
00201542  20C0                    3061          MOVE.L D0,(A0)+ 
00201544  5880                    3062          ADD.L #4,D0
00201546                          3063      ENDW
00201546  60DE                    3064s     BRA _10000004
00201548                          3065s _10000005
00201548                          3066   
00201548  207C 00200000           3067      MOVE.L #RAM,A0                              ; address of RAM
0020154E  7000                    3068      MOVE.L #0,D0                                ; number of bytes
00201550                          3069     
00201550                          3070      WHILE.L D0 <LE> #$40000 DO                  ; read the data bytes
00201550                          3071s _10000006
00201550  B0BC 00040000           3072s     CMP.L   #$40000,D0
00201556  6E00 00CC               3073s     BGT _10000007
0020155A                          3074  
0020155A  2200                    3075          MOVE.L D0,D1                            ; progress update
0020155C  E089                    3076          LSR.L #8,D1
0020155E  E089                    3077          LSR.L #8,D1
00201560  0281 0000000F           3078          ANDI.L #$F,D1
00201566  13C1 00E00001           3079          MOVE.B D1,DISPLAY
0020156C                          3080  
0020156C  2218                    3081          MOVE.L (A0)+,D1
0020156E                          3082            
0020156E                          3083          IF.L D0 <EQ> D1 THEN
0020156E  B081                    3084s     CMP.L   D1,D0
00201570  6600 0006               3085s     BNE _0000000B
00201574  6000 00A8               3086              BRA OK
00201578                          3087          ENDI 
00201578                          3088s _0000000B
00201578                          3089            
00201578  43F9 002018C8           3090          LEA RAM_ERROR,A1
0020157E                          3091m         PRINT_STR A1,D1
0020157E                          3092m LOOP_219
0020157E  0C11 0000               3093m     CMP.B #0,(A1)                               ; 0 -> DONE
00201582  6700 001A               3094m     BEQ EXIT_219
00201586                          3095mm     PRINT_CHAR (A1)+,D1
00201586                          3096mm WAIT_FOR_READY_220                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00201586                 TRUE     3097mm     IFEQ DEBUG
00201586  1239 00C00003           3098mm         MOVE.B DUART_SRA,D1                     ; READ STATUS REGISTER
0020158C  0801 0002               3099mm         BTST #2,D1                              ; CHECK FOR SPACE TO SEND
00201590  67F4                    3100mm         BEQ WAIT_FOR_READY_220                      ; NO SPACE, CHECK AGAIN
00201592  13D9 00C00007           3101mm         MOVE.B (A1)+,DUART_TXA                      ; SEND THE NEXT CHARACTER
00201598                          3102mm     ENDC
00201598                          3103mm     
00201598                 FALSE    3104mm     IFNE DEBUG
00201598                          3105mm     ENDC
00201598                          3106mm 
00201598                          3107mm     ENDM
00201598  4EF9 0020157E           3108m     JMP LOOP_219
0020159E                          3109m EXIT_219
0020159E                          3110m     ENDM
0020159E  2208                    3111          MOVE.L A0,D1
002015A0  5981                    3112          SUB.L #4,D1
002015A2                          3113m         PRINT_REG D1,D3,D2,D6,A1                ; print out failure address
002015A2                          3114mm     PRINT_CHAR #'0',D3                          ;0X HEADER
002015A2                          3115mm WAIT_FOR_READY_222                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
002015A2                 TRUE     3116mm     IFEQ DEBUG
002015A2  1639 00C00003           3117mm         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
002015A8  0803 0002               3118mm         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
002015AC  67F4                    3119mm         BEQ WAIT_FOR_READY_222                      ; NO SPACE, CHECK AGAIN
002015AE  13FC 0030 00C00007      3120mm         MOVE.B #'0',DUART_TXA                       ; SEND THE NEXT CHARACTER
002015B6                          3121mm     ENDC
002015B6                          3122mm     
002015B6                 FALSE    3123mm     IFNE DEBUG
002015B6                          3124mm     ENDC
002015B6                          3125mm 
002015B6                          3126mm     ENDM
002015B6                          3127mm     PRINT_CHAR #'x',D3
002015B6                          3128mm WAIT_FOR_READY_223                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
002015B6                 TRUE     3129mm     IFEQ DEBUG
002015B6  1639 00C00003           3130mm         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
002015BC  0803 0002               3131mm         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
002015C0  67F4                    3132mm         BEQ WAIT_FOR_READY_223                      ; NO SPACE, CHECK AGAIN
002015C2  13FC 0078 00C00007      3133mm         MOVE.B #'x',DUART_TXA                       ; SEND THE NEXT CHARACTER
002015CA                          3134mm     ENDC
002015CA                          3135mm     
002015CA                 FALSE    3136mm     IFNE DEBUG
002015CA                          3137mm     ENDC
002015CA                          3138mm 
002015CA                          3139mm     ENDM
002015CA  7C07                    3140m     MOVE.L #7,D6                                ; LOOP ROUND ALL 8 HEX CHARACTERS OF 4 BITS EACH
002015CC                          3141m LOOP_221
002015CC                          3142mm     BIN2HEX D1,D2,A1
002015CC  43F9 002018DA           3143mm     LEA BIN2HEX_LUT,A1                          ; LOAD THE LOOKUP TABLE
002015D2  E999                    3144mm     ROL.L #4,D1                                 ; SHIFT THE TOP 4 BITS DOWN TO BOTTOM OF THE REGISTER THE AND MASK OFF EVERYTHING ELSE
002015D4  1401                    3145mm     MOVE.B D1,D2
002015D6  0282 0000000F           3146mm     ANDI.L #$F,D2
002015DC  1431 2000               3147mm     MOVE.B 0(A1,D2),D2                          ; USE THAT AS AN INDEX INTO THE LUT
002015E0                          3148mm     ENDM
002015E0                          3149mm     PRINT_CHAR D2,D3
002015E0                          3150mm WAIT_FOR_READY_225                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
002015E0                 TRUE     3151mm     IFEQ DEBUG
002015E0  1639 00C00003           3152mm         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
002015E6  0803 0002               3153mm         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
002015EA  67F4                    3154mm         BEQ WAIT_FOR_READY_225                      ; NO SPACE, CHECK AGAIN
002015EC  13C2 00C00007           3155mm         MOVE.B D2,DUART_TXA                     ; SEND THE NEXT CHARACTER
002015F2                          3156mm     ENDC
002015F2                          3157mm     
002015F2                 FALSE    3158mm     IFNE DEBUG
002015F2                          3159mm     ENDC
002015F2                          3160mm 
002015F2                          3161mm     ENDM
002015F2  57CE FFD8               3162m     DBEQ D6,LOOP_221
002015F6                          3163m     ENDM
002015F6                          3164m         PRINT_CRLF D3
002015F6                          3165mm     PRINT_CHAR #13,D3                           ; CR
002015F6                          3166mm WAIT_FOR_READY_227                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
002015F6                 TRUE     3167mm     IFEQ DEBUG
002015F6  1639 00C00003           3168mm         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
002015FC  0803 0002               3169mm         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
00201600  67F4                    3170mm         BEQ WAIT_FOR_READY_227                      ; NO SPACE, CHECK AGAIN
00201602  13FC 000D 00C00007      3171mm         MOVE.B #13,DUART_TXA                    ; SEND THE NEXT CHARACTER
0020160A                          3172mm     ENDC
0020160A                          3173mm     
0020160A                 FALSE    3174mm     IFNE DEBUG
0020160A                          3175mm     ENDC
0020160A                          3176mm 
0020160A                          3177mm     ENDM
0020160A                          3178mm     PRINT_CHAR #10,D3                           ; LF
0020160A                          3179mm WAIT_FOR_READY_228                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
0020160A                 TRUE     3180mm     IFEQ DEBUG
0020160A  1639 00C00003           3181mm         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
00201610  0803 0002               3182mm         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
00201614  67F4                    3183mm         BEQ WAIT_FOR_READY_228                      ; NO SPACE, CHECK AGAIN
00201616  13FC 000A 00C00007      3184mm         MOVE.B #10,DUART_TXA                    ; SEND THE NEXT CHARACTER
0020161E                          3185mm     ENDC
0020161E                          3186mm     
0020161E                 FALSE    3187mm     IFNE DEBUG
0020161E                          3188mm     ENDC
0020161E                          3189mm 
0020161E                          3190mm     ENDM
0020161E                          3191m     ENDM
0020161E                          3192  OK    
0020161E  5880                    3193          ADD.L #4,D0
00201620                          3194      ENDW
00201620  6000 FF2E               3195s     BRA _10000006
00201624                          3196s _10000007
00201624                          3197      
00201624  4EF9 00200188           3198      JMP MAIN_LOOP
0020162A                          3199    
0020162A                          3200  L
0020162A  7A00                    3201      MOVE.L #0,D5                                ; D5 will be the length  to write            
0020162C                          3202  
0020162C                          3203m     WAIT_CHAR D2,D3                             ; read most significant character -> D2
0020162C                          3204m WAIT_FOR_READY_229                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
0020162C                          3205m 
0020162C                 TRUE     3206m     IFEQ DEBUG
0020162C  1639 00C00003           3207m         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
00201632  0803 0000               3208m         BTST #0,D3                              ; CHECK FOR CHARACTER
00201636  67F4                    3209m         BEQ WAIT_FOR_READY_229                      ; NOTHING, CHECK AGAIN
00201638                          3210m     ENDC
00201638                          3211m     
00201638                          3212mm     READ_CHAR D2
00201638                 TRUE     3213mm     IFEQ DEBUG
00201638  1439 00C00007           3214mm         MOVE.B DUART_RXA,D2                     ; GOT A CHARACTER, READ IT
0020163E                          3215mm     ENDC
0020163E                 FALSE    3216mm     IFNE DEBUG
0020163E                          3217mm     ENDC
0020163E                          3218mm      
0020163E  B43C 001B               3219mm     CMP.B #$1B,D2                               ; CHECK FOR ESCAPE AND GO TO START
00201642  6700 E9C4               3220mm     BEQ START
00201646                          3221mm     ENDM
00201646                          3222m 
00201646                 TRUE     3223m     IFEQ DEBUG
00201646                          3224mm         PRINT_CHAR D2,D3                        ; ECHO IT BACK
00201646                          3225mm WAIT_FOR_READY_231                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00201646                 TRUE     3226mm     IFEQ DEBUG
00201646  1639 00C00003           3227mm         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
0020164C  0803 0002               3228mm         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
00201650  67F4                    3229mm         BEQ WAIT_FOR_READY_231                      ; NO SPACE, CHECK AGAIN
00201652  13C2 00C00007           3230mm         MOVE.B D2,DUART_TXA                     ; SEND THE NEXT CHARACTER
00201658                          3231mm     ENDC
00201658                          3232mm     
00201658                 FALSE    3233mm     IFNE DEBUG
00201658                          3234mm     ENDC
00201658                          3235mm 
00201658                          3236mm     ENDM
00201658                          3237m     ENDC
00201658                          3238m     ENDM
00201658                          3239m     HEX2BIN D2,D2,A0                            ; convert to binary -> D2
00201658  41F9 002018EA           3240m     LEA HEX2BIN_LUT,A0                          ; LOAD THE LOOKUP TABLE
0020165E  0402 0030               3241m     SUB.B #'0',D2                               ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
00201662  C4BC 000000FF           3242m     AND.L #$FF,D2                               ; IGNORE THE TOP 3 BYTES
00201668  1430 2000               3243m     MOVE.B 0(A0,D2),D2                          ; USE THAT AS AN INDEX INTO THE LUT      
0020166C                          3244m     ENDM
0020166C  1A02                    3245      MOVE.B D2,D5                                ; put at bottom of D5
0020166E                          3246  
0020166E  3C3C 0002               3247      MOVE #2,D6                                  ; 3 bytes left to read
00201672                          3248      
00201672                          3249  READ_LENGTH
00201672  E98D                    3250      LSL.L #4,D5                                 ; make what we have so far more significant
00201674                          3251m     WAIT_CHAR D2,D3                             ; next character -> D2
00201674                          3252m WAIT_FOR_READY_233                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00201674                          3253m 
00201674                 TRUE     3254m     IFEQ DEBUG
00201674  1639 00C00003           3255m         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
0020167A  0803 0000               3256m         BTST #0,D3                              ; CHECK FOR CHARACTER
0020167E  67F4                    3257m         BEQ WAIT_FOR_READY_233                      ; NOTHING, CHECK AGAIN
00201680                          3258m     ENDC
00201680                          3259m     
00201680                          3260mm     READ_CHAR D2
00201680                 TRUE     3261mm     IFEQ DEBUG
00201680  1439 00C00007           3262mm         MOVE.B DUART_RXA,D2                     ; GOT A CHARACTER, READ IT
00201686                          3263mm     ENDC
00201686                 FALSE    3264mm     IFNE DEBUG
00201686                          3265mm     ENDC
00201686                          3266mm      
00201686  B43C 001B               3267mm     CMP.B #$1B,D2                               ; CHECK FOR ESCAPE AND GO TO START
0020168A  6700 E97C               3268mm     BEQ START
0020168E                          3269mm     ENDM
0020168E                          3270m 
0020168E                 TRUE     3271m     IFEQ DEBUG
0020168E                          3272mm         PRINT_CHAR D2,D3                        ; ECHO IT BACK
0020168E                          3273mm WAIT_FOR_READY_235                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
0020168E                 TRUE     3274mm     IFEQ DEBUG
0020168E  1639 00C00003           3275mm         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
00201694  0803 0002               3276mm         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
00201698  67F4                    3277mm         BEQ WAIT_FOR_READY_235                      ; NO SPACE, CHECK AGAIN
0020169A  13C2 00C00007           3278mm         MOVE.B D2,DUART_TXA                     ; SEND THE NEXT CHARACTER
002016A0                          3279mm     ENDC
002016A0                          3280mm     
002016A0                 FALSE    3281mm     IFNE DEBUG
002016A0                          3282mm     ENDC
002016A0                          3283mm 
002016A0                          3284mm     ENDM
002016A0                          3285m     ENDC
002016A0                          3286m     ENDM
002016A0                          3287m     HEX2BIN D2,D2,A0                            ; convert to binary -> D2
002016A0  41F9 002018EA           3288m     LEA HEX2BIN_LUT,A0                          ; LOAD THE LOOKUP TABLE
002016A6  0402 0030               3289m     SUB.B #'0',D2                               ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
002016AA  C4BC 000000FF           3290m     AND.L #$FF,D2                               ; IGNORE THE TOP 3 BYTES
002016B0  1430 2000               3291m     MOVE.B 0(A0,D2),D2                          ; USE THAT AS AN INDEX INTO THE LUT      
002016B4                          3292m     ENDM
002016B4  8A02                    3293      OR.B D2,D5
002016B6  023C 00FB               3294      ANDI #$FB,CCR                               ; clear the Z bit if set (from the OR above)
002016BA  57CE FFB6               3295      DBEQ D6,READ_LENGTH
002016BE                          3296          
002016BE                          3297m     PRINT_CRLF D3
002016BE                          3298mm     PRINT_CHAR #13,D3                           ; CR
002016BE                          3299mm WAIT_FOR_READY_238                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
002016BE                 TRUE     3300mm     IFEQ DEBUG
002016BE  1639 00C00003           3301mm         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
002016C4  0803 0002               3302mm         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
002016C8  67F4                    3303mm         BEQ WAIT_FOR_READY_238                      ; NO SPACE, CHECK AGAIN
002016CA  13FC 000D 00C00007      3304mm         MOVE.B #13,DUART_TXA                    ; SEND THE NEXT CHARACTER
002016D2                          3305mm     ENDC
002016D2                          3306mm     
002016D2                 FALSE    3307mm     IFNE DEBUG
002016D2                          3308mm     ENDC
002016D2                          3309mm 
002016D2                          3310mm     ENDM
002016D2                          3311mm     PRINT_CHAR #10,D3                           ; LF
002016D2                          3312mm WAIT_FOR_READY_239                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
002016D2                 TRUE     3313mm     IFEQ DEBUG
002016D2  1639 00C00003           3314mm         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
002016D8  0803 0002               3315mm         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
002016DC  67F4                    3316mm         BEQ WAIT_FOR_READY_239                      ; NO SPACE, CHECK AGAIN
002016DE  13FC 000A 00C00007      3317mm         MOVE.B #10,DUART_TXA                    ; SEND THE NEXT CHARACTER
002016E6                          3318mm     ENDC
002016E6                          3319mm     
002016E6                 FALSE    3320mm     IFNE DEBUG
002016E6                          3321mm     ENDC
002016E6                          3322mm 
002016E6                          3323mm     ENDM
002016E6                          3324m     ENDM
002016E6                          3325  
002016E6  207C 00000000           3326      MOVE.L #ROM,A0                              ; start of ROM
002016EC                          3327      
002016EC  2247                    3328      MOVE.L D7,A1                                ; address accumulator -> address register
002016EE  7E00                    3329      MOVE.L #0,D7                                ; clear the now used address accumulator
002016F0                          3330      
002016F0  267C 00002AAA           3331      MOVE.L #$2AAA,A3
002016F6  36BC AAAA               3332      MOVE.W #$AAAA,(A3)
002016FA  267C 00001554           3333      MOVE.L #$1554,A3
00201700  36BC 5555               3334      MOVE.W #$5555,(A3)
00201704  267C 00002AAA           3335      MOVE.L #$2AAA,A3
0020170A  36BC 8080               3336      MOVE.W #$8080,(A3)
0020170E  267C 00002AAA           3337      MOVE.L #$2AAA,A3
00201714  36BC AAAA               3338      MOVE.W #$AAAA,(A3)
00201718  267C 00001554           3339      MOVE.L #$1554,A3
0020171E  36BC 5555               3340      MOVE.W #$5555,(A3)
00201722  267C 00002AAA           3341      MOVE.L #$2AAA,A3
00201728  36BC 2020               3342      MOVE.W #$2020,(A3)
0020172C                          3343      
0020172C  45F9 00201901           3344      LEA LOADING,A2                              ; important for timing
00201732                          3345m     PRINT_STR A2,D3
00201732                          3346m LOOP_240
00201732  0C12 0000               3347m     CMP.B #0,(A2)                               ; 0 -> DONE
00201736  6700 001A               3348m     BEQ EXIT_240
0020173A                          3349mm     PRINT_CHAR (A2)+,D3
0020173A                          3350mm WAIT_FOR_READY_241                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
0020173A                 TRUE     3351mm     IFEQ DEBUG
0020173A  1639 00C00003           3352mm         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
00201740  0803 0002               3353mm         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
00201744  67F4                    3354mm         BEQ WAIT_FOR_READY_241                      ; NO SPACE, CHECK AGAIN
00201746  13DA 00C00007           3355mm         MOVE.B (A2)+,DUART_TXA                      ; SEND THE NEXT CHARACTER
0020174C                          3356mm     ENDC
0020174C                          3357mm     
0020174C                 FALSE    3358mm     IFNE DEBUG
0020174C                          3359mm     ENDC
0020174C                          3360mm 
0020174C                          3361mm     ENDM
0020174C  4EF9 00201732           3362m     JMP LOOP_240
00201752                          3363m EXIT_240
00201752                          3364m     ENDM
00201752                          3365  
00201752  023C 00FB               3366      ANDI #$FB,CCR                               ; clear the Z bit if set (from the OR above)
00201756                          3367      
00201756                          3368      WHILE D5 <GT> #0 DO
00201756                          3369s _10000008
00201756  BA7C 0000               3370s     CMP.W   #0,D5
0020175A  6F00 0020               3371s     BLE _10000009
0020175E  5585                    3372          SUB.L #2,D5
00201760                          3373            
00201760  13D1 00E00001           3374          MOVE.B (A1),DISPLAY
00201766  3091                    3375          MOVE.W (A1),(A0)                        ; write the data
00201768                          3376        
00201768                          3377  WAIT_FOR_COMPLETE
00201768  3410                    3378          MOVE.W (A0),D2
0020176A                          3379  
0020176A                          3380          IF D2 <NE> (A1) THEN
0020176A  B451                    3381s     CMP.W   (A1),D2
0020176C  6700 0008               3382s     BEQ _0000000C
00201770  4EF9 00201768           3383              JMP WAIT_FOR_COMPLETE
00201776                          3384          ENDI
00201776                          3385s _0000000C
00201776                          3386        
00201776  5488                    3387          ADD.L #2,A0
00201778  5489                    3388          ADD.L #2,A1
0020177A                          3389      ENDW  
0020177A  60DA                    3390s     BRA _10000008
0020177C                          3391s _10000009
0020177C                          3392      
0020177C  267C 00002AAA           3393      MOVE.L #$2AAA,A3
00201782  36BC AAAA               3394      MOVE.W #$AAAA,(A3)
00201786  267C 00001554           3395      MOVE.L #$1554,A3
0020178C  36BC 5555               3396      MOVE.W #$5555,(A3)
00201790  267C 00002AAA           3397      MOVE.L #$2AAA,A3
00201796  36BC A0A0               3398      MOVE.W #$A0A0,(A3)
0020179A                          3399              
0020179A  4EF9 00200188           3400      JMP MAIN_LOOP
002017A0                          3401          
002017A0                          3402  HEX_DIGIT
002017A0  E98F                    3403      LSL.L #4,D7                                 ; add the next digit in the next 4 bits
002017A2                          3404m     HEX2BIN D2,D2,A0
002017A2  41F9 002018EA           3405m     LEA HEX2BIN_LUT,A0                          ; LOAD THE LOOKUP TABLE
002017A8  0402 0030               3406m     SUB.B #'0',D2                               ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
002017AC  C4BC 000000FF           3407m     AND.L #$FF,D2                               ; IGNORE THE TOP 3 BYTES
002017B2  1430 2000               3408m     MOVE.B 0(A0,D2),D2                          ; USE THAT AS AN INDEX INTO THE LUT      
002017B6                          3409m     ENDM
002017B6  8E02                    3410      OR.B D2,D7  
002017B8  4EF9 002001B0           3411      JMP GET_INPUT
002017BE                          3412  
002017BE  FFFF FFFF               3413      SIMHALT                                     ; halt simulator
002017C2                          3414  
002017C2                          3415  ; strings
002017C2= 4D 44 46 2D 6D 6F ...   3416  VERSION DC.B 'MDF-mon V1.32 (08/04/2021)',13,10,0
002017DF= 3F 20 48 65 6C 70 ...   3417  HELP    DC.B '? Help',13,10,'V Version',13,10,'xxxxxxxxR Read long',13,10,'xxxxxxxxWxxxxxxxx Write long',13,10,'S download S records',13,10,'xxxxxxxxG Go',13,10,'Z Zap memory',10,13,'xxxxxxxxLxxxx Load to EEPROM',10,13,0
00201876= 48 75 68 3F 0D 0A 00    3418  HUH     DC.B 'Huh?',13,10,0
0020187D= 20 53 20 72 65 63 ...   3419  READ    DC.B ' S records read, start address = ',0
0020189F= 57 3A 20 55 6E 6B ...   3420  UNREC   DC.B 'W: Unknown Srec type: ',0
002018B6= 57 3A 20 43 53 20 ...   3421  CS_FAILURE   DC.B 'W: CS failure at ',0
002018C8= 57 3A 20 52 41 4D ...   3422  RAM_ERROR DC.B 'W: RAM error at: ',0
002018DA= 30 31 32 33 34 35 ...   3423  BIN2HEX_LUT DC.B '0123456789ABCDEF'
002018EA= 00 01 02 03 04 05 ...   3424  HEX2BIN_LUT DC.B 0,1,2,3,4,5,6,7,8,9,0,0,0,0,0,0,0,$A,$B,$C,$D,$E,$F
00201901= 4C 6F 61 64 69 6E ...   3425  LOADING  DC.B 'Loading EEPROM...',13,11,0
00201915                          3426      
00201915                          3427      END    START                    ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
BIN2HEX             0
BIN2HEX_LUT         2018DA
CONTINUE_105        200ADE
CONTINUE_109        200B3C
CONTINUE_113        200B9C
CONTINUE_117        200BFA
CONTINUE_121        200C5E
CONTINUE_125        200CBC
CONTINUE_129        200D32
CONTINUE_133        200D90
CONTINUE_137        200E0A
CONTINUE_141        200E68
CONTINUE_145        200EC8
CONTINUE_149        200F26
CONTINUE_153        200F98
CONTINUE_157        200FF6
CONTINUE_164        20109E
CONTINUE_167        2010EA
CONTINUE_170        201138
CONTINUE_173        201184
CONTINUE_176        2011D6
CONTINUE_179        201222
CONTINUE_188        2012EE
CONTINUE_191        20133A
CONTINUE_44         2004BC
CONTINUE_46         2004F8
CONTINUE_48         200530
CONTINUE_51         20057C
CONTINUE_54         2005E2
CONTINUE_58         200640
CONTINUE_62         2006A0
CONTINUE_66         2006FE
CONTINUE_70         200774
CONTINUE_74         2007D2
CONTINUE_78         20084A
CONTINUE_82         2008A8
CONTINUE_86         200908
CONTINUE_90         200966
CONTINUE_94         2009D8
CONTINUE_98         200A36
CS_FAILURE          2018B6
DEBUG               0
DISPLAY             E00001
DISPLAY_            0
DISPLAY_BASE        E00000
DOWNLOAD            960
DOWNLOAD_DONE       201418
DUART_ACR           C00009
DUART_ACR_          4
DUART_BASE          C00000
DUART_CRA           C00005
DUART_CRA_          2
DUART_CRB           C00015
DUART_CRB_          A
DUART_CSRA          C00003
DUART_CSRA_         1
DUART_CSRB          C00013
DUART_CSRB_         9
DUART_IMR           C0000B
DUART_IMR_          5
DUART_IVR           C00019
DUART_IVR_          C
DUART_MRA           C00001
DUART_MRA_          0
DUART_MRB           C00011
DUART_MRB_          8
DUART_OPCR          C0001B
DUART_OPCR_         D
DUART_RESET_OPR     C0001F
DUART_RESET_OPR_    F
DUART_RXA           C00007
DUART_RXA_          3
DUART_RXB           C00017
DUART_RXB_          B
DUART_SET_OPR       C0001D
DUART_SET_OPR_      E
DUART_SRA           C00003
DUART_SRA_          1
DUART_SRB           C00013
DUART_SRB_          9
DUART_TXA           C00007
DUART_TXA_          3
DUART_TXB           C00017
DUART_TXB_          B
EVEN                200820
EVEN2               200DDE
EXIT_182            201288
EXIT_19             2002EA
EXIT_194            201394
EXIT_209            201492
EXIT_21             200316
EXIT_219            20159E
EXIT_23             200342
EXIT_240            201752
EXIT_5              200142
G                   201516
GET_INPUT           2001B0
H                   2002F0
HELP                2017DF
HEX2BIN             134
HEX2BIN_LUT         2018EA
HEX_DIGIT           2017A0
HUH                 201876
L                   20162A
LOADING             201901
LOOP_182            201268
LOOP_19             2002CA
LOOP_194            201374
LOOP_196            2013BE
LOOP_204            201442
LOOP_209            201472
LOOP_21             2002F6
LOOP_211            2014BE
LOOP_219            20157E
LOOP_221            2015CC
LOOP_23             200322
LOOP_240            201732
LOOP_25             200376
LOOP_5              200122
MAIN_LOOP           200188
OK                  20161E
PRINT_CHAR          273
PRINT_CRLF          48D
PRINT_REG           575
PRINT_STR           4EF
R                   200348
RAM                 200000
RAM_ERROR           2018C8
READ                20187D
READ_CHAR           805
READ_DATA_TO_POKE   200418
READ_LENGTH         201672
RESET               200004
ROM                 0
S                   200498
STACK               200000
START               200008
UNREC               20189F
V                   20031C
VERSION             2017C2
W                   2003D0
WAIT_CHAR           665
WAIT_FOR_COMPLETE   201768
WAIT_FOR_READY_1    2000D8
WAIT_FOR_READY_10   20016A
WAIT_FOR_READY_100  200A4E
WAIT_FOR_READY_103  200A86
WAIT_FOR_READY_104  200A9A
WAIT_FOR_READY_105  200AC2
WAIT_FOR_READY_107  200AF6
WAIT_FOR_READY_109  200B20
WAIT_FOR_READY_11   200188
WAIT_FOR_READY_111  200B54
WAIT_FOR_READY_113  200B80
WAIT_FOR_READY_115  200BB4
WAIT_FOR_READY_117  200BDE
WAIT_FOR_READY_119  200C12
WAIT_FOR_READY_12   20019C
WAIT_FOR_READY_121  200C42
WAIT_FOR_READY_123  200C76
WAIT_FOR_READY_125  200CA0
WAIT_FOR_READY_127  200CD4
WAIT_FOR_READY_129  200D16
WAIT_FOR_READY_13   2001B0
WAIT_FOR_READY_131  200D4A
WAIT_FOR_READY_133  200D74
WAIT_FOR_READY_135  200DA8
WAIT_FOR_READY_137  200DEE
WAIT_FOR_READY_139  200E22
WAIT_FOR_READY_141  200E4C
WAIT_FOR_READY_143  200E80
WAIT_FOR_READY_145  200EAC
WAIT_FOR_READY_147  200EE0
WAIT_FOR_READY_149  200F0A
WAIT_FOR_READY_15   2001CA
WAIT_FOR_READY_151  200F3E
WAIT_FOR_READY_153  200F7C
WAIT_FOR_READY_155  200FB0
WAIT_FOR_READY_157  200FDA
WAIT_FOR_READY_159  20100E
WAIT_FOR_READY_162  201046
WAIT_FOR_READY_163  20105A
WAIT_FOR_READY_164  201082
WAIT_FOR_READY_167  2010CE
WAIT_FOR_READY_17   20026C
WAIT_FOR_READY_170  20111C
WAIT_FOR_READY_173  201168
WAIT_FOR_READY_176  2011BA
WAIT_FOR_READY_179  201206
WAIT_FOR_READY_18   200280
WAIT_FOR_READY_183  201270
WAIT_FOR_READY_184  201288
WAIT_FOR_READY_186  20129A
WAIT_FOR_READY_187  2012AE
WAIT_FOR_READY_188  2012D2
WAIT_FOR_READY_191  20131E
WAIT_FOR_READY_195  20137C
WAIT_FOR_READY_197  201394
WAIT_FOR_READY_198  2013A8
WAIT_FOR_READY_20   2002D2
WAIT_FOR_READY_200  2013D2
WAIT_FOR_READY_202  2013E8
WAIT_FOR_READY_203  2013FC
WAIT_FOR_READY_205  201418
WAIT_FOR_READY_206  20142C
WAIT_FOR_READY_208  201456
WAIT_FOR_READY_210  20147A
WAIT_FOR_READY_212  201494
WAIT_FOR_READY_213  2014A8
WAIT_FOR_READY_215  2014D2
WAIT_FOR_READY_217  2014E8
WAIT_FOR_READY_218  2014FC
WAIT_FOR_READY_22   2002FE
WAIT_FOR_READY_220  201586
WAIT_FOR_READY_222  2015A2
WAIT_FOR_READY_223  2015B6
WAIT_FOR_READY_225  2015E0
WAIT_FOR_READY_227  2015F6
WAIT_FOR_READY_228  20160A
WAIT_FOR_READY_229  20162C
WAIT_FOR_READY_231  201646
WAIT_FOR_READY_233  201674
WAIT_FOR_READY_235  20168E
WAIT_FOR_READY_238  2016BE
WAIT_FOR_READY_239  2016D2
WAIT_FOR_READY_24   20032A
WAIT_FOR_READY_241  20173A
WAIT_FOR_READY_26   20034C
WAIT_FOR_READY_27   200360
WAIT_FOR_READY_29   20038A
WAIT_FOR_READY_3    2000F4
WAIT_FOR_READY_31   2003A0
WAIT_FOR_READY_32   2003B4
WAIT_FOR_READY_33   2003D2
WAIT_FOR_READY_35   2003EC
WAIT_FOR_READY_37   20041A
WAIT_FOR_READY_39   200434
WAIT_FOR_READY_4    200108
WAIT_FOR_READY_42   20046A
WAIT_FOR_READY_43   20047E
WAIT_FOR_READY_44   2004A0
WAIT_FOR_READY_46   2004DC
WAIT_FOR_READY_48   200514
WAIT_FOR_READY_51   200560
WAIT_FOR_READY_54   2005C6
WAIT_FOR_READY_56   2005FA
WAIT_FOR_READY_58   200624
WAIT_FOR_READY_6    20012A
WAIT_FOR_READY_60   200658
WAIT_FOR_READY_62   200684
WAIT_FOR_READY_64   2006B8
WAIT_FOR_READY_66   2006E2
WAIT_FOR_READY_68   200716
WAIT_FOR_READY_70   200758
WAIT_FOR_READY_72   20078C
WAIT_FOR_READY_74   2007B6
WAIT_FOR_READY_76   2007EA
WAIT_FOR_READY_78   20082E
WAIT_FOR_READY_8    200142
WAIT_FOR_READY_80   200862
WAIT_FOR_READY_82   20088C
WAIT_FOR_READY_84   2008C0
WAIT_FOR_READY_86   2008EC
WAIT_FOR_READY_88   200920
WAIT_FOR_READY_9    200156
WAIT_FOR_READY_90   20094A
WAIT_FOR_READY_92   20097E
WAIT_FOR_READY_94   2009BC
WAIT_FOR_READY_96   2009F0
WAIT_FOR_READY_98   200A1A
WAIT_FOR_SRECORD    2004A0
Z                   20151E
_00000000           2005BC
_00000001           2012C8
_00000002           200AB8
_00000003           200A86
_00000004           2012C8
_00000005           201078
_00000006           201046
_00000007           2012C8
_00000008           201262
_00000009           2012C8
_0000000A           201416
_0000000B           201578
_0000000C           201776
_10000000           200820
_10000001           2009B2
_10000002           200DE0
_10000003           200F72
_10000004           201526
_10000005           201548
_10000006           201550
_10000007           201624
_10000008           201756
_10000009           20177C
