00000008 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 29/03/2021 19:30:25

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : MDFmon 
00000000                             3  * Written by : Mark Flitter
00000000                             4  * Date       : March 2021
00000000                             5  * Description: 68000 monitor program
00000000                             6  *-----------------------------------------------------------
00000000                             7  ; constants
00000000  =00E00000                  8  DISPLAY_BASE        EQU $E00000
00000000  =00000000                  9  DISPLAY_            EQU $0
00000000  =00E00000                 10  DISPLAY             EQU DISPLAY_BASE+2*DISPLAY_
00000000                            11  
00000000  =00D00000                 12  DUART_BASE          EQU $D00000
00000000  =00000000                 13  DUART_MRA_          EQU $0
00000000  =00000001                 14  DUART_CSRA_         EQU $1
00000000  =00000001                 15  DUART_SRA_          EQU $1
00000000  =00000002                 16  DUART_CRA_          EQU $2
00000000  =00000003                 17  DUART_TXA_          EQU $3
00000000  =00000003                 18  DUART_RXA_          EQU $3
00000000  =00000004                 19  DUART_ACR_          EQU $4
00000000  =00000005                 20  DUART_IMR_          EQU $5
00000000  =00000008                 21  DUART_MRB_          EQU $8
00000000  =00000009                 22  DUART_CSRB_         EQU $9
00000000  =00000009                 23  DUART_SRB_          EQU $9
00000000  =0000000A                 24  DUART_CRB_          EQU $A
00000000  =0000000B                 25  DUART_TXB_          EQU $B
00000000  =0000000B                 26  DUART_RXB_          EQU $B
00000000  =0000000C                 27  DUART_IVR_          EQU $C
00000000  =0000000D                 28  DUART_OPCR_         EQU $D
00000000  =0000000E                 29  DUART_SET_OPR_      EQU $E
00000000  =0000000F                 30  DUART_RESET_OPR_    EQU $F
00000000                            31  
00000000  =00D00001                 32  DUART_MRA           EQU DUART_BASE+2*DUART_MRA_+1
00000000  =00D00003                 33  DUART_SRA           EQU DUART_BASE+2*DUART_SRA_+1
00000000  =00D00003                 34  DUART_CSRA          EQU DUART_BASE+2*DUART_CSRA_+1
00000000  =00D00005                 35  DUART_CRA           EQU DUART_BASE+2*DUART_CRA_+1
00000000  =00D00007                 36  DUART_TXA           EQU DUART_BASE+2*DUART_TXA_+1
00000000  =00D00007                 37  DUART_RXA           EQU DUART_BASE+2*DUART_RXA_+1
00000000                            38  
00000000  =00D00011                 39  DUART_MRB           EQU DUART_BASE+2*DUART_MRB_+1
00000000  =00D00013                 40  DUART_SRB           EQU DUART_BASE+2*DUART_SRB_+1
00000000  =00D00013                 41  DUART_CSRB          EQU DUART_BASE+2*DUART_CSRB_+1
00000000  =00D00015                 42  DUART_CRB           EQU DUART_BASE+2*DUART_CRB_+1
00000000  =00D00017                 43  DUART_TXB           EQU DUART_BASE+2*DUART_TXB_+1
00000000  =00D00017                 44  DUART_RXB           EQU DUART_BASE+2*DUART_RXB_+1
00000000                            45  
00000000  =00D00009                 46  DUART_ACR           EQU DUART_BASE+2*DUART_ACR_+1
00000000  =00D0000B                 47  DUART_IMR           EQU DUART_BASE+2*DUART_IMR_+1
00000000  =00D00019                 48  DUART_IVR           EQU DUART_BASE+2*DUART_IVR_+1
00000000  =00D0001B                 49  DUART_OPCR          EQU DUART_BASE+2*DUART_OPCR_+1
00000000  =00D0001D                 50  DUART_SET_OPR       EQU DUART_BASE+2*DUART_SET_OPR_+1
00000000  =00D0001F                 51  DUART_RESET_OPR     EQU DUART_BASE+2*DUART_RESET_OPR_+1
00000000                            52  
00000000                            53  ;MACROs
00000000                            54  PRINT_CHAR MACRO                  ; \1 = register to use for status poll, \2 = char to send
00000000                            55  WAIT_FOR_READY\@                  ; wait until the there is space to send
00000000                            56    MOVE.B DUART_SRA,\1             ; read status register
00000000                            57    BTST #2,\1                      ; check for space to send
00000000                            58    BEQ WAIT_FOR_READY\@            ; no space, check again
00000000                            59    MOVE.B \2,DUART_TXA             ; send the next character
00000000                            60    ENDM
00000000                            61  
00000000                            62  PRINT_STR MACRO                   ; \1 = register to use for status poll, \2 = register containing address of zero terminated string
00000000                            63  LOOP\@
00000000                            64    CMP.B #0,(\2)                   ; 0 -> done
00000000                            65    BEQ EXIT\@
00000000                            66    PRINT_CHAR \1,(\2)+
00000000                            67    JMP LOOP\@
00000000                            68  EXIT\@
00000000                            69    ENDM
00000000                            70    
00000000                            71  PRINT_REG MACRO                ; \1 = register to use for status poll, \2 = register containing binary number - will be destroyed!, \3 = working data register, \4 working address register
00000000                            72    LEA LUT,\4
00000000                            73  
00000000                            74    MOVE.L \2,\3
00000000                            75    LSR.L #8,\3
00000000                            76    LSR.L #8,\3
00000000                            77    LSR.L #8,\3
00000000                            78    LSR.L #4,\3
00000000                            79    ANDI #$F,\3
00000000                            80    
00000000                            81    MOVE.B 0(\4,\3),\3
00000000                            82    PRINT_CHAR \1,\3
00000000                            83  
00000000                            84    MOVE.L \2,\3
00000000                            85    LSR.L #8,\3
00000000                            86    LSR.L #8,\3
00000000                            87    LSR.L #8,\3
00000000                            88    ANDI #$F,\3
00000000                            89    
00000000                            90    MOVE.B 0(\4,\3),\3
00000000                            91    PRINT_CHAR \1,\3
00000000                            92    
00000000                            93    MOVE.L \2,\3
00000000                            94    LSR.L #8,\3
00000000                            95    LSR.L #8,\3
00000000                            96    LSR.L #4,\3
00000000                            97    ANDI #$F,\3
00000000                            98    
00000000                            99    MOVE.B 0(\4,\3),\3
00000000                           100    PRINT_CHAR \1,\3
00000000                           101    
00000000                           102    MOVE.L \2,\3
00000000                           103    LSR.L #8,\3
00000000                           104    LSR.L #8,\3
00000000                           105    ANDI #$F,\3
00000000                           106    
00000000                           107    MOVE.B 0(\4,\3),\3
00000000                           108    PRINT_CHAR \1,\3
00000000                           109  
00000000                           110    MOVE.L \2,\3
00000000                           111    LSR.L #8,\3
00000000                           112    LSR.L #4,\3
00000000                           113    ANDI #$F,\3
00000000                           114    
00000000                           115    MOVE.B 0(\4,\3),\3
00000000                           116    PRINT_CHAR \1,\3
00000000                           117  
00000000                           118    MOVE.L \2,\3
00000000                           119    LSR.L #8,\3
00000000                           120    ANDI #$F,\3
00000000                           121    
00000000                           122    MOVE.B 0(\4,\3),\3
00000000                           123    PRINT_CHAR \1,\3
00000000                           124  
00000000                           125    MOVE.L \2,\3
00000000                           126    LSR.L #4,\3
00000000                           127    ANDI #$F,\3
00000000                           128    
00000000                           129    MOVE.B 0(\4,\3),\3
00000000                           130    PRINT_CHAR \1,\3
00000000                           131  
00000000                           132    MOVE.L \2,\3
00000000                           133    ANDI #$F,\3
00000000                           134    
00000000                           135    MOVE.B 0(\4,\3),\3
00000000                           136    PRINT_CHAR \1,\3
00000000                           137  
00000000                           138    ENDM
00000000                           139  
00000000                           140  ; start vector
00000000                           141      ORG  $0
00000000= 00000000                 142      DC.L $00000000
00000004= 00000000                 143      DC.L $00000000 
00000008                           144      
00000008                           145  ; start of program  
00000008                           146  START
00000008  13FC 0000 00E00000       147      MOVE.B #0,DISPLAY
00000010                           148  
00000010                           149  ;initialise UART
00000010  13FC 0000 00D00009       150      MOVE.B #$0,DUART_ACR            
00000018  13FC 0000 00D0000B       151      MOVE.B #$0,DUART_IMR            ; no interrupts, please            
00000020  13FC 0000 00D0001B       152      MOVE.B #$0,DUART_OPCR           ; enable all outputs
00000028                           153  
00000028                           154  ; channel A
00000028  13FC 0003 00D00001       155      MOVE.B #$03,DUART_MRA           ; no flow control, no parity, 8 data bits
00000030  13FC 0007 00D00001       156      MOVE.B #$07,DUART_MRA           ; auto echo and 1 stop bit
00000038  13FC 00BB 00D00003       157      MOVE.B #$BB,DUART_CSRA          ; 9600 baud
00000040  13FC 0005 00D00005       158      MOVE.B #$5,DUART_CRA            ; enable rx & tx
00000048                           159  
00000048                           160  ; channel B
00000048  13FC 0003 00D00011       161      MOVE.B #$03,DUART_MRB           ; no flow control, no parity, 8 data bits
00000050  13FC 0047 00D00011       162      MOVE.B #$47,DUART_MRB           ; auto echo and 1 stop bit
00000058  13FC 00BB 00D00013       163      MOVE.B #$BB,DUART_CSRB          ; 9600 baud
00000060  13FC 0005 00D00015       164      MOVE.B #$5,DUART_CRB            ; enable rx & tx
00000068                           165  
00000068  13FC 0001 00E00000       166      MOVE.B #1,DISPLAY
00000070                           167         
00000070  41F9 000006A2            168      LEA VERSION,A0
00000076                           169m     PRINT_STR D0,A0                       
00000094                           170m     PRINT_CHAR D0,#13               ; CR
000000A8                           171m     PRINT_CHAR D0,#10               ; LF
000000BC                           172m     PRINT_CHAR D0,#62               ; prompt
000000D0                           173m     PRINT_CHAR D0,#32               ; space
000000E4                           174      
000000E4  343C 0000                175      MOVE #0,D2                      ; address accumuulator
000000E8                           176  
000000E8  13FC 0002 00E00000       177      MOVE.B #2,DISPLAY
000000F0                           178  MAIN_LOOP
000000F0  13FC 0003 00E00000       179      MOVE.B #3,DISPLAY
000000F8                           180  
000000F8                           181  WAIT_FOR_INPUT
000000F8  13FC 0004 00E00000       182      MOVE.B #4,DISPLAY
00000100                           183  
00000100  1039 00D00003            184      MOVE.B DUART_SRA,D0             ; read status register
00000106  0800 0000                185      BTST #0,D0                      ; check for character
0000010A  67EC                     186      BEQ WAIT_FOR_INPUT              ; nothing, check again
0000010C                           187  
0000010C  1239 00D00007            188      MOVE.B DUART_RXA,D1             ; got a character, read it
00000112                           189m     PRINT_CHAR D0,D1                ; echo it back
00000124                           190  
00000124  B23C 0048                191      CMP.B #'H',D1
00000128  6700 0122                192      BEQ H
0000012C                           193  
0000012C  B23C 0056                194      CMP.B #'V',D1
00000130  6700 0192                195      BEQ V
00000134                           196      
00000134  B23C 0052                197      CMP.B #'R',D1
00000138  6700 0202                198      BEQ R
0000013C                           199  
0000013C  B23C 0057                200      CMP.B #'W',D1
00000140  6700 0388                201      BEQ W
00000144                           202  
00000144  B23C 0053                203      CMP.B #'S',D1
00000148  6700 0440                204      BEQ S
0000014C                           205  
0000014C  B23C 0047                206      CMP.B #'G',D1
00000150  6700 04B0                207      BEQ G
00000154                           208  
00000154  B23C 0030                209      CMP.B #'0',D1
00000158  6700 0520                210      BEQ DIGIT
0000015C  B23C 0031                211      CMP.B #'1',D1
00000160  6700 0518                212      BEQ DIGIT
00000164  B23C 0032                213      CMP.B #'2',D1
00000168  6700 0510                214      BEQ DIGIT
0000016C  B23C 0033                215      CMP.B #'3',D1
00000170  6700 0508                216      BEQ DIGIT
00000174  B23C 0034                217      CMP.B #'4',D1
00000178  6700 0500                218      BEQ DIGIT
0000017C  B23C 0035                219      CMP.B #'5',D1
00000180  6700 04F8                220      BEQ DIGIT
00000184  B23C 0036                221      CMP.B #'6',D1
00000188  6700 04F0                222      BEQ DIGIT
0000018C  B23C 0037                223      CMP.B #'7',D1
00000190  6700 04E8                224      BEQ DIGIT
00000194  B23C 0038                225      CMP.B #'8',D1
00000198  6700 04E0                226      BEQ DIGIT
0000019C  B23C 0039                227      CMP.B #'9',D1
000001A0  6700 04D8                228      BEQ DIGIT
000001A4                           229      
000001A4  B23C 0041                230      CMP.B #'A',D1
000001A8  6700 04E0                231      BEQ HEX_DIGIT
000001AC  B23C 0042                232      CMP.B #'B',D1
000001B0  6700 04D8                233      BEQ HEX_DIGIT
000001B4  B23C 0043                234      CMP.B #'C',D1
000001B8  6700 04D0                235      BEQ HEX_DIGIT
000001BC  B23C 0044                236      CMP.B #'D',D1
000001C0  6700 04C8                237      BEQ HEX_DIGIT
000001C4  B23C 0045                238      CMP.B #'E',D1
000001C8  6700 04C0                239      BEQ HEX_DIGIT
000001CC  B23C 0046                240      CMP.B #'F',D1
000001D0  6700 04B8                241      BEQ HEX_DIGIT
000001D4                           242  
000001D4                           243m     PRINT_CHAR D0,#13               ; CR
000001E8                           244m     PRINT_CHAR D0,#10               ; LF
000001FC  41F9 0000070F            245      LEA HUH,A0
00000202                           246m     PRINT_STR D0,A0
00000220                           247m     PRINT_CHAR D0,#62               ; prompt
00000234                           248m     PRINT_CHAR D0,#32               ; space
00000248                           249                         
00000248  4EF8 00F0                250      JMP MAIN_LOOP
0000024C                           251  
0000024C                           252  ; commands
0000024C                           253m H   PRINT_CHAR D0,#13               ; CR
00000260                           254m     PRINT_CHAR D0,#10               ; LF       
00000274  41F9 000006BE            255      LEA HELP,A0
0000027A                           256m     PRINT_STR D0,A0
00000298                           257m     PRINT_CHAR D0,#62               ; prompt
000002AC                           258m     PRINT_CHAR D0,#32               ; space
000002C0  4EF8 00F0                259      JMP MAIN_LOOP
000002C4                           260  
000002C4                           261m V   PRINT_CHAR D0,#13               ; CR
000002D8                           262m     PRINT_CHAR D0,#10               ; LF
000002EC  41F9 000006A2            263      LEA VERSION,A0
000002F2                           264m     PRINT_STR D0,A0       
00000310                           265m     PRINT_CHAR D0,#62               ; prompt
00000324                           266m     PRINT_CHAR D0,#32               ; space
00000338  4EF8 00F0                267      JMP MAIN_LOOP
0000033C                           268      
0000033C                           269m R   PRINT_CHAR D0,#13               ; CR
00000350                           270m     PRINT_CHAR D0,#10               ; LF
00000364  2042                     271      MOVE.L D2,A0
00000366  2210                     272      MOVE.L (A0),D1
00000368                           273m     PRINT_REG D0,D1,D2,A0
0000046E  307C 0000                274      MOVE #0,A0
00000472  343C 0000                275      MOVE #0,D2
00000476                           276m     PRINT_CHAR D0,#13               ; CR
0000048A                           277m     PRINT_CHAR D0,#10               ; LF
0000049E                           278m     PRINT_CHAR D0,#62               ; prompt
000004B2                           279m     PRINT_CHAR D0,#32               ; space
000004C6                           280      
000004C6  4EF8 00F0                281      JMP MAIN_LOOP
000004CA                           282  
000004CA                           283m W   PRINT_CHAR D0,#13               ; CR
000004DE                           284m     PRINT_CHAR D0,#10               ; LF
000004F2  7600                     285      MOVE.L #0,D3                
000004F4                           286  READ_DIGIT1
000004F4  1039 00D00003            287      MOVE.B DUART_SRA,D0             ; read status register
000004FA  0800 0000                288      BTST #0,D0                      ; check for character
000004FE  67F4                     289      BEQ READ_DIGIT1                 ; nothing, check again
00000500                           290  
00000500  1239 00D00007            291      MOVE.B DUART_RXA,D1             ; got a character, read it
00000506                           292m     PRINT_CHAR D0,D1                ; echo it back
00000518  0401 0030                293      SUB.B #'0',D1
0000051C  0241 000F                294      ANDI #$F,D1
00000520  8601                     295      OR.B D1,D3
00000522                           296  READ_DIGIT2
00000522  1039 00D00003            297      MOVE.B DUART_SRA,D0             ; read status register
00000528  0800 0000                298      BTST #0,D0                      ; check for character
0000052C  67F4                     299      BEQ READ_DIGIT2                 ; nothing, check again
0000052E                           300  
0000052E  1239 00D00007            301      MOVE.B DUART_RXA,D1             ; got a character, read it
00000534                           302m     PRINT_CHAR D0,D1                ; echo it back
00000546  E98A                     303      LSL.L #4,D2                     ; add the next digit in the next 4 bits
00000548  0401 0030                304      SUB.B #'0',D1
0000054C  0241 000F                305      ANDI #$F,D1
00000550  8601                     306      OR.B D1,D3
00000552                           307  
00000552  2040                     308      MOVE.L D0,A0
00000554  3010                     309      MOVE (A0),D0
00000556  307C 0000                310      MOVE #0,A0
0000055A  303C 0000                311      MOVE #0,D0
0000055E                           312  
0000055E                           313m     PRINT_CHAR D0,#62               ; prompt
00000572                           314m     PRINT_CHAR D0,#32               ; space
00000586  4EF8 00F0                315      JMP MAIN_LOOP
0000058A                           316  
0000058A                           317m S   PRINT_CHAR D0,#13               ; CR
0000059E                           318m     PRINT_CHAR D0,#10               ; LF
000005B2  41F9 00000716            319      LEA UNIMP,A0
000005B8                           320m     PRINT_STR D0,A0       
000005D6                           321m     PRINT_CHAR D0,#62               ; prompt
000005EA                           322m     PRINT_CHAR D0,#32               ; space
000005FE  4EF8 00F0                323      JMP MAIN_LOOP
00000602                           324  
00000602                           325m G   PRINT_CHAR D0,#13               ; CR
00000616                           326m     PRINT_CHAR D0,#10               ; LF
0000062A  41F9 00000716            327      LEA UNIMP,A0
00000630                           328m     PRINT_STR D0,A0
0000064E                           329m     PRINT_CHAR D0,#62               ; prompt
00000662                           330m     PRINT_CHAR D0,#32               ; space
00000676  4EF8 00F0                331      JMP MAIN_LOOP
0000067A                           332      
0000067A                           333  DIGIT
0000067A  E98A                     334      LSL.L #4,D2             ; add the next digit in the next 4 bits
0000067C  0401 0030                335      SUB.B #'0',D1
00000680  0241 000F                336      ANDI #$F,D1
00000684  8401                     337      OR.B D1,D2
00000686  4EF8 00F0                338      JMP MAIN_LOOP
0000068A                           339      
0000068A                           340  HEX_DIGIT
0000068A  E98A                     341      LSL.L #4,D2
0000068C  0401 0041                342      SUB.B #'A',D1
00000690  0601 000A                343      ADD.B #10,D1
00000694  0241 000F                344      ANDI #$F,D1
00000698  8401                     345      OR.B D1,D2
0000069A  4EF8 00F0                346      JMP MAIN_LOOP
0000069E                           347  
0000069E  FFFF FFFF                348      SIMHALT                         ; halt simulator
000006A2                           349  
000006A2                           350  ; strings
000006A2= 4D 44 46 2D 6D 6F ...    351  VERSION DC.B 'MDF-mon V1.2 (29/03/2021)',13,10,0
000006BE= 48 28 65 6C 70 29 ...    352  HELP    DC.B 'H(elp)',13,10,'V(ersion)',13,10,'nnnnnnnnR(ead)',13,10,'nnnnnnnnW(rite)nn',13,10,'S(records)',13,10,'nnnnnnnnG(o)',13,10,0
0000070F= 48 75 68 3F 0D 0A 00     353  HUH     DC.B 'Huh?',13,10,0
00000716= 55 6E 69 6D 70 6C ...    354  UNIMP   DC.B 'Unimplemented',13,10,0
00000726= 30 31 32 33 34 35 ...    355  LUT     DC.B '0123456789ABCDEF'
00000736                           356      
00000736                           357      END    START                    ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
DIGIT               67A
DISPLAY             E00000
DISPLAY_            0
DISPLAY_BASE        E00000
DUART_ACR           D00009
DUART_ACR_          4
DUART_BASE          D00000
DUART_CRA           D00005
DUART_CRA_          2
DUART_CRB           D00015
DUART_CRB_          A
DUART_CSRA          D00003
DUART_CSRA_         1
DUART_CSRB          D00013
DUART_CSRB_         9
DUART_IMR           D0000B
DUART_IMR_          5
DUART_IVR           D00019
DUART_IVR_          C
DUART_MRA           D00001
DUART_MRA_          0
DUART_MRB           D00011
DUART_MRB_          8
DUART_OPCR          D0001B
DUART_OPCR_         D
DUART_RESET_OPR     D0001F
DUART_RESET_OPR_    F
DUART_RXA           D00007
DUART_RXA_          3
DUART_RXB           D00017
DUART_RXB_          B
DUART_SET_OPR       D0001D
DUART_SET_OPR_      E
DUART_SRA           D00003
DUART_SRA_          1
DUART_SRB           D00013
DUART_SRB_          9
DUART_TXA           D00007
DUART_TXA_          3
DUART_TXB           D00017
DUART_TXB_          B
EXIT_1              94
EXIT_10             220
EXIT_16             298
EXIT_22             310
EXIT_49             5D6
EXIT_55             64E
G                   602
H                   24C
HELP                6BE
HEX_DIGIT           68A
HUH                 70F
LOOP_1              76
LOOP_10             202
LOOP_16             27A
LOOP_22             2F2
LOOP_49             5B8
LOOP_55             630
LUT                 726
MAIN_LOOP           F0
PRINT_CHAR          0
PRINT_REG           1BC
PRINT_STR           142
R                   33C
READ_DIGIT1         4F4
READ_DIGIT2         522
S                   58A
START               8
UNIMP               716
V                   2C4
VERSION             6A2
W                   4CA
WAIT_FOR_INPUT      F8
WAIT_FOR_READY_11   20A
WAIT_FOR_READY_12   220
WAIT_FOR_READY_13   234
WAIT_FOR_READY_14   24C
WAIT_FOR_READY_15   260
WAIT_FOR_READY_17   282
WAIT_FOR_READY_18   298
WAIT_FOR_READY_19   2AC
WAIT_FOR_READY_2    7E
WAIT_FOR_READY_20   2C4
WAIT_FOR_READY_21   2D8
WAIT_FOR_READY_23   2FA
WAIT_FOR_READY_24   310
WAIT_FOR_READY_25   324
WAIT_FOR_READY_26   33C
WAIT_FOR_READY_27   350
WAIT_FOR_READY_29   380
WAIT_FOR_READY_3    94
WAIT_FOR_READY_30   3A2
WAIT_FOR_READY_31   3C4
WAIT_FOR_READY_32   3E4
WAIT_FOR_READY_33   404
WAIT_FOR_READY_34   422
WAIT_FOR_READY_35   440
WAIT_FOR_READY_36   45C
WAIT_FOR_READY_37   476
WAIT_FOR_READY_38   48A
WAIT_FOR_READY_39   49E
WAIT_FOR_READY_4    A8
WAIT_FOR_READY_40   4B2
WAIT_FOR_READY_41   4CA
WAIT_FOR_READY_42   4DE
WAIT_FOR_READY_43   506
WAIT_FOR_READY_44   534
WAIT_FOR_READY_45   55E
WAIT_FOR_READY_46   572
WAIT_FOR_READY_47   58A
WAIT_FOR_READY_48   59E
WAIT_FOR_READY_5    BC
WAIT_FOR_READY_50   5C0
WAIT_FOR_READY_51   5D6
WAIT_FOR_READY_52   5EA
WAIT_FOR_READY_53   602
WAIT_FOR_READY_54   616
WAIT_FOR_READY_56   638
WAIT_FOR_READY_57   64E
WAIT_FOR_READY_58   662
WAIT_FOR_READY_6    D0
WAIT_FOR_READY_7    112
WAIT_FOR_READY_8    1D4
WAIT_FOR_READY_9    1E8
