00000008 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 08/04/2021 09:26:13

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : MDFmon 
00000000                             3  * Written by : Mark Flitter
00000000                             4  * Date       : March 2021
00000000                             5  * Description: 68000 monitor program
00000000                             6  *-----------------------------------------------------------
00000000                             7  ; to do
00000000                             8  ; consistency for use of labels
00000000                             9  ; increase baud rate x 4?
00000000                            10  ; don't waste code on reading the srec header
00000000                            11  ; tidy up NAND gate invertor and wiring for OE and WE on eeproms
00000000                            12  ; tidy up power loom
00000000                            13  ; add LDS and UDS with an OR gate and test because then I can do byte writes and it will make the download simpler
00000000                            14  ; stop using two registers in download
00000000                            15  ; add simpler .W and .B variants of PRINT_REG, will reduce code a bit
00000000                            16  ; implement DOWNLOAD_BYTE to remove repeated code
00000000                            17  ; lots of repeated code in download between the two S record types (S1 and S2)
00000000                            18  ; burn EEPROM to alternative location ($1000) and update the start vector as the very last operation
00000000                            19  ; if the EEPROM programming getas stuck, print out value read back and retry write eventually? 
00000000                            20  
00000000                            21  ; make the monitor relocatable, so it can run in RAM and ROM
00000000                            22  ; keep track of highest address hit during srec download
00000000                            23  ; fix the reset vector so that it jumps to the start
00000000                            24  ; Replace JMP -> BRA
00000000                            25  ; implement backspace
00000000                            26  ; check for escape during Z and L?  Not sure if W is a good idea either
00000000                            27  ; fix being able to enter random chars when W'ing
00000000                            28  ; ram check at startup?  Not sure if this is a good idea!
00000000                            29  
00000000                            30      ORG  $0
00000000                            31      ;ORG  $200000
00000000                            32  
00000000  =00000000                 33  DEBUG               EQU 0
00000000                            34  
00000000                            35  ; constants
00000000  =00000000                 36  ROM                 EQU $0
00000000  =00200000                 37  RAM                 EQU $200000
00000000                            38     
00000000  =00C00000                 39  DUART_BASE          EQU $C00000
00000000  =00000000                 40  DUART_MRA_          EQU $0
00000000  =00000001                 41  DUART_CSRA_         EQU $1
00000000  =00000001                 42  DUART_SRA_          EQU $1
00000000  =00000002                 43  DUART_CRA_          EQU $2
00000000  =00000003                 44  DUART_TXA_          EQU $3
00000000  =00000003                 45  DUART_RXA_          EQU $3
00000000  =00000004                 46  DUART_ACR_          EQU $4
00000000  =00000005                 47  DUART_IMR_          EQU $5
00000000  =00000008                 48  DUART_MRB_          EQU $8
00000000  =00000009                 49  DUART_CSRB_         EQU $9
00000000  =00000009                 50  DUART_SRB_          EQU $9
00000000  =0000000A                 51  DUART_CRB_          EQU $A
00000000  =0000000B                 52  DUART_TXB_          EQU $B
00000000  =0000000B                 53  DUART_RXB_          EQU $B
00000000  =0000000C                 54  DUART_IVR_          EQU $C
00000000  =0000000D                 55  DUART_OPCR_         EQU $D
00000000  =0000000E                 56  DUART_SET_OPR_      EQU $E
00000000  =0000000F                 57  DUART_RESET_OPR_    EQU $F
00000000                            58  
00000000  =00C00001                 59  DUART_MRA           EQU DUART_BASE+2*DUART_MRA_+1
00000000  =00C00003                 60  DUART_SRA           EQU DUART_BASE+2*DUART_SRA_+1
00000000  =00C00003                 61  DUART_CSRA          EQU DUART_BASE+2*DUART_CSRA_+1
00000000  =00C00005                 62  DUART_CRA           EQU DUART_BASE+2*DUART_CRA_+1
00000000  =00C00007                 63  DUART_TXA           EQU DUART_BASE+2*DUART_TXA_+1
00000000  =00C00007                 64  DUART_RXA           EQU DUART_BASE+2*DUART_RXA_+1
00000000                            65  
00000000  =00C00011                 66  DUART_MRB           EQU DUART_BASE+2*DUART_MRB_+1
00000000  =00C00013                 67  DUART_SRB           EQU DUART_BASE+2*DUART_SRB_+1
00000000  =00C00013                 68  DUART_CSRB          EQU DUART_BASE+2*DUART_CSRB_+1
00000000  =00C00015                 69  DUART_CRB           EQU DUART_BASE+2*DUART_CRB_+1
00000000  =00C00017                 70  DUART_TXB           EQU DUART_BASE+2*DUART_TXB_+1
00000000  =00C00017                 71  DUART_RXB           EQU DUART_BASE+2*DUART_RXB_+1
00000000                            72  
00000000  =00C00009                 73  DUART_ACR           EQU DUART_BASE+2*DUART_ACR_+1
00000000  =00C0000B                 74  DUART_IMR           EQU DUART_BASE+2*DUART_IMR_+1
00000000  =00C00019                 75  DUART_IVR           EQU DUART_BASE+2*DUART_IVR_+1
00000000  =00C0001B                 76  DUART_OPCR          EQU DUART_BASE+2*DUART_OPCR_+1
00000000  =00C0001D                 77  DUART_SET_OPR       EQU DUART_BASE+2*DUART_SET_OPR_+1
00000000  =00C0001F                 78  DUART_RESET_OPR     EQU DUART_BASE+2*DUART_RESET_OPR_+1
00000000                            79  
00000000  =00E00000                 80  DISPLAY_BASE        EQU $E00000
00000000  =00000000                 81  DISPLAY_            EQU $0
00000000  =00E00001                 82  DISPLAY             EQU DISPLAY_BASE+2*DISPLAY_+1
00000000                            83  
00000000                            84  ; macros
00000000                            85  ; convert top 4 bits of input register from binary to a single hex digit
00000000                            86  ; the input register is changed during the process
00000000                            87  ; \1 input data register containing binary number,  \2 data register for return value, \3 working address register
00000000                            88  BIN2HEX MACRO
00000000                            89      LEA BIN2HEX_LUT,\3                          ; load the lookup table
00000000                            90      ROL.L #4,\1                                 ; shift the top 4 bits down to bottom of the register the and mask off everything else
00000000                            91      MOVE.B \1,\2
00000000                            92      ANDI.L #$F,\2
00000000                            93      MOVE.B 0(\3,\2),\2                          ; use that as an index into the LUT
00000000                            94      ENDM
00000000                            95  
00000000                            96  ; convert single hex digit to 4 bit binary number in LSbits
00000000                            97  ; the input register is changed during the process
00000000                            98  ; \1 data register containing hex character, \2 data register for return value, \3 working address register
00000000                            99  HEX2BIN MACRO
00000000                           100      LEA HEX2BIN_LUT,\3                          ; load the lookup table
00000000                           101      SUB.B #'0',\1                               ; work out offset and mask off anything rogue
00000000                           102      AND.L #$FF,\1                               ; ignore the top 3 bytes
00000000                           103      MOVE.B 0(\3,\1),\2                          ; use that as an index into the LUT      
00000000                           104      ENDM
00000000                           105  
00000000                           106  ; send a single char to the serial port
00000000                           107  ; \1 = char to send, \2 = data register to use for status poll
00000000                           108  ; will stamp on D0 and D1 in debug mode
00000000                           109  PRINT_CHAR MACRO
00000000                           110  WAIT_FOR_READY\@                                ; wait until the there is space to send
00000000                           111      IFEQ DEBUG
00000000                           112          MOVE.B DUART_SRA,\2                     ; read status register
00000000                           113          BTST #2,\2                              ; check for space to send
00000000                           114          BEQ WAIT_FOR_READY\@                    ; no space, check again
00000000                           115          MOVE.B \1,DUART_TXA                     ; send the next character
00000000                           116      ENDC
00000000                           117      
00000000                           118      IFNE DEBUG
00000000                           119          MOVE.B \1,D1
00000000                           120          MOVE.L #6,D0   
00000000                           121          TRAP #15                                ; write to terminal in simulator
00000000                           122      ENDC
00000000                           123  
00000000                           124      ENDM
00000000                           125  
00000000                           126  ; send CR,LF to the serial port
00000000                           127  ; \1 = data register to use for status poll
00000000                           128  PRINT_CRLF MACRO
00000000                           129      PRINT_CHAR #13,\1                           ; CR
00000000                           130      PRINT_CHAR #10,\1                           ; LF
00000000                           131      ENDM
00000000                           132  
00000000                           133  ; send C-style, zero terminated string to the serial port
00000000                           134  ; \1 = address register containing address of zero terminated string, \2 = data register to use for status poll, 
00000000                           135  PRINT_STR MACRO
00000000                           136  LOOP\@
00000000                           137      CMP.B #0,(\1)                               ; 0 -> done
00000000                           138      BEQ EXIT\@
00000000                           139      PRINT_CHAR (\1)+,\2
00000000                           140      JMP LOOP\@
00000000                           141  EXIT\@
00000000                           142      ENDM
00000000                           143    
00000000                           144  ; send the contents of a data register to the serial port as a 8 digit hex number
00000000                           145  ; \1 = data register containing binary number, \2 = data register to use for status poll, \3 working data register, \4 counter register, \5 working address register, 
00000000                           146  PRINT_REG MACRO
00000000                           147      PRINT_CHAR #'0',\2                          ;0x header
00000000                           148      PRINT_CHAR #'x',\2
00000000                           149      MOVE.L #7,\4                                ; loop round all 8 hex characters of 4 bits each
00000000                           150  LOOP\@
00000000                           151      BIN2HEX \1,\3,\5
00000000                           152      PRINT_CHAR \3,\2
00000000                           153      DBEQ \4,LOOP\@
00000000                           154      ENDM
00000000                           155    
00000000                           156  ; wait for a char from the serial port
00000000                           157  ; \ 1= data register for read char, \2 = register to use for status poll
00000000                           158  ; will stamp on D0 and D1 in debug mode
00000000                           159  WAIT_CHAR MACRO
00000000                           160  WAIT_FOR_READY\@                                ; wait until the there is space to send
00000000                           161  
00000000                           162      IFEQ DEBUG
00000000                           163          MOVE.B DUART_SRA,\2                     ; read status register
00000000                           164          BTST #0,\2                              ; check for character
00000000                           165          BEQ WAIT_FOR_READY\@                    ; nothing, check again
00000000                           166      ENDC
00000000                           167      
00000000                           168      READ_CHAR \1
00000000                           169  
00000000                           170      IFEQ DEBUG
00000000                           171          PRINT_CHAR \1,\2                        ; echo it back
00000000                           172      ENDC
00000000                           173      ENDM
00000000                           174      
00000000                           175  ; read a char from the serial port - assumes that there is one!
00000000                           176  ; \ 1= data register for read char
00000000                           177  ; will stamp on D0 and D1 in debug mode
00000000                           178  READ_CHAR MACRO
00000000                           179      IFEQ DEBUG
00000000                           180          MOVE.B DUART_RXA,\1                     ; got a character, read it
00000000                           181      ENDC
00000000                           182      IFNE DEBUG
00000000                           183          MOVE.L #5,D0    
00000000                           184          TRAP #15                                ; read from keyboard in simulator
00000000                           185          MOVE.L D1,\1
00000000                           186      ENDC
00000000                           187       
00000000                           188      CMP.B #$1B,\1                               ; check for escape and go to start
00000000                           189      BEQ START
00000000                           190      ENDM
00000000                           191      
00000000                           192      
00000000                           193  ; read data from the download serial port
00000000                           194  ; \ 1= data register for read char, \2 = register to use for status poll
00000000                           195  DOWNLOAD MACRO
00000000                           196  WAIT_FOR_READY\@                                ; wait until the there is space to send
00000000                           197  
00000000                           198      MOVE.B DUART_SRA,\2                         ; check for command
00000000                           199      BTST #0,\2                                  ; check for character
00000000                           200      BEQ CONTINUE\@                              ; nothing, continue
00000000                           201   
00000000                           202      READ_CHAR \1
00000000                           203  CONTINUE\@
00000000                           204      MOVE.B DUART_SRB,\2                         ; read status register
00000000                           205      BTST #0,\2                                  ; check for character
00000000                           206      BEQ WAIT_FOR_READY\@                        ; nothing, check again
00000000                           207      
00000000                           208      MOVE.B DUART_RXB,\1                         ; got a character, read it
00000000                           209      MOVE.B \1,DISPLAY                           ; echo to the display
00000000                           210      
00000000                           211      ENDM
00000000                           212  
00000000                           213  ; register catalogue
00000000                           214  ; D0 - used for simulator I/O
00000000                           215  ; D1 - used for simulator I/O
00000000                           216  ; D2 - read character
00000000                           217  ; D3 - serial port status poll / task for TRAP in simulator
00000000                           218  ; D4 - count of S records read
00000000                           219  ; D5 - data to write / data read / byte count for S record load
00000000                           220  ; D6 - working register used in R/W and download
00000000                           221  ; D7 - address accumulator / reset by download
00000000                           222  ; A0 - address of string to print 
00000000                           223  
00000000                           224  ; start vector
00000000= 00000000                 225  STACK    DC.L $00000000                         ; STACK
00000004= 00000008                 226  RESET    DC.L START                             ; RESET
00000008                           227      
00000008                           228  ; start of program  
00000008                           229  START
00000008  13FC 0000 00E00001       230      MOVE.B #0,DISPLAY
00000010                           231  
00000010                           232  ; reset the UART in case of warm start
00000010  13FC 000A 00C00005       233      MOVE.B #$A,DUART_CRA                        ; disable rx & tx
00000018  13FC 0050 00C00005       234      MOVE.B #$50,DUART_CRA                       ; reset everyting
00000020  4E71                     235      NOP
00000022  13FC 0040 00C00005       236      MOVE.B #$40,DUART_CRA           
0000002A  4E71                     237      NOP
0000002C  13FC 0030 00C00005       238      MOVE.B #$30,DUART_CRA
00000034  4E71                     239      NOP
00000036  13FC 0020 00C00005       240      MOVE.B #$20,DUART_CRA
0000003E  4E71                     241      NOP
00000040  13FC 0010 00C00005       242      MOVE.B #$10,DUART_CRA   
00000048                           243  
00000048  13FC 000A 00C00015       244      MOVE.B #$A,DUART_CRB                        ; disable rx & tx
00000050  13FC 0050 00C00015       245      MOVE.B #$50,DUART_CRB                       ; reset everyting
00000058  4E71                     246      NOP
0000005A  13FC 0040 00C00015       247      MOVE.B #$40,DUART_CRB           
00000062  4E71                     248      NOP
00000064  13FC 0030 00C00015       249      MOVE.B #$30,DUART_CRB
0000006C  4E71                     250      NOP
0000006E  13FC 0020 00C00015       251      MOVE.B #$20,DUART_CRB
00000076  4E71                     252      NOP
00000078  13FC 0010 00C00015       253      MOVE.B #$10,DUART_CRB   
00000080                           254  
00000080                           255  ;initialise UART
00000080  13FC 0000 00C00009       256      MOVE.B #$0,DUART_ACR            
00000088  13FC 0000 00C0000B       257      MOVE.B #$0,DUART_IMR                        ; no interrupts, please            
00000090  13FC 0000 00C0001B       258      MOVE.B #$0,DUART_OPCR                       ; enable all outputs
00000098                           259  
00000098                           260  ; channel A
00000098  13FC 0013 00C00001       261      MOVE.B #$13,DUART_MRA                       ; no flow control, no parity, 8 data bits
000000A0  13FC 0007 00C00001       262      MOVE.B #$07,DUART_MRA                       ; 1 stop bit
000000A8  13FC 00BB 00C00003       263      MOVE.B #$BB,DUART_CSRA                      ; 9600 baud
000000B0  13FC 0005 00C00005       264      MOVE.B #$5,DUART_CRA                        ; enable rx & tx
000000B8                           265  
000000B8                           266  ; channel B
000000B8  13FC 0013 00C00011       267      MOVE.B #$13,DUART_MRB                       ; no flow control, no parity, 8 data bits
000000C0  13FC 0007 00C00011       268      MOVE.B #$07,DUART_MRB                       ; 1 stop bit
000000C8  13FC 00BB 00C00013       269      MOVE.B #$BB,DUART_CSRB                      ; 9600 baud
000000D0  13FC 0005 00C00015       270      MOVE.B #$5,DUART_CRB                        ; enable rx & tx
000000D8                           271  
000000D8                           272m     PRINT_CHAR '.',D3                           ; give the serial port chance to settle after reset
000000D8                           273m WAIT_FOR_READY_1                                ; WAIT UNTIL THE THERE IS SPACE TO SEND
000000D8                 TRUE      274m     IFEQ DEBUG
000000D8  1639 00C00003            275m         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
000000DE  0803 0002                276m         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
000000E2  67F4                     277m         BEQ WAIT_FOR_READY_1                    ; NO SPACE, CHECK AGAIN
000000E4  13F8 002E 00C00007       278m         MOVE.B '.',DUART_TXA                    ; SEND THE NEXT CHARACTER
000000EC                           279m     ENDC
000000EC                           280m     
000000EC                 FALSE     281m     IFNE DEBUG
000000EC                           282m     ENDC
000000EC                           283m 
000000EC                           284m     ENDM
000000EC                           285  
000000EC  13FC 0001 00E00001       286      MOVE.B #1,DISPLAY
000000F4                           287         
000000F4                           288m     PRINT_CRLF D3
000000F4                           289mm     PRINT_CHAR #13,D3                           ; CR
000000F4                           290mm WAIT_FOR_READY_3                                ; WAIT UNTIL THE THERE IS SPACE TO SEND
000000F4                 TRUE      291mm     IFEQ DEBUG
000000F4  1639 00C00003            292mm         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
000000FA  0803 0002                293mm         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
000000FE  67F4                     294mm         BEQ WAIT_FOR_READY_3                    ; NO SPACE, CHECK AGAIN
00000100  13FC 000D 00C00007       295mm         MOVE.B #13,DUART_TXA                    ; SEND THE NEXT CHARACTER
00000108                           296mm     ENDC
00000108                           297mm     
00000108                 FALSE     298mm     IFNE DEBUG
00000108                           299mm     ENDC
00000108                           300mm 
00000108                           301mm     ENDM
00000108                           302mm     PRINT_CHAR #10,D3                           ; LF
00000108                           303mm WAIT_FOR_READY_4                                ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000108                 TRUE      304mm     IFEQ DEBUG
00000108  1639 00C00003            305mm         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
0000010E  0803 0002                306mm         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
00000112  67F4                     307mm         BEQ WAIT_FOR_READY_4                    ; NO SPACE, CHECK AGAIN
00000114  13FC 000A 00C00007       308mm         MOVE.B #10,DUART_TXA                    ; SEND THE NEXT CHARACTER
0000011C                           309mm     ENDC
0000011C                           310mm     
0000011C                 FALSE     311mm     IFNE DEBUG
0000011C                           312mm     ENDC
0000011C                           313mm 
0000011C                           314mm     ENDM
0000011C                           315m     ENDM
0000011C                           316  
0000011C  41F9 000019B2            317      LEA VERSION,A0
00000122                           318m     PRINT_STR A0,D3
00000122                           319m LOOP_5
00000122  0C10 0000                320m     CMP.B #0,(A0)                               ; 0 -> DONE
00000126  6700 0018                321m     BEQ EXIT_5
0000012A                           322mm     PRINT_CHAR (A0)+,D3
0000012A                           323mm WAIT_FOR_READY_6                                ; WAIT UNTIL THE THERE IS SPACE TO SEND
0000012A                 TRUE      324mm     IFEQ DEBUG
0000012A  1639 00C00003            325mm         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
00000130  0803 0002                326mm         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
00000134  67F4                     327mm         BEQ WAIT_FOR_READY_6                    ; NO SPACE, CHECK AGAIN
00000136  13D8 00C00007            328mm         MOVE.B (A0)+,DUART_TXA                      ; SEND THE NEXT CHARACTER
0000013C                           329mm     ENDC
0000013C                           330mm     
0000013C                 FALSE     331mm     IFNE DEBUG
0000013C                           332mm     ENDC
0000013C                           333mm 
0000013C                           334mm     ENDM
0000013C  4EF8 0122                335m     JMP LOOP_5
00000140                           336m EXIT_5
00000140                           337m     ENDM
00000140                           338m     PRINT_CRLF D3
00000140                           339mm     PRINT_CHAR #13,D3                           ; CR
00000140                           340mm WAIT_FOR_READY_8                                ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000140                 TRUE      341mm     IFEQ DEBUG
00000140  1639 00C00003            342mm         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
00000146  0803 0002                343mm         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
0000014A  67F4                     344mm         BEQ WAIT_FOR_READY_8                    ; NO SPACE, CHECK AGAIN
0000014C  13FC 000D 00C00007       345mm         MOVE.B #13,DUART_TXA                    ; SEND THE NEXT CHARACTER
00000154                           346mm     ENDC
00000154                           347mm     
00000154                 FALSE     348mm     IFNE DEBUG
00000154                           349mm     ENDC
00000154                           350mm 
00000154                           351mm     ENDM
00000154                           352mm     PRINT_CHAR #10,D3                           ; LF
00000154                           353mm WAIT_FOR_READY_9                                ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000154                 TRUE      354mm     IFEQ DEBUG
00000154  1639 00C00003            355mm         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
0000015A  0803 0002                356mm         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
0000015E  67F4                     357mm         BEQ WAIT_FOR_READY_9                    ; NO SPACE, CHECK AGAIN
00000160  13FC 000A 00C00007       358mm         MOVE.B #10,DUART_TXA                    ; SEND THE NEXT CHARACTER
00000168                           359mm     ENDC
00000168                           360mm     
00000168                 FALSE     361mm     IFNE DEBUG
00000168                           362mm     ENDC
00000168                           363mm 
00000168                           364mm     ENDM
00000168                           365m     ENDM
00000168                           366m     PRINT_CHAR #7,D3
00000168                           367m WAIT_FOR_READY_10                               ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000168                 TRUE      368m     IFEQ DEBUG
00000168  1639 00C00003            369m         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
0000016E  0803 0002                370m         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
00000172  67F4                     371m         BEQ WAIT_FOR_READY_10                   ; NO SPACE, CHECK AGAIN
00000174  13FC 0007 00C00007       372m         MOVE.B #7,DUART_TXA                     ; SEND THE NEXT CHARACTER
0000017C                           373m     ENDC
0000017C                           374m     
0000017C                 FALSE     375m     IFNE DEBUG
0000017C                           376m     ENDC
0000017C                           377m 
0000017C                           378m     ENDM
0000017C                           379  
0000017C  7E00                     380      MOVE.L #0,D7                                ; address accumulator
0000017E                           381  
0000017E  13FC 0002 00E00001       382      MOVE.B #2,DISPLAY
00000186                           383  MAIN_LOOP
00000186                           384m     PRINT_CHAR #'>',D3                          ; prompt
00000186                           385m WAIT_FOR_READY_11                               ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000186                 TRUE      386m     IFEQ DEBUG
00000186  1639 00C00003            387m         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
0000018C  0803 0002                388m         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
00000190  67F4                     389m         BEQ WAIT_FOR_READY_11                   ; NO SPACE, CHECK AGAIN
00000192  13FC 003E 00C00007       390m         MOVE.B #'>',DUART_TXA                       ; SEND THE NEXT CHARACTER
0000019A                           391m     ENDC
0000019A                           392m     
0000019A                 FALSE     393m     IFNE DEBUG
0000019A                           394m     ENDC
0000019A                           395m 
0000019A                           396m     ENDM
0000019A                           397m     PRINT_CHAR #32,D3                           ; space
0000019A                           398m WAIT_FOR_READY_12                               ; WAIT UNTIL THE THERE IS SPACE TO SEND
0000019A                 TRUE      399m     IFEQ DEBUG
0000019A  1639 00C00003            400m         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
000001A0  0803 0002                401m         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
000001A4  67F4                     402m         BEQ WAIT_FOR_READY_12                   ; NO SPACE, CHECK AGAIN
000001A6  13FC 0020 00C00007       403m         MOVE.B #32,DUART_TXA                    ; SEND THE NEXT CHARACTER
000001AE                           404m     ENDC
000001AE                           405m     
000001AE                 FALSE     406m     IFNE DEBUG
000001AE                           407m     ENDC
000001AE                           408m 
000001AE                           409m     ENDM
000001AE                           410      
000001AE                           411  GET_INPUT
000001AE                           412m     WAIT_CHAR D2,D3                             ; fetch character from serial port -> D2
000001AE                           413m WAIT_FOR_READY_13                               ; WAIT UNTIL THE THERE IS SPACE TO SEND
000001AE                           414m 
000001AE                 TRUE      415m     IFEQ DEBUG
000001AE  1639 00C00003            416m         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
000001B4  0803 0000                417m         BTST #0,D3                              ; CHECK FOR CHARACTER
000001B8  67F4                     418m         BEQ WAIT_FOR_READY_13                   ; NOTHING, CHECK AGAIN
000001BA                           419m     ENDC
000001BA                           420m     
000001BA                           421mm     READ_CHAR D2
000001BA                 TRUE      422mm     IFEQ DEBUG
000001BA  1439 00C00007            423mm         MOVE.B DUART_RXA,D2                     ; GOT A CHARACTER, READ IT
000001C0                           424mm     ENDC
000001C0                 FALSE     425mm     IFNE DEBUG
000001C0                           426mm     ENDC
000001C0                           427mm      
000001C0  B43C 001B                428mm     CMP.B #$1B,D2                               ; CHECK FOR ESCAPE AND GO TO START
000001C4  6700 FE42                429mm     BEQ START
000001C8                           430mm     ENDM
000001C8                           431m 
000001C8                 TRUE      432m     IFEQ DEBUG
000001C8                           433mm         PRINT_CHAR D2,D3                        ; ECHO IT BACK
000001C8                           434mm WAIT_FOR_READY_15                               ; WAIT UNTIL THE THERE IS SPACE TO SEND
000001C8                 TRUE      435mm     IFEQ DEBUG
000001C8  1639 00C00003            436mm         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
000001CE  0803 0002                437mm         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
000001D2  67F4                     438mm         BEQ WAIT_FOR_READY_15                   ; NO SPACE, CHECK AGAIN
000001D4  13C2 00C00007            439mm         MOVE.B D2,DUART_TXA                     ; SEND THE NEXT CHARACTER
000001DA                           440mm     ENDC
000001DA                           441mm     
000001DA                 FALSE     442mm     IFNE DEBUG
000001DA                           443mm     ENDC
000001DA                           444mm 
000001DA                           445mm     ENDM
000001DA                           446m     ENDC
000001DA                           447m     ENDM
000001DA                           448      
000001DA  B43C 0030                449      CMP.B #'0',D2
000001DE  6700 17B2                450      BEQ HEX_DIGIT
000001E2  B43C 0031                451      CMP.B #'1',D2
000001E6  6700 17AA                452      BEQ HEX_DIGIT
000001EA  B43C 0032                453      CMP.B #'2',D2
000001EE  6700 17A2                454      BEQ HEX_DIGIT
000001F2  B43C 0033                455      CMP.B #'3',D2
000001F6  6700 179A                456      BEQ HEX_DIGIT
000001FA  B43C 0034                457      CMP.B #'4',D2
000001FE  6700 1792                458      BEQ HEX_DIGIT
00000202  B43C 0035                459      CMP.B #'5',D2
00000206  6700 178A                460      BEQ HEX_DIGIT
0000020A  B43C 0036                461      CMP.B #'6',D2
0000020E  6700 1782                462      BEQ HEX_DIGIT
00000212  B43C 0037                463      CMP.B #'7',D2
00000216  6700 177A                464      BEQ HEX_DIGIT
0000021A  B43C 0038                465      CMP.B #'8',D2
0000021E  6700 1772                466      BEQ HEX_DIGIT
00000222  B43C 0039                467      CMP.B #'9',D2
00000226  6700 176A                468      BEQ HEX_DIGIT
0000022A  B43C 0041                469      CMP.B #'A',D2
0000022E  6700 1762                470      BEQ HEX_DIGIT
00000232  B43C 0042                471      CMP.B #'B',D2
00000236  6700 175A                472      BEQ HEX_DIGIT
0000023A  B43C 0043                473      CMP.B #'C',D2
0000023E  6700 1752                474      BEQ HEX_DIGIT
00000242  B43C 0044                475      CMP.B #'D',D2
00000246  6700 174A                476      BEQ HEX_DIGIT
0000024A  B43C 0045                477      CMP.B #'E',D2
0000024E  6700 1742                478      BEQ HEX_DIGIT
00000252  B43C 0046                479      CMP.B #'F',D2
00000256  6700 173A                480      BEQ HEX_DIGIT
0000025A                           481      
0000025A  B43C 0057                482      CMP.B #'W',D2
0000025E  6700 0160                483      BEQ W
00000262                           484      
00000262  B43C 004C                485      CMP.B #'L',D2
00000266  6700 15BA                486      BEQ L 
0000026A                           487  
0000026A                           488m     PRINT_CRLF D3
0000026A                           489mm     PRINT_CHAR #13,D3                           ; CR
0000026A                           490mm WAIT_FOR_READY_17                               ; WAIT UNTIL THE THERE IS SPACE TO SEND
0000026A                 TRUE      491mm     IFEQ DEBUG
0000026A  1639 00C00003            492mm         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
00000270  0803 0002                493mm         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
00000274  67F4                     494mm         BEQ WAIT_FOR_READY_17                   ; NO SPACE, CHECK AGAIN
00000276  13FC 000D 00C00007       495mm         MOVE.B #13,DUART_TXA                    ; SEND THE NEXT CHARACTER
0000027E                           496mm     ENDC
0000027E                           497mm     
0000027E                 FALSE     498mm     IFNE DEBUG
0000027E                           499mm     ENDC
0000027E                           500mm 
0000027E                           501mm     ENDM
0000027E                           502mm     PRINT_CHAR #10,D3                           ; LF
0000027E                           503mm WAIT_FOR_READY_18                               ; WAIT UNTIL THE THERE IS SPACE TO SEND
0000027E                 TRUE      504mm     IFEQ DEBUG
0000027E  1639 00C00003            505mm         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
00000284  0803 0002                506mm         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
00000288  67F4                     507mm         BEQ WAIT_FOR_READY_18                   ; NO SPACE, CHECK AGAIN
0000028A  13FC 000A 00C00007       508mm         MOVE.B #10,DUART_TXA                    ; SEND THE NEXT CHARACTER
00000292                           509mm     ENDC
00000292                           510mm     
00000292                 FALSE     511mm     IFNE DEBUG
00000292                           512mm     ENDC
00000292                           513mm 
00000292                           514mm     ENDM
00000292                           515m     ENDM
00000292                           516   
00000292  B43C 003F                517      CMP.B #'?',D2
00000296  6700 0052                518      BEQ H
0000029A                           519  
0000029A  B43C 0056                520      CMP.B #'V',D2
0000029E  6700 0072                521      BEQ V
000002A2                           522      
000002A2  B43C 0052                523      CMP.B #'R',D2
000002A6  6700 0092                524      BEQ R
000002AA                           525  
000002AA  B43C 0053                526      CMP.B #'S',D2
000002AE  6700 01D6                527      BEQ S
000002B2                           528  
000002B2  B43C 0047                529      CMP.B #'G',D2
000002B6  6700 145A                530      BEQ G   
000002BA                           531  
000002BA  B43C 005A                532      CMP.B #'Z',D2
000002BE  6700 145A                533      BEQ Z   
000002C2                           534  
000002C2  41F9 00001A66            535      LEA HUH,A0
000002C8                           536m     PRINT_STR A0,D3
000002C8                           537m LOOP_19
000002C8  0C10 0000                538m     CMP.B #0,(A0)                               ; 0 -> DONE
000002CC  6700 0018                539m     BEQ EXIT_19
000002D0                           540mm     PRINT_CHAR (A0)+,D3
000002D0                           541mm WAIT_FOR_READY_20                               ; WAIT UNTIL THE THERE IS SPACE TO SEND
000002D0                 TRUE      542mm     IFEQ DEBUG
000002D0  1639 00C00003            543mm         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
000002D6  0803 0002                544mm         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
000002DA  67F4                     545mm         BEQ WAIT_FOR_READY_20                   ; NO SPACE, CHECK AGAIN
000002DC  13D8 00C00007            546mm         MOVE.B (A0)+,DUART_TXA                      ; SEND THE NEXT CHARACTER
000002E2                           547mm     ENDC
000002E2                           548mm     
000002E2                 FALSE     549mm     IFNE DEBUG
000002E2                           550mm     ENDC
000002E2                           551mm 
000002E2                           552mm     ENDM
000002E2  4EF8 02C8                553m     JMP LOOP_19
000002E6                           554m EXIT_19
000002E6                           555m     ENDM
000002E6                           556                         
000002E6  4EF8 0186                557      JMP MAIN_LOOP
000002EA                           558      
000002EA                           559  ; commands
000002EA  41F9 000019CF            560  H   LEA HELP,A0
000002F0                           561m     PRINT_STR A0,D3
000002F0                           562m LOOP_21
000002F0  0C10 0000                563m     CMP.B #0,(A0)                               ; 0 -> DONE
000002F4  6700 0018                564m     BEQ EXIT_21
000002F8                           565mm     PRINT_CHAR (A0)+,D3
000002F8                           566mm WAIT_FOR_READY_22                               ; WAIT UNTIL THE THERE IS SPACE TO SEND
000002F8                 TRUE      567mm     IFEQ DEBUG
000002F8  1639 00C00003            568mm         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
000002FE  0803 0002                569mm         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
00000302  67F4                     570mm         BEQ WAIT_FOR_READY_22                   ; NO SPACE, CHECK AGAIN
00000304  13D8 00C00007            571mm         MOVE.B (A0)+,DUART_TXA                      ; SEND THE NEXT CHARACTER
0000030A                           572mm     ENDC
0000030A                           573mm     
0000030A                 FALSE     574mm     IFNE DEBUG
0000030A                           575mm     ENDC
0000030A                           576mm 
0000030A                           577mm     ENDM
0000030A  4EF8 02F0                578m     JMP LOOP_21
0000030E                           579m EXIT_21
0000030E                           580m     ENDM
0000030E  4EF8 0186                581      JMP MAIN_LOOP
00000312                           582  
00000312  41F9 000019B2            583  V   LEA VERSION,A0
00000318                           584m     PRINT_STR A0,D3       
00000318                           585m LOOP_23
00000318  0C10 0000                586m     CMP.B #0,(A0)                               ; 0 -> DONE
0000031C  6700 0018                587m     BEQ EXIT_23
00000320                           588mm     PRINT_CHAR (A0)+,D3
00000320                           589mm WAIT_FOR_READY_24                               ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000320                 TRUE      590mm     IFEQ DEBUG
00000320  1639 00C00003            591mm         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
00000326  0803 0002                592mm         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
0000032A  67F4                     593mm         BEQ WAIT_FOR_READY_24                   ; NO SPACE, CHECK AGAIN
0000032C  13D8 00C00007            594mm         MOVE.B (A0)+,DUART_TXA                      ; SEND THE NEXT CHARACTER
00000332                           595mm     ENDC
00000332                           596mm     
00000332                 FALSE     597mm     IFNE DEBUG
00000332                           598mm     ENDC
00000332                           599mm 
00000332                           600mm     ENDM
00000332  4EF8 0318                601m     JMP LOOP_23
00000336                           602m EXIT_23
00000336                           603m     ENDM
00000336  4EF8 0186                604      JMP MAIN_LOOP
0000033A                           605      
0000033A  2047                     606  R   MOVE.L D7,A0                                ; address accumulator -> address register
0000033C  2A10                     607      MOVE.L (A0),D5                              ; read the memory and print it
0000033E                           608m     PRINT_REG D5,D3,D7,D6,A0
0000033E                           609mm     PRINT_CHAR #'0',D3                          ;0X HEADER
0000033E                           610mm WAIT_FOR_READY_26                               ; WAIT UNTIL THE THERE IS SPACE TO SEND
0000033E                 TRUE      611mm     IFEQ DEBUG
0000033E  1639 00C00003            612mm         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
00000344  0803 0002                613mm         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
00000348  67F4                     614mm         BEQ WAIT_FOR_READY_26                   ; NO SPACE, CHECK AGAIN
0000034A  13FC 0030 00C00007       615mm         MOVE.B #'0',DUART_TXA                       ; SEND THE NEXT CHARACTER
00000352                           616mm     ENDC
00000352                           617mm     
00000352                 FALSE     618mm     IFNE DEBUG
00000352                           619mm     ENDC
00000352                           620mm 
00000352                           621mm     ENDM
00000352                           622mm     PRINT_CHAR #'x',D3
00000352                           623mm WAIT_FOR_READY_27                               ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000352                 TRUE      624mm     IFEQ DEBUG
00000352  1639 00C00003            625mm         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
00000358  0803 0002                626mm         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
0000035C  67F4                     627mm         BEQ WAIT_FOR_READY_27                   ; NO SPACE, CHECK AGAIN
0000035E  13FC 0078 00C00007       628mm         MOVE.B #'x',DUART_TXA                       ; SEND THE NEXT CHARACTER
00000366                           629mm     ENDC
00000366                           630mm     
00000366                 FALSE     631mm     IFNE DEBUG
00000366                           632mm     ENDC
00000366                           633mm 
00000366                           634mm     ENDM
00000366  7C07                     635m     MOVE.L #7,D6                                ; LOOP ROUND ALL 8 HEX CHARACTERS OF 4 BITS EACH
00000368                           636m LOOP_25
00000368                           637mm     BIN2HEX D5,D7,A0
00000368  41F9 00001ACA            638mm     LEA BIN2HEX_LUT,A0                          ; LOAD THE LOOKUP TABLE
0000036E  E99D                     639mm     ROL.L #4,D5                                 ; SHIFT THE TOP 4 BITS DOWN TO BOTTOM OF THE REGISTER THE AND MASK OFF EVERYTHING ELSE
00000370  1E05                     640mm     MOVE.B D5,D7
00000372  0287 0000000F            641mm     ANDI.L #$F,D7
00000378  1E30 7000                642mm     MOVE.B 0(A0,D7),D7                          ; USE THAT AS AN INDEX INTO THE LUT
0000037C                           643mm     ENDM
0000037C                           644mm     PRINT_CHAR D7,D3
0000037C                           645mm WAIT_FOR_READY_29                               ; WAIT UNTIL THE THERE IS SPACE TO SEND
0000037C                 TRUE      646mm     IFEQ DEBUG
0000037C  1639 00C00003            647mm         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
00000382  0803 0002                648mm         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
00000386  67F4                     649mm         BEQ WAIT_FOR_READY_29                   ; NO SPACE, CHECK AGAIN
00000388  13C7 00C00007            650mm         MOVE.B D7,DUART_TXA                     ; SEND THE NEXT CHARACTER
0000038E                           651mm     ENDC
0000038E                           652mm     
0000038E                 FALSE     653mm     IFNE DEBUG
0000038E                           654mm     ENDC
0000038E                           655mm 
0000038E                           656mm     ENDM
0000038E  57CE FFD8                657m     DBEQ D6,LOOP_25
00000392                           658m     ENDM
00000392                           659m     PRINT_CRLF D3
00000392                           660mm     PRINT_CHAR #13,D3                           ; CR
00000392                           661mm WAIT_FOR_READY_31                               ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000392                 TRUE      662mm     IFEQ DEBUG
00000392  1639 00C00003            663mm         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
00000398  0803 0002                664mm         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
0000039C  67F4                     665mm         BEQ WAIT_FOR_READY_31                   ; NO SPACE, CHECK AGAIN
0000039E  13FC 000D 00C00007       666mm         MOVE.B #13,DUART_TXA                    ; SEND THE NEXT CHARACTER
000003A6                           667mm     ENDC
000003A6                           668mm     
000003A6                 FALSE     669mm     IFNE DEBUG
000003A6                           670mm     ENDC
000003A6                           671mm 
000003A6                           672mm     ENDM
000003A6                           673mm     PRINT_CHAR #10,D3                           ; LF
000003A6                           674mm WAIT_FOR_READY_32                               ; WAIT UNTIL THE THERE IS SPACE TO SEND
000003A6                 TRUE      675mm     IFEQ DEBUG
000003A6  1639 00C00003            676mm         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
000003AC  0803 0002                677mm         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
000003B0  67F4                     678mm         BEQ WAIT_FOR_READY_32                   ; NO SPACE, CHECK AGAIN
000003B2  13FC 000A 00C00007       679mm         MOVE.B #10,DUART_TXA                    ; SEND THE NEXT CHARACTER
000003BA                           680mm     ENDC
000003BA                           681mm     
000003BA                 FALSE     682mm     IFNE DEBUG
000003BA                           683mm     ENDC
000003BA                           684mm 
000003BA                           685mm     ENDM
000003BA                           686m     ENDM
000003BA  7E00                     687      MOVE.L #0,D7                                ; clear the now used address accumulator
000003BC  4EF8 0186                688      JMP MAIN_LOOP
000003C0                           689  
000003C0  7A00                     690  W   MOVE.L #0,D5                                ; D5 will be the value to write            
000003C2                           691  
000003C2                           692m     WAIT_CHAR D2,D3                             ; read most significant character -> D2
000003C2                           693m WAIT_FOR_READY_33                               ; WAIT UNTIL THE THERE IS SPACE TO SEND
000003C2                           694m 
000003C2                 TRUE      695m     IFEQ DEBUG
000003C2  1639 00C00003            696m         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
000003C8  0803 0000                697m         BTST #0,D3                              ; CHECK FOR CHARACTER
000003CC  67F4                     698m         BEQ WAIT_FOR_READY_33                   ; NOTHING, CHECK AGAIN
000003CE                           699m     ENDC
000003CE                           700m     
000003CE                           701mm     READ_CHAR D2
000003CE                 TRUE      702mm     IFEQ DEBUG
000003CE  1439 00C00007            703mm         MOVE.B DUART_RXA,D2                     ; GOT A CHARACTER, READ IT
000003D4                           704mm     ENDC
000003D4                 FALSE     705mm     IFNE DEBUG
000003D4                           706mm     ENDC
000003D4                           707mm      
000003D4  B43C 001B                708mm     CMP.B #$1B,D2                               ; CHECK FOR ESCAPE AND GO TO START
000003D8  6700 FC2E                709mm     BEQ START
000003DC                           710mm     ENDM
000003DC                           711m 
000003DC                 TRUE      712m     IFEQ DEBUG
000003DC                           713mm         PRINT_CHAR D2,D3                        ; ECHO IT BACK
000003DC                           714mm WAIT_FOR_READY_35                               ; WAIT UNTIL THE THERE IS SPACE TO SEND
000003DC                 TRUE      715mm     IFEQ DEBUG
000003DC  1639 00C00003            716mm         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
000003E2  0803 0002                717mm         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
000003E6  67F4                     718mm         BEQ WAIT_FOR_READY_35                   ; NO SPACE, CHECK AGAIN
000003E8  13C2 00C00007            719mm         MOVE.B D2,DUART_TXA                     ; SEND THE NEXT CHARACTER
000003EE                           720mm     ENDC
000003EE                           721mm     
000003EE                 FALSE     722mm     IFNE DEBUG
000003EE                           723mm     ENDC
000003EE                           724mm 
000003EE                           725mm     ENDM
000003EE                           726m     ENDC
000003EE                           727m     ENDM
000003EE                           728m     HEX2BIN D2,D2,A0                            ; convert to binary -> D2
000003EE  41F9 00001ADA            729m     LEA HEX2BIN_LUT,A0                          ; LOAD THE LOOKUP TABLE
000003F4  0402 0030                730m     SUB.B #'0',D2                               ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
000003F8  C4BC 000000FF            731m     AND.L #$FF,D2                               ; IGNORE THE TOP 3 BYTES
000003FE  1430 2000                732m     MOVE.B 0(A0,D2),D2                          ; USE THAT AS AN INDEX INTO THE LUT      
00000402                           733m     ENDM
00000402  1A02                     734      MOVE.B D2,D5                                ; put at bottom of D5
00000404                           735  
00000404  3C3C 0006                736      MOVE #6,D6                                  ; 7 bytes left to read
00000408                           737      
00000408                           738  READ_DATA_TO_POKE
00000408  E98D                     739      LSL.L #4,D5                                 ; make what we have so far more significant
0000040A                           740m     WAIT_CHAR D2,D3                             ; next character -> D2
0000040A                           741m WAIT_FOR_READY_37                               ; WAIT UNTIL THE THERE IS SPACE TO SEND
0000040A                           742m 
0000040A                 TRUE      743m     IFEQ DEBUG
0000040A  1639 00C00003            744m         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
00000410  0803 0000                745m         BTST #0,D3                              ; CHECK FOR CHARACTER
00000414  67F4                     746m         BEQ WAIT_FOR_READY_37                   ; NOTHING, CHECK AGAIN
00000416                           747m     ENDC
00000416                           748m     
00000416                           749mm     READ_CHAR D2
00000416                 TRUE      750mm     IFEQ DEBUG
00000416  1439 00C00007            751mm         MOVE.B DUART_RXA,D2                     ; GOT A CHARACTER, READ IT
0000041C                           752mm     ENDC
0000041C                 FALSE     753mm     IFNE DEBUG
0000041C                           754mm     ENDC
0000041C                           755mm      
0000041C  B43C 001B                756mm     CMP.B #$1B,D2                               ; CHECK FOR ESCAPE AND GO TO START
00000420  6700 FBE6                757mm     BEQ START
00000424                           758mm     ENDM
00000424                           759m 
00000424                 TRUE      760m     IFEQ DEBUG
00000424                           761mm         PRINT_CHAR D2,D3                        ; ECHO IT BACK
00000424                           762mm WAIT_FOR_READY_39                               ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000424                 TRUE      763mm     IFEQ DEBUG
00000424  1639 00C00003            764mm         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
0000042A  0803 0002                765mm         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
0000042E  67F4                     766mm         BEQ WAIT_FOR_READY_39                   ; NO SPACE, CHECK AGAIN
00000430  13C2 00C00007            767mm         MOVE.B D2,DUART_TXA                     ; SEND THE NEXT CHARACTER
00000436                           768mm     ENDC
00000436                           769mm     
00000436                 FALSE     770mm     IFNE DEBUG
00000436                           771mm     ENDC
00000436                           772mm 
00000436                           773mm     ENDM
00000436                           774m     ENDC
00000436                           775m     ENDM
00000436                           776m     HEX2BIN D2,D2,A0                            ; convert to binary -> D2
00000436  41F9 00001ADA            777m     LEA HEX2BIN_LUT,A0                          ; LOAD THE LOOKUP TABLE
0000043C  0402 0030                778m     SUB.B #'0',D2                               ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
00000440  C4BC 000000FF            779m     AND.L #$FF,D2                               ; IGNORE THE TOP 3 BYTES
00000446  1430 2000                780m     MOVE.B 0(A0,D2),D2                          ; USE THAT AS AN INDEX INTO THE LUT      
0000044A                           781m     ENDM
0000044A  8A02                     782      OR.B D2,D5
0000044C  023C 00FB                783      ANDI #$FB,CCR                               ; clear the Z bit if set (from the OR above)
00000450  57CE FFB6                784      DBEQ D6,READ_DATA_TO_POKE
00000454                           785      
00000454  2047                     786      MOVE.L D7,A0                                ; address accumulator -> address register
00000456  7E00                     787      MOVE.L #0,D7                                ; clear the now used address accumulator
00000458                           788      
00000458  2085                     789      MOVE.L D5,(A0)                              ; write the data
0000045A                           790  
0000045A                           791m     PRINT_CRLF D3
0000045A                           792mm     PRINT_CHAR #13,D3                           ; CR
0000045A                           793mm WAIT_FOR_READY_42                               ; WAIT UNTIL THE THERE IS SPACE TO SEND
0000045A                 TRUE      794mm     IFEQ DEBUG
0000045A  1639 00C00003            795mm         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
00000460  0803 0002                796mm         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
00000464  67F4                     797mm         BEQ WAIT_FOR_READY_42                   ; NO SPACE, CHECK AGAIN
00000466  13FC 000D 00C00007       798mm         MOVE.B #13,DUART_TXA                    ; SEND THE NEXT CHARACTER
0000046E                           799mm     ENDC
0000046E                           800mm     
0000046E                 FALSE     801mm     IFNE DEBUG
0000046E                           802mm     ENDC
0000046E                           803mm 
0000046E                           804mm     ENDM
0000046E                           805mm     PRINT_CHAR #10,D3                           ; LF
0000046E                           806mm WAIT_FOR_READY_43                               ; WAIT UNTIL THE THERE IS SPACE TO SEND
0000046E                 TRUE      807mm     IFEQ DEBUG
0000046E  1639 00C00003            808mm         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
00000474  0803 0002                809mm         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
00000478  67F4                     810mm         BEQ WAIT_FOR_READY_43                   ; NO SPACE, CHECK AGAIN
0000047A  13FC 000A 00C00007       811mm         MOVE.B #10,DUART_TXA                    ; SEND THE NEXT CHARACTER
00000482                           812mm     ENDC
00000482                           813mm     
00000482                 FALSE     814mm     IFNE DEBUG
00000482                           815mm     ENDC
00000482                           816mm 
00000482                           817mm     ENDM
00000482                           818m     ENDM
00000482  4EF8 0186                819      JMP MAIN_LOOP
00000486                           820  
00000486                           821          
00000486  2647                     822  S   MOVE.L D7,A3                                ; grab the address accumulator
00000488  7800                     823      MOVE.L #0,D4                                ; count of records read -> D4
0000048A  2478 0000                824      MOVE.L 0,A2                                 ; start address -> A2
0000048E                           825      
0000048E                           826  WAIT_FOR_SRECORD                                ; wait for the start of a record, indicated by 'S'
0000048E                           827m     DOWNLOAD D2,D3                  
0000048E                           828m WAIT_FOR_READY_44                               ; WAIT UNTIL THE THERE IS SPACE TO SEND
0000048E                           829m 
0000048E  1639 00C00003            830m     MOVE.B DUART_SRA,D3                         ; CHECK FOR COMMAND
00000494  0803 0000                831m     BTST #0,D3                                  ; CHECK FOR CHARACTER
00000498  6700 0010                832m     BEQ CONTINUE_44                             ; NOTHING, CONTINUE
0000049C                           833m  
0000049C                           834mm     READ_CHAR D2
0000049C                 TRUE      835mm     IFEQ DEBUG
0000049C  1439 00C00007            836mm         MOVE.B DUART_RXA,D2                     ; GOT A CHARACTER, READ IT
000004A2                           837mm     ENDC
000004A2                 FALSE     838mm     IFNE DEBUG
000004A2                           839mm     ENDC
000004A2                           840mm      
000004A2  B43C 001B                841mm     CMP.B #$1B,D2                               ; CHECK FOR ESCAPE AND GO TO START
000004A6  6700 FB60                842mm     BEQ START
000004AA                           843mm     ENDM
000004AA                           844m CONTINUE_44
000004AA  1639 00C00013            845m     MOVE.B DUART_SRB,D3                         ; READ STATUS REGISTER
000004B0  0803 0000                846m     BTST #0,D3                                  ; CHECK FOR CHARACTER
000004B4  67D8                     847m     BEQ WAIT_FOR_READY_44                       ; NOTHING, CHECK AGAIN
000004B6                           848m     
000004B6  1439 00C00017            849m     MOVE.B DUART_RXB,D2                         ; GOT A CHARACTER, READ IT
000004BC  13C2 00E00001            850m     MOVE.B D2,DISPLAY                           ; ECHO TO THE DISPLAY
000004C2                           851m     
000004C2                           852m     ENDM
000004C2  B43C 0053                853      CMP.B #'S',D2                               ; found S?    
000004C6  66C6                     854      BNE WAIT_FOR_SRECORD                        ; nope, keep waiting
000004C8                           855      
000004C8  5284                     856      ADD.L #1,D4                                 ; read another S record, increment count
000004CA                           857      
000004CA                           858m     DOWNLOAD D7,D3                              ; read the record digit
000004CA                           859m WAIT_FOR_READY_46                               ; WAIT UNTIL THE THERE IS SPACE TO SEND
000004CA                           860m 
000004CA  1639 00C00003            861m     MOVE.B DUART_SRA,D3                         ; CHECK FOR COMMAND
000004D0  0803 0000                862m     BTST #0,D3                                  ; CHECK FOR CHARACTER
000004D4  6700 0010                863m     BEQ CONTINUE_46                             ; NOTHING, CONTINUE
000004D8                           864m  
000004D8                           865mm     READ_CHAR D7
000004D8                 TRUE      866mm     IFEQ DEBUG
000004D8  1E39 00C00007            867mm         MOVE.B DUART_RXA,D7                     ; GOT A CHARACTER, READ IT
000004DE                           868mm     ENDC
000004DE                 FALSE     869mm     IFNE DEBUG
000004DE                           870mm     ENDC
000004DE                           871mm      
000004DE  BE3C 001B                872mm     CMP.B #$1B,D7                               ; CHECK FOR ESCAPE AND GO TO START
000004E2  6700 FB24                873mm     BEQ START
000004E6                           874mm     ENDM
000004E6                           875m CONTINUE_46
000004E6  1639 00C00013            876m     MOVE.B DUART_SRB,D3                         ; READ STATUS REGISTER
000004EC  0803 0000                877m     BTST #0,D3                                  ; CHECK FOR CHARACTER
000004F0  67D8                     878m     BEQ WAIT_FOR_READY_46                       ; NOTHING, CHECK AGAIN
000004F2                           879m     
000004F2  1E39 00C00017            880m     MOVE.B DUART_RXB,D7                         ; GOT A CHARACTER, READ IT
000004F8  13C7 00E00001            881m     MOVE.B D7,DISPLAY                           ; ECHO TO THE DISPLAY
000004FE                           882m     
000004FE                           883m     ENDM
000004FE                           884  
000004FE  7C00                     885      MOVE.L #0,D6                                ; checksum
00000500                           886  
00000500  7A00                     887      MOVE.L #0,D5                                ; read the 2 digit byte count -> D5
00000502                           888m     DOWNLOAD D2,D3              
00000502                           889m WAIT_FOR_READY_48                               ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000502                           890m 
00000502  1639 00C00003            891m     MOVE.B DUART_SRA,D3                         ; CHECK FOR COMMAND
00000508  0803 0000                892m     BTST #0,D3                                  ; CHECK FOR CHARACTER
0000050C  6700 0010                893m     BEQ CONTINUE_48                             ; NOTHING, CONTINUE
00000510                           894m  
00000510                           895mm     READ_CHAR D2
00000510                 TRUE      896mm     IFEQ DEBUG
00000510  1439 00C00007            897mm         MOVE.B DUART_RXA,D2                     ; GOT A CHARACTER, READ IT
00000516                           898mm     ENDC
00000516                 FALSE     899mm     IFNE DEBUG
00000516                           900mm     ENDC
00000516                           901mm      
00000516  B43C 001B                902mm     CMP.B #$1B,D2                               ; CHECK FOR ESCAPE AND GO TO START
0000051A  6700 FAEC                903mm     BEQ START
0000051E                           904mm     ENDM
0000051E                           905m CONTINUE_48
0000051E  1639 00C00013            906m     MOVE.B DUART_SRB,D3                         ; READ STATUS REGISTER
00000524  0803 0000                907m     BTST #0,D3                                  ; CHECK FOR CHARACTER
00000528  67D8                     908m     BEQ WAIT_FOR_READY_48                       ; NOTHING, CHECK AGAIN
0000052A                           909m     
0000052A  1439 00C00017            910m     MOVE.B DUART_RXB,D2                         ; GOT A CHARACTER, READ IT
00000530  13C2 00E00001            911m     MOVE.B D2,DISPLAY                           ; ECHO TO THE DISPLAY
00000536                           912m     
00000536                           913m     ENDM
00000536                           914m     HEX2BIN D2,D2,A0
00000536  41F9 00001ADA            915m     LEA HEX2BIN_LUT,A0                          ; LOAD THE LOOKUP TABLE
0000053C  0402 0030                916m     SUB.B #'0',D2                               ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
00000540  C4BC 000000FF            917m     AND.L #$FF,D2                               ; IGNORE THE TOP 3 BYTES
00000546  1430 2000                918m     MOVE.B 0(A0,D2),D2                          ; USE THAT AS AN INDEX INTO THE LUT      
0000054A                           919m     ENDM
0000054A  8A82                     920      OR.L D2,D5
0000054C  E98D                     921      LSL.L #4,D5    
0000054E                           922m     DOWNLOAD D2,D3
0000054E                           923m WAIT_FOR_READY_51                               ; WAIT UNTIL THE THERE IS SPACE TO SEND
0000054E                           924m 
0000054E  1639 00C00003            925m     MOVE.B DUART_SRA,D3                         ; CHECK FOR COMMAND
00000554  0803 0000                926m     BTST #0,D3                                  ; CHECK FOR CHARACTER
00000558  6700 0010                927m     BEQ CONTINUE_51                             ; NOTHING, CONTINUE
0000055C                           928m  
0000055C                           929mm     READ_CHAR D2
0000055C                 TRUE      930mm     IFEQ DEBUG
0000055C  1439 00C00007            931mm         MOVE.B DUART_RXA,D2                     ; GOT A CHARACTER, READ IT
00000562                           932mm     ENDC
00000562                 FALSE     933mm     IFNE DEBUG
00000562                           934mm     ENDC
00000562                           935mm      
00000562  B43C 001B                936mm     CMP.B #$1B,D2                               ; CHECK FOR ESCAPE AND GO TO START
00000566  6700 FAA0                937mm     BEQ START
0000056A                           938mm     ENDM
0000056A                           939m CONTINUE_51
0000056A  1639 00C00013            940m     MOVE.B DUART_SRB,D3                         ; READ STATUS REGISTER
00000570  0803 0000                941m     BTST #0,D3                                  ; CHECK FOR CHARACTER
00000574  67D8                     942m     BEQ WAIT_FOR_READY_51                       ; NOTHING, CHECK AGAIN
00000576                           943m     
00000576  1439 00C00017            944m     MOVE.B DUART_RXB,D2                         ; GOT A CHARACTER, READ IT
0000057C  13C2 00E00001            945m     MOVE.B D2,DISPLAY                           ; ECHO TO THE DISPLAY
00000582                           946m     
00000582                           947m     ENDM
00000582                           948m     HEX2BIN D2,D2,A0  
00000582  41F9 00001ADA            949m     LEA HEX2BIN_LUT,A0                          ; LOAD THE LOOKUP TABLE
00000588  0402 0030                950m     SUB.B #'0',D2                               ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
0000058C  C4BC 000000FF            951m     AND.L #$FF,D2                               ; IGNORE THE TOP 3 BYTES
00000592  1430 2000                952m     MOVE.B 0(A0,D2),D2                          ; USE THAT AS AN INDEX INTO THE LUT      
00000596                           953m     ENDM
00000596  8A82                     954      OR.L D2,D5
00000598                           955                  
00000598  DC85                     956      ADD.L D5,D6                                 ; add byte count into checksum
0000059A                           957  
0000059A                           958      IF.B D7 <EQ> #'0' THEN.L                    ; header
0000059A  BE3C 0030                959s     CMP.B   #'0',D7
0000059E  6600 0228                960s     BNE.L   _00000000
000005A2  7E00                     961          MOVE.L #0,D7                            ; read the 16 bit address, just checksum and then ignore
000005A4                           962m         DOWNLOAD D2,D3                          ; top byte
000005A4                           963m WAIT_FOR_READY_54                               ; WAIT UNTIL THE THERE IS SPACE TO SEND
000005A4                           964m 
000005A4  1639 00C00003            965m     MOVE.B DUART_SRA,D3                         ; CHECK FOR COMMAND
000005AA  0803 0000                966m     BTST #0,D3                                  ; CHECK FOR CHARACTER
000005AE  6700 0010                967m     BEQ CONTINUE_54                             ; NOTHING, CONTINUE
000005B2                           968m  
000005B2                           969mm     READ_CHAR D2
000005B2                 TRUE      970mm     IFEQ DEBUG
000005B2  1439 00C00007            971mm         MOVE.B DUART_RXA,D2                     ; GOT A CHARACTER, READ IT
000005B8                           972mm     ENDC
000005B8                 FALSE     973mm     IFNE DEBUG
000005B8                           974mm     ENDC
000005B8                           975mm      
000005B8  B43C 001B                976mm     CMP.B #$1B,D2                               ; CHECK FOR ESCAPE AND GO TO START
000005BC  6700 FA4A                977mm     BEQ START
000005C0                           978mm     ENDM
000005C0                           979m CONTINUE_54
000005C0  1639 00C00013            980m     MOVE.B DUART_SRB,D3                         ; READ STATUS REGISTER
000005C6  0803 0000                981m     BTST #0,D3                                  ; CHECK FOR CHARACTER
000005CA  67D8                     982m     BEQ WAIT_FOR_READY_54                       ; NOTHING, CHECK AGAIN
000005CC                           983m     
000005CC  1439 00C00017            984m     MOVE.B DUART_RXB,D2                         ; GOT A CHARACTER, READ IT
000005D2  13C2 00E00001            985m     MOVE.B D2,DISPLAY                           ; ECHO TO THE DISPLAY
000005D8                           986m     
000005D8                           987m     ENDM
000005D8                           988m         HEX2BIN D2,D2,A0
000005D8  41F9 00001ADA            989m     LEA HEX2BIN_LUT,A0                          ; LOAD THE LOOKUP TABLE
000005DE  0402 0030                990m     SUB.B #'0',D2                               ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
000005E2  C4BC 000000FF            991m     AND.L #$FF,D2                               ; IGNORE THE TOP 3 BYTES
000005E8  1430 2000                992m     MOVE.B 0(A0,D2),D2                          ; USE THAT AS AN INDEX INTO THE LUT      
000005EC                           993m     ENDM
000005EC  8E82                     994          OR.L D2,D7
000005EE  E98F                     995          LSL.L #4,D7
000005F0                           996m         DOWNLOAD D2,D3         
000005F0                           997m WAIT_FOR_READY_57                               ; WAIT UNTIL THE THERE IS SPACE TO SEND
000005F0                           998m 
000005F0  1639 00C00003            999m     MOVE.B DUART_SRA,D3                         ; CHECK FOR COMMAND
000005F6  0803 0000               1000m     BTST #0,D3                                  ; CHECK FOR CHARACTER
000005FA  6700 0010               1001m     BEQ CONTINUE_57                             ; NOTHING, CONTINUE
000005FE                          1002m  
000005FE                          1003mm     READ_CHAR D2
000005FE                 TRUE     1004mm     IFEQ DEBUG
000005FE  1439 00C00007           1005mm         MOVE.B DUART_RXA,D2                     ; GOT A CHARACTER, READ IT
00000604                          1006mm     ENDC
00000604                 FALSE    1007mm     IFNE DEBUG
00000604                          1008mm     ENDC
00000604                          1009mm      
00000604  B43C 001B               1010mm     CMP.B #$1B,D2                               ; CHECK FOR ESCAPE AND GO TO START
00000608  6700 F9FE               1011mm     BEQ START
0000060C                          1012mm     ENDM
0000060C                          1013m CONTINUE_57
0000060C  1639 00C00013           1014m     MOVE.B DUART_SRB,D3                         ; READ STATUS REGISTER
00000612  0803 0000               1015m     BTST #0,D3                                  ; CHECK FOR CHARACTER
00000616  67D8                    1016m     BEQ WAIT_FOR_READY_57                       ; NOTHING, CHECK AGAIN
00000618                          1017m     
00000618  1439 00C00017           1018m     MOVE.B DUART_RXB,D2                         ; GOT A CHARACTER, READ IT
0000061E  13C2 00E00001           1019m     MOVE.B D2,DISPLAY                           ; ECHO TO THE DISPLAY
00000624                          1020m     
00000624                          1021m     ENDM
00000624                          1022m         HEX2BIN D2,D2,A0
00000624  41F9 00001ADA           1023m     LEA HEX2BIN_LUT,A0                          ; LOAD THE LOOKUP TABLE
0000062A  0402 0030               1024m     SUB.B #'0',D2                               ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
0000062E  C4BC 000000FF           1025m     AND.L #$FF,D2                               ; IGNORE THE TOP 3 BYTES
00000634  1430 2000               1026m     MOVE.B 0(A0,D2),D2                          ; USE THAT AS AN INDEX INTO THE LUT      
00000638                          1027m     ENDM
00000638  8E82                    1028          OR.L D2,D7
0000063A                          1029          
0000063A  DC87                    1030          ADD.L D7,D6                             ; add top byte of address into checksum
0000063C                          1031  
0000063C  E98F                    1032          LSL.L #4,D7                             ; bottom byte
0000063E                          1033m         DOWNLOAD D2,D3
0000063E                          1034m WAIT_FOR_READY_60                               ; WAIT UNTIL THE THERE IS SPACE TO SEND
0000063E                          1035m 
0000063E  1639 00C00003           1036m     MOVE.B DUART_SRA,D3                         ; CHECK FOR COMMAND
00000644  0803 0000               1037m     BTST #0,D3                                  ; CHECK FOR CHARACTER
00000648  6700 0010               1038m     BEQ CONTINUE_60                             ; NOTHING, CONTINUE
0000064C                          1039m  
0000064C                          1040mm     READ_CHAR D2
0000064C                 TRUE     1041mm     IFEQ DEBUG
0000064C  1439 00C00007           1042mm         MOVE.B DUART_RXA,D2                     ; GOT A CHARACTER, READ IT
00000652                          1043mm     ENDC
00000652                 FALSE    1044mm     IFNE DEBUG
00000652                          1045mm     ENDC
00000652                          1046mm      
00000652  B43C 001B               1047mm     CMP.B #$1B,D2                               ; CHECK FOR ESCAPE AND GO TO START
00000656  6700 F9B0               1048mm     BEQ START
0000065A                          1049mm     ENDM
0000065A                          1050m CONTINUE_60
0000065A  1639 00C00013           1051m     MOVE.B DUART_SRB,D3                         ; READ STATUS REGISTER
00000660  0803 0000               1052m     BTST #0,D3                                  ; CHECK FOR CHARACTER
00000664  67D8                    1053m     BEQ WAIT_FOR_READY_60                       ; NOTHING, CHECK AGAIN
00000666                          1054m     
00000666  1439 00C00017           1055m     MOVE.B DUART_RXB,D2                         ; GOT A CHARACTER, READ IT
0000066C  13C2 00E00001           1056m     MOVE.B D2,DISPLAY                           ; ECHO TO THE DISPLAY
00000672                          1057m     
00000672                          1058m     ENDM
00000672                          1059m         HEX2BIN D2,D2,A0
00000672  41F9 00001ADA           1060m     LEA HEX2BIN_LUT,A0                          ; LOAD THE LOOKUP TABLE
00000678  0402 0030               1061m     SUB.B #'0',D2                               ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
0000067C  C4BC 000000FF           1062m     AND.L #$FF,D2                               ; IGNORE THE TOP 3 BYTES
00000682  1430 2000               1063m     MOVE.B 0(A0,D2),D2                          ; USE THAT AS AN INDEX INTO THE LUT      
00000686                          1064m     ENDM
00000686  8E82                    1065          OR.L D2,D7
00000688  E98F                    1066          LSL.L #4,D7        
0000068A                          1067m         DOWNLOAD D2,D3
0000068A                          1068m WAIT_FOR_READY_63                               ; WAIT UNTIL THE THERE IS SPACE TO SEND
0000068A                          1069m 
0000068A  1639 00C00003           1070m     MOVE.B DUART_SRA,D3                         ; CHECK FOR COMMAND
00000690  0803 0000               1071m     BTST #0,D3                                  ; CHECK FOR CHARACTER
00000694  6700 0010               1072m     BEQ CONTINUE_63                             ; NOTHING, CONTINUE
00000698                          1073m  
00000698                          1074mm     READ_CHAR D2
00000698                 TRUE     1075mm     IFEQ DEBUG
00000698  1439 00C00007           1076mm         MOVE.B DUART_RXA,D2                     ; GOT A CHARACTER, READ IT
0000069E                          1077mm     ENDC
0000069E                 FALSE    1078mm     IFNE DEBUG
0000069E                          1079mm     ENDC
0000069E                          1080mm      
0000069E  B43C 001B               1081mm     CMP.B #$1B,D2                               ; CHECK FOR ESCAPE AND GO TO START
000006A2  6700 F964               1082mm     BEQ START
000006A6                          1083mm     ENDM
000006A6                          1084m CONTINUE_63
000006A6  1639 00C00013           1085m     MOVE.B DUART_SRB,D3                         ; READ STATUS REGISTER
000006AC  0803 0000               1086m     BTST #0,D3                                  ; CHECK FOR CHARACTER
000006B0  67D8                    1087m     BEQ WAIT_FOR_READY_63                       ; NOTHING, CHECK AGAIN
000006B2                          1088m     
000006B2  1439 00C00017           1089m     MOVE.B DUART_RXB,D2                         ; GOT A CHARACTER, READ IT
000006B8  13C2 00E00001           1090m     MOVE.B D2,DISPLAY                           ; ECHO TO THE DISPLAY
000006BE                          1091m     
000006BE                          1092m     ENDM
000006BE                          1093m         HEX2BIN D2,D2,A0
000006BE  41F9 00001ADA           1094m     LEA HEX2BIN_LUT,A0                          ; LOAD THE LOOKUP TABLE
000006C4  0402 0030               1095m     SUB.B #'0',D2                               ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
000006C8  C4BC 000000FF           1096m     AND.L #$FF,D2                               ; IGNORE THE TOP 3 BYTES
000006CE  1430 2000               1097m     MOVE.B 0(A0,D2),D2                          ; USE THAT AS AN INDEX INTO THE LUT      
000006D2                          1098m     ENDM
000006D2  8E82                    1099          OR.L D2,D7
000006D4                          1100          
000006D4  7400                    1101          MOVE.L #0,D2                            ; rextract bottom byte of address and add into checksum
000006D6  1407                    1102          MOVE.B D7,D2
000006D8  DC82                    1103          ADD.L D2,D6
000006DA                          1104          
000006DA  5785                    1105          SUB.L #3,D5                             ; subtract three bytes for 16 bit address and 1 byte checksum
000006DC                          1106          WHILE.L D5 <GT> #0 DO                   ; read the data bytes
000006DC                          1107s _10000000
000006DC  BABC 00000000           1108s     CMP.L   #0,D5
000006E2  6F00 00B4               1109s     BLE _10000001
000006E6  5385                    1110              SUB.L #1,D5
000006E8                          1111              
000006E8  7E00                    1112              MOVE.L #0,D7                        ; D7 holds the byte
000006EA                          1113              
000006EA                          1114m             DOWNLOAD D2,D3                      ; MS 4 bits
000006EA                          1115m WAIT_FOR_READY_66                               ; WAIT UNTIL THE THERE IS SPACE TO SEND
000006EA                          1116m 
000006EA  1639 00C00003           1117m     MOVE.B DUART_SRA,D3                         ; CHECK FOR COMMAND
000006F0  0803 0000               1118m     BTST #0,D3                                  ; CHECK FOR CHARACTER
000006F4  6700 0010               1119m     BEQ CONTINUE_66                             ; NOTHING, CONTINUE
000006F8                          1120m  
000006F8                          1121mm     READ_CHAR D2
000006F8                 TRUE     1122mm     IFEQ DEBUG
000006F8  1439 00C00007           1123mm         MOVE.B DUART_RXA,D2                     ; GOT A CHARACTER, READ IT
000006FE                          1124mm     ENDC
000006FE                 FALSE    1125mm     IFNE DEBUG
000006FE                          1126mm     ENDC
000006FE                          1127mm      
000006FE  B43C 001B               1128mm     CMP.B #$1B,D2                               ; CHECK FOR ESCAPE AND GO TO START
00000702  6700 F904               1129mm     BEQ START
00000706                          1130mm     ENDM
00000706                          1131m CONTINUE_66
00000706  1639 00C00013           1132m     MOVE.B DUART_SRB,D3                         ; READ STATUS REGISTER
0000070C  0803 0000               1133m     BTST #0,D3                                  ; CHECK FOR CHARACTER
00000710  67D8                    1134m     BEQ WAIT_FOR_READY_66                       ; NOTHING, CHECK AGAIN
00000712                          1135m     
00000712  1439 00C00017           1136m     MOVE.B DUART_RXB,D2                         ; GOT A CHARACTER, READ IT
00000718  13C2 00E00001           1137m     MOVE.B D2,DISPLAY                           ; ECHO TO THE DISPLAY
0000071E                          1138m     
0000071E                          1139m     ENDM
0000071E                          1140m             HEX2BIN D2,D2,A0
0000071E  41F9 00001ADA           1141m     LEA HEX2BIN_LUT,A0                          ; LOAD THE LOOKUP TABLE
00000724  0402 0030               1142m     SUB.B #'0',D2                               ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
00000728  C4BC 000000FF           1143m     AND.L #$FF,D2                               ; IGNORE THE TOP 3 BYTES
0000072E  1430 2000               1144m     MOVE.B 0(A0,D2),D2                          ; USE THAT AS AN INDEX INTO THE LUT      
00000732                          1145m     ENDM
00000732  8E82                    1146              OR.L D2,D7
00000734  E98F                    1147              LSL.L #4,D7
00000736                          1148               
00000736                          1149m             DOWNLOAD D2,D3                      ; LS 4 bits    
00000736                          1150m WAIT_FOR_READY_69                               ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000736                          1151m 
00000736  1639 00C00003           1152m     MOVE.B DUART_SRA,D3                         ; CHECK FOR COMMAND
0000073C  0803 0000               1153m     BTST #0,D3                                  ; CHECK FOR CHARACTER
00000740  6700 0010               1154m     BEQ CONTINUE_69                             ; NOTHING, CONTINUE
00000744                          1155m  
00000744                          1156mm     READ_CHAR D2
00000744                 TRUE     1157mm     IFEQ DEBUG
00000744  1439 00C00007           1158mm         MOVE.B DUART_RXA,D2                     ; GOT A CHARACTER, READ IT
0000074A                          1159mm     ENDC
0000074A                 FALSE    1160mm     IFNE DEBUG
0000074A                          1161mm     ENDC
0000074A                          1162mm      
0000074A  B43C 001B               1163mm     CMP.B #$1B,D2                               ; CHECK FOR ESCAPE AND GO TO START
0000074E  6700 F8B8               1164mm     BEQ START
00000752                          1165mm     ENDM
00000752                          1166m CONTINUE_69
00000752  1639 00C00013           1167m     MOVE.B DUART_SRB,D3                         ; READ STATUS REGISTER
00000758  0803 0000               1168m     BTST #0,D3                                  ; CHECK FOR CHARACTER
0000075C  67D8                    1169m     BEQ WAIT_FOR_READY_69                       ; NOTHING, CHECK AGAIN
0000075E                          1170m     
0000075E  1439 00C00017           1171m     MOVE.B DUART_RXB,D2                         ; GOT A CHARACTER, READ IT
00000764  13C2 00E00001           1172m     MOVE.B D2,DISPLAY                           ; ECHO TO THE DISPLAY
0000076A                          1173m     
0000076A                          1174m     ENDM
0000076A                          1175m             HEX2BIN D2,D2,A0
0000076A  41F9 00001ADA           1176m     LEA HEX2BIN_LUT,A0                          ; LOAD THE LOOKUP TABLE
00000770  0402 0030               1177m     SUB.B #'0',D2                               ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
00000774  C4BC 000000FF           1178m     AND.L #$FF,D2                               ; IGNORE THE TOP 3 BYTES
0000077A  1430 2000               1179m     MOVE.B 0(A0,D2),D2                          ; USE THAT AS AN INDEX INTO THE LUT      
0000077E                          1180m     ENDM
0000077E  8E82                    1181              OR.L D2,D7
00000780                          1182              
00000780  DC87                    1183              ADD.L D7,D6                         ; add into checksum
00000782                          1184            
00000782                          1185m             PRINT_CHAR D7,D3                    ; assume ASCII and print it
00000782                          1186m WAIT_FOR_READY_72                               ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000782                 TRUE     1187m     IFEQ DEBUG
00000782  1639 00C00003           1188m         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
00000788  0803 0002               1189m         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
0000078C  67F4                    1190m         BEQ WAIT_FOR_READY_72                   ; NO SPACE, CHECK AGAIN
0000078E  13C7 00C00007           1191m         MOVE.B D7,DUART_TXA                     ; SEND THE NEXT CHARACTER
00000794                          1192m     ENDC
00000794                          1193m     
00000794                 FALSE    1194m     IFNE DEBUG
00000794                          1195m     ENDC
00000794                          1196m 
00000794                          1197m     ENDM
00000794                          1198          ENDW
00000794  6000 FF46               1199s     BRA _10000000
00000798                          1200s _10000001
00000798                          1201m         PRINT_CRLF D3
00000798                          1202mm     PRINT_CHAR #13,D3                           ; CR
00000798                          1203mm WAIT_FOR_READY_74                               ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000798                 TRUE     1204mm     IFEQ DEBUG
00000798  1639 00C00003           1205mm         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
0000079E  0803 0002               1206mm         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
000007A2  67F4                    1207mm         BEQ WAIT_FOR_READY_74                   ; NO SPACE, CHECK AGAIN
000007A4  13FC 000D 00C00007      1208mm         MOVE.B #13,DUART_TXA                    ; SEND THE NEXT CHARACTER
000007AC                          1209mm     ENDC
000007AC                          1210mm     
000007AC                 FALSE    1211mm     IFNE DEBUG
000007AC                          1212mm     ENDC
000007AC                          1213mm 
000007AC                          1214mm     ENDM
000007AC                          1215mm     PRINT_CHAR #10,D3                           ; LF
000007AC                          1216mm WAIT_FOR_READY_75                               ; WAIT UNTIL THE THERE IS SPACE TO SEND
000007AC                 TRUE     1217mm     IFEQ DEBUG
000007AC  1639 00C00003           1218mm         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
000007B2  0803 0002               1219mm         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
000007B6  67F4                    1220mm         BEQ WAIT_FOR_READY_75                   ; NO SPACE, CHECK AGAIN
000007B8  13FC 000A 00C00007      1221mm         MOVE.B #10,DUART_TXA                    ; SEND THE NEXT CHARACTER
000007C0                          1222mm     ENDC
000007C0                          1223mm     
000007C0                 FALSE    1224mm     IFNE DEBUG
000007C0                          1225mm     ENDC
000007C0                          1226mm 
000007C0                          1227mm     ENDM
000007C0                          1228m     ENDM
000007C0  43F8 048E               1229         LEA WAIT_FOR_SRECORD,A1            
000007C4                          1230      ELSE
000007C4  6000 0D06               1231s     BRA _00000001
000007C8                          1232s _00000000
000007C8                          1233          IF.B D7 <EQ> #'1' THEN.L                ; 16 bit address data record
000007C8  BE3C 0031               1234s     CMP.B   #'1',D7
000007CC  6600 04F4               1235s     BNE.L   _00000002
000007D0  7E00                    1236              MOVE.L #0,D7                        ; read the 16 bit address, we'll stomp on D7 for this since it's sort of like the address accumulator
000007D2                          1237m             DOWNLOAD D2,D3                      ; top byte
000007D2                          1238m WAIT_FOR_READY_76                               ; WAIT UNTIL THE THERE IS SPACE TO SEND
000007D2                          1239m 
000007D2  1639 00C00003           1240m     MOVE.B DUART_SRA,D3                         ; CHECK FOR COMMAND
000007D8  0803 0000               1241m     BTST #0,D3                                  ; CHECK FOR CHARACTER
000007DC  6700 0010               1242m     BEQ CONTINUE_76                             ; NOTHING, CONTINUE
000007E0                          1243m  
000007E0                          1244mm     READ_CHAR D2
000007E0                 TRUE     1245mm     IFEQ DEBUG
000007E0  1439 00C00007           1246mm         MOVE.B DUART_RXA,D2                     ; GOT A CHARACTER, READ IT
000007E6                          1247mm     ENDC
000007E6                 FALSE    1248mm     IFNE DEBUG
000007E6                          1249mm     ENDC
000007E6                          1250mm      
000007E6  B43C 001B               1251mm     CMP.B #$1B,D2                               ; CHECK FOR ESCAPE AND GO TO START
000007EA  6700 F81C               1252mm     BEQ START
000007EE                          1253mm     ENDM
000007EE                          1254m CONTINUE_76
000007EE  1639 00C00013           1255m     MOVE.B DUART_SRB,D3                         ; READ STATUS REGISTER
000007F4  0803 0000               1256m     BTST #0,D3                                  ; CHECK FOR CHARACTER
000007F8  67D8                    1257m     BEQ WAIT_FOR_READY_76                       ; NOTHING, CHECK AGAIN
000007FA                          1258m     
000007FA  1439 00C00017           1259m     MOVE.B DUART_RXB,D2                         ; GOT A CHARACTER, READ IT
00000800  13C2 00E00001           1260m     MOVE.B D2,DISPLAY                           ; ECHO TO THE DISPLAY
00000806                          1261m     
00000806                          1262m     ENDM
00000806                          1263m             PRINT_CHAR D2,D3
00000806                          1264m WAIT_FOR_READY_78                               ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000806                 TRUE     1265m     IFEQ DEBUG
00000806  1639 00C00003           1266m         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
0000080C  0803 0002               1267m         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
00000810  67F4                    1268m         BEQ WAIT_FOR_READY_78                   ; NO SPACE, CHECK AGAIN
00000812  13C2 00C00007           1269m         MOVE.B D2,DUART_TXA                     ; SEND THE NEXT CHARACTER
00000818                          1270m     ENDC
00000818                          1271m     
00000818                 FALSE    1272m     IFNE DEBUG
00000818                          1273m     ENDC
00000818                          1274m 
00000818                          1275m     ENDM
00000818                          1276m             HEX2BIN D2,D2,A0
00000818  41F9 00001ADA           1277m     LEA HEX2BIN_LUT,A0                          ; LOAD THE LOOKUP TABLE
0000081E  0402 0030               1278m     SUB.B #'0',D2                               ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
00000822  C4BC 000000FF           1279m     AND.L #$FF,D2                               ; IGNORE THE TOP 3 BYTES
00000828  1430 2000               1280m     MOVE.B 0(A0,D2),D2                          ; USE THAT AS AN INDEX INTO THE LUT      
0000082C                          1281m     ENDM
0000082C  8E82                    1282              OR.L D2,D7
0000082E  E98F                    1283              LSL.L #4,D7
00000830                          1284m             DOWNLOAD D2,D3         
00000830                          1285m WAIT_FOR_READY_80                               ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000830                          1286m 
00000830  1639 00C00003           1287m     MOVE.B DUART_SRA,D3                         ; CHECK FOR COMMAND
00000836  0803 0000               1288m     BTST #0,D3                                  ; CHECK FOR CHARACTER
0000083A  6700 0010               1289m     BEQ CONTINUE_80                             ; NOTHING, CONTINUE
0000083E                          1290m  
0000083E                          1291mm     READ_CHAR D2
0000083E                 TRUE     1292mm     IFEQ DEBUG
0000083E  1439 00C00007           1293mm         MOVE.B DUART_RXA,D2                     ; GOT A CHARACTER, READ IT
00000844                          1294mm     ENDC
00000844                 FALSE    1295mm     IFNE DEBUG
00000844                          1296mm     ENDC
00000844                          1297mm      
00000844  B43C 001B               1298mm     CMP.B #$1B,D2                               ; CHECK FOR ESCAPE AND GO TO START
00000848  6700 F7BE               1299mm     BEQ START
0000084C                          1300mm     ENDM
0000084C                          1301m CONTINUE_80
0000084C  1639 00C00013           1302m     MOVE.B DUART_SRB,D3                         ; READ STATUS REGISTER
00000852  0803 0000               1303m     BTST #0,D3                                  ; CHECK FOR CHARACTER
00000856  67D8                    1304m     BEQ WAIT_FOR_READY_80                       ; NOTHING, CHECK AGAIN
00000858                          1305m     
00000858  1439 00C00017           1306m     MOVE.B DUART_RXB,D2                         ; GOT A CHARACTER, READ IT
0000085E  13C2 00E00001           1307m     MOVE.B D2,DISPLAY                           ; ECHO TO THE DISPLAY
00000864                          1308m     
00000864                          1309m     ENDM
00000864                          1310m             PRINT_CHAR D2,D3
00000864                          1311m WAIT_FOR_READY_82                               ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000864                 TRUE     1312m     IFEQ DEBUG
00000864  1639 00C00003           1313m         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
0000086A  0803 0002               1314m         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
0000086E  67F4                    1315m         BEQ WAIT_FOR_READY_82                   ; NO SPACE, CHECK AGAIN
00000870  13C2 00C00007           1316m         MOVE.B D2,DUART_TXA                     ; SEND THE NEXT CHARACTER
00000876                          1317m     ENDC
00000876                          1318m     
00000876                 FALSE    1319m     IFNE DEBUG
00000876                          1320m     ENDC
00000876                          1321m 
00000876                          1322m     ENDM
00000876                          1323m             HEX2BIN D2,D2,A0
00000876  41F9 00001ADA           1324m     LEA HEX2BIN_LUT,A0                          ; LOAD THE LOOKUP TABLE
0000087C  0402 0030               1325m     SUB.B #'0',D2                               ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
00000880  C4BC 000000FF           1326m     AND.L #$FF,D2                               ; IGNORE THE TOP 3 BYTES
00000886  1430 2000               1327m     MOVE.B 0(A0,D2),D2                          ; USE THAT AS AN INDEX INTO THE LUT      
0000088A                          1328m     ENDM
0000088A  8E82                    1329              OR.L D2,D7
0000088C                          1330          
0000088C  DC87                    1331              ADD.L D7,D6                         ; add top byte of address into checksum
0000088E                          1332  
0000088E  E98F                    1333              LSL.L #4,D7                         ; bottom byte
00000890                          1334m             DOWNLOAD D2,D3
00000890                          1335m WAIT_FOR_READY_84                               ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000890                          1336m 
00000890  1639 00C00003           1337m     MOVE.B DUART_SRA,D3                         ; CHECK FOR COMMAND
00000896  0803 0000               1338m     BTST #0,D3                                  ; CHECK FOR CHARACTER
0000089A  6700 0010               1339m     BEQ CONTINUE_84                             ; NOTHING, CONTINUE
0000089E                          1340m  
0000089E                          1341mm     READ_CHAR D2
0000089E                 TRUE     1342mm     IFEQ DEBUG
0000089E  1439 00C00007           1343mm         MOVE.B DUART_RXA,D2                     ; GOT A CHARACTER, READ IT
000008A4                          1344mm     ENDC
000008A4                 FALSE    1345mm     IFNE DEBUG
000008A4                          1346mm     ENDC
000008A4                          1347mm      
000008A4  B43C 001B               1348mm     CMP.B #$1B,D2                               ; CHECK FOR ESCAPE AND GO TO START
000008A8  6700 F75E               1349mm     BEQ START
000008AC                          1350mm     ENDM
000008AC                          1351m CONTINUE_84
000008AC  1639 00C00013           1352m     MOVE.B DUART_SRB,D3                         ; READ STATUS REGISTER
000008B2  0803 0000               1353m     BTST #0,D3                                  ; CHECK FOR CHARACTER
000008B6  67D8                    1354m     BEQ WAIT_FOR_READY_84                       ; NOTHING, CHECK AGAIN
000008B8                          1355m     
000008B8  1439 00C00017           1356m     MOVE.B DUART_RXB,D2                         ; GOT A CHARACTER, READ IT
000008BE  13C2 00E00001           1357m     MOVE.B D2,DISPLAY                           ; ECHO TO THE DISPLAY
000008C4                          1358m     
000008C4                          1359m     ENDM
000008C4                          1360m             PRINT_CHAR D2,D3
000008C4                          1361m WAIT_FOR_READY_86                               ; WAIT UNTIL THE THERE IS SPACE TO SEND
000008C4                 TRUE     1362m     IFEQ DEBUG
000008C4  1639 00C00003           1363m         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
000008CA  0803 0002               1364m         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
000008CE  67F4                    1365m         BEQ WAIT_FOR_READY_86                   ; NO SPACE, CHECK AGAIN
000008D0  13C2 00C00007           1366m         MOVE.B D2,DUART_TXA                     ; SEND THE NEXT CHARACTER
000008D6                          1367m     ENDC
000008D6                          1368m     
000008D6                 FALSE    1369m     IFNE DEBUG
000008D6                          1370m     ENDC
000008D6                          1371m 
000008D6                          1372m     ENDM
000008D6                          1373m             HEX2BIN D2,D2,A0
000008D6  41F9 00001ADA           1374m     LEA HEX2BIN_LUT,A0                          ; LOAD THE LOOKUP TABLE
000008DC  0402 0030               1375m     SUB.B #'0',D2                               ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
000008E0  C4BC 000000FF           1376m     AND.L #$FF,D2                               ; IGNORE THE TOP 3 BYTES
000008E6  1430 2000               1377m     MOVE.B 0(A0,D2),D2                          ; USE THAT AS AN INDEX INTO THE LUT      
000008EA                          1378m     ENDM
000008EA  8E82                    1379              OR.L D2,D7
000008EC  E98F                    1380              LSL.L #4,D7        
000008EE                          1381m             DOWNLOAD D2,D3
000008EE                          1382m WAIT_FOR_READY_88                               ; WAIT UNTIL THE THERE IS SPACE TO SEND
000008EE                          1383m 
000008EE  1639 00C00003           1384m     MOVE.B DUART_SRA,D3                         ; CHECK FOR COMMAND
000008F4  0803 0000               1385m     BTST #0,D3                                  ; CHECK FOR CHARACTER
000008F8  6700 0010               1386m     BEQ CONTINUE_88                             ; NOTHING, CONTINUE
000008FC                          1387m  
000008FC                          1388mm     READ_CHAR D2
000008FC                 TRUE     1389mm     IFEQ DEBUG
000008FC  1439 00C00007           1390mm         MOVE.B DUART_RXA,D2                     ; GOT A CHARACTER, READ IT
00000902                          1391mm     ENDC
00000902                 FALSE    1392mm     IFNE DEBUG
00000902                          1393mm     ENDC
00000902                          1394mm      
00000902  B43C 001B               1395mm     CMP.B #$1B,D2                               ; CHECK FOR ESCAPE AND GO TO START
00000906  6700 F700               1396mm     BEQ START
0000090A                          1397mm     ENDM
0000090A                          1398m CONTINUE_88
0000090A  1639 00C00013           1399m     MOVE.B DUART_SRB,D3                         ; READ STATUS REGISTER
00000910  0803 0000               1400m     BTST #0,D3                                  ; CHECK FOR CHARACTER
00000914  67D8                    1401m     BEQ WAIT_FOR_READY_88                       ; NOTHING, CHECK AGAIN
00000916                          1402m     
00000916  1439 00C00017           1403m     MOVE.B DUART_RXB,D2                         ; GOT A CHARACTER, READ IT
0000091C  13C2 00E00001           1404m     MOVE.B D2,DISPLAY                           ; ECHO TO THE DISPLAY
00000922                          1405m     
00000922                          1406m     ENDM
00000922                          1407m             PRINT_CHAR D2,D3
00000922                          1408m WAIT_FOR_READY_90                               ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000922                 TRUE     1409m     IFEQ DEBUG
00000922  1639 00C00003           1410m         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
00000928  0803 0002               1411m         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
0000092C  67F4                    1412m         BEQ WAIT_FOR_READY_90                   ; NO SPACE, CHECK AGAIN
0000092E  13C2 00C00007           1413m         MOVE.B D2,DUART_TXA                     ; SEND THE NEXT CHARACTER
00000934                          1414m     ENDC
00000934                          1415m     
00000934                 FALSE    1416m     IFNE DEBUG
00000934                          1417m     ENDC
00000934                          1418m 
00000934                          1419m     ENDM
00000934                          1420m             HEX2BIN D2,D2,A0
00000934  41F9 00001ADA           1421m     LEA HEX2BIN_LUT,A0                          ; LOAD THE LOOKUP TABLE
0000093A  0402 0030               1422m     SUB.B #'0',D2                               ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
0000093E  C4BC 000000FF           1423m     AND.L #$FF,D2                               ; IGNORE THE TOP 3 BYTES
00000944  1430 2000               1424m     MOVE.B 0(A0,D2),D2                          ; USE THAT AS AN INDEX INTO THE LUT      
00000948                          1425m     ENDM
00000948  8E82                    1426              OR.L D2,D7
0000094A                          1427          
0000094A  7400                    1428              MOVE.L #0,D2                        ; rextract bottom byte of address and add into checksum
0000094C  1407                    1429              MOVE.B D7,D2
0000094E  DC82                    1430              ADD.L D2,D6
00000950                          1431          
00000950  DE8B                    1432              ADD.L A3,D7                         ; add in the offset
00000952                          1433          
00000952  5785                    1434              SUB.L #3,D5                         ; subtract three bytes for 16 bit address and 1 byte checksum
00000954                          1435          
00000954  0807 0000               1436              BTST #0,D7                          ; deal with odd addresses
00000958                          1437  
00000958  2247                    1438              MOVE.L D7,A1                        ; put the address in an address register, and we can now re-use D7
0000095A  6700 00D0               1439              BEQ EVEN
0000095E                          1440                  
0000095E  5385                    1441              SUB.L #1,D5
00000960  5389                    1442              SUB.L #1,A1
00000962                          1443          
00000962  7E00                    1444              MOVE.L #0,D7
00000964                          1445m             DOWNLOAD D2,D3                      ; MS 4 bits
00000964                          1446m WAIT_FOR_READY_92                               ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000964                          1447m 
00000964  1639 00C00003           1448m     MOVE.B DUART_SRA,D3                         ; CHECK FOR COMMAND
0000096A  0803 0000               1449m     BTST #0,D3                                  ; CHECK FOR CHARACTER
0000096E  6700 0010               1450m     BEQ CONTINUE_92                             ; NOTHING, CONTINUE
00000972                          1451m  
00000972                          1452mm     READ_CHAR D2
00000972                 TRUE     1453mm     IFEQ DEBUG
00000972  1439 00C00007           1454mm         MOVE.B DUART_RXA,D2                     ; GOT A CHARACTER, READ IT
00000978                          1455mm     ENDC
00000978                 FALSE    1456mm     IFNE DEBUG
00000978                          1457mm     ENDC
00000978                          1458mm      
00000978  B43C 001B               1459mm     CMP.B #$1B,D2                               ; CHECK FOR ESCAPE AND GO TO START
0000097C  6700 F68A               1460mm     BEQ START
00000980                          1461mm     ENDM
00000980                          1462m CONTINUE_92
00000980  1639 00C00013           1463m     MOVE.B DUART_SRB,D3                         ; READ STATUS REGISTER
00000986  0803 0000               1464m     BTST #0,D3                                  ; CHECK FOR CHARACTER
0000098A  67D8                    1465m     BEQ WAIT_FOR_READY_92                       ; NOTHING, CHECK AGAIN
0000098C                          1466m     
0000098C  1439 00C00017           1467m     MOVE.B DUART_RXB,D2                         ; GOT A CHARACTER, READ IT
00000992  13C2 00E00001           1468m     MOVE.B D2,DISPLAY                           ; ECHO TO THE DISPLAY
00000998                          1469m     
00000998                          1470m     ENDM
00000998                          1471m             PRINT_CHAR D2,D3
00000998                          1472m WAIT_FOR_READY_94                               ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000998                 TRUE     1473m     IFEQ DEBUG
00000998  1639 00C00003           1474m         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
0000099E  0803 0002               1475m         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
000009A2  67F4                    1476m         BEQ WAIT_FOR_READY_94                   ; NO SPACE, CHECK AGAIN
000009A4  13C2 00C00007           1477m         MOVE.B D2,DUART_TXA                     ; SEND THE NEXT CHARACTER
000009AA                          1478m     ENDC
000009AA                          1479m     
000009AA                 FALSE    1480m     IFNE DEBUG
000009AA                          1481m     ENDC
000009AA                          1482m 
000009AA                          1483m     ENDM
000009AA                          1484m             HEX2BIN D2,D2,A0
000009AA  41F9 00001ADA           1485m     LEA HEX2BIN_LUT,A0                          ; LOAD THE LOOKUP TABLE
000009B0  0402 0030               1486m     SUB.B #'0',D2                               ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
000009B4  C4BC 000000FF           1487m     AND.L #$FF,D2                               ; IGNORE THE TOP 3 BYTES
000009BA  1430 2000               1488m     MOVE.B 0(A0,D2),D2                          ; USE THAT AS AN INDEX INTO THE LUT      
000009BE                          1489m     ENDM
000009BE  8E82                    1490              OR.L D2,D7
000009C0  E98F                    1491              LSL.L #4,D7
000009C2                          1492               
000009C2                          1493m             DOWNLOAD D2,D3                      ; LS 4 bits    
000009C2                          1494m WAIT_FOR_READY_96                               ; WAIT UNTIL THE THERE IS SPACE TO SEND
000009C2                          1495m 
000009C2  1639 00C00003           1496m     MOVE.B DUART_SRA,D3                         ; CHECK FOR COMMAND
000009C8  0803 0000               1497m     BTST #0,D3                                  ; CHECK FOR CHARACTER
000009CC  6700 0010               1498m     BEQ CONTINUE_96                             ; NOTHING, CONTINUE
000009D0                          1499m  
000009D0                          1500mm     READ_CHAR D2
000009D0                 TRUE     1501mm     IFEQ DEBUG
000009D0  1439 00C00007           1502mm         MOVE.B DUART_RXA,D2                     ; GOT A CHARACTER, READ IT
000009D6                          1503mm     ENDC
000009D6                 FALSE    1504mm     IFNE DEBUG
000009D6                          1505mm     ENDC
000009D6                          1506mm      
000009D6  B43C 001B               1507mm     CMP.B #$1B,D2                               ; CHECK FOR ESCAPE AND GO TO START
000009DA  6700 F62C               1508mm     BEQ START
000009DE                          1509mm     ENDM
000009DE                          1510m CONTINUE_96
000009DE  1639 00C00013           1511m     MOVE.B DUART_SRB,D3                         ; READ STATUS REGISTER
000009E4  0803 0000               1512m     BTST #0,D3                                  ; CHECK FOR CHARACTER
000009E8  67D8                    1513m     BEQ WAIT_FOR_READY_96                       ; NOTHING, CHECK AGAIN
000009EA                          1514m     
000009EA  1439 00C00017           1515m     MOVE.B DUART_RXB,D2                         ; GOT A CHARACTER, READ IT
000009F0  13C2 00E00001           1516m     MOVE.B D2,DISPLAY                           ; ECHO TO THE DISPLAY
000009F6                          1517m     
000009F6                          1518m     ENDM
000009F6                          1519m             PRINT_CHAR D2,D3
000009F6                          1520m WAIT_FOR_READY_98                               ; WAIT UNTIL THE THERE IS SPACE TO SEND
000009F6                 TRUE     1521m     IFEQ DEBUG
000009F6  1639 00C00003           1522m         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
000009FC  0803 0002               1523m         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
00000A00  67F4                    1524m         BEQ WAIT_FOR_READY_98                   ; NO SPACE, CHECK AGAIN
00000A02  13C2 00C00007           1525m         MOVE.B D2,DUART_TXA                     ; SEND THE NEXT CHARACTER
00000A08                          1526m     ENDC
00000A08                          1527m     
00000A08                 FALSE    1528m     IFNE DEBUG
00000A08                          1529m     ENDC
00000A08                          1530m 
00000A08                          1531m     ENDM
00000A08                          1532m             HEX2BIN D2,D2,A0
00000A08  41F9 00001ADA           1533m     LEA HEX2BIN_LUT,A0                          ; LOAD THE LOOKUP TABLE
00000A0E  0402 0030               1534m     SUB.B #'0',D2                               ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
00000A12  C4BC 000000FF           1535m     AND.L #$FF,D2                               ; IGNORE THE TOP 3 BYTES
00000A18  1430 2000               1536m     MOVE.B 0(A0,D2),D2                          ; USE THAT AS AN INDEX INTO THE LUT      
00000A1C                          1537m     ENDM
00000A1C  8E82                    1538              OR.L D2,D7
00000A1E                          1539                          
00000A1E  DC87                    1540              ADD.L D7,D6                         ; add into checksum
00000A20                          1541                        
00000A20  3611                    1542              MOVE.W (A1),D3                      ; get the current data and replace the bottom byte
00000A22                          1543          
00000A22  0243 FF00               1544              ANDI.W #$FF00,D3
00000A26  8647                    1545              OR.W D7,D3
00000A28                          1546          
00000A28  3283                    1547              MOVE.W D3,(A1)                      ; store it!
00000A2A  5489                    1548              ADD.L #2,A1
00000A2C                          1549  EVEN        
00000A2C                          1550              WHILE.L D5 <GE> #2 DO               ; read the data bytes
00000A2C                          1551s _10000002
00000A2C  BABC 00000002           1552s     CMP.L   #2,D5
00000A32  6D00 018A               1553s     BLT _10000003
00000A36  5585                    1554                  SUB.L #2,D5
00000A38  7E00                    1555                  MOVE.L #0,D7                    ; D7 holds the word
00000A3A                          1556              
00000A3A                          1557m                 DOWNLOAD D2,D3                  ; MS 4 bits
00000A3A                          1558m WAIT_FOR_READY_100                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000A3A                          1559m 
00000A3A  1639 00C00003           1560m     MOVE.B DUART_SRA,D3                         ; CHECK FOR COMMAND
00000A40  0803 0000               1561m     BTST #0,D3                                  ; CHECK FOR CHARACTER
00000A44  6700 0010               1562m     BEQ CONTINUE_100                                ; NOTHING, CONTINUE
00000A48                          1563m  
00000A48                          1564mm     READ_CHAR D2
00000A48                 TRUE     1565mm     IFEQ DEBUG
00000A48  1439 00C00007           1566mm         MOVE.B DUART_RXA,D2                     ; GOT A CHARACTER, READ IT
00000A4E                          1567mm     ENDC
00000A4E                 FALSE    1568mm     IFNE DEBUG
00000A4E                          1569mm     ENDC
00000A4E                          1570mm      
00000A4E  B43C 001B               1571mm     CMP.B #$1B,D2                               ; CHECK FOR ESCAPE AND GO TO START
00000A52  6700 F5B4               1572mm     BEQ START
00000A56                          1573mm     ENDM
00000A56                          1574m CONTINUE_100
00000A56  1639 00C00013           1575m     MOVE.B DUART_SRB,D3                         ; READ STATUS REGISTER
00000A5C  0803 0000               1576m     BTST #0,D3                                  ; CHECK FOR CHARACTER
00000A60  67D8                    1577m     BEQ WAIT_FOR_READY_100                      ; NOTHING, CHECK AGAIN
00000A62                          1578m     
00000A62  1439 00C00017           1579m     MOVE.B DUART_RXB,D2                         ; GOT A CHARACTER, READ IT
00000A68  13C2 00E00001           1580m     MOVE.B D2,DISPLAY                           ; ECHO TO THE DISPLAY
00000A6E                          1581m     
00000A6E                          1582m     ENDM
00000A6E                          1583m                 PRINT_CHAR D2,D3
00000A6E                          1584m WAIT_FOR_READY_102                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000A6E                 TRUE     1585m     IFEQ DEBUG
00000A6E  1639 00C00003           1586m         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
00000A74  0803 0002               1587m         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
00000A78  67F4                    1588m         BEQ WAIT_FOR_READY_102                      ; NO SPACE, CHECK AGAIN
00000A7A  13C2 00C00007           1589m         MOVE.B D2,DUART_TXA                     ; SEND THE NEXT CHARACTER
00000A80                          1590m     ENDC
00000A80                          1591m     
00000A80                 FALSE    1592m     IFNE DEBUG
00000A80                          1593m     ENDC
00000A80                          1594m 
00000A80                          1595m     ENDM
00000A80                          1596m                 HEX2BIN D2,D2,A0
00000A80  41F9 00001ADA           1597m     LEA HEX2BIN_LUT,A0                          ; LOAD THE LOOKUP TABLE
00000A86  0402 0030               1598m     SUB.B #'0',D2                               ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
00000A8A  C4BC 000000FF           1599m     AND.L #$FF,D2                               ; IGNORE THE TOP 3 BYTES
00000A90  1430 2000               1600m     MOVE.B 0(A0,D2),D2                          ; USE THAT AS AN INDEX INTO THE LUT      
00000A94                          1601m     ENDM
00000A94  8E82                    1602                  OR.L D2,D7
00000A96  E98F                    1603                  LSL.L #4,D7
00000A98                          1604               
00000A98                          1605m                 DOWNLOAD D2,D3                  ; LS 4 bits    
00000A98                          1606m WAIT_FOR_READY_104                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000A98                          1607m 
00000A98  1639 00C00003           1608m     MOVE.B DUART_SRA,D3                         ; CHECK FOR COMMAND
00000A9E  0803 0000               1609m     BTST #0,D3                                  ; CHECK FOR CHARACTER
00000AA2  6700 0010               1610m     BEQ CONTINUE_104                                ; NOTHING, CONTINUE
00000AA6                          1611m  
00000AA6                          1612mm     READ_CHAR D2
00000AA6                 TRUE     1613mm     IFEQ DEBUG
00000AA6  1439 00C00007           1614mm         MOVE.B DUART_RXA,D2                     ; GOT A CHARACTER, READ IT
00000AAC                          1615mm     ENDC
00000AAC                 FALSE    1616mm     IFNE DEBUG
00000AAC                          1617mm     ENDC
00000AAC                          1618mm      
00000AAC  B43C 001B               1619mm     CMP.B #$1B,D2                               ; CHECK FOR ESCAPE AND GO TO START
00000AB0  6700 F556               1620mm     BEQ START
00000AB4                          1621mm     ENDM
00000AB4                          1622m CONTINUE_104
00000AB4  1639 00C00013           1623m     MOVE.B DUART_SRB,D3                         ; READ STATUS REGISTER
00000ABA  0803 0000               1624m     BTST #0,D3                                  ; CHECK FOR CHARACTER
00000ABE  67D8                    1625m     BEQ WAIT_FOR_READY_104                      ; NOTHING, CHECK AGAIN
00000AC0                          1626m     
00000AC0  1439 00C00017           1627m     MOVE.B DUART_RXB,D2                         ; GOT A CHARACTER, READ IT
00000AC6  13C2 00E00001           1628m     MOVE.B D2,DISPLAY                           ; ECHO TO THE DISPLAY
00000ACC                          1629m     
00000ACC                          1630m     ENDM
00000ACC                          1631m                 PRINT_CHAR D2,D3
00000ACC                          1632m WAIT_FOR_READY_106                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000ACC                 TRUE     1633m     IFEQ DEBUG
00000ACC  1639 00C00003           1634m         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
00000AD2  0803 0002               1635m         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
00000AD6  67F4                    1636m         BEQ WAIT_FOR_READY_106                      ; NO SPACE, CHECK AGAIN
00000AD8  13C2 00C00007           1637m         MOVE.B D2,DUART_TXA                     ; SEND THE NEXT CHARACTER
00000ADE                          1638m     ENDC
00000ADE                          1639m     
00000ADE                 FALSE    1640m     IFNE DEBUG
00000ADE                          1641m     ENDC
00000ADE                          1642m 
00000ADE                          1643m     ENDM
00000ADE                          1644m                 HEX2BIN D2,D2,A0
00000ADE  41F9 00001ADA           1645m     LEA HEX2BIN_LUT,A0                          ; LOAD THE LOOKUP TABLE
00000AE4  0402 0030               1646m     SUB.B #'0',D2                               ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
00000AE8  C4BC 000000FF           1647m     AND.L #$FF,D2                               ; IGNORE THE TOP 3 BYTES
00000AEE  1430 2000               1648m     MOVE.B 0(A0,D2),D2                          ; USE THAT AS AN INDEX INTO THE LUT      
00000AF2                          1649m     ENDM
00000AF2  8E82                    1650                  OR.L D2,D7
00000AF4                          1651                          
00000AF4  DC87                    1652                  ADD.L D7,D6                     ; add into checksum
00000AF6                          1653              
00000AF6  E98F                    1654                  LSL.L #4,D7
00000AF8                          1655m                 DOWNLOAD D2,D3                  ; MS 4 bits
00000AF8                          1656m WAIT_FOR_READY_108                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000AF8                          1657m 
00000AF8  1639 00C00003           1658m     MOVE.B DUART_SRA,D3                         ; CHECK FOR COMMAND
00000AFE  0803 0000               1659m     BTST #0,D3                                  ; CHECK FOR CHARACTER
00000B02  6700 0010               1660m     BEQ CONTINUE_108                                ; NOTHING, CONTINUE
00000B06                          1661m  
00000B06                          1662mm     READ_CHAR D2
00000B06                 TRUE     1663mm     IFEQ DEBUG
00000B06  1439 00C00007           1664mm         MOVE.B DUART_RXA,D2                     ; GOT A CHARACTER, READ IT
00000B0C                          1665mm     ENDC
00000B0C                 FALSE    1666mm     IFNE DEBUG
00000B0C                          1667mm     ENDC
00000B0C                          1668mm      
00000B0C  B43C 001B               1669mm     CMP.B #$1B,D2                               ; CHECK FOR ESCAPE AND GO TO START
00000B10  6700 F4F6               1670mm     BEQ START
00000B14                          1671mm     ENDM
00000B14                          1672m CONTINUE_108
00000B14  1639 00C00013           1673m     MOVE.B DUART_SRB,D3                         ; READ STATUS REGISTER
00000B1A  0803 0000               1674m     BTST #0,D3                                  ; CHECK FOR CHARACTER
00000B1E  67D8                    1675m     BEQ WAIT_FOR_READY_108                      ; NOTHING, CHECK AGAIN
00000B20                          1676m     
00000B20  1439 00C00017           1677m     MOVE.B DUART_RXB,D2                         ; GOT A CHARACTER, READ IT
00000B26  13C2 00E00001           1678m     MOVE.B D2,DISPLAY                           ; ECHO TO THE DISPLAY
00000B2C                          1679m     
00000B2C                          1680m     ENDM
00000B2C                          1681m                 PRINT_CHAR D2,D3
00000B2C                          1682m WAIT_FOR_READY_110                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000B2C                 TRUE     1683m     IFEQ DEBUG
00000B2C  1639 00C00003           1684m         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
00000B32  0803 0002               1685m         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
00000B36  67F4                    1686m         BEQ WAIT_FOR_READY_110                      ; NO SPACE, CHECK AGAIN
00000B38  13C2 00C00007           1687m         MOVE.B D2,DUART_TXA                     ; SEND THE NEXT CHARACTER
00000B3E                          1688m     ENDC
00000B3E                          1689m     
00000B3E                 FALSE    1690m     IFNE DEBUG
00000B3E                          1691m     ENDC
00000B3E                          1692m 
00000B3E                          1693m     ENDM
00000B3E                          1694m                 HEX2BIN D2,D2,A0
00000B3E  41F9 00001ADA           1695m     LEA HEX2BIN_LUT,A0                          ; LOAD THE LOOKUP TABLE
00000B44  0402 0030               1696m     SUB.B #'0',D2                               ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
00000B48  C4BC 000000FF           1697m     AND.L #$FF,D2                               ; IGNORE THE TOP 3 BYTES
00000B4E  1430 2000               1698m     MOVE.B 0(A0,D2),D2                          ; USE THAT AS AN INDEX INTO THE LUT      
00000B52                          1699m     ENDM
00000B52  8E82                    1700                  OR.L D2,D7
00000B54                          1701               
00000B54  E98F                    1702                  LSL.L #4,D7
00000B56                          1703m                 DOWNLOAD D2,D3                  ; LS 4 bits    
00000B56                          1704m WAIT_FOR_READY_112                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000B56                          1705m 
00000B56  1639 00C00003           1706m     MOVE.B DUART_SRA,D3                         ; CHECK FOR COMMAND
00000B5C  0803 0000               1707m     BTST #0,D3                                  ; CHECK FOR CHARACTER
00000B60  6700 0010               1708m     BEQ CONTINUE_112                                ; NOTHING, CONTINUE
00000B64                          1709m  
00000B64                          1710mm     READ_CHAR D2
00000B64                 TRUE     1711mm     IFEQ DEBUG
00000B64  1439 00C00007           1712mm         MOVE.B DUART_RXA,D2                     ; GOT A CHARACTER, READ IT
00000B6A                          1713mm     ENDC
00000B6A                 FALSE    1714mm     IFNE DEBUG
00000B6A                          1715mm     ENDC
00000B6A                          1716mm      
00000B6A  B43C 001B               1717mm     CMP.B #$1B,D2                               ; CHECK FOR ESCAPE AND GO TO START
00000B6E  6700 F498               1718mm     BEQ START
00000B72                          1719mm     ENDM
00000B72                          1720m CONTINUE_112
00000B72  1639 00C00013           1721m     MOVE.B DUART_SRB,D3                         ; READ STATUS REGISTER
00000B78  0803 0000               1722m     BTST #0,D3                                  ; CHECK FOR CHARACTER
00000B7C  67D8                    1723m     BEQ WAIT_FOR_READY_112                      ; NOTHING, CHECK AGAIN
00000B7E                          1724m     
00000B7E  1439 00C00017           1725m     MOVE.B DUART_RXB,D2                         ; GOT A CHARACTER, READ IT
00000B84  13C2 00E00001           1726m     MOVE.B D2,DISPLAY                           ; ECHO TO THE DISPLAY
00000B8A                          1727m     
00000B8A                          1728m     ENDM
00000B8A                          1729m                 PRINT_CHAR D2,D3
00000B8A                          1730m WAIT_FOR_READY_114                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000B8A                 TRUE     1731m     IFEQ DEBUG
00000B8A  1639 00C00003           1732m         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
00000B90  0803 0002               1733m         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
00000B94  67F4                    1734m         BEQ WAIT_FOR_READY_114                      ; NO SPACE, CHECK AGAIN
00000B96  13C2 00C00007           1735m         MOVE.B D2,DUART_TXA                     ; SEND THE NEXT CHARACTER
00000B9C                          1736m     ENDC
00000B9C                          1737m     
00000B9C                 FALSE    1738m     IFNE DEBUG
00000B9C                          1739m     ENDC
00000B9C                          1740m 
00000B9C                          1741m     ENDM
00000B9C                          1742m                 HEX2BIN D2,D2,A0
00000B9C  41F9 00001ADA           1743m     LEA HEX2BIN_LUT,A0                          ; LOAD THE LOOKUP TABLE
00000BA2  0402 0030               1744m     SUB.B #'0',D2                               ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
00000BA6  C4BC 000000FF           1745m     AND.L #$FF,D2                               ; IGNORE THE TOP 3 BYTES
00000BAC  1430 2000               1746m     MOVE.B 0(A0,D2),D2                          ; USE THAT AS AN INDEX INTO THE LUT      
00000BB0                          1747m     ENDM
00000BB0  8E82                    1748                  OR.L D2,D7
00000BB2                          1749              
00000BB2  7400                    1750                  MOVE.L #0,D2                    ; rextract bottom byte of address and add into checksum
00000BB4  1407                    1751                  MOVE.B D7,D2
00000BB6  DC82                    1752                  ADD.L D2,D6
00000BB8                          1753              
00000BB8  32C7                    1754                  MOVE.W D7,(A1)+                 ; store it!
00000BBA                          1755              ENDW
00000BBA  6000 FE70               1756s     BRA _10000002
00000BBE                          1757s _10000003
00000BBE                          1758          
00000BBE                          1759              IF D5 <EQ> #1 THEN
00000BBE  BA7C 0001               1760s     CMP.W   #1,D5
00000BC2  6600 00CE               1761s     BNE _00000003
00000BC6  7E00                    1762                  MOVE.L #0,D7                    ; D7 holds the word
00000BC8                          1763                      
00000BC8                          1764m                 DOWNLOAD D2,D3                  ; MS 4 bits
00000BC8                          1765m WAIT_FOR_READY_116                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000BC8                          1766m 
00000BC8  1639 00C00003           1767m     MOVE.B DUART_SRA,D3                         ; CHECK FOR COMMAND
00000BCE  0803 0000               1768m     BTST #0,D3                                  ; CHECK FOR CHARACTER
00000BD2  6700 0010               1769m     BEQ CONTINUE_116                                ; NOTHING, CONTINUE
00000BD6                          1770m  
00000BD6                          1771mm     READ_CHAR D2
00000BD6                 TRUE     1772mm     IFEQ DEBUG
00000BD6  1439 00C00007           1773mm         MOVE.B DUART_RXA,D2                     ; GOT A CHARACTER, READ IT
00000BDC                          1774mm     ENDC
00000BDC                 FALSE    1775mm     IFNE DEBUG
00000BDC                          1776mm     ENDC
00000BDC                          1777mm      
00000BDC  B43C 001B               1778mm     CMP.B #$1B,D2                               ; CHECK FOR ESCAPE AND GO TO START
00000BE0  6700 F426               1779mm     BEQ START
00000BE4                          1780mm     ENDM
00000BE4                          1781m CONTINUE_116
00000BE4  1639 00C00013           1782m     MOVE.B DUART_SRB,D3                         ; READ STATUS REGISTER
00000BEA  0803 0000               1783m     BTST #0,D3                                  ; CHECK FOR CHARACTER
00000BEE  67D8                    1784m     BEQ WAIT_FOR_READY_116                      ; NOTHING, CHECK AGAIN
00000BF0                          1785m     
00000BF0  1439 00C00017           1786m     MOVE.B DUART_RXB,D2                         ; GOT A CHARACTER, READ IT
00000BF6  13C2 00E00001           1787m     MOVE.B D2,DISPLAY                           ; ECHO TO THE DISPLAY
00000BFC                          1788m     
00000BFC                          1789m     ENDM
00000BFC                          1790m                 PRINT_CHAR D2,D3
00000BFC                          1791m WAIT_FOR_READY_118                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000BFC                 TRUE     1792m     IFEQ DEBUG
00000BFC  1639 00C00003           1793m         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
00000C02  0803 0002               1794m         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
00000C06  67F4                    1795m         BEQ WAIT_FOR_READY_118                      ; NO SPACE, CHECK AGAIN
00000C08  13C2 00C00007           1796m         MOVE.B D2,DUART_TXA                     ; SEND THE NEXT CHARACTER
00000C0E                          1797m     ENDC
00000C0E                          1798m     
00000C0E                 FALSE    1799m     IFNE DEBUG
00000C0E                          1800m     ENDC
00000C0E                          1801m 
00000C0E                          1802m     ENDM
00000C0E                          1803m                 HEX2BIN D2,D2,A0
00000C0E  41F9 00001ADA           1804m     LEA HEX2BIN_LUT,A0                          ; LOAD THE LOOKUP TABLE
00000C14  0402 0030               1805m     SUB.B #'0',D2                               ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
00000C18  C4BC 000000FF           1806m     AND.L #$FF,D2                               ; IGNORE THE TOP 3 BYTES
00000C1E  1430 2000               1807m     MOVE.B 0(A0,D2),D2                          ; USE THAT AS AN INDEX INTO THE LUT      
00000C22                          1808m     ENDM
00000C22  8E82                    1809                  OR.L D2,D7
00000C24  E98F                    1810              LSL.L #4,D7
00000C26                          1811               
00000C26                          1812m             DOWNLOAD D2,D3                      ; LS 4 bits    
00000C26                          1813m WAIT_FOR_READY_120                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000C26                          1814m 
00000C26  1639 00C00003           1815m     MOVE.B DUART_SRA,D3                         ; CHECK FOR COMMAND
00000C2C  0803 0000               1816m     BTST #0,D3                                  ; CHECK FOR CHARACTER
00000C30  6700 0010               1817m     BEQ CONTINUE_120                                ; NOTHING, CONTINUE
00000C34                          1818m  
00000C34                          1819mm     READ_CHAR D2
00000C34                 TRUE     1820mm     IFEQ DEBUG
00000C34  1439 00C00007           1821mm         MOVE.B DUART_RXA,D2                     ; GOT A CHARACTER, READ IT
00000C3A                          1822mm     ENDC
00000C3A                 FALSE    1823mm     IFNE DEBUG
00000C3A                          1824mm     ENDC
00000C3A                          1825mm      
00000C3A  B43C 001B               1826mm     CMP.B #$1B,D2                               ; CHECK FOR ESCAPE AND GO TO START
00000C3E  6700 F3C8               1827mm     BEQ START
00000C42                          1828mm     ENDM
00000C42                          1829m CONTINUE_120
00000C42  1639 00C00013           1830m     MOVE.B DUART_SRB,D3                         ; READ STATUS REGISTER
00000C48  0803 0000               1831m     BTST #0,D3                                  ; CHECK FOR CHARACTER
00000C4C  67D8                    1832m     BEQ WAIT_FOR_READY_120                      ; NOTHING, CHECK AGAIN
00000C4E                          1833m     
00000C4E  1439 00C00017           1834m     MOVE.B DUART_RXB,D2                         ; GOT A CHARACTER, READ IT
00000C54  13C2 00E00001           1835m     MOVE.B D2,DISPLAY                           ; ECHO TO THE DISPLAY
00000C5A                          1836m     
00000C5A                          1837m     ENDM
00000C5A                          1838m             PRINT_CHAR D2,D3
00000C5A                          1839m WAIT_FOR_READY_122                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000C5A                 TRUE     1840m     IFEQ DEBUG
00000C5A  1639 00C00003           1841m         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
00000C60  0803 0002               1842m         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
00000C64  67F4                    1843m         BEQ WAIT_FOR_READY_122                      ; NO SPACE, CHECK AGAIN
00000C66  13C2 00C00007           1844m         MOVE.B D2,DUART_TXA                     ; SEND THE NEXT CHARACTER
00000C6C                          1845m     ENDC
00000C6C                          1846m     
00000C6C                 FALSE    1847m     IFNE DEBUG
00000C6C                          1848m     ENDC
00000C6C                          1849m 
00000C6C                          1850m     ENDM
00000C6C                          1851m             HEX2BIN D2,D2,A0
00000C6C  41F9 00001ADA           1852m     LEA HEX2BIN_LUT,A0                          ; LOAD THE LOOKUP TABLE
00000C72  0402 0030               1853m     SUB.B #'0',D2                               ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
00000C76  C4BC 000000FF           1854m     AND.L #$FF,D2                               ; IGNORE THE TOP 3 BYTES
00000C7C  1430 2000               1855m     MOVE.B 0(A0,D2),D2                          ; USE THAT AS AN INDEX INTO THE LUT      
00000C80                          1856m     ENDM
00000C80  8E82                    1857              OR.L D2,D7
00000C82                          1858                          
00000C82  DC87                    1859              ADD.L D7,D6                         ; add into checksum
00000C84                          1860              
00000C84  3611                    1861              MOVE.W (A1),D3                      ; get the current data and replace the top byte
00000C86  E18F                    1862              LSL.L #8,D7
00000C88  C6BC 000000FF           1863              AND.L #$00FF,D3
00000C8E  8687                    1864              OR.L D7,D3
00000C90                          1865  
00000C90  32C3                    1866              MOVE.W D3,(A1)+                     ; store it!
00000C92                          1867          ENDI
00000C92                          1868s _00000003
00000C92                          1869    
00000C92                          1870m         PRINT_CRLF D3
00000C92                          1871mm     PRINT_CHAR #13,D3                           ; CR
00000C92                          1872mm WAIT_FOR_READY_125                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000C92                 TRUE     1873mm     IFEQ DEBUG
00000C92  1639 00C00003           1874mm         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
00000C98  0803 0002               1875mm         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
00000C9C  67F4                    1876mm         BEQ WAIT_FOR_READY_125                      ; NO SPACE, CHECK AGAIN
00000C9E  13FC 000D 00C00007      1877mm         MOVE.B #13,DUART_TXA                    ; SEND THE NEXT CHARACTER
00000CA6                          1878mm     ENDC
00000CA6                          1879mm     
00000CA6                 FALSE    1880mm     IFNE DEBUG
00000CA6                          1881mm     ENDC
00000CA6                          1882mm 
00000CA6                          1883mm     ENDM
00000CA6                          1884mm     PRINT_CHAR #10,D3                           ; LF
00000CA6                          1885mm WAIT_FOR_READY_126                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000CA6                 TRUE     1886mm     IFEQ DEBUG
00000CA6  1639 00C00003           1887mm         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
00000CAC  0803 0002               1888mm         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
00000CB0  67F4                    1889mm         BEQ WAIT_FOR_READY_126                      ; NO SPACE, CHECK AGAIN
00000CB2  13FC 000A 00C00007      1890mm         MOVE.B #10,DUART_TXA                    ; SEND THE NEXT CHARACTER
00000CBA                          1891mm     ENDC
00000CBA                          1892mm     
00000CBA                 FALSE    1893mm     IFNE DEBUG
00000CBA                          1894mm     ENDC
00000CBA                          1895mm 
00000CBA                          1896mm     ENDM
00000CBA                          1897m     ENDM
00000CBA  43F8 048E               1898          LEA WAIT_FOR_SRECORD,A1                 ; next place to go
00000CBE                          1899        ELSE
00000CBE  6000 080C               1900s     BRA _00000004
00000CC2                          1901s _00000002
00000CC2                          1902              IF.B D7 <EQ> #'2' THEN.L            ; 24 bit address data record
00000CC2  BE3C 0032               1903s     CMP.B   #'2',D7
00000CC6  6600 05B8               1904s     BNE.L   _00000005
00000CCA  7E00                    1905                  MOVE.L #0,D7                    ; read the 24 bit address, we'll stomp on D7 for this since it's sort of like the address accumulator
00000CCC                          1906m                 DOWNLOAD D2,D3                  ; top byte
00000CCC                          1907m WAIT_FOR_READY_127                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000CCC                          1908m 
00000CCC  1639 00C00003           1909m     MOVE.B DUART_SRA,D3                         ; CHECK FOR COMMAND
00000CD2  0803 0000               1910m     BTST #0,D3                                  ; CHECK FOR CHARACTER
00000CD6  6700 0010               1911m     BEQ CONTINUE_127                                ; NOTHING, CONTINUE
00000CDA                          1912m  
00000CDA                          1913mm     READ_CHAR D2
00000CDA                 TRUE     1914mm     IFEQ DEBUG
00000CDA  1439 00C00007           1915mm         MOVE.B DUART_RXA,D2                     ; GOT A CHARACTER, READ IT
00000CE0                          1916mm     ENDC
00000CE0                 FALSE    1917mm     IFNE DEBUG
00000CE0                          1918mm     ENDC
00000CE0                          1919mm      
00000CE0  B43C 001B               1920mm     CMP.B #$1B,D2                               ; CHECK FOR ESCAPE AND GO TO START
00000CE4  6700 F322               1921mm     BEQ START
00000CE8                          1922mm     ENDM
00000CE8                          1923m CONTINUE_127
00000CE8  1639 00C00013           1924m     MOVE.B DUART_SRB,D3                         ; READ STATUS REGISTER
00000CEE  0803 0000               1925m     BTST #0,D3                                  ; CHECK FOR CHARACTER
00000CF2  67D8                    1926m     BEQ WAIT_FOR_READY_127                      ; NOTHING, CHECK AGAIN
00000CF4                          1927m     
00000CF4  1439 00C00017           1928m     MOVE.B DUART_RXB,D2                         ; GOT A CHARACTER, READ IT
00000CFA  13C2 00E00001           1929m     MOVE.B D2,DISPLAY                           ; ECHO TO THE DISPLAY
00000D00                          1930m     
00000D00                          1931m     ENDM
00000D00                          1932m                 PRINT_CHAR D2,D3
00000D00                          1933m WAIT_FOR_READY_129                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000D00                 TRUE     1934m     IFEQ DEBUG
00000D00  1639 00C00003           1935m         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
00000D06  0803 0002               1936m         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
00000D0A  67F4                    1937m         BEQ WAIT_FOR_READY_129                      ; NO SPACE, CHECK AGAIN
00000D0C  13C2 00C00007           1938m         MOVE.B D2,DUART_TXA                     ; SEND THE NEXT CHARACTER
00000D12                          1939m     ENDC
00000D12                          1940m     
00000D12                 FALSE    1941m     IFNE DEBUG
00000D12                          1942m     ENDC
00000D12                          1943m 
00000D12                          1944m     ENDM
00000D12                          1945m                 HEX2BIN D2,D2,A0
00000D12  41F9 00001ADA           1946m     LEA HEX2BIN_LUT,A0                          ; LOAD THE LOOKUP TABLE
00000D18  0402 0030               1947m     SUB.B #'0',D2                               ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
00000D1C  C4BC 000000FF           1948m     AND.L #$FF,D2                               ; IGNORE THE TOP 3 BYTES
00000D22  1430 2000               1949m     MOVE.B 0(A0,D2),D2                          ; USE THAT AS AN INDEX INTO THE LUT      
00000D26                          1950m     ENDM
00000D26  8E82                    1951                  OR.L D2,D7
00000D28  E98F                    1952                  LSL.L #4,D7
00000D2A                          1953m                 DOWNLOAD D2,D3         
00000D2A                          1954m WAIT_FOR_READY_131                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000D2A                          1955m 
00000D2A  1639 00C00003           1956m     MOVE.B DUART_SRA,D3                         ; CHECK FOR COMMAND
00000D30  0803 0000               1957m     BTST #0,D3                                  ; CHECK FOR CHARACTER
00000D34  6700 0010               1958m     BEQ CONTINUE_131                                ; NOTHING, CONTINUE
00000D38                          1959m  
00000D38                          1960mm     READ_CHAR D2
00000D38                 TRUE     1961mm     IFEQ DEBUG
00000D38  1439 00C00007           1962mm         MOVE.B DUART_RXA,D2                     ; GOT A CHARACTER, READ IT
00000D3E                          1963mm     ENDC
00000D3E                 FALSE    1964mm     IFNE DEBUG
00000D3E                          1965mm     ENDC
00000D3E                          1966mm      
00000D3E  B43C 001B               1967mm     CMP.B #$1B,D2                               ; CHECK FOR ESCAPE AND GO TO START
00000D42  6700 F2C4               1968mm     BEQ START
00000D46                          1969mm     ENDM
00000D46                          1970m CONTINUE_131
00000D46  1639 00C00013           1971m     MOVE.B DUART_SRB,D3                         ; READ STATUS REGISTER
00000D4C  0803 0000               1972m     BTST #0,D3                                  ; CHECK FOR CHARACTER
00000D50  67D8                    1973m     BEQ WAIT_FOR_READY_131                      ; NOTHING, CHECK AGAIN
00000D52                          1974m     
00000D52  1439 00C00017           1975m     MOVE.B DUART_RXB,D2                         ; GOT A CHARACTER, READ IT
00000D58  13C2 00E00001           1976m     MOVE.B D2,DISPLAY                           ; ECHO TO THE DISPLAY
00000D5E                          1977m     
00000D5E                          1978m     ENDM
00000D5E                          1979m                 PRINT_CHAR D2,D3
00000D5E                          1980m WAIT_FOR_READY_133                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000D5E                 TRUE     1981m     IFEQ DEBUG
00000D5E  1639 00C00003           1982m         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
00000D64  0803 0002               1983m         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
00000D68  67F4                    1984m         BEQ WAIT_FOR_READY_133                      ; NO SPACE, CHECK AGAIN
00000D6A  13C2 00C00007           1985m         MOVE.B D2,DUART_TXA                     ; SEND THE NEXT CHARACTER
00000D70                          1986m     ENDC
00000D70                          1987m     
00000D70                 FALSE    1988m     IFNE DEBUG
00000D70                          1989m     ENDC
00000D70                          1990m 
00000D70                          1991m     ENDM
00000D70                          1992m                 HEX2BIN D2,D2,A0
00000D70  41F9 00001ADA           1993m     LEA HEX2BIN_LUT,A0                          ; LOAD THE LOOKUP TABLE
00000D76  0402 0030               1994m     SUB.B #'0',D2                               ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
00000D7A  C4BC 000000FF           1995m     AND.L #$FF,D2                               ; IGNORE THE TOP 3 BYTES
00000D80  1430 2000               1996m     MOVE.B 0(A0,D2),D2                          ; USE THAT AS AN INDEX INTO THE LUT      
00000D84                          1997m     ENDM
00000D84  8E82                    1998                  OR.L D2,D7
00000D86                          1999                  
00000D86  DC87                    2000                  ADD.L D7,D6                     ; add top byte of address into checksum
00000D88                          2001  
00000D88  E98F                    2002                  LSL.L #4,D7                     ; middle byte
00000D8A                          2003m                 DOWNLOAD D2,D3
00000D8A                          2004m WAIT_FOR_READY_135                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000D8A                          2005m 
00000D8A  1639 00C00003           2006m     MOVE.B DUART_SRA,D3                         ; CHECK FOR COMMAND
00000D90  0803 0000               2007m     BTST #0,D3                                  ; CHECK FOR CHARACTER
00000D94  6700 0010               2008m     BEQ CONTINUE_135                                ; NOTHING, CONTINUE
00000D98                          2009m  
00000D98                          2010mm     READ_CHAR D2
00000D98                 TRUE     2011mm     IFEQ DEBUG
00000D98  1439 00C00007           2012mm         MOVE.B DUART_RXA,D2                     ; GOT A CHARACTER, READ IT
00000D9E                          2013mm     ENDC
00000D9E                 FALSE    2014mm     IFNE DEBUG
00000D9E                          2015mm     ENDC
00000D9E                          2016mm      
00000D9E  B43C 001B               2017mm     CMP.B #$1B,D2                               ; CHECK FOR ESCAPE AND GO TO START
00000DA2  6700 F264               2018mm     BEQ START
00000DA6                          2019mm     ENDM
00000DA6                          2020m CONTINUE_135
00000DA6  1639 00C00013           2021m     MOVE.B DUART_SRB,D3                         ; READ STATUS REGISTER
00000DAC  0803 0000               2022m     BTST #0,D3                                  ; CHECK FOR CHARACTER
00000DB0  67D8                    2023m     BEQ WAIT_FOR_READY_135                      ; NOTHING, CHECK AGAIN
00000DB2                          2024m     
00000DB2  1439 00C00017           2025m     MOVE.B DUART_RXB,D2                         ; GOT A CHARACTER, READ IT
00000DB8  13C2 00E00001           2026m     MOVE.B D2,DISPLAY                           ; ECHO TO THE DISPLAY
00000DBE                          2027m     
00000DBE                          2028m     ENDM
00000DBE                          2029m                 PRINT_CHAR D2,D3
00000DBE                          2030m WAIT_FOR_READY_137                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000DBE                 TRUE     2031m     IFEQ DEBUG
00000DBE  1639 00C00003           2032m         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
00000DC4  0803 0002               2033m         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
00000DC8  67F4                    2034m         BEQ WAIT_FOR_READY_137                      ; NO SPACE, CHECK AGAIN
00000DCA  13C2 00C00007           2035m         MOVE.B D2,DUART_TXA                     ; SEND THE NEXT CHARACTER
00000DD0                          2036m     ENDC
00000DD0                          2037m     
00000DD0                 FALSE    2038m     IFNE DEBUG
00000DD0                          2039m     ENDC
00000DD0                          2040m 
00000DD0                          2041m     ENDM
00000DD0                          2042m                 HEX2BIN D2,D2,A0
00000DD0  41F9 00001ADA           2043m     LEA HEX2BIN_LUT,A0                          ; LOAD THE LOOKUP TABLE
00000DD6  0402 0030               2044m     SUB.B #'0',D2                               ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
00000DDA  C4BC 000000FF           2045m     AND.L #$FF,D2                               ; IGNORE THE TOP 3 BYTES
00000DE0  1430 2000               2046m     MOVE.B 0(A0,D2),D2                          ; USE THAT AS AN INDEX INTO THE LUT      
00000DE4                          2047m     ENDM
00000DE4  8E82                    2048                  OR.L D2,D7
00000DE6  E98F                    2049                  LSL.L #4,D7        
00000DE8                          2050m                 DOWNLOAD D2,D3
00000DE8                          2051m WAIT_FOR_READY_139                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000DE8                          2052m 
00000DE8  1639 00C00003           2053m     MOVE.B DUART_SRA,D3                         ; CHECK FOR COMMAND
00000DEE  0803 0000               2054m     BTST #0,D3                                  ; CHECK FOR CHARACTER
00000DF2  6700 0010               2055m     BEQ CONTINUE_139                                ; NOTHING, CONTINUE
00000DF6                          2056m  
00000DF6                          2057mm     READ_CHAR D2
00000DF6                 TRUE     2058mm     IFEQ DEBUG
00000DF6  1439 00C00007           2059mm         MOVE.B DUART_RXA,D2                     ; GOT A CHARACTER, READ IT
00000DFC                          2060mm     ENDC
00000DFC                 FALSE    2061mm     IFNE DEBUG
00000DFC                          2062mm     ENDC
00000DFC                          2063mm      
00000DFC  B43C 001B               2064mm     CMP.B #$1B,D2                               ; CHECK FOR ESCAPE AND GO TO START
00000E00  6700 F206               2065mm     BEQ START
00000E04                          2066mm     ENDM
00000E04                          2067m CONTINUE_139
00000E04  1639 00C00013           2068m     MOVE.B DUART_SRB,D3                         ; READ STATUS REGISTER
00000E0A  0803 0000               2069m     BTST #0,D3                                  ; CHECK FOR CHARACTER
00000E0E  67D8                    2070m     BEQ WAIT_FOR_READY_139                      ; NOTHING, CHECK AGAIN
00000E10                          2071m     
00000E10  1439 00C00017           2072m     MOVE.B DUART_RXB,D2                         ; GOT A CHARACTER, READ IT
00000E16  13C2 00E00001           2073m     MOVE.B D2,DISPLAY                           ; ECHO TO THE DISPLAY
00000E1C                          2074m     
00000E1C                          2075m     ENDM
00000E1C                          2076m                 PRINT_CHAR D2,D3
00000E1C                          2077m WAIT_FOR_READY_141                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000E1C                 TRUE     2078m     IFEQ DEBUG
00000E1C  1639 00C00003           2079m         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
00000E22  0803 0002               2080m         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
00000E26  67F4                    2081m         BEQ WAIT_FOR_READY_141                      ; NO SPACE, CHECK AGAIN
00000E28  13C2 00C00007           2082m         MOVE.B D2,DUART_TXA                     ; SEND THE NEXT CHARACTER
00000E2E                          2083m     ENDC
00000E2E                          2084m     
00000E2E                 FALSE    2085m     IFNE DEBUG
00000E2E                          2086m     ENDC
00000E2E                          2087m 
00000E2E                          2088m     ENDM
00000E2E                          2089m                 HEX2BIN D2,D2,A0
00000E2E  41F9 00001ADA           2090m     LEA HEX2BIN_LUT,A0                          ; LOAD THE LOOKUP TABLE
00000E34  0402 0030               2091m     SUB.B #'0',D2                               ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
00000E38  C4BC 000000FF           2092m     AND.L #$FF,D2                               ; IGNORE THE TOP 3 BYTES
00000E3E  1430 2000               2093m     MOVE.B 0(A0,D2),D2                          ; USE THAT AS AN INDEX INTO THE LUT      
00000E42                          2094m     ENDM
00000E42  8E82                    2095                  OR.L D2,D7
00000E44                          2096                  
00000E44  7400                    2097                  MOVE.L #0,D2                    ; rextract middle byte of address and add into checksum
00000E46  1407                    2098                  MOVE.B D7,D2
00000E48  DC82                    2099                  ADD.L D2,D6
00000E4A                          2100            
00000E4A  E98F                    2101                  LSL.L #4,D7                     ; bottom byte
00000E4C                          2102m                 DOWNLOAD D2,D3
00000E4C                          2103m WAIT_FOR_READY_143                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000E4C                          2104m 
00000E4C  1639 00C00003           2105m     MOVE.B DUART_SRA,D3                         ; CHECK FOR COMMAND
00000E52  0803 0000               2106m     BTST #0,D3                                  ; CHECK FOR CHARACTER
00000E56  6700 0010               2107m     BEQ CONTINUE_143                                ; NOTHING, CONTINUE
00000E5A                          2108m  
00000E5A                          2109mm     READ_CHAR D2
00000E5A                 TRUE     2110mm     IFEQ DEBUG
00000E5A  1439 00C00007           2111mm         MOVE.B DUART_RXA,D2                     ; GOT A CHARACTER, READ IT
00000E60                          2112mm     ENDC
00000E60                 FALSE    2113mm     IFNE DEBUG
00000E60                          2114mm     ENDC
00000E60                          2115mm      
00000E60  B43C 001B               2116mm     CMP.B #$1B,D2                               ; CHECK FOR ESCAPE AND GO TO START
00000E64  6700 F1A2               2117mm     BEQ START
00000E68                          2118mm     ENDM
00000E68                          2119m CONTINUE_143
00000E68  1639 00C00013           2120m     MOVE.B DUART_SRB,D3                         ; READ STATUS REGISTER
00000E6E  0803 0000               2121m     BTST #0,D3                                  ; CHECK FOR CHARACTER
00000E72  67D8                    2122m     BEQ WAIT_FOR_READY_143                      ; NOTHING, CHECK AGAIN
00000E74                          2123m     
00000E74  1439 00C00017           2124m     MOVE.B DUART_RXB,D2                         ; GOT A CHARACTER, READ IT
00000E7A  13C2 00E00001           2125m     MOVE.B D2,DISPLAY                           ; ECHO TO THE DISPLAY
00000E80                          2126m     
00000E80                          2127m     ENDM
00000E80                          2128m                 PRINT_CHAR D2,D3
00000E80                          2129m WAIT_FOR_READY_145                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000E80                 TRUE     2130m     IFEQ DEBUG
00000E80  1639 00C00003           2131m         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
00000E86  0803 0002               2132m         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
00000E8A  67F4                    2133m         BEQ WAIT_FOR_READY_145                      ; NO SPACE, CHECK AGAIN
00000E8C  13C2 00C00007           2134m         MOVE.B D2,DUART_TXA                     ; SEND THE NEXT CHARACTER
00000E92                          2135m     ENDC
00000E92                          2136m     
00000E92                 FALSE    2137m     IFNE DEBUG
00000E92                          2138m     ENDC
00000E92                          2139m 
00000E92                          2140m     ENDM
00000E92                          2141m                 HEX2BIN D2,D2,A0
00000E92  41F9 00001ADA           2142m     LEA HEX2BIN_LUT,A0                          ; LOAD THE LOOKUP TABLE
00000E98  0402 0030               2143m     SUB.B #'0',D2                               ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
00000E9C  C4BC 000000FF           2144m     AND.L #$FF,D2                               ; IGNORE THE TOP 3 BYTES
00000EA2  1430 2000               2145m     MOVE.B 0(A0,D2),D2                          ; USE THAT AS AN INDEX INTO THE LUT      
00000EA6                          2146m     ENDM
00000EA6  8E82                    2147                  OR.L D2,D7
00000EA8  E98F                    2148                  LSL.L #4,D7        
00000EAA                          2149m                 DOWNLOAD D2,D3
00000EAA                          2150m WAIT_FOR_READY_147                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000EAA                          2151m 
00000EAA  1639 00C00003           2152m     MOVE.B DUART_SRA,D3                         ; CHECK FOR COMMAND
00000EB0  0803 0000               2153m     BTST #0,D3                                  ; CHECK FOR CHARACTER
00000EB4  6700 0010               2154m     BEQ CONTINUE_147                                ; NOTHING, CONTINUE
00000EB8                          2155m  
00000EB8                          2156mm     READ_CHAR D2
00000EB8                 TRUE     2157mm     IFEQ DEBUG
00000EB8  1439 00C00007           2158mm         MOVE.B DUART_RXA,D2                     ; GOT A CHARACTER, READ IT
00000EBE                          2159mm     ENDC
00000EBE                 FALSE    2160mm     IFNE DEBUG
00000EBE                          2161mm     ENDC
00000EBE                          2162mm      
00000EBE  B43C 001B               2163mm     CMP.B #$1B,D2                               ; CHECK FOR ESCAPE AND GO TO START
00000EC2  6700 F144               2164mm     BEQ START
00000EC6                          2165mm     ENDM
00000EC6                          2166m CONTINUE_147
00000EC6  1639 00C00013           2167m     MOVE.B DUART_SRB,D3                         ; READ STATUS REGISTER
00000ECC  0803 0000               2168m     BTST #0,D3                                  ; CHECK FOR CHARACTER
00000ED0  67D8                    2169m     BEQ WAIT_FOR_READY_147                      ; NOTHING, CHECK AGAIN
00000ED2                          2170m     
00000ED2  1439 00C00017           2171m     MOVE.B DUART_RXB,D2                         ; GOT A CHARACTER, READ IT
00000ED8  13C2 00E00001           2172m     MOVE.B D2,DISPLAY                           ; ECHO TO THE DISPLAY
00000EDE                          2173m     
00000EDE                          2174m     ENDM
00000EDE                          2175m                 PRINT_CHAR D2,D3
00000EDE                          2176m WAIT_FOR_READY_149                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000EDE                 TRUE     2177m     IFEQ DEBUG
00000EDE  1639 00C00003           2178m         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
00000EE4  0803 0002               2179m         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
00000EE8  67F4                    2180m         BEQ WAIT_FOR_READY_149                      ; NO SPACE, CHECK AGAIN
00000EEA  13C2 00C00007           2181m         MOVE.B D2,DUART_TXA                     ; SEND THE NEXT CHARACTER
00000EF0                          2182m     ENDC
00000EF0                          2183m     
00000EF0                 FALSE    2184m     IFNE DEBUG
00000EF0                          2185m     ENDC
00000EF0                          2186m 
00000EF0                          2187m     ENDM
00000EF0                          2188m                 HEX2BIN D2,D2,A0
00000EF0  41F9 00001ADA           2189m     LEA HEX2BIN_LUT,A0                          ; LOAD THE LOOKUP TABLE
00000EF6  0402 0030               2190m     SUB.B #'0',D2                               ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
00000EFA  C4BC 000000FF           2191m     AND.L #$FF,D2                               ; IGNORE THE TOP 3 BYTES
00000F00  1430 2000               2192m     MOVE.B 0(A0,D2),D2                          ; USE THAT AS AN INDEX INTO THE LUT      
00000F04                          2193m     ENDM
00000F04  8E82                    2194                  OR.L D2,D7
00000F06                          2195          
00000F06  7400                    2196                  MOVE.L #0,D2                    ; rextract bottom byte of address and add into checksum
00000F08  1407                    2197                  MOVE.B D7,D2
00000F0A  DC82                    2198                  ADD.L D2,D6
00000F0C                          2199                  
00000F0C  2247                    2200                  MOVE.L D7,A1                    ; put the address in an address register, and we can now re-use D7
00000F0E  D3CB                    2201                  ADD.L A3,A1                     ; add in the offset
00000F10                          2202                    
00000F10  0807 0000               2203                  BTST #0,D7                      ; deal with odd addresses
00000F14                          2204  
00000F14  2247                    2205                  MOVE.L D7,A1                    ; put the address in an address register, and we can now re-use D7
00000F16  6700 00D0               2206                  BEQ EVEN2
00000F1A                          2207                          
00000F1A  5385                    2208                  SUB.L #1,D5
00000F1C  5389                    2209                  SUB.L #1,A1
00000F1E                          2210                  
00000F1E  7E00                    2211                  MOVE.L #0,D7
00000F20                          2212m                 DOWNLOAD D2,D3                  ; MS 4 bits
00000F20                          2213m WAIT_FOR_READY_151                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000F20                          2214m 
00000F20  1639 00C00003           2215m     MOVE.B DUART_SRA,D3                         ; CHECK FOR COMMAND
00000F26  0803 0000               2216m     BTST #0,D3                                  ; CHECK FOR CHARACTER
00000F2A  6700 0010               2217m     BEQ CONTINUE_151                                ; NOTHING, CONTINUE
00000F2E                          2218m  
00000F2E                          2219mm     READ_CHAR D2
00000F2E                 TRUE     2220mm     IFEQ DEBUG
00000F2E  1439 00C00007           2221mm         MOVE.B DUART_RXA,D2                     ; GOT A CHARACTER, READ IT
00000F34                          2222mm     ENDC
00000F34                 FALSE    2223mm     IFNE DEBUG
00000F34                          2224mm     ENDC
00000F34                          2225mm      
00000F34  B43C 001B               2226mm     CMP.B #$1B,D2                               ; CHECK FOR ESCAPE AND GO TO START
00000F38  6700 F0CE               2227mm     BEQ START
00000F3C                          2228mm     ENDM
00000F3C                          2229m CONTINUE_151
00000F3C  1639 00C00013           2230m     MOVE.B DUART_SRB,D3                         ; READ STATUS REGISTER
00000F42  0803 0000               2231m     BTST #0,D3                                  ; CHECK FOR CHARACTER
00000F46  67D8                    2232m     BEQ WAIT_FOR_READY_151                      ; NOTHING, CHECK AGAIN
00000F48                          2233m     
00000F48  1439 00C00017           2234m     MOVE.B DUART_RXB,D2                         ; GOT A CHARACTER, READ IT
00000F4E  13C2 00E00001           2235m     MOVE.B D2,DISPLAY                           ; ECHO TO THE DISPLAY
00000F54                          2236m     
00000F54                          2237m     ENDM
00000F54                          2238m                 PRINT_CHAR D2,D3
00000F54                          2239m WAIT_FOR_READY_153                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000F54                 TRUE     2240m     IFEQ DEBUG
00000F54  1639 00C00003           2241m         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
00000F5A  0803 0002               2242m         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
00000F5E  67F4                    2243m         BEQ WAIT_FOR_READY_153                      ; NO SPACE, CHECK AGAIN
00000F60  13C2 00C00007           2244m         MOVE.B D2,DUART_TXA                     ; SEND THE NEXT CHARACTER
00000F66                          2245m     ENDC
00000F66                          2246m     
00000F66                 FALSE    2247m     IFNE DEBUG
00000F66                          2248m     ENDC
00000F66                          2249m 
00000F66                          2250m     ENDM
00000F66                          2251m                 HEX2BIN D2,D2,A0
00000F66  41F9 00001ADA           2252m     LEA HEX2BIN_LUT,A0                          ; LOAD THE LOOKUP TABLE
00000F6C  0402 0030               2253m     SUB.B #'0',D2                               ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
00000F70  C4BC 000000FF           2254m     AND.L #$FF,D2                               ; IGNORE THE TOP 3 BYTES
00000F76  1430 2000               2255m     MOVE.B 0(A0,D2),D2                          ; USE THAT AS AN INDEX INTO THE LUT      
00000F7A                          2256m     ENDM
00000F7A  8E82                    2257                  OR.L D2,D7
00000F7C  E98F                    2258                  LSL.L #4,D7
00000F7E                          2259                       
00000F7E                          2260m                 DOWNLOAD D2,D3                  ; LS 4 bits    
00000F7E                          2261m WAIT_FOR_READY_155                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000F7E                          2262m 
00000F7E  1639 00C00003           2263m     MOVE.B DUART_SRA,D3                         ; CHECK FOR COMMAND
00000F84  0803 0000               2264m     BTST #0,D3                                  ; CHECK FOR CHARACTER
00000F88  6700 0010               2265m     BEQ CONTINUE_155                                ; NOTHING, CONTINUE
00000F8C                          2266m  
00000F8C                          2267mm     READ_CHAR D2
00000F8C                 TRUE     2268mm     IFEQ DEBUG
00000F8C  1439 00C00007           2269mm         MOVE.B DUART_RXA,D2                     ; GOT A CHARACTER, READ IT
00000F92                          2270mm     ENDC
00000F92                 FALSE    2271mm     IFNE DEBUG
00000F92                          2272mm     ENDC
00000F92                          2273mm      
00000F92  B43C 001B               2274mm     CMP.B #$1B,D2                               ; CHECK FOR ESCAPE AND GO TO START
00000F96  6700 F070               2275mm     BEQ START
00000F9A                          2276mm     ENDM
00000F9A                          2277m CONTINUE_155
00000F9A  1639 00C00013           2278m     MOVE.B DUART_SRB,D3                         ; READ STATUS REGISTER
00000FA0  0803 0000               2279m     BTST #0,D3                                  ; CHECK FOR CHARACTER
00000FA4  67D8                    2280m     BEQ WAIT_FOR_READY_155                      ; NOTHING, CHECK AGAIN
00000FA6                          2281m     
00000FA6  1439 00C00017           2282m     MOVE.B DUART_RXB,D2                         ; GOT A CHARACTER, READ IT
00000FAC  13C2 00E00001           2283m     MOVE.B D2,DISPLAY                           ; ECHO TO THE DISPLAY
00000FB2                          2284m     
00000FB2                          2285m     ENDM
00000FB2                          2286m                 PRINT_CHAR D2,D3
00000FB2                          2287m WAIT_FOR_READY_157                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000FB2                 TRUE     2288m     IFEQ DEBUG
00000FB2  1639 00C00003           2289m         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
00000FB8  0803 0002               2290m         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
00000FBC  67F4                    2291m         BEQ WAIT_FOR_READY_157                      ; NO SPACE, CHECK AGAIN
00000FBE  13C2 00C00007           2292m         MOVE.B D2,DUART_TXA                     ; SEND THE NEXT CHARACTER
00000FC4                          2293m     ENDC
00000FC4                          2294m     
00000FC4                 FALSE    2295m     IFNE DEBUG
00000FC4                          2296m     ENDC
00000FC4                          2297m 
00000FC4                          2298m     ENDM
00000FC4                          2299m                 HEX2BIN D2,D2,A0
00000FC4  41F9 00001ADA           2300m     LEA HEX2BIN_LUT,A0                          ; LOAD THE LOOKUP TABLE
00000FCA  0402 0030               2301m     SUB.B #'0',D2                               ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
00000FCE  C4BC 000000FF           2302m     AND.L #$FF,D2                               ; IGNORE THE TOP 3 BYTES
00000FD4  1430 2000               2303m     MOVE.B 0(A0,D2),D2                          ; USE THAT AS AN INDEX INTO THE LUT      
00000FD8                          2304m     ENDM
00000FD8  8E82                    2305                  OR.L D2,D7
00000FDA                          2306                          
00000FDA  DC87                    2307                  ADD.L D7,D6                     ; add into checksum
00000FDC                          2308                                
00000FDC  3611                    2309                  MOVE.W (A1),D3                  ; get the current data and replace the bottom byte
00000FDE                          2310                  
00000FDE  0243 FF00               2311                  ANDI.W #$FF00,D3
00000FE2  8647                    2312                  OR.W D7,D3
00000FE4                          2313                  
00000FE4  3283                    2314                  MOVE.W D3,(A1)                  ; store it!
00000FE6  5489                    2315                  ADD.L #2,A1
00000FE8                          2316  EVEN2
00000FE8  5985                    2317                  SUB.L #4,D5                     ; subtract four bytes for 24 bit address and 1 byte checksum
00000FEA                          2318                  WHILE.L D5 <GE> #2 DO           ; read the data bytes
00000FEA                          2319s _10000004
00000FEA  BABC 00000002           2320s     CMP.L   #2,D5
00000FF0  6D00 018A               2321s     BLT _10000005
00000FF4  5585                    2322                      SUB.L #2,D5
00000FF6                          2323                      
00000FF6  7E00                    2324                      MOVE.L #0,D7                ; D7 holds the word
00000FF8                          2325                      
00000FF8                          2326m                     DOWNLOAD D2,D3              ; MS 4 bits
00000FF8                          2327m WAIT_FOR_READY_159                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00000FF8                          2328m 
00000FF8  1639 00C00003           2329m     MOVE.B DUART_SRA,D3                         ; CHECK FOR COMMAND
00000FFE  0803 0000               2330m     BTST #0,D3                                  ; CHECK FOR CHARACTER
00001002  6700 0010               2331m     BEQ CONTINUE_159                                ; NOTHING, CONTINUE
00001006                          2332m  
00001006                          2333mm     READ_CHAR D2
00001006                 TRUE     2334mm     IFEQ DEBUG
00001006  1439 00C00007           2335mm         MOVE.B DUART_RXA,D2                     ; GOT A CHARACTER, READ IT
0000100C                          2336mm     ENDC
0000100C                 FALSE    2337mm     IFNE DEBUG
0000100C                          2338mm     ENDC
0000100C                          2339mm      
0000100C  B43C 001B               2340mm     CMP.B #$1B,D2                               ; CHECK FOR ESCAPE AND GO TO START
00001010  6700 EFF6               2341mm     BEQ START
00001014                          2342mm     ENDM
00001014                          2343m CONTINUE_159
00001014  1639 00C00013           2344m     MOVE.B DUART_SRB,D3                         ; READ STATUS REGISTER
0000101A  0803 0000               2345m     BTST #0,D3                                  ; CHECK FOR CHARACTER
0000101E  67D8                    2346m     BEQ WAIT_FOR_READY_159                      ; NOTHING, CHECK AGAIN
00001020                          2347m     
00001020  1439 00C00017           2348m     MOVE.B DUART_RXB,D2                         ; GOT A CHARACTER, READ IT
00001026  13C2 00E00001           2349m     MOVE.B D2,DISPLAY                           ; ECHO TO THE DISPLAY
0000102C                          2350m     
0000102C                          2351m     ENDM
0000102C                          2352m                     PRINT_CHAR D2,D3
0000102C                          2353m WAIT_FOR_READY_161                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
0000102C                 TRUE     2354m     IFEQ DEBUG
0000102C  1639 00C00003           2355m         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
00001032  0803 0002               2356m         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
00001036  67F4                    2357m         BEQ WAIT_FOR_READY_161                      ; NO SPACE, CHECK AGAIN
00001038  13C2 00C00007           2358m         MOVE.B D2,DUART_TXA                     ; SEND THE NEXT CHARACTER
0000103E                          2359m     ENDC
0000103E                          2360m     
0000103E                 FALSE    2361m     IFNE DEBUG
0000103E                          2362m     ENDC
0000103E                          2363m 
0000103E                          2364m     ENDM
0000103E                          2365m                     HEX2BIN D2,D2,A0
0000103E  41F9 00001ADA           2366m     LEA HEX2BIN_LUT,A0                          ; LOAD THE LOOKUP TABLE
00001044  0402 0030               2367m     SUB.B #'0',D2                               ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
00001048  C4BC 000000FF           2368m     AND.L #$FF,D2                               ; IGNORE THE TOP 3 BYTES
0000104E  1430 2000               2369m     MOVE.B 0(A0,D2),D2                          ; USE THAT AS AN INDEX INTO THE LUT      
00001052                          2370m     ENDM
00001052  8E82                    2371                      OR.L D2,D7
00001054  E98F                    2372                      LSL.L #4,D7
00001056                          2373                       
00001056                          2374m                     DOWNLOAD D2,D3              ; LS 4 bits    
00001056                          2375m WAIT_FOR_READY_163                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00001056                          2376m 
00001056  1639 00C00003           2377m     MOVE.B DUART_SRA,D3                         ; CHECK FOR COMMAND
0000105C  0803 0000               2378m     BTST #0,D3                                  ; CHECK FOR CHARACTER
00001060  6700 0010               2379m     BEQ CONTINUE_163                                ; NOTHING, CONTINUE
00001064                          2380m  
00001064                          2381mm     READ_CHAR D2
00001064                 TRUE     2382mm     IFEQ DEBUG
00001064  1439 00C00007           2383mm         MOVE.B DUART_RXA,D2                     ; GOT A CHARACTER, READ IT
0000106A                          2384mm     ENDC
0000106A                 FALSE    2385mm     IFNE DEBUG
0000106A                          2386mm     ENDC
0000106A                          2387mm      
0000106A  B43C 001B               2388mm     CMP.B #$1B,D2                               ; CHECK FOR ESCAPE AND GO TO START
0000106E  6700 EF98               2389mm     BEQ START
00001072                          2390mm     ENDM
00001072                          2391m CONTINUE_163
00001072  1639 00C00013           2392m     MOVE.B DUART_SRB,D3                         ; READ STATUS REGISTER
00001078  0803 0000               2393m     BTST #0,D3                                  ; CHECK FOR CHARACTER
0000107C  67D8                    2394m     BEQ WAIT_FOR_READY_163                      ; NOTHING, CHECK AGAIN
0000107E                          2395m     
0000107E  1439 00C00017           2396m     MOVE.B DUART_RXB,D2                         ; GOT A CHARACTER, READ IT
00001084  13C2 00E00001           2397m     MOVE.B D2,DISPLAY                           ; ECHO TO THE DISPLAY
0000108A                          2398m     
0000108A                          2399m     ENDM
0000108A                          2400m                     PRINT_CHAR D2,D3
0000108A                          2401m WAIT_FOR_READY_165                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
0000108A                 TRUE     2402m     IFEQ DEBUG
0000108A  1639 00C00003           2403m         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
00001090  0803 0002               2404m         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
00001094  67F4                    2405m         BEQ WAIT_FOR_READY_165                      ; NO SPACE, CHECK AGAIN
00001096  13C2 00C00007           2406m         MOVE.B D2,DUART_TXA                     ; SEND THE NEXT CHARACTER
0000109C                          2407m     ENDC
0000109C                          2408m     
0000109C                 FALSE    2409m     IFNE DEBUG
0000109C                          2410m     ENDC
0000109C                          2411m 
0000109C                          2412m     ENDM
0000109C                          2413m                     HEX2BIN D2,D2,A0
0000109C  41F9 00001ADA           2414m     LEA HEX2BIN_LUT,A0                          ; LOAD THE LOOKUP TABLE
000010A2  0402 0030               2415m     SUB.B #'0',D2                               ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
000010A6  C4BC 000000FF           2416m     AND.L #$FF,D2                               ; IGNORE THE TOP 3 BYTES
000010AC  1430 2000               2417m     MOVE.B 0(A0,D2),D2                          ; USE THAT AS AN INDEX INTO THE LUT      
000010B0                          2418m     ENDM
000010B0  8E82                    2419                      OR.L D2,D7
000010B2                          2420                          
000010B2  DC87                    2421                      ADD.L D7,D6                 ; add into checksum
000010B4                          2422                      
000010B4  E98F                    2423                      LSL.L #4,D7
000010B6                          2424m                     DOWNLOAD D2,D3              ; MS 4 bits
000010B6                          2425m WAIT_FOR_READY_167                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
000010B6                          2426m 
000010B6  1639 00C00003           2427m     MOVE.B DUART_SRA,D3                         ; CHECK FOR COMMAND
000010BC  0803 0000               2428m     BTST #0,D3                                  ; CHECK FOR CHARACTER
000010C0  6700 0010               2429m     BEQ CONTINUE_167                                ; NOTHING, CONTINUE
000010C4                          2430m  
000010C4                          2431mm     READ_CHAR D2
000010C4                 TRUE     2432mm     IFEQ DEBUG
000010C4  1439 00C00007           2433mm         MOVE.B DUART_RXA,D2                     ; GOT A CHARACTER, READ IT
000010CA                          2434mm     ENDC
000010CA                 FALSE    2435mm     IFNE DEBUG
000010CA                          2436mm     ENDC
000010CA                          2437mm      
000010CA  B43C 001B               2438mm     CMP.B #$1B,D2                               ; CHECK FOR ESCAPE AND GO TO START
000010CE  6700 EF38               2439mm     BEQ START
000010D2                          2440mm     ENDM
000010D2                          2441m CONTINUE_167
000010D2  1639 00C00013           2442m     MOVE.B DUART_SRB,D3                         ; READ STATUS REGISTER
000010D8  0803 0000               2443m     BTST #0,D3                                  ; CHECK FOR CHARACTER
000010DC  67D8                    2444m     BEQ WAIT_FOR_READY_167                      ; NOTHING, CHECK AGAIN
000010DE                          2445m     
000010DE  1439 00C00017           2446m     MOVE.B DUART_RXB,D2                         ; GOT A CHARACTER, READ IT
000010E4  13C2 00E00001           2447m     MOVE.B D2,DISPLAY                           ; ECHO TO THE DISPLAY
000010EA                          2448m     
000010EA                          2449m     ENDM
000010EA                          2450m                     PRINT_CHAR D2,D3
000010EA                          2451m WAIT_FOR_READY_169                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
000010EA                 TRUE     2452m     IFEQ DEBUG
000010EA  1639 00C00003           2453m         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
000010F0  0803 0002               2454m         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
000010F4  67F4                    2455m         BEQ WAIT_FOR_READY_169                      ; NO SPACE, CHECK AGAIN
000010F6  13C2 00C00007           2456m         MOVE.B D2,DUART_TXA                     ; SEND THE NEXT CHARACTER
000010FC                          2457m     ENDC
000010FC                          2458m     
000010FC                 FALSE    2459m     IFNE DEBUG
000010FC                          2460m     ENDC
000010FC                          2461m 
000010FC                          2462m     ENDM
000010FC                          2463m                     HEX2BIN D2,D2,A0
000010FC  41F9 00001ADA           2464m     LEA HEX2BIN_LUT,A0                          ; LOAD THE LOOKUP TABLE
00001102  0402 0030               2465m     SUB.B #'0',D2                               ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
00001106  C4BC 000000FF           2466m     AND.L #$FF,D2                               ; IGNORE THE TOP 3 BYTES
0000110C  1430 2000               2467m     MOVE.B 0(A0,D2),D2                          ; USE THAT AS AN INDEX INTO THE LUT      
00001110                          2468m     ENDM
00001110  8E82                    2469                      OR.L D2,D7
00001112                          2470                       
00001112  E98F                    2471                      LSL.L #4,D7
00001114                          2472m                     DOWNLOAD D2,D3              ; LS 4 bits    
00001114                          2473m WAIT_FOR_READY_171                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00001114                          2474m 
00001114  1639 00C00003           2475m     MOVE.B DUART_SRA,D3                         ; CHECK FOR COMMAND
0000111A  0803 0000               2476m     BTST #0,D3                                  ; CHECK FOR CHARACTER
0000111E  6700 0010               2477m     BEQ CONTINUE_171                                ; NOTHING, CONTINUE
00001122                          2478m  
00001122                          2479mm     READ_CHAR D2
00001122                 TRUE     2480mm     IFEQ DEBUG
00001122  1439 00C00007           2481mm         MOVE.B DUART_RXA,D2                     ; GOT A CHARACTER, READ IT
00001128                          2482mm     ENDC
00001128                 FALSE    2483mm     IFNE DEBUG
00001128                          2484mm     ENDC
00001128                          2485mm      
00001128  B43C 001B               2486mm     CMP.B #$1B,D2                               ; CHECK FOR ESCAPE AND GO TO START
0000112C  6700 EEDA               2487mm     BEQ START
00001130                          2488mm     ENDM
00001130                          2489m CONTINUE_171
00001130  1639 00C00013           2490m     MOVE.B DUART_SRB,D3                         ; READ STATUS REGISTER
00001136  0803 0000               2491m     BTST #0,D3                                  ; CHECK FOR CHARACTER
0000113A  67D8                    2492m     BEQ WAIT_FOR_READY_171                      ; NOTHING, CHECK AGAIN
0000113C                          2493m     
0000113C  1439 00C00017           2494m     MOVE.B DUART_RXB,D2                         ; GOT A CHARACTER, READ IT
00001142  13C2 00E00001           2495m     MOVE.B D2,DISPLAY                           ; ECHO TO THE DISPLAY
00001148                          2496m     
00001148                          2497m     ENDM
00001148                          2498m                     PRINT_CHAR D2,D3
00001148                          2499m WAIT_FOR_READY_173                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00001148                 TRUE     2500m     IFEQ DEBUG
00001148  1639 00C00003           2501m         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
0000114E  0803 0002               2502m         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
00001152  67F4                    2503m         BEQ WAIT_FOR_READY_173                      ; NO SPACE, CHECK AGAIN
00001154  13C2 00C00007           2504m         MOVE.B D2,DUART_TXA                     ; SEND THE NEXT CHARACTER
0000115A                          2505m     ENDC
0000115A                          2506m     
0000115A                 FALSE    2507m     IFNE DEBUG
0000115A                          2508m     ENDC
0000115A                          2509m 
0000115A                          2510m     ENDM
0000115A                          2511m                     HEX2BIN D2,D2,A0
0000115A  41F9 00001ADA           2512m     LEA HEX2BIN_LUT,A0                          ; LOAD THE LOOKUP TABLE
00001160  0402 0030               2513m     SUB.B #'0',D2                               ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
00001164  C4BC 000000FF           2514m     AND.L #$FF,D2                               ; IGNORE THE TOP 3 BYTES
0000116A  1430 2000               2515m     MOVE.B 0(A0,D2),D2                          ; USE THAT AS AN INDEX INTO THE LUT      
0000116E                          2516m     ENDM
0000116E  8E82                    2517                      OR.L D2,D7
00001170                          2518                      
00001170  7400                    2519                      MOVE.L #0,D2                ; rextract bottom byte of address and add into checksum
00001172  1407                    2520                      MOVE.B D7,D2
00001174  DC82                    2521                      ADD.L D2,D6
00001176                          2522                      
00001176  32C7                    2523                      MOVE.W D7,(A1)+             ; store it!
00001178                          2524              
00001178                          2525                  ENDW
00001178  6000 FE70               2526s     BRA _10000004
0000117C                          2527s _10000005
0000117C                          2528              
0000117C                          2529                  IF D5 <EQ> #1 THEN
0000117C  BA7C 0001               2530s     CMP.W   #1,D5
00001180  6600 00CE               2531s     BNE _00000006
00001184  7E00                    2532                      MOVE.L #0,D7                ; D7 holds the word
00001186                          2533                              
00001186                          2534m                     DOWNLOAD D2,D3              ; MS 4 bits
00001186                          2535m WAIT_FOR_READY_175                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00001186                          2536m 
00001186  1639 00C00003           2537m     MOVE.B DUART_SRA,D3                         ; CHECK FOR COMMAND
0000118C  0803 0000               2538m     BTST #0,D3                                  ; CHECK FOR CHARACTER
00001190  6700 0010               2539m     BEQ CONTINUE_175                                ; NOTHING, CONTINUE
00001194                          2540m  
00001194                          2541mm     READ_CHAR D2
00001194                 TRUE     2542mm     IFEQ DEBUG
00001194  1439 00C00007           2543mm         MOVE.B DUART_RXA,D2                     ; GOT A CHARACTER, READ IT
0000119A                          2544mm     ENDC
0000119A                 FALSE    2545mm     IFNE DEBUG
0000119A                          2546mm     ENDC
0000119A                          2547mm      
0000119A  B43C 001B               2548mm     CMP.B #$1B,D2                               ; CHECK FOR ESCAPE AND GO TO START
0000119E  6700 EE68               2549mm     BEQ START
000011A2                          2550mm     ENDM
000011A2                          2551m CONTINUE_175
000011A2  1639 00C00013           2552m     MOVE.B DUART_SRB,D3                         ; READ STATUS REGISTER
000011A8  0803 0000               2553m     BTST #0,D3                                  ; CHECK FOR CHARACTER
000011AC  67D8                    2554m     BEQ WAIT_FOR_READY_175                      ; NOTHING, CHECK AGAIN
000011AE                          2555m     
000011AE  1439 00C00017           2556m     MOVE.B DUART_RXB,D2                         ; GOT A CHARACTER, READ IT
000011B4  13C2 00E00001           2557m     MOVE.B D2,DISPLAY                           ; ECHO TO THE DISPLAY
000011BA                          2558m     
000011BA                          2559m     ENDM
000011BA                          2560m                     PRINT_CHAR D2,D3
000011BA                          2561m WAIT_FOR_READY_177                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
000011BA                 TRUE     2562m     IFEQ DEBUG
000011BA  1639 00C00003           2563m         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
000011C0  0803 0002               2564m         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
000011C4  67F4                    2565m         BEQ WAIT_FOR_READY_177                      ; NO SPACE, CHECK AGAIN
000011C6  13C2 00C00007           2566m         MOVE.B D2,DUART_TXA                     ; SEND THE NEXT CHARACTER
000011CC                          2567m     ENDC
000011CC                          2568m     
000011CC                 FALSE    2569m     IFNE DEBUG
000011CC                          2570m     ENDC
000011CC                          2571m 
000011CC                          2572m     ENDM
000011CC                          2573m                     HEX2BIN D2,D2,A0
000011CC  41F9 00001ADA           2574m     LEA HEX2BIN_LUT,A0                          ; LOAD THE LOOKUP TABLE
000011D2  0402 0030               2575m     SUB.B #'0',D2                               ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
000011D6  C4BC 000000FF           2576m     AND.L #$FF,D2                               ; IGNORE THE TOP 3 BYTES
000011DC  1430 2000               2577m     MOVE.B 0(A0,D2),D2                          ; USE THAT AS AN INDEX INTO THE LUT      
000011E0                          2578m     ENDM
000011E0  8E82                    2579                      OR.L D2,D7
000011E2  E98F                    2580                      LSL.L #4,D7
000011E4                          2581                       
000011E4                          2582m                     DOWNLOAD D2,D3              ; LS 4 bits    
000011E4                          2583m WAIT_FOR_READY_179                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
000011E4                          2584m 
000011E4  1639 00C00003           2585m     MOVE.B DUART_SRA,D3                         ; CHECK FOR COMMAND
000011EA  0803 0000               2586m     BTST #0,D3                                  ; CHECK FOR CHARACTER
000011EE  6700 0010               2587m     BEQ CONTINUE_179                                ; NOTHING, CONTINUE
000011F2                          2588m  
000011F2                          2589mm     READ_CHAR D2
000011F2                 TRUE     2590mm     IFEQ DEBUG
000011F2  1439 00C00007           2591mm         MOVE.B DUART_RXA,D2                     ; GOT A CHARACTER, READ IT
000011F8                          2592mm     ENDC
000011F8                 FALSE    2593mm     IFNE DEBUG
000011F8                          2594mm     ENDC
000011F8                          2595mm      
000011F8  B43C 001B               2596mm     CMP.B #$1B,D2                               ; CHECK FOR ESCAPE AND GO TO START
000011FC  6700 EE0A               2597mm     BEQ START
00001200                          2598mm     ENDM
00001200                          2599m CONTINUE_179
00001200  1639 00C00013           2600m     MOVE.B DUART_SRB,D3                         ; READ STATUS REGISTER
00001206  0803 0000               2601m     BTST #0,D3                                  ; CHECK FOR CHARACTER
0000120A  67D8                    2602m     BEQ WAIT_FOR_READY_179                      ; NOTHING, CHECK AGAIN
0000120C                          2603m     
0000120C  1439 00C00017           2604m     MOVE.B DUART_RXB,D2                         ; GOT A CHARACTER, READ IT
00001212  13C2 00E00001           2605m     MOVE.B D2,DISPLAY                           ; ECHO TO THE DISPLAY
00001218                          2606m     
00001218                          2607m     ENDM
00001218                          2608m                     PRINT_CHAR D2,D3
00001218                          2609m WAIT_FOR_READY_181                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00001218                 TRUE     2610m     IFEQ DEBUG
00001218  1639 00C00003           2611m         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
0000121E  0803 0002               2612m         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
00001222  67F4                    2613m         BEQ WAIT_FOR_READY_181                      ; NO SPACE, CHECK AGAIN
00001224  13C2 00C00007           2614m         MOVE.B D2,DUART_TXA                     ; SEND THE NEXT CHARACTER
0000122A                          2615m     ENDC
0000122A                          2616m     
0000122A                 FALSE    2617m     IFNE DEBUG
0000122A                          2618m     ENDC
0000122A                          2619m 
0000122A                          2620m     ENDM
0000122A                          2621m                     HEX2BIN D2,D2,A0
0000122A  41F9 00001ADA           2622m     LEA HEX2BIN_LUT,A0                          ; LOAD THE LOOKUP TABLE
00001230  0402 0030               2623m     SUB.B #'0',D2                               ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
00001234  C4BC 000000FF           2624m     AND.L #$FF,D2                               ; IGNORE THE TOP 3 BYTES
0000123A  1430 2000               2625m     MOVE.B 0(A0,D2),D2                          ; USE THAT AS AN INDEX INTO THE LUT      
0000123E                          2626m     ENDM
0000123E  8E82                    2627                      OR.L D2,D7
00001240                          2628                                  
00001240  DC87                    2629                      ADD.L D7,D6                 ; add into checksum
00001242                          2630                      
00001242  3611                    2631                      MOVE.W (A1),D3              ; get the current data and replace the top byte
00001244  E18F                    2632                      LSL.L #8,D7
00001246  C6BC 000000FF           2633                      AND.L #$00FF,D3
0000124C  8687                    2634                      OR.L D7,D3
0000124E                          2635  
0000124E  32C3                    2636                      MOVE.W D3,(A1)+             ; store it!
00001250                          2637                  ENDI
00001250                          2638s _00000006
00001250                          2639m                 PRINT_CRLF D3
00001250                          2640mm     PRINT_CHAR #13,D3                           ; CR
00001250                          2641mm WAIT_FOR_READY_184                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00001250                 TRUE     2642mm     IFEQ DEBUG
00001250  1639 00C00003           2643mm         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
00001256  0803 0002               2644mm         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
0000125A  67F4                    2645mm         BEQ WAIT_FOR_READY_184                      ; NO SPACE, CHECK AGAIN
0000125C  13FC 000D 00C00007      2646mm         MOVE.B #13,DUART_TXA                    ; SEND THE NEXT CHARACTER
00001264                          2647mm     ENDC
00001264                          2648mm     
00001264                 FALSE    2649mm     IFNE DEBUG
00001264                          2650mm     ENDC
00001264                          2651mm 
00001264                          2652mm     ENDM
00001264                          2653mm     PRINT_CHAR #10,D3                           ; LF
00001264                          2654mm WAIT_FOR_READY_185                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00001264                 TRUE     2655mm     IFEQ DEBUG
00001264  1639 00C00003           2656mm         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
0000126A  0803 0002               2657mm         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
0000126E  67F4                    2658mm         BEQ WAIT_FOR_READY_185                      ; NO SPACE, CHECK AGAIN
00001270  13FC 000A 00C00007      2659mm         MOVE.B #10,DUART_TXA                    ; SEND THE NEXT CHARACTER
00001278                          2660mm     ENDC
00001278                          2661mm     
00001278                 FALSE    2662mm     IFNE DEBUG
00001278                          2663mm     ENDC
00001278                          2664mm 
00001278                          2665mm     ENDM
00001278                          2666m     ENDM
00001278  43F8 048E               2667                  LEA WAIT_FOR_SRECORD,A1         ; next place to go
0000127C                          2668              ELSE
0000127C  6000 024E               2669s     BRA _00000007
00001280                          2670s _00000005
00001280                          2671                  IF.B D7 <EQ> #'8' THEN.L        ; termination record, exit
00001280  BE3C 0038               2672s     CMP.B   #'8',D7
00001284  6600 01E4               2673s     BNE.L   _00000008
00001288  7E00                    2674                      MOVE.L #0,D7                ; read the 24 bit address, we'll stomp on D7 for this since it's sort of like the address accumulator
0000128A                          2675m                     DOWNLOAD D2,D3              ; top byte
0000128A                          2676m WAIT_FOR_READY_186                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
0000128A                          2677m 
0000128A  1639 00C00003           2678m     MOVE.B DUART_SRA,D3                         ; CHECK FOR COMMAND
00001290  0803 0000               2679m     BTST #0,D3                                  ; CHECK FOR CHARACTER
00001294  6700 0010               2680m     BEQ CONTINUE_186                                ; NOTHING, CONTINUE
00001298                          2681m  
00001298                          2682mm     READ_CHAR D2
00001298                 TRUE     2683mm     IFEQ DEBUG
00001298  1439 00C00007           2684mm         MOVE.B DUART_RXA,D2                     ; GOT A CHARACTER, READ IT
0000129E                          2685mm     ENDC
0000129E                 FALSE    2686mm     IFNE DEBUG
0000129E                          2687mm     ENDC
0000129E                          2688mm      
0000129E  B43C 001B               2689mm     CMP.B #$1B,D2                               ; CHECK FOR ESCAPE AND GO TO START
000012A2  6700 ED64               2690mm     BEQ START
000012A6                          2691mm     ENDM
000012A6                          2692m CONTINUE_186
000012A6  1639 00C00013           2693m     MOVE.B DUART_SRB,D3                         ; READ STATUS REGISTER
000012AC  0803 0000               2694m     BTST #0,D3                                  ; CHECK FOR CHARACTER
000012B0  67D8                    2695m     BEQ WAIT_FOR_READY_186                      ; NOTHING, CHECK AGAIN
000012B2                          2696m     
000012B2  1439 00C00017           2697m     MOVE.B DUART_RXB,D2                         ; GOT A CHARACTER, READ IT
000012B8  13C2 00E00001           2698m     MOVE.B D2,DISPLAY                           ; ECHO TO THE DISPLAY
000012BE                          2699m     
000012BE                          2700m     ENDM
000012BE                          2701m                     HEX2BIN D2,D2,A0
000012BE  41F9 00001ADA           2702m     LEA HEX2BIN_LUT,A0                          ; LOAD THE LOOKUP TABLE
000012C4  0402 0030               2703m     SUB.B #'0',D2                               ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
000012C8  C4BC 000000FF           2704m     AND.L #$FF,D2                               ; IGNORE THE TOP 3 BYTES
000012CE  1430 2000               2705m     MOVE.B 0(A0,D2),D2                          ; USE THAT AS AN INDEX INTO THE LUT      
000012D2                          2706m     ENDM
000012D2  8E82                    2707                      OR.L D2,D7
000012D4  E98F                    2708                      LSL.L #4,D7
000012D6                          2709m                     DOWNLOAD D2,D3         
000012D6                          2710m WAIT_FOR_READY_189                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
000012D6                          2711m 
000012D6  1639 00C00003           2712m     MOVE.B DUART_SRA,D3                         ; CHECK FOR COMMAND
000012DC  0803 0000               2713m     BTST #0,D3                                  ; CHECK FOR CHARACTER
000012E0  6700 0010               2714m     BEQ CONTINUE_189                                ; NOTHING, CONTINUE
000012E4                          2715m  
000012E4                          2716mm     READ_CHAR D2
000012E4                 TRUE     2717mm     IFEQ DEBUG
000012E4  1439 00C00007           2718mm         MOVE.B DUART_RXA,D2                     ; GOT A CHARACTER, READ IT
000012EA                          2719mm     ENDC
000012EA                 FALSE    2720mm     IFNE DEBUG
000012EA                          2721mm     ENDC
000012EA                          2722mm      
000012EA  B43C 001B               2723mm     CMP.B #$1B,D2                               ; CHECK FOR ESCAPE AND GO TO START
000012EE  6700 ED18               2724mm     BEQ START
000012F2                          2725mm     ENDM
000012F2                          2726m CONTINUE_189
000012F2  1639 00C00013           2727m     MOVE.B DUART_SRB,D3                         ; READ STATUS REGISTER
000012F8  0803 0000               2728m     BTST #0,D3                                  ; CHECK FOR CHARACTER
000012FC  67D8                    2729m     BEQ WAIT_FOR_READY_189                      ; NOTHING, CHECK AGAIN
000012FE                          2730m     
000012FE  1439 00C00017           2731m     MOVE.B DUART_RXB,D2                         ; GOT A CHARACTER, READ IT
00001304  13C2 00E00001           2732m     MOVE.B D2,DISPLAY                           ; ECHO TO THE DISPLAY
0000130A                          2733m     
0000130A                          2734m     ENDM
0000130A                          2735m                     HEX2BIN D2,D2,A0
0000130A  41F9 00001ADA           2736m     LEA HEX2BIN_LUT,A0                          ; LOAD THE LOOKUP TABLE
00001310  0402 0030               2737m     SUB.B #'0',D2                               ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
00001314  C4BC 000000FF           2738m     AND.L #$FF,D2                               ; IGNORE THE TOP 3 BYTES
0000131A  1430 2000               2739m     MOVE.B 0(A0,D2),D2                          ; USE THAT AS AN INDEX INTO THE LUT      
0000131E                          2740m     ENDM
0000131E  8E82                    2741                      OR.L D2,D7
00001320                          2742                  
00001320  DC87                    2743                      ADD.L D7,D6                 ; add top byte of address into checksum
00001322                          2744  
00001322  E98F                    2745                      LSL.L #4,D7                 ; middle byte
00001324                          2746m                     DOWNLOAD D2,D3
00001324                          2747m WAIT_FOR_READY_192                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00001324                          2748m 
00001324  1639 00C00003           2749m     MOVE.B DUART_SRA,D3                         ; CHECK FOR COMMAND
0000132A  0803 0000               2750m     BTST #0,D3                                  ; CHECK FOR CHARACTER
0000132E  6700 0010               2751m     BEQ CONTINUE_192                                ; NOTHING, CONTINUE
00001332                          2752m  
00001332                          2753mm     READ_CHAR D2
00001332                 TRUE     2754mm     IFEQ DEBUG
00001332  1439 00C00007           2755mm         MOVE.B DUART_RXA,D2                     ; GOT A CHARACTER, READ IT
00001338                          2756mm     ENDC
00001338                 FALSE    2757mm     IFNE DEBUG
00001338                          2758mm     ENDC
00001338                          2759mm      
00001338  B43C 001B               2760mm     CMP.B #$1B,D2                               ; CHECK FOR ESCAPE AND GO TO START
0000133C  6700 ECCA               2761mm     BEQ START
00001340                          2762mm     ENDM
00001340                          2763m CONTINUE_192
00001340  1639 00C00013           2764m     MOVE.B DUART_SRB,D3                         ; READ STATUS REGISTER
00001346  0803 0000               2765m     BTST #0,D3                                  ; CHECK FOR CHARACTER
0000134A  67D8                    2766m     BEQ WAIT_FOR_READY_192                      ; NOTHING, CHECK AGAIN
0000134C                          2767m     
0000134C  1439 00C00017           2768m     MOVE.B DUART_RXB,D2                         ; GOT A CHARACTER, READ IT
00001352  13C2 00E00001           2769m     MOVE.B D2,DISPLAY                           ; ECHO TO THE DISPLAY
00001358                          2770m     
00001358                          2771m     ENDM
00001358                          2772m                     HEX2BIN D2,D2,A0
00001358  41F9 00001ADA           2773m     LEA HEX2BIN_LUT,A0                          ; LOAD THE LOOKUP TABLE
0000135E  0402 0030               2774m     SUB.B #'0',D2                               ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
00001362  C4BC 000000FF           2775m     AND.L #$FF,D2                               ; IGNORE THE TOP 3 BYTES
00001368  1430 2000               2776m     MOVE.B 0(A0,D2),D2                          ; USE THAT AS AN INDEX INTO THE LUT      
0000136C                          2777m     ENDM
0000136C  8E82                    2778                      OR.L D2,D7
0000136E  E98F                    2779                      LSL.L #4,D7        
00001370                          2780m                     DOWNLOAD D2,D3
00001370                          2781m WAIT_FOR_READY_195                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00001370                          2782m 
00001370  1639 00C00003           2783m     MOVE.B DUART_SRA,D3                         ; CHECK FOR COMMAND
00001376  0803 0000               2784m     BTST #0,D3                                  ; CHECK FOR CHARACTER
0000137A  6700 0010               2785m     BEQ CONTINUE_195                                ; NOTHING, CONTINUE
0000137E                          2786m  
0000137E                          2787mm     READ_CHAR D2
0000137E                 TRUE     2788mm     IFEQ DEBUG
0000137E  1439 00C00007           2789mm         MOVE.B DUART_RXA,D2                     ; GOT A CHARACTER, READ IT
00001384                          2790mm     ENDC
00001384                 FALSE    2791mm     IFNE DEBUG
00001384                          2792mm     ENDC
00001384                          2793mm      
00001384  B43C 001B               2794mm     CMP.B #$1B,D2                               ; CHECK FOR ESCAPE AND GO TO START
00001388  6700 EC7E               2795mm     BEQ START
0000138C                          2796mm     ENDM
0000138C                          2797m CONTINUE_195
0000138C  1639 00C00013           2798m     MOVE.B DUART_SRB,D3                         ; READ STATUS REGISTER
00001392  0803 0000               2799m     BTST #0,D3                                  ; CHECK FOR CHARACTER
00001396  67D8                    2800m     BEQ WAIT_FOR_READY_195                      ; NOTHING, CHECK AGAIN
00001398                          2801m     
00001398  1439 00C00017           2802m     MOVE.B DUART_RXB,D2                         ; GOT A CHARACTER, READ IT
0000139E  13C2 00E00001           2803m     MOVE.B D2,DISPLAY                           ; ECHO TO THE DISPLAY
000013A4                          2804m     
000013A4                          2805m     ENDM
000013A4                          2806m                     HEX2BIN D2,D2,A0
000013A4  41F9 00001ADA           2807m     LEA HEX2BIN_LUT,A0                          ; LOAD THE LOOKUP TABLE
000013AA  0402 0030               2808m     SUB.B #'0',D2                               ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
000013AE  C4BC 000000FF           2809m     AND.L #$FF,D2                               ; IGNORE THE TOP 3 BYTES
000013B4  1430 2000               2810m     MOVE.B 0(A0,D2),D2                          ; USE THAT AS AN INDEX INTO THE LUT      
000013B8                          2811m     ENDM
000013B8  8E82                    2812                      OR.L D2,D7
000013BA                          2813          
000013BA  7400                    2814                      MOVE.L #0,D2                ; rextract middle byte of address and add into checksum
000013BC  1407                    2815                      MOVE.B D7,D2
000013BE  DC82                    2816                      ADD.L D2,D6
000013C0                          2817                    
000013C0  E98F                    2818                      LSL.L #4,D7                 ; bottom byte
000013C2                          2819m                     DOWNLOAD D2,D3
000013C2                          2820m WAIT_FOR_READY_198                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
000013C2                          2821m 
000013C2  1639 00C00003           2822m     MOVE.B DUART_SRA,D3                         ; CHECK FOR COMMAND
000013C8  0803 0000               2823m     BTST #0,D3                                  ; CHECK FOR CHARACTER
000013CC  6700 0010               2824m     BEQ CONTINUE_198                                ; NOTHING, CONTINUE
000013D0                          2825m  
000013D0                          2826mm     READ_CHAR D2
000013D0                 TRUE     2827mm     IFEQ DEBUG
000013D0  1439 00C00007           2828mm         MOVE.B DUART_RXA,D2                     ; GOT A CHARACTER, READ IT
000013D6                          2829mm     ENDC
000013D6                 FALSE    2830mm     IFNE DEBUG
000013D6                          2831mm     ENDC
000013D6                          2832mm      
000013D6  B43C 001B               2833mm     CMP.B #$1B,D2                               ; CHECK FOR ESCAPE AND GO TO START
000013DA  6700 EC2C               2834mm     BEQ START
000013DE                          2835mm     ENDM
000013DE                          2836m CONTINUE_198
000013DE  1639 00C00013           2837m     MOVE.B DUART_SRB,D3                         ; READ STATUS REGISTER
000013E4  0803 0000               2838m     BTST #0,D3                                  ; CHECK FOR CHARACTER
000013E8  67D8                    2839m     BEQ WAIT_FOR_READY_198                      ; NOTHING, CHECK AGAIN
000013EA                          2840m     
000013EA  1439 00C00017           2841m     MOVE.B DUART_RXB,D2                         ; GOT A CHARACTER, READ IT
000013F0  13C2 00E00001           2842m     MOVE.B D2,DISPLAY                           ; ECHO TO THE DISPLAY
000013F6                          2843m     
000013F6                          2844m     ENDM
000013F6                          2845m                     HEX2BIN D2,D2,A0
000013F6  41F9 00001ADA           2846m     LEA HEX2BIN_LUT,A0                          ; LOAD THE LOOKUP TABLE
000013FC  0402 0030               2847m     SUB.B #'0',D2                               ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
00001400  C4BC 000000FF           2848m     AND.L #$FF,D2                               ; IGNORE THE TOP 3 BYTES
00001406  1430 2000               2849m     MOVE.B 0(A0,D2),D2                          ; USE THAT AS AN INDEX INTO THE LUT      
0000140A                          2850m     ENDM
0000140A  8E82                    2851                      OR.L D2,D7
0000140C  E98F                    2852                      LSL.L #4,D7        
0000140E                          2853m                     DOWNLOAD D2,D3
0000140E                          2854m WAIT_FOR_READY_201                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
0000140E                          2855m 
0000140E  1639 00C00003           2856m     MOVE.B DUART_SRA,D3                         ; CHECK FOR COMMAND
00001414  0803 0000               2857m     BTST #0,D3                                  ; CHECK FOR CHARACTER
00001418  6700 0010               2858m     BEQ CONTINUE_201                                ; NOTHING, CONTINUE
0000141C                          2859m  
0000141C                          2860mm     READ_CHAR D2
0000141C                 TRUE     2861mm     IFEQ DEBUG
0000141C  1439 00C00007           2862mm         MOVE.B DUART_RXA,D2                     ; GOT A CHARACTER, READ IT
00001422                          2863mm     ENDC
00001422                 FALSE    2864mm     IFNE DEBUG
00001422                          2865mm     ENDC
00001422                          2866mm      
00001422  B43C 001B               2867mm     CMP.B #$1B,D2                               ; CHECK FOR ESCAPE AND GO TO START
00001426  6700 EBE0               2868mm     BEQ START
0000142A                          2869mm     ENDM
0000142A                          2870m CONTINUE_201
0000142A  1639 00C00013           2871m     MOVE.B DUART_SRB,D3                         ; READ STATUS REGISTER
00001430  0803 0000               2872m     BTST #0,D3                                  ; CHECK FOR CHARACTER
00001434  67D8                    2873m     BEQ WAIT_FOR_READY_201                      ; NOTHING, CHECK AGAIN
00001436                          2874m     
00001436  1439 00C00017           2875m     MOVE.B DUART_RXB,D2                         ; GOT A CHARACTER, READ IT
0000143C  13C2 00E00001           2876m     MOVE.B D2,DISPLAY                           ; ECHO TO THE DISPLAY
00001442                          2877m     
00001442                          2878m     ENDM
00001442                          2879m                     HEX2BIN D2,D2,A0
00001442  41F9 00001ADA           2880m     LEA HEX2BIN_LUT,A0                          ; LOAD THE LOOKUP TABLE
00001448  0402 0030               2881m     SUB.B #'0',D2                               ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
0000144C  C4BC 000000FF           2882m     AND.L #$FF,D2                               ; IGNORE THE TOP 3 BYTES
00001452  1430 2000               2883m     MOVE.B 0(A0,D2),D2                          ; USE THAT AS AN INDEX INTO THE LUT      
00001456                          2884m     ENDM
00001456  8E82                    2885                      OR.L D2,D7
00001458                          2886                  
00001458  7400                    2887                      MOVE.L #0,D2                ; rextract bottom byte of address and add into checksum
0000145A  1407                    2888                      MOVE.B D7,D2
0000145C  DC82                    2889                      ADD.L D2,D6
0000145E                          2890                    
0000145E  2447                    2891                      MOVE.L D7,A2                ; start address -> A2
00001460                          2892                  
00001460  43F9 00001618           2893                      LEA DOWNLOAD_DONE,A1        ; next place to go
00001466                          2894                  ELSE
00001466  6000 0064               2895s     BRA _00000009
0000146A                          2896s _00000008
0000146A  41F9 00001A8F           2897                      LEA UNREC,A0                ; warn for unrecognised type
00001470                          2898m                     PRINT_STR A0,D3
00001470                          2899m LOOP_204
00001470  0C10 0000               2900m     CMP.B #0,(A0)                               ; 0 -> DONE
00001474  6700 0018               2901m     BEQ EXIT_204
00001478                          2902mm     PRINT_CHAR (A0)+,D3
00001478                          2903mm WAIT_FOR_READY_205                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00001478                 TRUE     2904mm     IFEQ DEBUG
00001478  1639 00C00003           2905mm         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
0000147E  0803 0002               2906mm         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
00001482  67F4                    2907mm         BEQ WAIT_FOR_READY_205                      ; NO SPACE, CHECK AGAIN
00001484  13D8 00C00007           2908mm         MOVE.B (A0)+,DUART_TXA                      ; SEND THE NEXT CHARACTER
0000148A                          2909mm     ENDC
0000148A                          2910mm     
0000148A                 FALSE    2911mm     IFNE DEBUG
0000148A                          2912mm     ENDC
0000148A                          2913mm 
0000148A                          2914mm     ENDM
0000148A  4EF8 1470               2915m     JMP LOOP_204
0000148E                          2916m EXIT_204
0000148E                          2917m     ENDM
0000148E                          2918m                     PRINT_CHAR D7,D3
0000148E                          2919m WAIT_FOR_READY_206                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
0000148E                 TRUE     2920m     IFEQ DEBUG
0000148E  1639 00C00003           2921m         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
00001494  0803 0002               2922m         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
00001498  67F4                    2923m         BEQ WAIT_FOR_READY_206                      ; NO SPACE, CHECK AGAIN
0000149A  13C7 00C00007           2924m         MOVE.B D7,DUART_TXA                     ; SEND THE NEXT CHARACTER
000014A0                          2925m     ENDC
000014A0                          2926m     
000014A0                 FALSE    2927m     IFNE DEBUG
000014A0                          2928m     ENDC
000014A0                          2929m 
000014A0                          2930m     ENDM
000014A0                          2931m                     PRINT_CRLF D3
000014A0                          2932mm     PRINT_CHAR #13,D3                           ; CR
000014A0                          2933mm WAIT_FOR_READY_208                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
000014A0                 TRUE     2934mm     IFEQ DEBUG
000014A0  1639 00C00003           2935mm         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
000014A6  0803 0002               2936mm         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
000014AA  67F4                    2937mm         BEQ WAIT_FOR_READY_208                      ; NO SPACE, CHECK AGAIN
000014AC  13FC 000D 00C00007      2938mm         MOVE.B #13,DUART_TXA                    ; SEND THE NEXT CHARACTER
000014B4                          2939mm     ENDC
000014B4                          2940mm     
000014B4                 FALSE    2941mm     IFNE DEBUG
000014B4                          2942mm     ENDC
000014B4                          2943mm 
000014B4                          2944mm     ENDM
000014B4                          2945mm     PRINT_CHAR #10,D3                           ; LF
000014B4                          2946mm WAIT_FOR_READY_209                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
000014B4                 TRUE     2947mm     IFEQ DEBUG
000014B4  1639 00C00003           2948mm         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
000014BA  0803 0002               2949mm         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
000014BE  67F4                    2950mm         BEQ WAIT_FOR_READY_209                      ; NO SPACE, CHECK AGAIN
000014C0  13FC 000A 00C00007      2951mm         MOVE.B #10,DUART_TXA                    ; SEND THE NEXT CHARACTER
000014C8                          2952mm     ENDC
000014C8                          2953mm     
000014C8                 FALSE    2954mm     IFNE DEBUG
000014C8                          2955mm     ENDC
000014C8                          2956mm 
000014C8                          2957mm     ENDM
000014C8                          2958m     ENDM
000014C8                          2959              
000014C8  4EF8 048E               2960                      JMP WAIT_FOR_SRECORD        ; ignore any other type    
000014CC                          2961                  ENDI
000014CC                          2962s _00000009
000014CC                          2963              ENDI
000014CC                          2964s _00000007
000014CC                          2965          ENDI
000014CC                          2966s _00000004
000014CC                          2967      ENDI
000014CC                          2968s _00000001
000014CC                          2969      
000014CC  4686                    2970      NOT.L D6                                    ; ones complement the checksum
000014CE  0286 000000FF           2971      ANDI.L #$FF,D6                              ; and take the LSByte
000014D4                          2972          
000014D4  7E00                    2973      MOVE.L #0,D7                                ; read the checksum from the data stream
000014D6                          2974m     DOWNLOAD D2,D3                              ; top byte
000014D6                          2975m WAIT_FOR_READY_210                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
000014D6                          2976m 
000014D6  1639 00C00003           2977m     MOVE.B DUART_SRA,D3                         ; CHECK FOR COMMAND
000014DC  0803 0000               2978m     BTST #0,D3                                  ; CHECK FOR CHARACTER
000014E0  6700 0010               2979m     BEQ CONTINUE_210                                ; NOTHING, CONTINUE
000014E4                          2980m  
000014E4                          2981mm     READ_CHAR D2
000014E4                 TRUE     2982mm     IFEQ DEBUG
000014E4  1439 00C00007           2983mm         MOVE.B DUART_RXA,D2                     ; GOT A CHARACTER, READ IT
000014EA                          2984mm     ENDC
000014EA                 FALSE    2985mm     IFNE DEBUG
000014EA                          2986mm     ENDC
000014EA                          2987mm      
000014EA  B43C 001B               2988mm     CMP.B #$1B,D2                               ; CHECK FOR ESCAPE AND GO TO START
000014EE  6700 EB18               2989mm     BEQ START
000014F2                          2990mm     ENDM
000014F2                          2991m CONTINUE_210
000014F2  1639 00C00013           2992m     MOVE.B DUART_SRB,D3                         ; READ STATUS REGISTER
000014F8  0803 0000               2993m     BTST #0,D3                                  ; CHECK FOR CHARACTER
000014FC  67D8                    2994m     BEQ WAIT_FOR_READY_210                      ; NOTHING, CHECK AGAIN
000014FE                          2995m     
000014FE  1439 00C00017           2996m     MOVE.B DUART_RXB,D2                         ; GOT A CHARACTER, READ IT
00001504  13C2 00E00001           2997m     MOVE.B D2,DISPLAY                           ; ECHO TO THE DISPLAY
0000150A                          2998m     
0000150A                          2999m     ENDM
0000150A                          3000m     HEX2BIN D2,D2,A0
0000150A  41F9 00001ADA           3001m     LEA HEX2BIN_LUT,A0                          ; LOAD THE LOOKUP TABLE
00001510  0402 0030               3002m     SUB.B #'0',D2                               ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
00001514  C4BC 000000FF           3003m     AND.L #$FF,D2                               ; IGNORE THE TOP 3 BYTES
0000151A  1430 2000               3004m     MOVE.B 0(A0,D2),D2                          ; USE THAT AS AN INDEX INTO THE LUT      
0000151E                          3005m     ENDM
0000151E  8E82                    3006      OR.L D2,D7
00001520  E98F                    3007      LSL.L #4,D7
00001522                          3008m     DOWNLOAD D2,D3                              ; bottom byte
00001522                          3009m WAIT_FOR_READY_213                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00001522                          3010m 
00001522  1639 00C00003           3011m     MOVE.B DUART_SRA,D3                         ; CHECK FOR COMMAND
00001528  0803 0000               3012m     BTST #0,D3                                  ; CHECK FOR CHARACTER
0000152C  6700 0010               3013m     BEQ CONTINUE_213                                ; NOTHING, CONTINUE
00001530                          3014m  
00001530                          3015mm     READ_CHAR D2
00001530                 TRUE     3016mm     IFEQ DEBUG
00001530  1439 00C00007           3017mm         MOVE.B DUART_RXA,D2                     ; GOT A CHARACTER, READ IT
00001536                          3018mm     ENDC
00001536                 FALSE    3019mm     IFNE DEBUG
00001536                          3020mm     ENDC
00001536                          3021mm      
00001536  B43C 001B               3022mm     CMP.B #$1B,D2                               ; CHECK FOR ESCAPE AND GO TO START
0000153A  6700 EACC               3023mm     BEQ START
0000153E                          3024mm     ENDM
0000153E                          3025m CONTINUE_213
0000153E  1639 00C00013           3026m     MOVE.B DUART_SRB,D3                         ; READ STATUS REGISTER
00001544  0803 0000               3027m     BTST #0,D3                                  ; CHECK FOR CHARACTER
00001548  67D8                    3028m     BEQ WAIT_FOR_READY_213                      ; NOTHING, CHECK AGAIN
0000154A                          3029m     
0000154A  1439 00C00017           3030m     MOVE.B DUART_RXB,D2                         ; GOT A CHARACTER, READ IT
00001550  13C2 00E00001           3031m     MOVE.B D2,DISPLAY                           ; ECHO TO THE DISPLAY
00001556                          3032m     
00001556                          3033m     ENDM
00001556                          3034m     HEX2BIN D2,D2,A0
00001556  41F9 00001ADA           3035m     LEA HEX2BIN_LUT,A0                          ; LOAD THE LOOKUP TABLE
0000155C  0402 0030               3036m     SUB.B #'0',D2                               ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
00001560  C4BC 000000FF           3037m     AND.L #$FF,D2                               ; IGNORE THE TOP 3 BYTES
00001566  1430 2000               3038m     MOVE.B 0(A0,D2),D2                          ; USE THAT AS AN INDEX INTO THE LUT      
0000156A                          3039m     ENDM
0000156A  8E82                    3040      OR.L D2,D7
0000156C                          3041                  
0000156C                          3042      IF.B D7 <NE> D6 THEN.L
0000156C  BE06                    3043s     CMP.B   D6,D7
0000156E  6700 00A6               3044s     BEQ.L   _0000000A
00001572  41F9 00001AA6           3045          LEA CS_FAILURE,A0                       ; warn for mismatched checksum
00001578                          3046m         PRINT_STR A0,D3
00001578                          3047m LOOP_216
00001578  0C10 0000               3048m     CMP.B #0,(A0)                               ; 0 -> DONE
0000157C  6700 0018               3049m     BEQ EXIT_216
00001580                          3050mm     PRINT_CHAR (A0)+,D3
00001580                          3051mm WAIT_FOR_READY_217                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00001580                 TRUE     3052mm     IFEQ DEBUG
00001580  1639 00C00003           3053mm         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
00001586  0803 0002               3054mm         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
0000158A  67F4                    3055mm         BEQ WAIT_FOR_READY_217                      ; NO SPACE, CHECK AGAIN
0000158C  13D8 00C00007           3056mm         MOVE.B (A0)+,DUART_TXA                      ; SEND THE NEXT CHARACTER
00001592                          3057mm     ENDC
00001592                          3058mm     
00001592                 FALSE    3059mm     IFNE DEBUG
00001592                          3060mm     ENDC
00001592                          3061mm 
00001592                          3062mm     ENDM
00001592  4EF8 1578               3063m     JMP LOOP_216
00001596                          3064m EXIT_216
00001596                          3065m     ENDM
00001596                          3066m         PRINT_REG D4,D3,D6,D7,A0
00001596                          3067mm     PRINT_CHAR #'0',D3                          ;0X HEADER
00001596                          3068mm WAIT_FOR_READY_219                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00001596                 TRUE     3069mm     IFEQ DEBUG
00001596  1639 00C00003           3070mm         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
0000159C  0803 0002               3071mm         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
000015A0  67F4                    3072mm         BEQ WAIT_FOR_READY_219                      ; NO SPACE, CHECK AGAIN
000015A2  13FC 0030 00C00007      3073mm         MOVE.B #'0',DUART_TXA                       ; SEND THE NEXT CHARACTER
000015AA                          3074mm     ENDC
000015AA                          3075mm     
000015AA                 FALSE    3076mm     IFNE DEBUG
000015AA                          3077mm     ENDC
000015AA                          3078mm 
000015AA                          3079mm     ENDM
000015AA                          3080mm     PRINT_CHAR #'x',D3
000015AA                          3081mm WAIT_FOR_READY_220                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
000015AA                 TRUE     3082mm     IFEQ DEBUG
000015AA  1639 00C00003           3083mm         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
000015B0  0803 0002               3084mm         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
000015B4  67F4                    3085mm         BEQ WAIT_FOR_READY_220                      ; NO SPACE, CHECK AGAIN
000015B6  13FC 0078 00C00007      3086mm         MOVE.B #'x',DUART_TXA                       ; SEND THE NEXT CHARACTER
000015BE                          3087mm     ENDC
000015BE                          3088mm     
000015BE                 FALSE    3089mm     IFNE DEBUG
000015BE                          3090mm     ENDC
000015BE                          3091mm 
000015BE                          3092mm     ENDM
000015BE  7E07                    3093m     MOVE.L #7,D7                                ; LOOP ROUND ALL 8 HEX CHARACTERS OF 4 BITS EACH
000015C0                          3094m LOOP_218
000015C0                          3095mm     BIN2HEX D4,D6,A0
000015C0  41F9 00001ACA           3096mm     LEA BIN2HEX_LUT,A0                          ; LOAD THE LOOKUP TABLE
000015C6  E99C                    3097mm     ROL.L #4,D4                                 ; SHIFT THE TOP 4 BITS DOWN TO BOTTOM OF THE REGISTER THE AND MASK OFF EVERYTHING ELSE
000015C8  1C04                    3098mm     MOVE.B D4,D6
000015CA  0286 0000000F           3099mm     ANDI.L #$F,D6
000015D0  1C30 6000               3100mm     MOVE.B 0(A0,D6),D6                          ; USE THAT AS AN INDEX INTO THE LUT
000015D4                          3101mm     ENDM
000015D4                          3102mm     PRINT_CHAR D6,D3
000015D4                          3103mm WAIT_FOR_READY_222                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
000015D4                 TRUE     3104mm     IFEQ DEBUG
000015D4  1639 00C00003           3105mm         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
000015DA  0803 0002               3106mm         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
000015DE  67F4                    3107mm         BEQ WAIT_FOR_READY_222                      ; NO SPACE, CHECK AGAIN
000015E0  13C6 00C00007           3108mm         MOVE.B D6,DUART_TXA                     ; SEND THE NEXT CHARACTER
000015E6                          3109mm     ENDC
000015E6                          3110mm     
000015E6                 FALSE    3111mm     IFNE DEBUG
000015E6                          3112mm     ENDC
000015E6                          3113mm 
000015E6                          3114mm     ENDM
000015E6  57CF FFD8               3115m     DBEQ D7,LOOP_218
000015EA                          3116m     ENDM
000015EA                          3117m         PRINT_CRLF D3
000015EA                          3118mm     PRINT_CHAR #13,D3                           ; CR
000015EA                          3119mm WAIT_FOR_READY_224                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
000015EA                 TRUE     3120mm     IFEQ DEBUG
000015EA  1639 00C00003           3121mm         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
000015F0  0803 0002               3122mm         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
000015F4  67F4                    3123mm         BEQ WAIT_FOR_READY_224                      ; NO SPACE, CHECK AGAIN
000015F6  13FC 000D 00C00007      3124mm         MOVE.B #13,DUART_TXA                    ; SEND THE NEXT CHARACTER
000015FE                          3125mm     ENDC
000015FE                          3126mm     
000015FE                 FALSE    3127mm     IFNE DEBUG
000015FE                          3128mm     ENDC
000015FE                          3129mm 
000015FE                          3130mm     ENDM
000015FE                          3131mm     PRINT_CHAR #10,D3                           ; LF
000015FE                          3132mm WAIT_FOR_READY_225                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
000015FE                 TRUE     3133mm     IFEQ DEBUG
000015FE  1639 00C00003           3134mm         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
00001604  0803 0002               3135mm         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
00001608  67F4                    3136mm         BEQ WAIT_FOR_READY_225                      ; NO SPACE, CHECK AGAIN
0000160A  13FC 000A 00C00007      3137mm         MOVE.B #10,DUART_TXA                    ; SEND THE NEXT CHARACTER
00001612                          3138mm     ENDC
00001612                          3139mm     
00001612                 FALSE    3140mm     IFNE DEBUG
00001612                          3141mm     ENDC
00001612                          3142mm 
00001612                          3143mm     ENDM
00001612                          3144m     ENDM
00001612  4EF8 0186               3145          JMP MAIN_LOOP
00001616                          3146      ENDI
00001616                          3147s _0000000A
00001616                          3148      
00001616  4ED1                    3149      JMP (A1)
00001618                          3150  DOWNLOAD_DONE
00001618                          3151m     PRINT_REG D4,D3,D7,D6,A0                    ; print out number of Srecords read
00001618                          3152mm     PRINT_CHAR #'0',D3                          ;0X HEADER
00001618                          3153mm WAIT_FOR_READY_227                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00001618                 TRUE     3154mm     IFEQ DEBUG
00001618  1639 00C00003           3155mm         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
0000161E  0803 0002               3156mm         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
00001622  67F4                    3157mm         BEQ WAIT_FOR_READY_227                      ; NO SPACE, CHECK AGAIN
00001624  13FC 0030 00C00007      3158mm         MOVE.B #'0',DUART_TXA                       ; SEND THE NEXT CHARACTER
0000162C                          3159mm     ENDC
0000162C                          3160mm     
0000162C                 FALSE    3161mm     IFNE DEBUG
0000162C                          3162mm     ENDC
0000162C                          3163mm 
0000162C                          3164mm     ENDM
0000162C                          3165mm     PRINT_CHAR #'x',D3
0000162C                          3166mm WAIT_FOR_READY_228                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
0000162C                 TRUE     3167mm     IFEQ DEBUG
0000162C  1639 00C00003           3168mm         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
00001632  0803 0002               3169mm         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
00001636  67F4                    3170mm         BEQ WAIT_FOR_READY_228                      ; NO SPACE, CHECK AGAIN
00001638  13FC 0078 00C00007      3171mm         MOVE.B #'x',DUART_TXA                       ; SEND THE NEXT CHARACTER
00001640                          3172mm     ENDC
00001640                          3173mm     
00001640                 FALSE    3174mm     IFNE DEBUG
00001640                          3175mm     ENDC
00001640                          3176mm 
00001640                          3177mm     ENDM
00001640  7C07                    3178m     MOVE.L #7,D6                                ; LOOP ROUND ALL 8 HEX CHARACTERS OF 4 BITS EACH
00001642                          3179m LOOP_226
00001642                          3180mm     BIN2HEX D4,D7,A0
00001642  41F9 00001ACA           3181mm     LEA BIN2HEX_LUT,A0                          ; LOAD THE LOOKUP TABLE
00001648  E99C                    3182mm     ROL.L #4,D4                                 ; SHIFT THE TOP 4 BITS DOWN TO BOTTOM OF THE REGISTER THE AND MASK OFF EVERYTHING ELSE
0000164A  1E04                    3183mm     MOVE.B D4,D7
0000164C  0287 0000000F           3184mm     ANDI.L #$F,D7
00001652  1E30 7000               3185mm     MOVE.B 0(A0,D7),D7                          ; USE THAT AS AN INDEX INTO THE LUT
00001656                          3186mm     ENDM
00001656                          3187mm     PRINT_CHAR D7,D3
00001656                          3188mm WAIT_FOR_READY_230                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00001656                 TRUE     3189mm     IFEQ DEBUG
00001656  1639 00C00003           3190mm         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
0000165C  0803 0002               3191mm         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
00001660  67F4                    3192mm         BEQ WAIT_FOR_READY_230                      ; NO SPACE, CHECK AGAIN
00001662  13C7 00C00007           3193mm         MOVE.B D7,DUART_TXA                     ; SEND THE NEXT CHARACTER
00001668                          3194mm     ENDC
00001668                          3195mm     
00001668                 FALSE    3196mm     IFNE DEBUG
00001668                          3197mm     ENDC
00001668                          3198mm 
00001668                          3199mm     ENDM
00001668  57CE FFD8               3200m     DBEQ D6,LOOP_226
0000166C                          3201m     ENDM
0000166C  41F9 00001A6D           3202      LEA READ,A0
00001672                          3203m     PRINT_STR A0,D3
00001672                          3204m LOOP_231
00001672  0C10 0000               3205m     CMP.B #0,(A0)                               ; 0 -> DONE
00001676  6700 0018               3206m     BEQ EXIT_231
0000167A                          3207mm     PRINT_CHAR (A0)+,D3
0000167A                          3208mm WAIT_FOR_READY_232                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
0000167A                 TRUE     3209mm     IFEQ DEBUG
0000167A  1639 00C00003           3210mm         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
00001680  0803 0002               3211mm         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
00001684  67F4                    3212mm         BEQ WAIT_FOR_READY_232                      ; NO SPACE, CHECK AGAIN
00001686  13D8 00C00007           3213mm         MOVE.B (A0)+,DUART_TXA                      ; SEND THE NEXT CHARACTER
0000168C                          3214mm     ENDC
0000168C                          3215mm     
0000168C                 FALSE    3216mm     IFNE DEBUG
0000168C                          3217mm     ENDC
0000168C                          3218mm 
0000168C                          3219mm     ENDM
0000168C  4EF8 1672               3220m     JMP LOOP_231
00001690                          3221m EXIT_231
00001690                          3222m     ENDM
00001690  2E0A                    3223      MOVE.L A2,D7                                ; set address accumulator to start address
00001692                          3224m     PRINT_REG D7,D3,D2,D6,A0                    ; print out start address
00001692                          3225mm     PRINT_CHAR #'0',D3                          ;0X HEADER
00001692                          3226mm WAIT_FOR_READY_234                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00001692                 TRUE     3227mm     IFEQ DEBUG
00001692  1639 00C00003           3228mm         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
00001698  0803 0002               3229mm         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
0000169C  67F4                    3230mm         BEQ WAIT_FOR_READY_234                      ; NO SPACE, CHECK AGAIN
0000169E  13FC 0030 00C00007      3231mm         MOVE.B #'0',DUART_TXA                       ; SEND THE NEXT CHARACTER
000016A6                          3232mm     ENDC
000016A6                          3233mm     
000016A6                 FALSE    3234mm     IFNE DEBUG
000016A6                          3235mm     ENDC
000016A6                          3236mm 
000016A6                          3237mm     ENDM
000016A6                          3238mm     PRINT_CHAR #'x',D3
000016A6                          3239mm WAIT_FOR_READY_235                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
000016A6                 TRUE     3240mm     IFEQ DEBUG
000016A6  1639 00C00003           3241mm         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
000016AC  0803 0002               3242mm         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
000016B0  67F4                    3243mm         BEQ WAIT_FOR_READY_235                      ; NO SPACE, CHECK AGAIN
000016B2  13FC 0078 00C00007      3244mm         MOVE.B #'x',DUART_TXA                       ; SEND THE NEXT CHARACTER
000016BA                          3245mm     ENDC
000016BA                          3246mm     
000016BA                 FALSE    3247mm     IFNE DEBUG
000016BA                          3248mm     ENDC
000016BA                          3249mm 
000016BA                          3250mm     ENDM
000016BA  7C07                    3251m     MOVE.L #7,D6                                ; LOOP ROUND ALL 8 HEX CHARACTERS OF 4 BITS EACH
000016BC                          3252m LOOP_233
000016BC                          3253mm     BIN2HEX D7,D2,A0
000016BC  41F9 00001ACA           3254mm     LEA BIN2HEX_LUT,A0                          ; LOAD THE LOOKUP TABLE
000016C2  E99F                    3255mm     ROL.L #4,D7                                 ; SHIFT THE TOP 4 BITS DOWN TO BOTTOM OF THE REGISTER THE AND MASK OFF EVERYTHING ELSE
000016C4  1407                    3256mm     MOVE.B D7,D2
000016C6  0282 0000000F           3257mm     ANDI.L #$F,D2
000016CC  1430 2000               3258mm     MOVE.B 0(A0,D2),D2                          ; USE THAT AS AN INDEX INTO THE LUT
000016D0                          3259mm     ENDM
000016D0                          3260mm     PRINT_CHAR D2,D3
000016D0                          3261mm WAIT_FOR_READY_237                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
000016D0                 TRUE     3262mm     IFEQ DEBUG
000016D0  1639 00C00003           3263mm         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
000016D6  0803 0002               3264mm         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
000016DA  67F4                    3265mm         BEQ WAIT_FOR_READY_237                      ; NO SPACE, CHECK AGAIN
000016DC  13C2 00C00007           3266mm         MOVE.B D2,DUART_TXA                     ; SEND THE NEXT CHARACTER
000016E2                          3267mm     ENDC
000016E2                          3268mm     
000016E2                 FALSE    3269mm     IFNE DEBUG
000016E2                          3270mm     ENDC
000016E2                          3271mm 
000016E2                          3272mm     ENDM
000016E2  57CE FFD8               3273m     DBEQ D6,LOOP_233
000016E6                          3274m     ENDM
000016E6                          3275m     PRINT_CRLF D3     
000016E6                          3276mm     PRINT_CHAR #13,D3                           ; CR
000016E6                          3277mm WAIT_FOR_READY_239                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
000016E6                 TRUE     3278mm     IFEQ DEBUG
000016E6  1639 00C00003           3279mm         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
000016EC  0803 0002               3280mm         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
000016F0  67F4                    3281mm         BEQ WAIT_FOR_READY_239                      ; NO SPACE, CHECK AGAIN
000016F2  13FC 000D 00C00007      3282mm         MOVE.B #13,DUART_TXA                    ; SEND THE NEXT CHARACTER
000016FA                          3283mm     ENDC
000016FA                          3284mm     
000016FA                 FALSE    3285mm     IFNE DEBUG
000016FA                          3286mm     ENDC
000016FA                          3287mm 
000016FA                          3288mm     ENDM
000016FA                          3289mm     PRINT_CHAR #10,D3                           ; LF
000016FA                          3290mm WAIT_FOR_READY_240                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
000016FA                 TRUE     3291mm     IFEQ DEBUG
000016FA  1639 00C00003           3292mm         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
00001700  0803 0002               3293mm         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
00001704  67F4                    3294mm         BEQ WAIT_FOR_READY_240                      ; NO SPACE, CHECK AGAIN
00001706  13FC 000A 00C00007      3295mm         MOVE.B #10,DUART_TXA                    ; SEND THE NEXT CHARACTER
0000170E                          3296mm     ENDC
0000170E                          3297mm     
0000170E                 FALSE    3298mm     IFNE DEBUG
0000170E                          3299mm     ENDC
0000170E                          3300mm 
0000170E                          3301mm     ENDM
0000170E                          3302m     ENDM
0000170E                          3303          
0000170E  4EF8 0186               3304      JMP MAIN_LOOP
00001712                          3305      
00001712  2047                    3306  G   MOVE.L D7,A0                                ; address accumulator -> address register
00001714  3E3C 0000               3307      MOVE #0,D7                                  ; clear the now used address accumulator
00001718  4ED0                    3308      JMP (A0)                                    ; jump to it!
0000171A                          3309      
0000171A  207C 00200000           3310  Z   MOVE.L #RAM,A0                              ; address of RAM
00001720  7000                    3311      MOVE.L #0,D0                                ; number of bytes
00001722                          3312     
00001722                          3313      WHILE.L D0 <LE> #$40000 DO                  ; read the data bytes
00001722                          3314s _10000006
00001722  B0BC 00040000           3315s     CMP.L   #$40000,D0
00001728  6E00 001A               3316s     BGT _10000007
0000172C                          3317         
0000172C  2200                    3318          MOVE.L D0,D1                            ; progress update
0000172E  E089                    3319          LSR.L #8,D1 
00001730  E089                    3320          LSR.L #8,D1
00001732  0281 0000000F           3321          ANDI.L #$F,D1
00001738  13C1 00E00001           3322          MOVE.B D1,DISPLAY
0000173E                          3323  
0000173E  20C0                    3324          MOVE.L D0,(A0)+ 
00001740  5880                    3325          ADD.L #4,D0
00001742                          3326      ENDW
00001742  60DE                    3327s     BRA _10000006
00001744                          3328s _10000007
00001744                          3329   
00001744  207C 00200000           3330      MOVE.L #RAM,A0                              ; address of RAM
0000174A  7000                    3331      MOVE.L #0,D0                                ; number of bytes
0000174C                          3332     
0000174C                          3333      WHILE.L D0 <LE> #$40000 DO                  ; read the data bytes
0000174C                          3334s _10000008
0000174C  B0BC 00040000           3335s     CMP.L   #$40000,D0
00001752  6E00 00CA               3336s     BGT _10000009
00001756                          3337  
00001756  2200                    3338          MOVE.L D0,D1                            ; progress update
00001758  E089                    3339          LSR.L #8,D1
0000175A  E089                    3340          LSR.L #8,D1
0000175C  0281 0000000F           3341          ANDI.L #$F,D1
00001762  13C1 00E00001           3342          MOVE.B D1,DISPLAY
00001768                          3343  
00001768  2218                    3344          MOVE.L (A0)+,D1
0000176A                          3345            
0000176A                          3346          IF.L D0 <EQ> D1 THEN
0000176A  B081                    3347s     CMP.L   D1,D0
0000176C  6600 0006               3348s     BNE _0000000B
00001770  6000 00A6               3349              BRA OK
00001774                          3350          ENDI 
00001774                          3351s _0000000B
00001774                          3352            
00001774  43F9 00001AB8           3353          LEA RAM_ERROR,A1
0000177A                          3354m         PRINT_STR A1,D1
0000177A                          3355m LOOP_241
0000177A  0C11 0000               3356m     CMP.B #0,(A1)                               ; 0 -> DONE
0000177E  6700 0018               3357m     BEQ EXIT_241
00001782                          3358mm     PRINT_CHAR (A1)+,D1
00001782                          3359mm WAIT_FOR_READY_242                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00001782                 TRUE     3360mm     IFEQ DEBUG
00001782  1239 00C00003           3361mm         MOVE.B DUART_SRA,D1                     ; READ STATUS REGISTER
00001788  0801 0002               3362mm         BTST #2,D1                              ; CHECK FOR SPACE TO SEND
0000178C  67F4                    3363mm         BEQ WAIT_FOR_READY_242                      ; NO SPACE, CHECK AGAIN
0000178E  13D9 00C00007           3364mm         MOVE.B (A1)+,DUART_TXA                      ; SEND THE NEXT CHARACTER
00001794                          3365mm     ENDC
00001794                          3366mm     
00001794                 FALSE    3367mm     IFNE DEBUG
00001794                          3368mm     ENDC
00001794                          3369mm 
00001794                          3370mm     ENDM
00001794  4EF8 177A               3371m     JMP LOOP_241
00001798                          3372m EXIT_241
00001798                          3373m     ENDM
00001798  2208                    3374          MOVE.L A0,D1
0000179A  5981                    3375          SUB.L #4,D1
0000179C                          3376m         PRINT_REG D1,D3,D2,D6,A1                ; print out failure address
0000179C                          3377mm     PRINT_CHAR #'0',D3                          ;0X HEADER
0000179C                          3378mm WAIT_FOR_READY_244                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
0000179C                 TRUE     3379mm     IFEQ DEBUG
0000179C  1639 00C00003           3380mm         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
000017A2  0803 0002               3381mm         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
000017A6  67F4                    3382mm         BEQ WAIT_FOR_READY_244                      ; NO SPACE, CHECK AGAIN
000017A8  13FC 0030 00C00007      3383mm         MOVE.B #'0',DUART_TXA                       ; SEND THE NEXT CHARACTER
000017B0                          3384mm     ENDC
000017B0                          3385mm     
000017B0                 FALSE    3386mm     IFNE DEBUG
000017B0                          3387mm     ENDC
000017B0                          3388mm 
000017B0                          3389mm     ENDM
000017B0                          3390mm     PRINT_CHAR #'x',D3
000017B0                          3391mm WAIT_FOR_READY_245                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
000017B0                 TRUE     3392mm     IFEQ DEBUG
000017B0  1639 00C00003           3393mm         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
000017B6  0803 0002               3394mm         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
000017BA  67F4                    3395mm         BEQ WAIT_FOR_READY_245                      ; NO SPACE, CHECK AGAIN
000017BC  13FC 0078 00C00007      3396mm         MOVE.B #'x',DUART_TXA                       ; SEND THE NEXT CHARACTER
000017C4                          3397mm     ENDC
000017C4                          3398mm     
000017C4                 FALSE    3399mm     IFNE DEBUG
000017C4                          3400mm     ENDC
000017C4                          3401mm 
000017C4                          3402mm     ENDM
000017C4  7C07                    3403m     MOVE.L #7,D6                                ; LOOP ROUND ALL 8 HEX CHARACTERS OF 4 BITS EACH
000017C6                          3404m LOOP_243
000017C6                          3405mm     BIN2HEX D1,D2,A1
000017C6  43F9 00001ACA           3406mm     LEA BIN2HEX_LUT,A1                          ; LOAD THE LOOKUP TABLE
000017CC  E999                    3407mm     ROL.L #4,D1                                 ; SHIFT THE TOP 4 BITS DOWN TO BOTTOM OF THE REGISTER THE AND MASK OFF EVERYTHING ELSE
000017CE  1401                    3408mm     MOVE.B D1,D2
000017D0  0282 0000000F           3409mm     ANDI.L #$F,D2
000017D6  1431 2000               3410mm     MOVE.B 0(A1,D2),D2                          ; USE THAT AS AN INDEX INTO THE LUT
000017DA                          3411mm     ENDM
000017DA                          3412mm     PRINT_CHAR D2,D3
000017DA                          3413mm WAIT_FOR_READY_247                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
000017DA                 TRUE     3414mm     IFEQ DEBUG
000017DA  1639 00C00003           3415mm         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
000017E0  0803 0002               3416mm         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
000017E4  67F4                    3417mm         BEQ WAIT_FOR_READY_247                      ; NO SPACE, CHECK AGAIN
000017E6  13C2 00C00007           3418mm         MOVE.B D2,DUART_TXA                     ; SEND THE NEXT CHARACTER
000017EC                          3419mm     ENDC
000017EC                          3420mm     
000017EC                 FALSE    3421mm     IFNE DEBUG
000017EC                          3422mm     ENDC
000017EC                          3423mm 
000017EC                          3424mm     ENDM
000017EC  57CE FFD8               3425m     DBEQ D6,LOOP_243
000017F0                          3426m     ENDM
000017F0                          3427m         PRINT_CRLF D3
000017F0                          3428mm     PRINT_CHAR #13,D3                           ; CR
000017F0                          3429mm WAIT_FOR_READY_249                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
000017F0                 TRUE     3430mm     IFEQ DEBUG
000017F0  1639 00C00003           3431mm         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
000017F6  0803 0002               3432mm         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
000017FA  67F4                    3433mm         BEQ WAIT_FOR_READY_249                      ; NO SPACE, CHECK AGAIN
000017FC  13FC 000D 00C00007      3434mm         MOVE.B #13,DUART_TXA                    ; SEND THE NEXT CHARACTER
00001804                          3435mm     ENDC
00001804                          3436mm     
00001804                 FALSE    3437mm     IFNE DEBUG
00001804                          3438mm     ENDC
00001804                          3439mm 
00001804                          3440mm     ENDM
00001804                          3441mm     PRINT_CHAR #10,D3                           ; LF
00001804                          3442mm WAIT_FOR_READY_250                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00001804                 TRUE     3443mm     IFEQ DEBUG
00001804  1639 00C00003           3444mm         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
0000180A  0803 0002               3445mm         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
0000180E  67F4                    3446mm         BEQ WAIT_FOR_READY_250                      ; NO SPACE, CHECK AGAIN
00001810  13FC 000A 00C00007      3447mm         MOVE.B #10,DUART_TXA                    ; SEND THE NEXT CHARACTER
00001818                          3448mm     ENDC
00001818                          3449mm     
00001818                 FALSE    3450mm     IFNE DEBUG
00001818                          3451mm     ENDC
00001818                          3452mm 
00001818                          3453mm     ENDM
00001818                          3454m     ENDM
00001818                          3455  OK    
00001818  5880                    3456          ADD.L #4,D0
0000181A                          3457      ENDW
0000181A  6000 FF30               3458s     BRA _10000008
0000181E                          3459s _10000009
0000181E                          3460      
0000181E  4EF8 0186               3461      JMP MAIN_LOOP
00001822                          3462    
00001822  7A00                    3463  L   MOVE.L #0,D5                                ; D5 will be the length  to write            
00001824                          3464  
00001824                          3465m     WAIT_CHAR D2,D3                             ; read most significant character -> D2
00001824                          3466m WAIT_FOR_READY_251                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00001824                          3467m 
00001824                 TRUE     3468m     IFEQ DEBUG
00001824  1639 00C00003           3469m         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
0000182A  0803 0000               3470m         BTST #0,D3                              ; CHECK FOR CHARACTER
0000182E  67F4                    3471m         BEQ WAIT_FOR_READY_251                      ; NOTHING, CHECK AGAIN
00001830                          3472m     ENDC
00001830                          3473m     
00001830                          3474mm     READ_CHAR D2
00001830                 TRUE     3475mm     IFEQ DEBUG
00001830  1439 00C00007           3476mm         MOVE.B DUART_RXA,D2                     ; GOT A CHARACTER, READ IT
00001836                          3477mm     ENDC
00001836                 FALSE    3478mm     IFNE DEBUG
00001836                          3479mm     ENDC
00001836                          3480mm      
00001836  B43C 001B               3481mm     CMP.B #$1B,D2                               ; CHECK FOR ESCAPE AND GO TO START
0000183A  6700 E7CC               3482mm     BEQ START
0000183E                          3483mm     ENDM
0000183E                          3484m 
0000183E                 TRUE     3485m     IFEQ DEBUG
0000183E                          3486mm         PRINT_CHAR D2,D3                        ; ECHO IT BACK
0000183E                          3487mm WAIT_FOR_READY_253                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
0000183E                 TRUE     3488mm     IFEQ DEBUG
0000183E  1639 00C00003           3489mm         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
00001844  0803 0002               3490mm         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
00001848  67F4                    3491mm         BEQ WAIT_FOR_READY_253                      ; NO SPACE, CHECK AGAIN
0000184A  13C2 00C00007           3492mm         MOVE.B D2,DUART_TXA                     ; SEND THE NEXT CHARACTER
00001850                          3493mm     ENDC
00001850                          3494mm     
00001850                 FALSE    3495mm     IFNE DEBUG
00001850                          3496mm     ENDC
00001850                          3497mm 
00001850                          3498mm     ENDM
00001850                          3499m     ENDC
00001850                          3500m     ENDM
00001850                          3501m     HEX2BIN D2,D2,A0                            ; convert to binary -> D2
00001850  41F9 00001ADA           3502m     LEA HEX2BIN_LUT,A0                          ; LOAD THE LOOKUP TABLE
00001856  0402 0030               3503m     SUB.B #'0',D2                               ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
0000185A  C4BC 000000FF           3504m     AND.L #$FF,D2                               ; IGNORE THE TOP 3 BYTES
00001860  1430 2000               3505m     MOVE.B 0(A0,D2),D2                          ; USE THAT AS AN INDEX INTO THE LUT      
00001864                          3506m     ENDM
00001864  1A02                    3507      MOVE.B D2,D5                                ; put at bottom of D5
00001866                          3508  
00001866  3C3C 0002               3509      MOVE #2,D6                                  ; 3 bytes left to read
0000186A                          3510      
0000186A                          3511  READ_LENGTH
0000186A  E98D                    3512      LSL.L #4,D5                                 ; make what we have so far more significant
0000186C                          3513m     WAIT_CHAR D2,D3                             ; next character -> D2
0000186C                          3514m WAIT_FOR_READY_255                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
0000186C                          3515m 
0000186C                 TRUE     3516m     IFEQ DEBUG
0000186C  1639 00C00003           3517m         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
00001872  0803 0000               3518m         BTST #0,D3                              ; CHECK FOR CHARACTER
00001876  67F4                    3519m         BEQ WAIT_FOR_READY_255                      ; NOTHING, CHECK AGAIN
00001878                          3520m     ENDC
00001878                          3521m     
00001878                          3522mm     READ_CHAR D2
00001878                 TRUE     3523mm     IFEQ DEBUG
00001878  1439 00C00007           3524mm         MOVE.B DUART_RXA,D2                     ; GOT A CHARACTER, READ IT
0000187E                          3525mm     ENDC
0000187E                 FALSE    3526mm     IFNE DEBUG
0000187E                          3527mm     ENDC
0000187E                          3528mm      
0000187E  B43C 001B               3529mm     CMP.B #$1B,D2                               ; CHECK FOR ESCAPE AND GO TO START
00001882  6700 E784               3530mm     BEQ START
00001886                          3531mm     ENDM
00001886                          3532m 
00001886                 TRUE     3533m     IFEQ DEBUG
00001886                          3534mm         PRINT_CHAR D2,D3                        ; ECHO IT BACK
00001886                          3535mm WAIT_FOR_READY_257                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00001886                 TRUE     3536mm     IFEQ DEBUG
00001886  1639 00C00003           3537mm         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
0000188C  0803 0002               3538mm         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
00001890  67F4                    3539mm         BEQ WAIT_FOR_READY_257                      ; NO SPACE, CHECK AGAIN
00001892  13C2 00C00007           3540mm         MOVE.B D2,DUART_TXA                     ; SEND THE NEXT CHARACTER
00001898                          3541mm     ENDC
00001898                          3542mm     
00001898                 FALSE    3543mm     IFNE DEBUG
00001898                          3544mm     ENDC
00001898                          3545mm 
00001898                          3546mm     ENDM
00001898                          3547m     ENDC
00001898                          3548m     ENDM
00001898                          3549m     HEX2BIN D2,D2,A0                            ; convert to binary -> D2
00001898  41F9 00001ADA           3550m     LEA HEX2BIN_LUT,A0                          ; LOAD THE LOOKUP TABLE
0000189E  0402 0030               3551m     SUB.B #'0',D2                               ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
000018A2  C4BC 000000FF           3552m     AND.L #$FF,D2                               ; IGNORE THE TOP 3 BYTES
000018A8  1430 2000               3553m     MOVE.B 0(A0,D2),D2                          ; USE THAT AS AN INDEX INTO THE LUT      
000018AC                          3554m     ENDM
000018AC  8A02                    3555      OR.B D2,D5
000018AE  023C 00FB               3556      ANDI #$FB,CCR                               ; clear the Z bit if set (from the OR above)
000018B2  57CE FFB6               3557      DBEQ D6,READ_LENGTH
000018B6                          3558          
000018B6                          3559m     PRINT_CRLF D3
000018B6                          3560mm     PRINT_CHAR #13,D3                           ; CR
000018B6                          3561mm WAIT_FOR_READY_260                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
000018B6                 TRUE     3562mm     IFEQ DEBUG
000018B6  1639 00C00003           3563mm         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
000018BC  0803 0002               3564mm         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
000018C0  67F4                    3565mm         BEQ WAIT_FOR_READY_260                      ; NO SPACE, CHECK AGAIN
000018C2  13FC 000D 00C00007      3566mm         MOVE.B #13,DUART_TXA                    ; SEND THE NEXT CHARACTER
000018CA                          3567mm     ENDC
000018CA                          3568mm     
000018CA                 FALSE    3569mm     IFNE DEBUG
000018CA                          3570mm     ENDC
000018CA                          3571mm 
000018CA                          3572mm     ENDM
000018CA                          3573mm     PRINT_CHAR #10,D3                           ; LF
000018CA                          3574mm WAIT_FOR_READY_261                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
000018CA                 TRUE     3575mm     IFEQ DEBUG
000018CA  1639 00C00003           3576mm         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
000018D0  0803 0002               3577mm         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
000018D4  67F4                    3578mm         BEQ WAIT_FOR_READY_261                      ; NO SPACE, CHECK AGAIN
000018D6  13FC 000A 00C00007      3579mm         MOVE.B #10,DUART_TXA                    ; SEND THE NEXT CHARACTER
000018DE                          3580mm     ENDC
000018DE                          3581mm     
000018DE                 FALSE    3582mm     IFNE DEBUG
000018DE                          3583mm     ENDC
000018DE                          3584mm 
000018DE                          3585mm     ENDM
000018DE                          3586m     ENDM
000018DE                          3587  
000018DE  207C 00000000           3588      MOVE.L #ROM,A0                              ; start of ROM
000018E4                          3589      
000018E4  2247                    3590      MOVE.L D7,A1                                ; address accumulator -> address register
000018E6  7E00                    3591      MOVE.L #0,D7                                ; clear the now used address accumulator
000018E8                          3592      
000018E8  267C 00002AAA           3593      MOVE.L #$2AAA,A3
000018EE  36BC AAAA               3594      MOVE.W #$AAAA,(A3)
000018F2  267C 00001554           3595      MOVE.L #$1554,A3
000018F8  36BC 5555               3596      MOVE.W #$5555,(A3)
000018FC  267C 00002AAA           3597      MOVE.L #$2AAA,A3
00001902  36BC 8080               3598      MOVE.W #$8080,(A3)
00001906  267C 00002AAA           3599      MOVE.L #$2AAA,A3
0000190C  36BC AAAA               3600      MOVE.W #$AAAA,(A3)
00001910  267C 00001554           3601      MOVE.L #$1554,A3
00001916  36BC 5555               3602      MOVE.W #$5555,(A3)
0000191A  267C 00002AAA           3603      MOVE.L #$2AAA,A3
00001920  36BC 2020               3604      MOVE.W #$2020,(A3)
00001924                          3605      
00001924  45F9 00001AF1           3606      LEA LOADING,A2                              ; important for timing
0000192A                          3607m     PRINT_STR A2,D3
0000192A                          3608m LOOP_262
0000192A  0C12 0000               3609m     CMP.B #0,(A2)                               ; 0 -> DONE
0000192E  6700 0018               3610m     BEQ EXIT_262
00001932                          3611mm     PRINT_CHAR (A2)+,D3
00001932                          3612mm WAIT_FOR_READY_263                                  ; WAIT UNTIL THE THERE IS SPACE TO SEND
00001932                 TRUE     3613mm     IFEQ DEBUG
00001932  1639 00C00003           3614mm         MOVE.B DUART_SRA,D3                     ; READ STATUS REGISTER
00001938  0803 0002               3615mm         BTST #2,D3                              ; CHECK FOR SPACE TO SEND
0000193C  67F4                    3616mm         BEQ WAIT_FOR_READY_263                      ; NO SPACE, CHECK AGAIN
0000193E  13DA 00C00007           3617mm         MOVE.B (A2)+,DUART_TXA                      ; SEND THE NEXT CHARACTER
00001944                          3618mm     ENDC
00001944                          3619mm     
00001944                 FALSE    3620mm     IFNE DEBUG
00001944                          3621mm     ENDC
00001944                          3622mm 
00001944                          3623mm     ENDM
00001944  4EF8 192A               3624m     JMP LOOP_262
00001948                          3625m EXIT_262
00001948                          3626m     ENDM
00001948                          3627  
00001948  023C 00FB               3628      ANDI #$FB,CCR                               ; clear the Z bit if set (from the OR above)
0000194C                          3629      
0000194C                          3630      WHILE D5 <GT> #0 DO
0000194C                          3631s _1000000A
0000194C  BA7C 0000               3632s     CMP.W   #0,D5
00001950  6F00 001E               3633s     BLE _1000000B
00001954  5585                    3634          SUB.L #2,D5
00001956                          3635            
00001956  13D1 00E00001           3636          MOVE.B (A1),DISPLAY
0000195C  3091                    3637          MOVE.W (A1),(A0)                        ; write the data
0000195E                          3638        
0000195E                          3639  WAIT_FOR_COMPLETE
0000195E  3410                    3640          MOVE.W (A0),D2
00001960                          3641  
00001960                          3642          IF D2 <NE> (A1) THEN
00001960  B451                    3643s     CMP.W   (A1),D2
00001962  6700 0006               3644s     BEQ _0000000C
00001966  4EF8 195E               3645              JMP WAIT_FOR_COMPLETE
0000196A                          3646          ENDI
0000196A                          3647s _0000000C
0000196A                          3648        
0000196A  5488                    3649          ADD.L #2,A0
0000196C  5489                    3650          ADD.L #2,A1
0000196E                          3651      ENDW  
0000196E  60DC                    3652s     BRA _1000000A
00001970                          3653s _1000000B
00001970                          3654      
00001970  267C 00002AAA           3655      MOVE.L #$2AAA,A3
00001976  36BC AAAA               3656      MOVE.W #$AAAA,(A3)
0000197A  267C 00001554           3657      MOVE.L #$1554,A3
00001980  36BC 5555               3658      MOVE.W #$5555,(A3)
00001984  267C 00002AAA           3659      MOVE.L #$2AAA,A3
0000198A  36BC A0A0               3660      MOVE.W #$A0A0,(A3)
0000198E                          3661              
0000198E  4EF8 0186               3662      JMP MAIN_LOOP
00001992                          3663          
00001992                          3664  HEX_DIGIT
00001992  E98F                    3665      LSL.L #4,D7                                 ; add the next digit in the next 4 bits
00001994                          3666m     HEX2BIN D2,D2,A0
00001994  41F9 00001ADA           3667m     LEA HEX2BIN_LUT,A0                          ; LOAD THE LOOKUP TABLE
0000199A  0402 0030               3668m     SUB.B #'0',D2                               ; WORK OUT OFFSET AND MASK OFF ANYTHING ROGUE
0000199E  C4BC 000000FF           3669m     AND.L #$FF,D2                               ; IGNORE THE TOP 3 BYTES
000019A4  1430 2000               3670m     MOVE.B 0(A0,D2),D2                          ; USE THAT AS AN INDEX INTO THE LUT      
000019A8                          3671m     ENDM
000019A8  8E02                    3672      OR.B D2,D7  
000019AA  4EF8 01AE               3673      JMP GET_INPUT
000019AE                          3674  
000019AE  FFFF FFFF               3675      SIMHALT                                     ; halt simulator
000019B2                          3676  
000019B2                          3677  ; strings
000019B2= 4D 44 46 2D 6D 6F ...   3678  VERSION DC.B 'MDF-mon V1.31 (08/04/2021)',13,10,0
000019CF= 3F 20 48 65 6C 70 ...   3679  HELP    DC.B '? Help',13,10,'V Version',13,10,'xxxxxxxxR Read long',13,10,'xxxxxxxxWxxxxxxxx Write long',13,10,'S download S records',13,10,'xxxxxxxxG Go',13,10,'Z Zap memory',10,13,'xxxxxxxxLxxxx Load to EEPROM',10,13,0
00001A66= 48 75 68 3F 0D 0A 00    3680  HUH     DC.B 'Huh?',13,10,0
00001A6D= 20 53 20 72 65 63 ...   3681  READ    DC.B ' S records read, start address = ',0
00001A8F= 57 3A 20 55 6E 6B ...   3682  UNREC   DC.B 'W: Unknown Srec type: ',0
00001AA6= 57 3A 20 43 53 20 ...   3683  CS_FAILURE   DC.B 'W: CS failure at ',0
00001AB8= 57 3A 20 52 41 4D ...   3684  RAM_ERROR DC.B 'W: RAM error at: ',0
00001ACA= 30 31 32 33 34 35 ...   3685  BIN2HEX_LUT DC.B '0123456789ABCDEF'
00001ADA= 00 01 02 03 04 05 ...   3686  HEX2BIN_LUT DC.B 0,1,2,3,4,5,6,7,8,9,0,0,0,0,0,0,0,$A,$B,$C,$D,$E,$F
00001AF1= 4C 6F 61 64 69 6E ...   3687  LOADING  DC.B 'Loading EEPROM...',13,11,0
00001B05                          3688      
00001B05                          3689      END    START                    ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
BIN2HEX             0
BIN2HEX_LUT         1ACA
CONTINUE_100        A56
CONTINUE_104        AB4
CONTINUE_108        B14
CONTINUE_112        B72
CONTINUE_116        BE4
CONTINUE_120        C42
CONTINUE_127        CE8
CONTINUE_131        D46
CONTINUE_135        DA6
CONTINUE_139        E04
CONTINUE_143        E68
CONTINUE_147        EC6
CONTINUE_151        F3C
CONTINUE_155        F9A
CONTINUE_159        1014
CONTINUE_163        1072
CONTINUE_167        10D2
CONTINUE_171        1130
CONTINUE_175        11A2
CONTINUE_179        1200
CONTINUE_186        12A6
CONTINUE_189        12F2
CONTINUE_192        1340
CONTINUE_195        138C
CONTINUE_198        13DE
CONTINUE_201        142A
CONTINUE_210        14F2
CONTINUE_213        153E
CONTINUE_44         4AA
CONTINUE_46         4E6
CONTINUE_48         51E
CONTINUE_51         56A
CONTINUE_54         5C0
CONTINUE_57         60C
CONTINUE_60         65A
CONTINUE_63         6A6
CONTINUE_66         706
CONTINUE_69         752
CONTINUE_76         7EE
CONTINUE_80         84C
CONTINUE_84         8AC
CONTINUE_88         90A
CONTINUE_92         980
CONTINUE_96         9DE
CS_FAILURE          1AA6
DEBUG               0
DISPLAY             E00001
DISPLAY_            0
DISPLAY_BASE        E00000
DOWNLOAD            960
DOWNLOAD_DONE       1618
DUART_ACR           C00009
DUART_ACR_          4
DUART_BASE          C00000
DUART_CRA           C00005
DUART_CRA_          2
DUART_CRB           C00015
DUART_CRB_          A
DUART_CSRA          C00003
DUART_CSRA_         1
DUART_CSRB          C00013
DUART_CSRB_         9
DUART_IMR           C0000B
DUART_IMR_          5
DUART_IVR           C00019
DUART_IVR_          C
DUART_MRA           C00001
DUART_MRA_          0
DUART_MRB           C00011
DUART_MRB_          8
DUART_OPCR          C0001B
DUART_OPCR_         D
DUART_RESET_OPR     C0001F
DUART_RESET_OPR_    F
DUART_RXA           C00007
DUART_RXA_          3
DUART_RXB           C00017
DUART_RXB_          B
DUART_SET_OPR       C0001D
DUART_SET_OPR_      E
DUART_SRA           C00003
DUART_SRA_          1
DUART_SRB           C00013
DUART_SRB_          9
DUART_TXA           C00007
DUART_TXA_          3
DUART_TXB           C00017
DUART_TXB_          B
EVEN                A2C
EVEN2               FE8
EXIT_19             2E6
EXIT_204            148E
EXIT_21             30E
EXIT_216            1596
EXIT_23             336
EXIT_231            1690
EXIT_241            1798
EXIT_262            1948
EXIT_5              140
G                   1712
GET_INPUT           1AE
H                   2EA
HELP                19CF
HEX2BIN             134
HEX2BIN_LUT         1ADA
HEX_DIGIT           1992
HUH                 1A66
L                   1822
LOADING             1AF1
LOOP_19             2C8
LOOP_204            1470
LOOP_21             2F0
LOOP_216            1578
LOOP_218            15C0
LOOP_226            1642
LOOP_23             318
LOOP_231            1672
LOOP_233            16BC
LOOP_241            177A
LOOP_243            17C6
LOOP_25             368
LOOP_262            192A
LOOP_5              122
MAIN_LOOP           186
OK                  1818
PRINT_CHAR          273
PRINT_CRLF          48D
PRINT_REG           575
PRINT_STR           4EF
R                   33A
RAM                 200000
RAM_ERROR           1AB8
READ                1A6D
READ_CHAR           805
READ_DATA_TO_POKE   408
READ_LENGTH         186A
RESET               4
ROM                 0
S                   486
STACK               0
START               8
UNREC               1A8F
V                   312
VERSION             19B2
W                   3C0
WAIT_CHAR           665
WAIT_FOR_COMPLETE   195E
WAIT_FOR_READY_1    D8
WAIT_FOR_READY_10   168
WAIT_FOR_READY_100  A3A
WAIT_FOR_READY_102  A6E
WAIT_FOR_READY_104  A98
WAIT_FOR_READY_106  ACC
WAIT_FOR_READY_108  AF8
WAIT_FOR_READY_11   186
WAIT_FOR_READY_110  B2C
WAIT_FOR_READY_112  B56
WAIT_FOR_READY_114  B8A
WAIT_FOR_READY_116  BC8
WAIT_FOR_READY_118  BFC
WAIT_FOR_READY_12   19A
WAIT_FOR_READY_120  C26
WAIT_FOR_READY_122  C5A
WAIT_FOR_READY_125  C92
WAIT_FOR_READY_126  CA6
WAIT_FOR_READY_127  CCC
WAIT_FOR_READY_129  D00
WAIT_FOR_READY_13   1AE
WAIT_FOR_READY_131  D2A
WAIT_FOR_READY_133  D5E
WAIT_FOR_READY_135  D8A
WAIT_FOR_READY_137  DBE
WAIT_FOR_READY_139  DE8
WAIT_FOR_READY_141  E1C
WAIT_FOR_READY_143  E4C
WAIT_FOR_READY_145  E80
WAIT_FOR_READY_147  EAA
WAIT_FOR_READY_149  EDE
WAIT_FOR_READY_15   1C8
WAIT_FOR_READY_151  F20
WAIT_FOR_READY_153  F54
WAIT_FOR_READY_155  F7E
WAIT_FOR_READY_157  FB2
WAIT_FOR_READY_159  FF8
WAIT_FOR_READY_161  102C
WAIT_FOR_READY_163  1056
WAIT_FOR_READY_165  108A
WAIT_FOR_READY_167  10B6
WAIT_FOR_READY_169  10EA
WAIT_FOR_READY_17   26A
WAIT_FOR_READY_171  1114
WAIT_FOR_READY_173  1148
WAIT_FOR_READY_175  1186
WAIT_FOR_READY_177  11BA
WAIT_FOR_READY_179  11E4
WAIT_FOR_READY_18   27E
WAIT_FOR_READY_181  1218
WAIT_FOR_READY_184  1250
WAIT_FOR_READY_185  1264
WAIT_FOR_READY_186  128A
WAIT_FOR_READY_189  12D6
WAIT_FOR_READY_192  1324
WAIT_FOR_READY_195  1370
WAIT_FOR_READY_198  13C2
WAIT_FOR_READY_20   2D0
WAIT_FOR_READY_201  140E
WAIT_FOR_READY_205  1478
WAIT_FOR_READY_206  148E
WAIT_FOR_READY_208  14A0
WAIT_FOR_READY_209  14B4
WAIT_FOR_READY_210  14D6
WAIT_FOR_READY_213  1522
WAIT_FOR_READY_217  1580
WAIT_FOR_READY_219  1596
WAIT_FOR_READY_22   2F8
WAIT_FOR_READY_220  15AA
WAIT_FOR_READY_222  15D4
WAIT_FOR_READY_224  15EA
WAIT_FOR_READY_225  15FE
WAIT_FOR_READY_227  1618
WAIT_FOR_READY_228  162C
WAIT_FOR_READY_230  1656
WAIT_FOR_READY_232  167A
WAIT_FOR_READY_234  1692
WAIT_FOR_READY_235  16A6
WAIT_FOR_READY_237  16D0
WAIT_FOR_READY_239  16E6
WAIT_FOR_READY_24   320
WAIT_FOR_READY_240  16FA
WAIT_FOR_READY_242  1782
WAIT_FOR_READY_244  179C
WAIT_FOR_READY_245  17B0
WAIT_FOR_READY_247  17DA
WAIT_FOR_READY_249  17F0
WAIT_FOR_READY_250  1804
WAIT_FOR_READY_251  1824
WAIT_FOR_READY_253  183E
WAIT_FOR_READY_255  186C
WAIT_FOR_READY_257  1886
WAIT_FOR_READY_26   33E
WAIT_FOR_READY_260  18B6
WAIT_FOR_READY_261  18CA
WAIT_FOR_READY_263  1932
WAIT_FOR_READY_27   352
WAIT_FOR_READY_29   37C
WAIT_FOR_READY_3    F4
WAIT_FOR_READY_31   392
WAIT_FOR_READY_32   3A6
WAIT_FOR_READY_33   3C2
WAIT_FOR_READY_35   3DC
WAIT_FOR_READY_37   40A
WAIT_FOR_READY_39   424
WAIT_FOR_READY_4    108
WAIT_FOR_READY_42   45A
WAIT_FOR_READY_43   46E
WAIT_FOR_READY_44   48E
WAIT_FOR_READY_46   4CA
WAIT_FOR_READY_48   502
WAIT_FOR_READY_51   54E
WAIT_FOR_READY_54   5A4
WAIT_FOR_READY_57   5F0
WAIT_FOR_READY_6    12A
WAIT_FOR_READY_60   63E
WAIT_FOR_READY_63   68A
WAIT_FOR_READY_66   6EA
WAIT_FOR_READY_69   736
WAIT_FOR_READY_72   782
WAIT_FOR_READY_74   798
WAIT_FOR_READY_75   7AC
WAIT_FOR_READY_76   7D2
WAIT_FOR_READY_78   806
WAIT_FOR_READY_8    140
WAIT_FOR_READY_80   830
WAIT_FOR_READY_82   864
WAIT_FOR_READY_84   890
WAIT_FOR_READY_86   8C4
WAIT_FOR_READY_88   8EE
WAIT_FOR_READY_9    154
WAIT_FOR_READY_90   922
WAIT_FOR_READY_92   964
WAIT_FOR_READY_94   998
WAIT_FOR_READY_96   9C2
WAIT_FOR_READY_98   9F6
WAIT_FOR_SRECORD    48E
Z                   171A
_00000000           7C8
_00000001           14CC
_00000002           CC2
_00000003           C92
_00000004           14CC
_00000005           1280
_00000006           1250
_00000007           14CC
_00000008           146A
_00000009           14CC
_0000000A           1616
_0000000B           1774
_0000000C           196A
_10000000           6DC
_10000001           798
_10000002           A2C
_10000003           BBE
_10000004           FEA
_10000005           117C
_10000006           1722
_10000007           1744
_10000008           174C
_10000009           181E
_1000000A           194C
_1000000B           1970
